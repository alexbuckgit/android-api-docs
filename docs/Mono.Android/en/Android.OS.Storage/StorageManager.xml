<Type Name="StorageManager" FullName="Android.OS.Storage.StorageManager">
  <TypeSignature Language="C#" Value="public class StorageManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StorageManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/os/storage/StorageManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>StorageManager is the interface to the systems storage service.</summary>
    <remarks><para tool="javadoc-to-mdoc">StorageManager is the interface to the systems storage service. The storage
 manager handles storage-related items such as Opaque Binary Blobs (OBBs).
 </para><para tool="javadoc-to-mdoc">
 OBBs contain a filesystem that maybe be encrypted on disk and mounted
 on-demand from an application. OBBs are a good way of providing large amounts
 of binary assets without packaging them into APKs as they may be multiple
 gigabytes in size. However, due to their size, they're most likely stored in
 a shared storage pool accessible from all programs. The system does not
 guarantee the security of the OBB file itself: if any program modifies the
 OBB, there is no guarantee that a read from that OBB will produce the
 expected output.
 </para><para tool="javadoc-to-mdoc">
 Get an instance of this class by calling
 <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" /></c> with an
 argument of <c><see cref="F:Android.Content.Context.StorageService" /></c>.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/os/storage/StorageManager.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 9" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StorageManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static Android.OS.Storage.StorageManager FromContext (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.OS.Storage.StorageManager FromContext(class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.OS.Storage.StorageManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMountedObbPath">
      <MemberSignature Language="C#" Value="public virtual string GetMountedObbPath (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetMountedObbPath(string filename) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getMountedObbPath", "(Ljava/lang/String;)Ljava/lang/String;", "GetGetMountedObbPath_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">To be added.</param>
        <summary>Check the mounted path of an Opaque Binary Blob (OBB) file.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Check the mounted path of an Opaque Binary Blob (OBB) file. This will
 give you the path to where you can obtain access to the internals of the
 OBB.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/os/storage/StorageManager.html#getMountedObbPath(java.lang.String)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="IsObbMounted">
      <MemberSignature Language="C#" Value="public virtual bool IsObbMounted (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsObbMounted(string filename) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isObbMounted", "(Ljava/lang/String;)Z", "GetIsObbMounted_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">To be added.</param>
        <summary>Check whether an Opaque Binary Blob (OBB) is mounted or not.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Check whether an Opaque Binary Blob (OBB) is mounted or not.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/os/storage/StorageManager.html#isObbMounted(java.lang.String)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="MountObb">
      <MemberSignature Language="C#" Value="public virtual bool MountObb (string filename, string key, Android.OS.Storage.OnObbStateChangeListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MountObb(string filename, string key, class Android.OS.Storage.OnObbStateChangeListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("mountObb", "(Ljava/lang/String;Ljava/lang/String;Landroid/os/storage/OnObbStateChangeListener;)Z", "GetMountObb_Ljava_lang_String_Ljava_lang_String_Landroid_os_storage_OnObbStateChangeListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="listener" Type="Android.OS.Storage.OnObbStateChangeListener" />
      </Parameters>
      <Docs>
        <param name="filename">To be added.</param>
        <param name="key">secret used to encrypt the OBB; may be <c>null</c> if no
            encryption was used on the OBB.</param>
        <param name="listener">will receive the success or failure of the operation</param>
        <summary>Mount an Opaque Binary Blob (OBB) file.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Mount an Opaque Binary Blob (OBB) file. If a <c>key</c> is
 specified, it is supplied to the mounting process to be used in any
 encryption used in the OBB.
 </para><para tool="javadoc-to-mdoc">
 The OBB will remain mounted for as long as the StorageManager reference
 is held by the application. As soon as this reference is lost, the OBBs
 in use will be unmounted. The <c><see cref="T:Android.OS.Storage.OnObbStateChangeListener" /></c> registered
 with this call will receive the success or failure of this operation.
 </para><para tool="javadoc-to-mdoc"><i>Note:</i> you can only mount OBB files for which the OBB tag on the
 file matches a package ID that is owned by the calling program's UID.
 That is, shared UID applications can attempt to mount any other
 application's OBB that shares its UID.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/os/storage/StorageManager.html#mountObb(java.lang.String, java.lang.String, android.os.storage.OnObbStateChangeListener)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnmountObb">
      <MemberSignature Language="C#" Value="public virtual bool UnmountObb (string filename, bool force, Android.OS.Storage.OnObbStateChangeListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool UnmountObb(string filename, bool force, class Android.OS.Storage.OnObbStateChangeListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unmountObb", "(Ljava/lang/String;ZLandroid/os/storage/OnObbStateChangeListener;)Z", "GetUnmountObb_Ljava_lang_String_ZLandroid_os_storage_OnObbStateChangeListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="force" Type="System.Boolean" />
        <Parameter Name="listener" Type="Android.OS.Storage.OnObbStateChangeListener" />
      </Parameters>
      <Docs>
        <param name="filename">To be added.</param>
        <param name="force">whether to kill any programs using this in order to unmount
            it</param>
        <param name="listener">will receive the success or failure of the operation</param>
        <summary>Unmount an Opaque Binary Blob (OBB) file asynchronously.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Unmount an Opaque Binary Blob (OBB) file asynchronously. If the
 <c>force</c> flag is true, it will kill any application needed to
 unmount the given OBB (even the calling application).
 </para><para tool="javadoc-to-mdoc">
 The <c><see cref="T:Android.OS.Storage.OnObbStateChangeListener" /></c> registered with this call will
 receive the success or failure of this operation.
 </para><para tool="javadoc-to-mdoc"><i>Note:</i> you can only mount OBB files for which the OBB tag on the
 file matches a package ID that is owned by the calling program's UID.
 That is, shared UID applications can obtain access to any other
 application's OBB that shares its UID.
 </para><para tool="javadoc-to-mdoc" /><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/os/storage/StorageManager.html#unmountObb(java.lang.String, boolean, android.os.storage.OnObbStateChangeListener)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
  </Members>
</Type>
