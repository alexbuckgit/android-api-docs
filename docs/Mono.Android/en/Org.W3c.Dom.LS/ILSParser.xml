<Type Name="ILSParser" FullName="Org.W3c.Dom.LS.ILSParser">
  <TypeSignature Language="C#" Value="public interface ILSParser : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILSParser implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("org/w3c/dom/ls/LSParser", "", "Org.W3c.Dom.LS.ILSParserInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An interface to an object that is able to build, or augment, a DOM tree
 from various input sources.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">An interface to an object that is able to build, or augment, a DOM tree
 from various input sources.
 </para>
      <para tool="javadoc-to-mdoc">
        <c>LSParser</c> provides an API for parsing XML and building the
 corresponding DOM document structure. A <c>LSParser</c> instance
 can be obtained by invoking the
 <c>DOMImplementationLS.createLSParser()</c> method.
 </para>
      <para tool="javadoc-to-mdoc"> As specified in []
 , when a document is first made available via the LSParser:
 <list type="bullet"><item><term> there will
 never be two adjacent nodes of type NODE_TEXT, and there will never be
 empty text nodes.
 </term></item><item><term> it is expected that the <c>value</c> and
 <c>nodeValue</c> attributes of an <c>Attr</c> node initially
 return the . However, if the parameters "" and "" are set to <c>true</c>, depending on the attribute normalization
 used, the attribute values may differ from the ones obtained by the XML
 1.0 attribute normalization. If the parameters "" is set to <c>false</c>, the XML 1.0 attribute normalization is
 guaranteed to occur, and if the attributes list does not contain
 namespace declarations, the <c>attributes</c> attribute on
 <c>Element</c> node represents the property <format type="text/html"><b>[attributes]</b></format> defined in []
 .
 </term></item></list></para>
      <para tool="javadoc-to-mdoc"> Asynchronous <c>LSParser</c> objects are expected to also
 implement the <c>events::EventTarget</c> interface so that event
 listeners can be registered on asynchronous <c>LSParser</c>
 objects.
 </para>
      <para tool="javadoc-to-mdoc"> Events supported by asynchronous <c>LSParser</c> objects are:
 <format type="text/html"><dl><dt>load</dt><dd>
  The <c>LSParser</c> finishes to load the document. See also the
 definition of the <c>LSLoadEvent</c> interface. </dd><dt>progress</dt><dd> The
 <c>LSParser</c> signals progress as data is parsed.  This
 specification does not attempt to define exactly when progress events
 should be dispatched. That is intentionally left as
 implementation-dependent. Here is one example of how an application might
 dispatch progress events: Once the parser starts receiving data, a
 progress event is dispatched to indicate that the parsing starts. From
 there on, a progress event is dispatched for every 4096 bytes of data
 that is received and processed. This is only one example, though, and
 implementations can choose to dispatch progress events at any time while
 parsing, or not dispatch them at all.  See also the definition of the
 <c>LSProgressEvent</c> interface. </dd></dl></format></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Note:</b>
        </format>  All events defined in this specification use the
 namespace URI <c>"http://www.w3.org/2002/DOMLS"</c>.
 </para>
      <para tool="javadoc-to-mdoc"> While parsing an input source, errors are reported to the application
 through the error handler (<c>LSParser.domConfig</c>'s "" parameter). This specification does in no way try to define all possible
 errors that can occur while parsing XML, or any other markup, but some
 common error cases are defined. The types (<c>DOMError.type</c>) of
 errors and warnings defined by this specification are:
 <format type="text/html"><dl><dt><c>"check-character-normalization-failure" [error]</c></dt><dd> Raised if
 the parameter "" is set to true and a string is encountered that fails normalization
 checking. </dd><dt><c>"doctype-not-allowed" [fatal]</c></dt><dd> Raised if the
 configuration parameter "disallow-doctype" is set to <c>true</c>
 and a doctype is encountered. </dd><dt><c>"no-input-specified" [fatal]</c></dt><dd>
 Raised when loading a document and no input is specified in the
 <c>LSInput</c> object. </dd><dt><c>"pi-base-uri-not-preserved" [warning]</c></dt><dd> Raised if a processing
 instruction is encountered in a location where the base URI of the
 processing instruction can not be preserved.  One example of a case where
 this warning will be raised is if the configuration parameter "" is set to <c>false</c> and the following XML file is parsed:
 <example><code lang="xml">
 &lt;!DOCTYPE root [ &lt;!ENTITY e SYSTEM 'subdir/myentity.ent' ]&gt;
 &lt;root&gt; &amp;e; &lt;/root&gt;</code></example>
  And <c>subdir/myentity.ent</c>
 contains:
 <example><code lang="xml">&lt;one&gt; &lt;two/&gt; &lt;/one&gt; &lt;?pi 3.14159?&gt;
 &lt;more/&gt;</code></example></dd><dt><c>"unbound-prefix-in-entity" [warning]</c></dt><dd> An
 implementation dependent warning that may be raised if the configuration
 parameter "" is set to <c>true</c> and an unbound namespace prefix is
 encountered in an entity's replacement text. Raising this warning is not
 enforced since some existing parsers may not recognize unbound namespace
 prefixes in the replacement text of entities. </dd><dt><c>"unknown-character-denormalization" [fatal]</c></dt><dd> Raised if the
 configuration parameter "ignore-unknown-character-denormalizations" is
 set to <c>false</c> and a character is encountered for which the
 processor cannot determine the normalization properties. </dd><dt><c>"unsupported-encoding" [fatal]</c></dt><dd> Raised if an unsupported
 encoding is encountered. </dd><dt><c>"unsupported-media-type" [fatal]</c></dt><dd>
 Raised if the configuration parameter "supported-media-types-only" is set
 to <c>true</c> and an unsupported media type is encountered. </dd></dl></format></para>
      <para tool="javadoc-to-mdoc"> In addition to raising the defined errors and warnings, implementations
 are expected to raise implementation specific errors and warnings for any
 other error and warning cases such as IO errors (file not found,
 permission denied,...), XML well-formedness errors, and so on.
 </para>
      <para tool="javadoc-to-mdoc">See also the .
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/org/w3c/dom/ls/LSParser.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 8" />
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Abort() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("abort", "()V", "GetAbortHandler:Org.W3c.Dom.LS.ILSParserInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Abort the loading of the document that is currently being loaded by
 the <c>LSParser</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Abort the loading of the document that is currently being loaded by
 the <c>LSParser</c>. If the <c>LSParser</c> is currently
 not busy, a call to this method does nothing.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/w3c/dom/ls/LSParser.html#abort()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAsync", "()Z", "GetGetAsyncHandler:Org.W3c.Dom.LS.ILSParserInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <c>true</c> if the <c>LSParser</c> is asynchronous,
 <c>false</c> if it is synchronous.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">
            <c>true</c> if the <c>LSParser</c> is asynchronous,
 <c>false</c> if it is synchronous.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/w3c/dom/ls/LSParser.html#getAsync()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="Busy">
      <MemberSignature Language="C#" Value="public bool Busy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Busy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getBusy", "()Z", "GetGetBusyHandler:Org.W3c.Dom.LS.ILSParserInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <c>true</c> if the <c>LSParser</c> is currently busy
 loading a document, otherwise <c>false</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">
            <c>true</c> if the <c>LSParser</c> is currently busy
 loading a document, otherwise <c>false</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/w3c/dom/ls/LSParser.html#getBusy()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="DomConfig">
      <MemberSignature Language="C#" Value="public Org.W3c.Dom.IDOMConfiguration DomConfig { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Org.W3c.Dom.IDOMConfiguration DomConfig" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDomConfig", "()Lorg/w3c/dom/DOMConfiguration;", "GetGetDomConfigHandler:Org.W3c.Dom.LS.ILSParserInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.W3c.Dom.IDOMConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <c>DOMConfiguration</c> object used when parsing an input
 source.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">The <c>DOMConfiguration</c> object used when parsing an input
 source. This <c>DOMConfiguration</c> is specific to the parse
 operation. No parameter values from this <c>DOMConfiguration</c>
  object are passed automatically to the <c>DOMConfiguration</c>
 object on the <c>Document</c> that is created, or used, by the
 parse operation. The DOM application is responsible for passing any
 needed parameter values from this <c>DOMConfiguration</c>
 object to the <c>DOMConfiguration</c> object referenced by the
 <c>Document</c> object.
 <format type="text/html"><br /></format> In addition to the parameters recognized in on the  interface defined in []
 , the <c>DOMConfiguration</c> objects for <c>LSParser</c>
 add or modify the following parameters:
 <format type="text/html"><dl><dt><c>"charset-overrides-xml-encoding"</c></dt><dd><dl><dt><c>true</c></dt><dd>[<i>optional</i>] (<i>default</i>) If a higher level protocol such as HTTP [] provides an
 indication of the character encoding of the input stream being
 processed, that will override any encoding specified in the XML
 declaration or the Text declaration (see also section 4.3.3,
 "Character Encoding in Entities", in []).
 Explicitly setting an encoding in the <c>LSInput</c> overrides
 any encoding from the protocol. </dd><dt><c>false</c></dt><dd>[<i>required</i>] The parser ignores any character set encoding information from
 higher-level protocols. </dd></dl></dd><dt><c>"disallow-doctype"</c></dt><dd><dl><dt><c>true</c></dt><dd>[<i>optional</i>] Throw a fatal <b>"doctype-not-allowed"</b> error if a doctype node is found while parsing the document. This is
 useful when dealing with things like SOAP envelopes where doctype
 nodes are not allowed. </dd><dt><c>false</c></dt><dd>[<i>required</i>] (<i>default</i>) Allow doctype nodes in the document. </dd></dl></dd><dt><c>"ignore-unknown-character-denormalizations"</c></dt><dd><dl><dt><c>true</c></dt><dd>[<i>required</i>] (<i>default</i>) If, while verifying full normalization when [] is
 supported, a processor encounters characters for which it cannot
 determine the normalization properties, then the processor will
 ignore any possible denormalizations caused by these characters.
 This parameter is ignored for []. </dd><dt><c>false</c></dt><dd>[<i>optional</i>] Report an fatal <b>"unknown-character-denormalization"</b> error if a character is encountered for which the processor cannot
 determine the normalization properties. </dd></dl></dd><dt><c>"infoset"</c></dt><dd> See
 the definition of <c>DOMConfiguration</c> for a description of
 this parameter. Unlike in []
 , this parameter will default to <c>true</c> for
 <c>LSParser</c>. </dd><dt><c>"namespaces"</c></dt><dd><dl><dt><c>true</c></dt><dd>[<i>required</i>] (<i>default</i>) Perform the namespace processing as defined in []
  and []
 . </dd><dt><c>false</c></dt><dd>[<i>optional</i>] Do not perform the namespace processing. </dd></dl></dd><dt><c>"resource-resolver"</c></dt><dd>[<i>required</i>] A reference to a <c>LSResourceResolver</c> object, or null. If
 the value of this parameter is not null when an external resource
 (such as an external XML entity or an XML schema location) is
 encountered, the implementation will request that the
 <c>LSResourceResolver</c> referenced in this parameter resolves
 the resource. </dd><dt><c>"supported-media-types-only"</c></dt><dd><dl><dt><c>true</c></dt><dd>[<i>optional</i>] Check that the media type of the parsed resource is a supported media
 type. If an unsupported media type is encountered, a fatal error of
 type <b>"unsupported-media-type"</b> will be raised. The media types defined in [] must always
 be accepted. </dd><dt><c>false</c></dt><dd>[<i>required</i>] (<i>default</i>) Accept any media type. </dd></dl></dd><dt><c>"validate"</c></dt><dd> See the definition of
 <c>DOMConfiguration</c> for a description of this parameter.
 Unlike in []
 , the processing of the internal subset is always accomplished, even
 if this parameter is set to <c>false</c>. </dd><dt><c>"validate-if-schema"</c></dt><dd> See the definition of
 <c>DOMConfiguration</c> for a description of this parameter.
 Unlike in []
 , the processing of the internal subset is always accomplished, even
 if this parameter is set to <c>false</c>. </dd><dt><c>"well-formed"</c></dt><dd> See the definition of
 <c>DOMConfiguration</c> for a description of this parameter.
 Unlike in []
 , this parameter cannot be set to <c>false</c>. </dd></dl></format></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/w3c/dom/ls/LSParser.html#getDomConfig()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public Org.W3c.Dom.LS.ILSParserFilter Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Org.W3c.Dom.LS.ILSParserFilter Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFilter", "()Lorg/w3c/dom/ls/LSParserFilter;", "GetGetFilterHandler:Org.W3c.Dom.LS.ILSParserInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setFilter", "(Lorg/w3c/dom/ls/LSParserFilter;)V", "GetSetFilter_Lorg_w3c_dom_ls_LSParserFilter_Handler:Org.W3c.Dom.LS.ILSParserInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.W3c.Dom.LS.ILSParserFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When a filter is provided, the implementation will call out to the
 filter as it is constructing the DOM tree structure.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/org/w3c/dom/ls/LSParser.html#getFilter()" target="_blank">[Android Documentation]</a>
              <br />
            </format>When a filter is provided, the implementation will call out to the
 filter as it is constructing the DOM tree structure. The filter can
 choose to remove elements from the document being constructed, or to
 terminate the parsing early.
 <format type="text/html"><br /></format> The filter is invoked after the operations requested by the
 <c>DOMConfiguration</c> parameters have been applied. For
 example, if "" is set to <c>true</c>, the validation is done before invoking the
 filter.
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/org/w3c/dom/ls/LSParser.html#setFilter(org.w3c.dom.ls.LSParserFilter)" target="_blank">[Android Documentation]</a>
              <br />
            </format>When a filter is provided, the implementation will call out to the
 filter as it is constructing the DOM tree structure. The filter can
 choose to remove elements from the document being constructed, or to
 terminate the parsing early.
 <format type="text/html"><br /></format> The filter is invoked after the operations requested by the
 <c>DOMConfiguration</c> parameters have been applied. For
 example, if "" is set to <c>true</c>, the validation is done before invoking the
 filter.
</para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public Org.W3c.Dom.IDocument Parse (Org.W3c.Dom.LS.ILSInput input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Org.W3c.Dom.IDocument Parse(class Org.W3c.Dom.LS.ILSInput input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parse", "(Lorg/w3c/dom/ls/LSInput;)Lorg/w3c/dom/Document;", "GetParse_Lorg_w3c_dom_ls_LSInput_Handler:Org.W3c.Dom.LS.ILSParserInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.W3c.Dom.IDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Org.W3c.Dom.LS.ILSInput" />
      </Parameters>
      <Docs>
        <param name="input">The <c>LSInput</c> from which the source of the
   document is to be read.</param>
        <summary>Parse an XML document from a resource identified by a
 <c>LSInput</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Parse an XML document from a resource identified by a
 <c>LSInput</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/w3c/dom/ls/LSParser.html#parse(org.w3c.dom.ls.LSInput)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Org.W3c.Dom.DOMException">INVALID_STATE_ERR: Raised if the <c>LSParser</c>'s
   <c>LSParser.busy</c> attribute is <c>true</c>.</exception>
        <exception cref="T:Org.W3c.Dom.LS.LSException">PARSE_ERR: Raised if the <c>LSParser</c> was unable to load
   the XML document. DOM applications should attach a
   <c>DOMErrorHandler</c> using the parameter "" if they wish to get details on the error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseURI">
      <MemberSignature Language="C#" Value="public Org.W3c.Dom.IDocument ParseURI (string uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Org.W3c.Dom.IDocument ParseURI(string uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parseURI", "(Ljava/lang/String;)Lorg/w3c/dom/Document;", "GetParseURI_Ljava_lang_String_Handler:Org.W3c.Dom.LS.ILSParserInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.W3c.Dom.IDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The location of the XML document to be read.</param>
        <summary>Parse an XML document from a location identified by a URI reference [].</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Parse an XML document from a location identified by a URI reference []. If the URI
 contains a fragment identifier (see section 4.1 in []), the
 behavior is not defined by this specification, future versions of
 this specification may define the behavior.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/w3c/dom/ls/LSParser.html#parseURI(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Org.W3c.Dom.DOMException">INVALID_STATE_ERR: Raised if the <c>LSParser.busy</c>
   attribute is <c>true</c>.</exception>
        <exception cref="T:Org.W3c.Dom.LS.LSException">PARSE_ERR: Raised if the <c>LSParser</c> was unable to load
   the XML document. DOM applications should attach a
   <c>DOMErrorHandler</c> using the parameter "" if they wish to get details on the error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseWithContext">
      <MemberSignature Language="C#" Value="public Org.W3c.Dom.INode ParseWithContext (Org.W3c.Dom.LS.ILSInput input, Org.W3c.Dom.INode contextArg, short action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Org.W3c.Dom.INode ParseWithContext(class Org.W3c.Dom.LS.ILSInput input, class Org.W3c.Dom.INode contextArg, int16 action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parseWithContext", "(Lorg/w3c/dom/ls/LSInput;Lorg/w3c/dom/Node;S)Lorg/w3c/dom/Node;", "GetParseWithContext_Lorg_w3c_dom_ls_LSInput_Lorg_w3c_dom_Node_SHandler:Org.W3c.Dom.LS.ILSParserInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.W3c.Dom.INode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Org.W3c.Dom.LS.ILSInput" />
        <Parameter Name="contextArg" Type="Org.W3c.Dom.INode" />
        <Parameter Name="action" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="input">The <c>LSInput</c> from which the source document
   is to be read. The source document must be an XML fragment, i.e.
   anything except a complete XML document (except in the case where
   the context node of type <c>DOCUMENT_NODE</c>, and the action
   is <c>ACTION_REPLACE_CHILDREN</c>), a DOCTYPE (internal
   subset), entity declaration(s), notation declaration(s), or XML or
   text declaration(s).</param>
        <param name="contextArg">The node that is used as the context for the data
   that is being parsed. This node must be a <c>Document</c>
   node, a <c>DocumentFragment</c> node, or a node of a type
   that is allowed as a child of an <c>Element</c> node, e.g. it
   cannot be an <c>Attribute</c> node.</param>
        <param name="action">This parameter describes which action should be taken
   between the new set of nodes being inserted and the existing
   children of the context node. The set of possible actions is
   defined in <c>ACTION_TYPES</c> above.</param>
        <summary>Parse an XML fragment from a resource identified by a
 <c>LSInput</c> and insert the content into an existing document
 at the position specified with the <c>context</c> and
 <c>action</c> arguments.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Parse an XML fragment from a resource identified by a
 <c>LSInput</c> and insert the content into an existing document
 at the position specified with the <c>context</c> and
 <c>action</c> arguments. When parsing the input stream, the
 context node (or its parent, depending on where the result will be
 inserted) is used for resolving unbound namespace prefixes. The
 context node's <c>ownerDocument</c> node (or the node itself if
 the node of type <c>DOCUMENT_NODE</c>) is used to resolve
 default attributes and entity references.
 <format type="text/html"><br /></format> As the new data is inserted into the document, at least one
 mutation event is fired per new immediate child or sibling of the
 context node.
 <format type="text/html"><br /></format> If the context node is a <c>Document</c> node and the action
 is <c>ACTION_REPLACE_CHILDREN</c>, then the document that is
 passed as the context node will be changed such that its
 <c>xmlEncoding</c>, <c>documentURI</c>,
 <c>xmlVersion</c>, <c>inputEncoding</c>,
 <c>xmlStandalone</c>, and all other such attributes are set to
 what they would be set to if the input source was parsed using
 <c>LSParser.parse()</c>.
 <format type="text/html"><br /></format> This method is always synchronous, even if the
 <c>LSParser</c> is asynchronous (<c>LSParser.async</c> is
 <c>true</c>).
 <format type="text/html"><br /></format> If an error occurs while parsing, the caller is notified through
 the <c>ErrorHandler</c> instance associated with the "" parameter of the <c>DOMConfiguration</c>.
 <format type="text/html"><br /></format> When calling <c>parseWithContext</c>, the values of the
 following configuration parameters will be ignored and their default
 values will always be used instead: "", "", and "". Other parameters will be treated normally, and the parser is expected
 to call the <c>LSParserFilter</c> just as if a whole document
 was parsed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/w3c/dom/ls/LSParser.html#parseWithContext(org.w3c.dom.ls.LSInput, org.w3c.dom.Node, short)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Org.W3c.Dom.DOMException">HIERARCHY_REQUEST_ERR: Raised if the content cannot replace, be
   inserted before, after, or as a child of the context node (see also
   <c>Node.insertBefore</c> or <c>Node.replaceChild</c> in []
   ).
   <format type="text/html"><br /></format> NOT_SUPPORTED_ERR: Raised if the <c>LSParser</c> doesn't
   support this method, or if the context node is of type
   <c>Document</c> and the DOM implementation doesn't support
   the replacement of the <c>DocumentType</c> child or
   <c>Element</c> child.
   <format type="text/html"><br /></format> NO_MODIFICATION_ALLOWED_ERR: Raised if the context node is a
   read only node and the content is being appended to its child list,
   or if the parent node of the context node is read only node and the
   content is being inserted in its child list.
   <format type="text/html"><br /></format> INVALID_STATE_ERR: Raised if the <c>LSParser.busy</c>
   attribute is <c>true</c>.</exception>
        <exception cref="T:Org.W3c.Dom.LS.LSException">PARSE_ERR: Raised if the <c>LSParser</c> was unable to load
   the XML fragment. DOM applications should attach a
   <c>DOMErrorHandler</c> using the parameter "" if they wish to get details on the error.
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
