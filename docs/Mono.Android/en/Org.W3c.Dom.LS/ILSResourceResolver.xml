<Type Name="ILSResourceResolver" FullName="Org.W3c.Dom.LS.ILSResourceResolver">
  <TypeSignature Language="C#" Value="public interface ILSResourceResolver : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILSResourceResolver implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("org/w3c/dom/ls/LSResourceResolver", "", "Org.W3c.Dom.LS.ILSResourceResolverInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <c>LSResourceResolver</c> provides a way for applications to
 redirect references to external resources.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">
        <c>LSResourceResolver</c> provides a way for applications to
 redirect references to external resources.
 </para>
      <para tool="javadoc-to-mdoc"> Applications needing to implement custom handling for external
 resources can implement this interface and register their implementation
 by setting the "resource-resolver" parameter of
 <c>DOMConfiguration</c> objects attached to <c>LSParser</c>
 and <c>LSSerializer</c>. It can also be register on
 <c>DOMConfiguration</c> objects attached to <c>Document</c>
 if the "LS" feature is supported.
 </para>
      <para tool="javadoc-to-mdoc"> The <c>LSParser</c> will then allow the application to intercept
 any external entities, including the external DTD subset and external
 parameter entities, before including them. The top-level document entity
 is never passed to the <c>resolveResource</c> method.
 </para>
      <para tool="javadoc-to-mdoc"> Many DOM applications will not need to implement this interface, but it
 will be especially useful for applications that build XML documents from
 databases or other specialized input sources, or for applications that
 use URNs.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Note:</b>
        </format>
        <c>LSResourceResolver</c> is based on the SAX2 [] <c>EntityResolver</c>
 interface.
 </para>
      <para tool="javadoc-to-mdoc">See also the .
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/org/w3c/dom/ls/LSResourceResolver.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 8" />
  </Docs>
  <Members>
    <Member MemberName="ResolveResource">
      <MemberSignature Language="C#" Value="public Org.W3c.Dom.LS.ILSInput ResolveResource (string type, string namespaceURI, string publicId, string systemId, string baseURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Org.W3c.Dom.LS.ILSInput ResolveResource(string type, string namespaceURI, string publicId, string systemId, string baseURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("resolveResource", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/w3c/dom/ls/LSInput;", "GetResolveResource_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Handler:Org.W3c.Dom.LS.ILSResourceResolverInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.W3c.Dom.LS.ILSInput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
        <Parameter Name="publicId" Type="System.String" />
        <Parameter Name="systemId" Type="System.String" />
        <Parameter Name="baseURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of the resource being resolved. For XML [] resources
   (i.e. entities), applications must use the value
   <c>"http://www.w3.org/TR/REC-xml"</c>. For XML Schema []
   , applications must use the value
   <c>"http://www.w3.org/2001/XMLSchema"</c>. Other types of
   resources are outside the scope of this specification and therefore
   should recommend an absolute URI in order to use this method.</param>
        <param name="namespaceURI">The namespace of the resource being resolved,
   e.g. the target namespace of the XML Schema []
    when resolving XML Schema resources.</param>
        <param name="publicId">The public identifier of the external entity being
   referenced, or <c>null</c> if no public identifier was
   supplied or if the resource is not an entity.</param>
        <param name="systemId">The system identifier, a URI reference [], of the
   external resource being referenced, or <c>null</c> if no
   system identifier was supplied.</param>
        <param name="baseURI">The absolute base URI of the resource being parsed, or
   <c>null</c> if there is no base URI.</param>
        <summary>Allow the application to resolve external resources.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Allow the application to resolve external resources.
 <format type="text/html"><br /></format> The <c>LSParser</c> will call this method before opening any
 external resource, including the external DTD subset, external
 entities referenced within the DTD, and external entities referenced
 within the document element (however, the top-level document entity
 is not passed to this method). The application may then request that
 the <c>LSParser</c> resolve the external resource itself, that
 it use an alternative URI, or that it use an entirely different input
 source.
 <format type="text/html"><br /></format> Application writers can use this method to redirect external
 system identifiers to secure and/or local URI, to look up public
 identifiers in a catalogue, or to read an entity from a database or
 other input source (including, for example, a dialog box).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/w3c/dom/ls/LSResourceResolver.html#resolveResource(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
  </Members>
</Type>
