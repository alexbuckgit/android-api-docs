<Type Name="MulticastSocket" FullName="Java.Net.MulticastSocket">
  <TypeSignature Language="C#" Value="public class MulticastSocket : Java.Net.DatagramSocket" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MulticastSocket extends Java.Net.DatagramSocket" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Net.DatagramSocket</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/net/MulticastSocket", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>This class implements a multicast socket for sending and receiving IP
 multicast datagram packets.</summary>
    <remarks><para tool="javadoc-to-mdoc">This class implements a multicast socket for sending and receiving IP
 multicast datagram packets.<format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="T:Java.Net.DatagramSocket" /></c></term></item></list></para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/net/MulticastSocket.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MulticastSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Constructs a multicast socket, bound to any available port on the
 local host.</summary>
        <remarks><para tool="javadoc-to-mdoc">Constructs a multicast socket, bound to any available port on the
 local host.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/net/MulticastSocket.html#MulticastSocket()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MulticastSocket (Java.Net.SocketAddress localAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Net.SocketAddress localAddress) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/net/SocketAddress;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="localAddr" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="localAddress">To be added.</param>
        <summary>Constructs a <c>MulticastSocket</c> bound to the address and port specified by
 <c>localAddress</c>, or an unbound <c>MulticastSocket</c> if <c>localAddress == null</c>.</summary>
        <remarks><para tool="javadoc-to-mdoc">Constructs a <c>MulticastSocket</c> bound to the address and port specified by
 <c>localAddress</c>, or an unbound <c>MulticastSocket</c> if <c>localAddress == null</c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/net/MulticastSocket.html#MulticastSocket(java.net.SocketAddress)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>localAddress</c> is not supported (because it's not
 an <c>InetSocketAddress</c>, say).</exception>
        <exception cref="T:Java.IO.IOException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MulticastSocket (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="aPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">To be added.</param>
        <summary>Constructs a multicast socket, bound to the specified <c>port</c> on the
 local host.</summary>
        <remarks><para tool="javadoc-to-mdoc">Constructs a multicast socket, bound to the specified <c>port</c> on the
 local host.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/net/MulticastSocket.html#MulticastSocket(int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MulticastSocket (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interface">
      <MemberSignature Language="C#" Value="public virtual Java.Net.InetAddress Interface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Net.InetAddress Interface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getInterface", "()Ljava/net/InetAddress;", "GetGetInterfaceHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setInterface", "(Ljava/net/InetAddress;)V", "GetSetInterface_Ljava_net_InetAddress_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.InetAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an address of the outgoing network interface used by this socket.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/java/net/MulticastSocket.html#getInterface()" target="_blank">[Android Documentation]</a><br /></format>Returns an address of the outgoing network interface used by this socket. To avoid
 inherent unpredictability, new code should use <c><see cref="P:Java.Net.MulticastSocket.NetworkInterface" /></c> instead.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/java/net/MulticastSocket.html#setInterface(java.net.InetAddress)" target="_blank">[Android Documentation]</a><br /></format>Sets the outgoing network interface used by this socket. The interface used is the first
 interface found to have the given <c>address</c>. To avoid inherent unpredictability,
 new code should use <c><see cref="P:Java.Net.MulticastSocket.NetworkInterface" /></c> instead.</para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.SocketException">if an error occurs.
</exception>
        <exception cref="T:Java.Net.SocketException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="JoinGroup">
      <MemberSignature Language="C#" Value="public virtual void JoinGroup (Java.Net.InetAddress groupAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void JoinGroup(class Java.Net.InetAddress groupAddr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("joinGroup", "(Ljava/net/InetAddress;)V", "GetJoinGroup_Ljava_net_InetAddress_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupAddr" Type="Java.Net.InetAddress" />
      </Parameters>
      <Docs>
        <param name="groupAddr">the multicast group to be joined.</param>
        <summary>Adds this socket to the specified multicast group.</summary>
        <remarks><para tool="javadoc-to-mdoc">Adds this socket to the specified multicast group. A socket must join a
 group before data may be received. A socket may be a member of multiple
 groups but may join any group only once.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/net/MulticastSocket.html#joinGroup(java.net.InetAddress)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="JoinGroup">
      <MemberSignature Language="C#" Value="public virtual void JoinGroup (Java.Net.SocketAddress groupAddress, Java.Net.NetworkInterface netInterface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void JoinGroup(class Java.Net.SocketAddress groupAddress, class Java.Net.NetworkInterface netInterface) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("joinGroup", "(Ljava/net/SocketAddress;Ljava/net/NetworkInterface;)V", "GetJoinGroup_Ljava_net_SocketAddress_Ljava_net_NetworkInterface_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupAddress" Type="Java.Net.SocketAddress" />
        <Parameter Name="netInterface" Type="Java.Net.NetworkInterface" />
      </Parameters>
      <Docs>
        <param name="groupAddress">the multicast group to be joined.</param>
        <param name="netInterface">the network interface on which the datagram packets will be
            received.</param>
        <summary>Adds this socket to the specified multicast group.</summary>
        <remarks><para tool="javadoc-to-mdoc">Adds this socket to the specified multicast group. A socket must join a
 group before data may be received. A socket may be a member of multiple
 groups but may join any group only once.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/net/MulticastSocket.html#joinGroup(java.net.SocketAddress, java.net.NetworkInterface)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the specified address is not a multicast address.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if no multicast group is specified.
</exception>
      </Docs>
    </Member>
    <Member MemberName="LeaveGroup">
      <MemberSignature Language="C#" Value="public virtual void LeaveGroup (Java.Net.InetAddress groupAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LeaveGroup(class Java.Net.InetAddress groupAddr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("leaveGroup", "(Ljava/net/InetAddress;)V", "GetLeaveGroup_Ljava_net_InetAddress_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupAddr" Type="Java.Net.InetAddress" />
      </Parameters>
      <Docs>
        <param name="groupAddr">the multicast group to be left.</param>
        <summary>Removes this socket from the specified multicast group.</summary>
        <remarks><para tool="javadoc-to-mdoc">Removes this socket from the specified multicast group.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/net/MulticastSocket.html#leaveGroup(java.net.InetAddress)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if <c>groupAddr</c> is <c>null</c>.</exception>
        <exception cref="T:Java.IO.IOException">if the specified group address is not a multicast address.
</exception>
      </Docs>
    </Member>
    <Member MemberName="LeaveGroup">
      <MemberSignature Language="C#" Value="public virtual void LeaveGroup (Java.Net.SocketAddress groupAddress, Java.Net.NetworkInterface netInterface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LeaveGroup(class Java.Net.SocketAddress groupAddress, class Java.Net.NetworkInterface netInterface) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("leaveGroup", "(Ljava/net/SocketAddress;Ljava/net/NetworkInterface;)V", "GetLeaveGroup_Ljava_net_SocketAddress_Ljava_net_NetworkInterface_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupAddress" Type="Java.Net.SocketAddress" />
        <Parameter Name="netInterface" Type="Java.Net.NetworkInterface" />
      </Parameters>
      <Docs>
        <param name="groupAddress">the multicast group to be left.</param>
        <param name="netInterface">the network interface on which the addresses should be
            dropped.</param>
        <summary>Removes this socket from the specified multicast group.</summary>
        <remarks><para tool="javadoc-to-mdoc">Removes this socket from the specified multicast group.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/net/MulticastSocket.html#leaveGroup(java.net.SocketAddress, java.net.NetworkInterface)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the specified group address is not a multicast address.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>groupAddress</c> is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="LoopbackMode">
      <MemberSignature Language="C#" Value="public virtual bool LoopbackMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LoopbackMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLoopbackMode", "()Z", "GetGetLoopbackModeHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setLoopbackMode", "(Z)V", "GetSetLoopbackMode_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if multicast loopback is <format type="text/html"><i>disabled</i></format>.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/java/net/MulticastSocket.html#getLoopbackMode()" target="_blank">[Android Documentation]</a><br /></format>Returns true if multicast loopback is <format type="text/html"><i>disabled</i></format>.
 See <c><see cref="F:Java.Net.SocketOptions.IpMulticastLoop" /></c>, and note that the sense of this is the
 opposite of the underlying Unix <c>IP_MULTICAST_LOOP</c>.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/java/net/MulticastSocket.html#setLoopbackMode(boolean)" target="_blank">[Android Documentation]</a><br /></format>Disables multicast loopback if <c>disable == true</c>.
 See <c><see cref="F:Java.Net.SocketOptions.IpMulticastLoop" /></c>, and note that the sense of this is the
 opposite of the underlying Unix <c>IP_MULTICAST_LOOP</c>: true means disabled, false
 means enabled.</para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.SocketException">if an error occurs.
</exception>
        <exception cref="T:Java.Net.SocketException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="NetworkInterface">
      <MemberSignature Language="C#" Value="public virtual Java.Net.NetworkInterface NetworkInterface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Net.NetworkInterface NetworkInterface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNetworkInterface", "()Ljava/net/NetworkInterface;", "GetGetNetworkInterfaceHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setNetworkInterface", "(Ljava/net/NetworkInterface;)V", "GetSetNetworkInterface_Ljava_net_NetworkInterface_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.NetworkInterface</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the outgoing network interface used by this socket.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/java/net/MulticastSocket.html#getNetworkInterface()" target="_blank">[Android Documentation]</a><br /></format>Returns the outgoing network interface used by this socket.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/java/net/MulticastSocket.html#setNetworkInterface(java.net.NetworkInterface)" target="_blank">[Android Documentation]</a><br /></format>Sets the outgoing network interface used by this socket to the given
 <c>networkInterface</c>.</para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.SocketException">if an error occurs.
</exception>
        <exception cref="T:Java.Net.SocketException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public virtual void Send (Java.Net.DatagramPacket packet, sbyte ttl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Send(class Java.Net.DatagramPacket packet, int8 ttl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("send", "(Ljava/net/DatagramPacket;B)V", "GetSend_Ljava_net_DatagramPacket_BHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pack" Type="Java.Net.DatagramPacket" />
        <Parameter Name="ttl" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="packet">To be added.</param>
        <param name="ttl">To be added.</param>
        <summary>Sends the given <c>packet</c> on this socket, using the given <c>ttl</c>.</summary>
        <remarks><para tool="javadoc-to-mdoc">Sends the given <c>packet</c> on this socket, using the given <c>ttl</c>. This method is
 deprecated because it modifies the TTL socket option for this socket twice on each call.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/net/MulticastSocket.html#send(java.net.DatagramPacket, byte)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeToLive">
      <MemberSignature Language="C#" Value="public virtual int TimeToLive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TimeToLive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTimeToLive", "()I", "GetGetTimeToLiveHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setTimeToLive", "(I)V", "GetSetTimeToLive_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the time-to-live (TTL) for multicast packets sent on this socket.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/java/net/MulticastSocket.html#getTimeToLive()" target="_blank">[Android Documentation]</a><br /></format>Returns the time-to-live (TTL) for multicast packets sent on this socket.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/java/net/MulticastSocket.html#setTimeToLive(int)" target="_blank">[Android Documentation]</a><br /></format>Sets the time-to-live (TTL) for multicast packets sent on this socket.
 Valid TTL values are between 0 and 255 inclusive.</para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs.
</exception>
        <exception cref="T:Java.IO.IOException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="TTL">
      <MemberSignature Language="C#" Value="public virtual sbyte TTL { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int8 TTL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTTL", "()B", "GetGetTTLHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setTTL", "(B)V", "GetSetTTL_BHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the time-to-live (TTL) for multicast packets sent on this socket.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/java/net/MulticastSocket.html#getTTL()" target="_blank">[Android Documentation]</a><br /></format>Returns the time-to-live (TTL) for multicast packets sent on this socket.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/java/net/MulticastSocket.html#setTTL(byte)" target="_blank">[Android Documentation]</a><br /></format>Sets the time-to-live (TTL) for multicast packets sent on this socket.
 Valid TTL values are between 0 and 255 inclusive.</para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs.</exception>
        <exception cref="T:Java.IO.IOException">if an error occurs.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
