<Type Name="InetAddress" FullName="Java.Net.InetAddress">
  <TypeSignature Language="C#" Value="public class InetAddress : Java.Lang.Object, IDisposable, Java.IO.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InetAddress extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.IO.ISerializable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/net/InetAddress", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An Internet Protocol (IP) address.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">An Internet Protocol (IP) address. This can be either an IPv4 address or an IPv6 address, and
 in practice you'll have an instance of either <c>Inet4Address</c> or <c>Inet6Address</c> (this
 class cannot be instantiated directly). Most code does not need to distinguish between the two
 families, and should use <c>InetAddress</c>.

 </para>
      <para tool="javadoc-to-mdoc">An <c>InetAddress</c> may have a hostname (accessible via <c>getHostName</c>), but may not,
 depending on how the <c>InetAddress</c> was created.

 <format type="text/html"><h4>IPv4 numeric address formats</h4></format></para>
      <para tool="javadoc-to-mdoc">The <c>getAllByName</c> method accepts IPv4 addresses in the "decimal-dotted-quad" form only:
 <list type="bullet"><item><term><c>"1.2.3.4"</c> - 1.2.3.4
 </term></item></list><format type="text/html"><h4>IPv6 numeric address formats</h4></format></para>
      <para tool="javadoc-to-mdoc">The <c>getAllByName</c> method accepts IPv6 addresses in the following forms (this text
 comes from , which you should consult
 for full details of IPv6 addressing):
 <list type="bullet"><item><term>The preferred form is <c>x:x:x:x:x:x:x:x</c>, where the 'x's are the
 hexadecimal values of the eight 16-bit pieces of the address.
 Note that it is not necessary to write the leading zeros in an
 individual field, but there must be at least one numeral in every
 field (except for the case described in the next bullet).
 Examples:
 <example><code lang="java">
     FEDC:BA98:7654:3210:FEDC:BA98:7654:3210
     1080:0:0:0:8:800:200C:417A</code></example></term></item><item><term>Due to some methods of allocating certain styles of IPv6
 addresses, it will be common for addresses to contain long strings
 of zero bits.  In order to make writing addresses containing zero
 bits easier a special syntax is available to compress the zeros.
 The use of "::" indicates multiple groups of 16-bits of zeros.
 The "::" can only appear once in an address.  The "::" can also be
 used to compress the leading and/or trailing zeros in an address.

 For example the following addresses:
 <example><code lang="java">
     1080:0:0:0:8:800:200C:417A  a unicast address
     FF01:0:0:0:0:0:0:101        a multicast address
     0:0:0:0:0:0:0:1             the loopback address
     0:0:0:0:0:0:0:0             the unspecified addresses</code></example>
 may be represented as:
 <example><code lang="java">
     1080::8:800:200C:417A       a unicast address
     FF01::101                   a multicast address
     ::1                         the loopback address
     ::                          the unspecified addresses</code></example></term></item><item><term>An alternative form that is sometimes more convenient when dealing
 with a mixed environment of IPv4 and IPv6 nodes is
 <c>x:x:x:x:x:x:d.d.d.d</c>, where the 'x's are the hexadecimal values of
 the six high-order 16-bit pieces of the address, and the 'd's are
 the decimal values of the four low-order 8-bit pieces of the
 address (standard IPv4 representation).  Examples:
 <example><code lang="java">
     0:0:0:0:0:0:13.1.68.3
     0:0:0:0:0:FFFF:129.144.52.38</code></example>
 or in compressed form:
 <example><code lang="java">
     ::13.1.68.3
     ::FFFF:129.144.52.38</code></example></term></item></list></para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">Scopes are given using a trailing <c>%</c> followed by the scope id, as in
 <c>1080::8:800:200C:417A%2</c> or <c>1080::8:800:200C:417A%en0</c>.
 See  for more on IPv6's scoped
 address architecture.

 </para>
      <para tool="javadoc-to-mdoc">Additionally, for backwards compatibility, IPv6 addresses may be surrounded by square
 brackets.

 <format type="text/html"><h4>DNS caching</h4></format></para>
      <para tool="javadoc-to-mdoc">In Android 4.0 (Ice Cream Sandwich) and earlier, DNS caching was performed both by
 InetAddress and by the C library, which meant that DNS TTLs could not be honored correctly.
 In later releases, caching is done solely by the C library and DNS TTLs are honored.<format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="T:Java.Net.Inet4Address" /></c></term></item><item><term><c><see cref="T:Java.Net.Inet6Address" /></c></term></item></list></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/net/InetAddress.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InetAddress (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanonicalHostName">
      <MemberSignature Language="C#" Value="public virtual string CanonicalHostName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CanonicalHostName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCanonicalHostName", "()Ljava/lang/String;", "GetGetCanonicalHostNameHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the fully qualified hostname corresponding to this IP address.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the fully qualified hostname corresponding to this IP address.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#getCanonicalHostName()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetAddress">
      <MemberSignature Language="C#" Value="public virtual byte[] GetAddress ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetAddress() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getAddress", "()[B", "GetGetAddressHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the IP address represented by this <c>InetAddress</c> instance
 as a byte array.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the IP address represented by this <c>InetAddress</c> instance
 as a byte array. The elements are in network order (the highest order
 address byte is in the zeroth element).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#getAddress()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetAllByName">
      <MemberSignature Language="C#" Value="public static Java.Net.InetAddress[] GetAllByName (string host);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Net.InetAddress[] GetAllByName(string host) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getAllByName", "(Ljava/lang/String;)[Ljava/net/InetAddress;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.InetAddress[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="host">the hostname or literal IP string to be resolved.</param>
        <summary>Gets all IP addresses associated with the given <c>host</c> identified
 by name or literal IP address.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets all IP addresses associated with the given <c>host</c> identified
 by name or literal IP address. The IP address is resolved by the
 configured name service. If the host name is empty or <c>null</c> an
 <c>UnknownHostException</c> is thrown. If the host name is a literal IP
 address string an array with the corresponding single <c>InetAddress</c>
 is returned.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#getAllByName(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.UnknownHostException">if the address lookup fails.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetByAddress">
      <MemberSignature Language="C#" Value="public static Java.Net.InetAddress GetByAddress (byte[] ipAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Net.InetAddress GetByAddress(unsigned int8[] ipAddress) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getByAddress", "([B)Ljava/net/InetAddress;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.InetAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipAddress" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="ipAddress">To be added.</param>
        <summary>Equivalent to <c>getByAddress(null, ipAddress)</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Equivalent to <c>getByAddress(null, ipAddress)</c>. Handy for addresses with
 no associated hostname.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#getByAddress(byte[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.UnknownHostException" />
      </Docs>
    </Member>
    <Member MemberName="GetByAddress">
      <MemberSignature Language="C#" Value="public static Java.Net.InetAddress GetByAddress (string hostName, byte[] ipAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Net.InetAddress GetByAddress(string hostName, unsigned int8[] ipAddress) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getByAddress", "(Ljava/lang/String;[B)Ljava/net/InetAddress;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.InetAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostName" Type="System.String" />
        <Parameter Name="ipAddress" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hostName">To be added.</param>
        <param name="ipAddress">To be added.</param>
        <summary>Returns an <c>InetAddress</c> corresponding to the given network-order
 bytes <c>ipAddress</c> and <c>scopeId</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an <c>InetAddress</c> corresponding to the given network-order
 bytes <c>ipAddress</c> and <c>scopeId</c>.

 </para>
          <para tool="javadoc-to-mdoc">For an IPv4 address, the byte array must be of length 4.
 For IPv6, the byte array must be of length 16. Any other length will cause an <c>UnknownHostException</c>.

 </para>
          <para tool="javadoc-to-mdoc">No reverse lookup is performed. The given <c>hostName</c> (which may be null) is
 associated with the new <c>InetAddress</c> with no validation done.

 </para>
          <para tool="javadoc-to-mdoc">(Note that numeric addresses such as <c>"127.0.0.1"</c> are names for the
 purposes of this API. Most callers probably want <c><see cref="M:Java.Net.InetAddress.GetAllByName(System.String)" /></c> instead.)</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#getByAddress(java.lang.String, byte[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.UnknownHostException">if <c>ipAddress</c> is null or the wrong length.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetByName">
      <MemberSignature Language="C#" Value="public static Java.Net.InetAddress GetByName (string host);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Net.InetAddress GetByName(string host) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getByName", "(Ljava/lang/String;)Ljava/net/InetAddress;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.InetAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="host">the hostName to be resolved to an address or <c>null</c>.</param>
        <summary>Returns the address of a host according to the given host string name
 <c>host</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the address of a host according to the given host string name
 <c>host</c>. The host string may be either a machine name or a dotted
 string IP address. If the latter, the <c>hostName</c> field is
 determined upon demand. <c>host</c> can be <c>null</c> which means that
 an address of the loopback interface is returned.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#getByName(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.UnknownHostException">if the address lookup fails.
</exception>
      </Docs>
    </Member>
    <Member MemberName="HostAddress">
      <MemberSignature Language="C#" Value="public virtual string HostAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HostAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getHostAddress", "()Ljava/lang/String;", "GetGetHostAddressHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary tool="true">Returns the numeric representation of this IP address (such as "127.0.0.1").</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the numeric representation of this IP address (such as "127.0.0.1").
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#getHostAddress()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="HostName">
      <MemberSignature Language="C#" Value="public virtual string HostName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HostName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getHostName", "()Ljava/lang/String;", "GetGetHostNameHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the host name corresponding to this IP address.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the host name corresponding to this IP address. This may or may not be a
 fully-qualified name. If the IP address could not be resolved, the numeric representation
 is returned instead (see <c><see cref="P:Java.Net.InetAddress.HostAddress" /></c>).
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#getHostName()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsAnyLocalAddress">
      <MemberSignature Language="C#" Value="public virtual bool IsAnyLocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnyLocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isAnyLocalAddress", "()Z", "GetIsAnyLocalAddressHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this is the IPv6 unspecified wildcard address <c>::</c>
 or the IPv4 "any" address, <c>0.0.0.0</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether this is the IPv6 unspecified wildcard address <c>::</c>
 or the IPv4 "any" address, <c>0.0.0.0</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#isAnyLocalAddress()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsLinkLocalAddress">
      <MemberSignature Language="C#" Value="public virtual bool IsLinkLocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLinkLocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isLinkLocalAddress", "()Z", "GetIsLinkLocalAddressHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this address is a link-local address or not.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether this address is a link-local address or not.

 </para>
          <para tool="javadoc-to-mdoc">Valid IPv6 link-local addresses have the prefix <c>fe80::/10</c>.

 </para>
          <para tool="javadoc-to-mdoc">
 "Default Address Selection for Internet Protocol Version 6 (IPv6)" states
 that both IPv4 auto-configuration addresses (prefix <c>169.254/16</c>) and
 IPv4 loopback addresses (prefix <c>127/8</c>) have link-local scope, but
 <c><see cref="T:Java.Net.Inet4Address" /></c> only considers the auto-configuration addresses
 to have link-local scope. That is: the IPv4 loopback address returns false.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#isLinkLocalAddress()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsLoopbackAddress">
      <MemberSignature Language="C#" Value="public virtual bool IsLoopbackAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoopbackAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isLoopbackAddress", "()Z", "GetIsLoopbackAddressHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this address is a loopback address or not.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether this address is a loopback address or not.

 </para>
          <para tool="javadoc-to-mdoc">Valid IPv4 loopback addresses have the prefix <c>127/8</c>.

 </para>
          <para tool="javadoc-to-mdoc">The only valid IPv6 loopback address is <c>::1</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#isLoopbackAddress()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsMCGlobal">
      <MemberSignature Language="C#" Value="public virtual bool IsMCGlobal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMCGlobal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isMCGlobal", "()Z", "GetIsMCGlobalHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this address is a global multicast address or not.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether this address is a global multicast address or not.

 </para>
          <para tool="javadoc-to-mdoc">Valid IPv6 global multicast addresses have the prefix <c>ffxe::/16</c>,
 where <c>x</c> is a set of flags and the additional 112 bits make
 up the global multicast address space.

 </para>
          <para tool="javadoc-to-mdoc">Valid IPv4 global multicast addresses are the range of addresses
 from <c>224.0.1.0</c> to <c>238.255.255.255</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#isMCGlobal()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsMCLinkLocal">
      <MemberSignature Language="C#" Value="public virtual bool IsMCLinkLocal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMCLinkLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isMCLinkLocal", "()Z", "GetIsMCLinkLocalHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this address is a link-local multicast address or not.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether this address is a link-local multicast address or not.

 </para>
          <para tool="javadoc-to-mdoc">Valid IPv6 link-local multicast addresses have the prefix <c>ffx2::/16</c>,
 where x is a set of flags and the additional 112 bits make up the link-local multicast
 address space.

 </para>
          <para tool="javadoc-to-mdoc">Valid IPv4 link-local multicast addresses have the prefix <c>224.0.0/24</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#isMCLinkLocal()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsMCNodeLocal">
      <MemberSignature Language="C#" Value="public virtual bool IsMCNodeLocal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMCNodeLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isMCNodeLocal", "()Z", "GetIsMCNodeLocalHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this address is a node-local multicast address or not.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether this address is a node-local multicast address or not.

 </para>
          <para tool="javadoc-to-mdoc">Valid IPv6 node-local multicast addresses have the prefix <c>ffx1::/16</c>,
 where x is a set of flags and the additional 112 bits make up the link-local multicast
 address space.

 </para>
          <para tool="javadoc-to-mdoc">There are no valid IPv4 node-local multicast addresses.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#isMCNodeLocal()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsMCOrgLocal">
      <MemberSignature Language="C#" Value="public virtual bool IsMCOrgLocal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMCOrgLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isMCOrgLocal", "()Z", "GetIsMCOrgLocalHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this address is a organization-local multicast address or not.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether this address is a organization-local multicast address or not.

 </para>
          <para tool="javadoc-to-mdoc">Valid IPv6 organization-local multicast addresses have the prefix <c>ffx8::/16</c>,
 where x is a set of flags and the additional 112 bits make up the link-local multicast
 address space.

 </para>
          <para tool="javadoc-to-mdoc">Valid IPv4 organization-local multicast addresses have the prefix <c>239.192/14</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#isMCOrgLocal()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsMCSiteLocal">
      <MemberSignature Language="C#" Value="public virtual bool IsMCSiteLocal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMCSiteLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isMCSiteLocal", "()Z", "GetIsMCSiteLocalHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this address is a site-local multicast address or not.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether this address is a site-local multicast address or not.

 </para>
          <para tool="javadoc-to-mdoc">Valid IPv6 site-local multicast addresses have the prefix <c>ffx5::/16</c>,
 where x is a set of flags and the additional 112 bits make up the link-local multicast
 address space.

 </para>
          <para tool="javadoc-to-mdoc">Valid IPv4 site-local multicast addresses have the prefix <c>239.255/16</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#isMCSiteLocal()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsMulticastAddress">
      <MemberSignature Language="C#" Value="public virtual bool IsMulticastAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMulticastAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isMulticastAddress", "()Z", "GetIsMulticastAddressHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this address is a multicast address or not.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether this address is a multicast address or not.

 </para>
          <para tool="javadoc-to-mdoc">Valid IPv6 multicast addresses have the prefix <c>ff::/8</c>.

 </para>
          <para tool="javadoc-to-mdoc">Valid IPv4 multicast addresses have the prefix <c>224/4</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#isMulticastAddress()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsReachable">
      <MemberSignature Language="C#" Value="public virtual bool IsReachable (int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsReachable(int32 timeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isReachable", "(I)Z", "GetIsReachable_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="timeout">timeout in milliseconds before the test fails if no connection
            could be established.</param>
        <summary>Tries to reach this <c>InetAddress</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Tries to reach this <c>InetAddress</c>. This method first tries to use
 ICMP <format type="text/html"><i>(ICMP ECHO REQUEST)</i></format>, falling back to a TCP connection
 on port 7 (Echo) of the remote host.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#isReachable(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs during an I/O operation.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if timeout is less than zero.
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReachable">
      <MemberSignature Language="C#" Value="public virtual bool IsReachable (Java.Net.NetworkInterface networkInterface, int ttl, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsReachable(class Java.Net.NetworkInterface networkInterface, int32 ttl, int32 timeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isReachable", "(Ljava/net/NetworkInterface;II)Z", "GetIsReachable_Ljava_net_NetworkInterface_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="netif" Type="Java.Net.NetworkInterface" />
        <Parameter Name="ttl" Type="System.Int32" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="networkInterface">the network interface on which to connection should be
            established.</param>
        <param name="ttl">the maximum count of hops (time-to-live).</param>
        <param name="timeout">timeout in milliseconds before the test fails if no connection
            could be established.</param>
        <summary>Tries to reach this <c>InetAddress</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Tries to reach this <c>InetAddress</c>. This method first tries to use
 ICMP <format type="text/html"><i>(ICMP ECHO REQUEST)</i></format>, falling back to a TCP connection
 on port 7 (Echo) of the remote host.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#isReachable(java.net.NetworkInterface, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs during an I/O operation.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if ttl or timeout is less than zero.
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSiteLocalAddress">
      <MemberSignature Language="C#" Value="public virtual bool IsSiteLocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSiteLocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isSiteLocalAddress", "()Z", "GetIsSiteLocalAddressHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this address is a site-local address or not.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether this address is a site-local address or not.

 </para>
          <para tool="javadoc-to-mdoc">For the purposes of this method, valid IPv6 site-local addresses have
 the deprecated prefix <c>fec0::/10</c> from
 ,
 <format type="text/html"><i>not</i></format> the modern prefix <c>fc00::/7</c> from
 .

 </para>
          <para tool="javadoc-to-mdoc">
 "Default Address Selection for Internet Protocol Version 6 (IPv6)" states
 that IPv4 private addresses have the prefix <c>10/8</c>, <c>172.16/12</c>,
 or <c>192.168/16</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#isSiteLocalAddress()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LocalHost">
      <MemberSignature Language="C#" Value="public static Java.Net.InetAddress LocalHost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Net.InetAddress LocalHost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLocalHost", "()Ljava/net/InetAddress;", "GetGetLocalHostHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.InetAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an <c>InetAddress</c> for the local host if possible, or the
 loopback address otherwise.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an <c>InetAddress</c> for the local host if possible, or the
 loopback address otherwise. This method works by getting the hostname,
 performing a DNS lookup, and then taking the first returned address.
 For devices with multiple network interfaces and/or multiple addresses
 per interface, this does not necessarily return the <c>InetAddress</c>
 you want.

 </para>
          <para tool="javadoc-to-mdoc">Multiple interface/address configurations were relatively rare
 when this API was designed, but multiple interfaces are the default for
 modern mobile devices (with separate wifi and radio interfaces), and
 the need to support both IPv4 and IPv6 has made multiple addresses
 commonplace. New code should thus avoid this method except where it's
 basically being used to get a loopback address or equivalent.

 </para>
          <para tool="javadoc-to-mdoc">There are two main ways to get a more specific answer:
 <list type="bullet"><item><term>If you have a connected socket, you should probably use
 <c><see cref="P:Java.Net.Socket.LocalAddress" /></c> instead: that will give you the address
 that's actually in use for that connection. (It's not possible to ask
 the question "what local address would a connection to a given remote
 address use?"; you have to actually make the connection and see.)</term></item><item><term>For other use cases, see <c><see cref="T:Java.Net.NetworkInterface" /></c>, which lets you
 enumerate all available network interfaces and their addresses.</term></item></list></para>
          <para tool="javadoc-to-mdoc">Note that if the host doesn't have a hostname set &amp;ndash; as
 Android devices typically don't &amp;ndash; this method will
 effectively return the loopback address, albeit by getting the name
 <c>localhost</c> and then doing a lookup to translate that to
 <c>127.0.0.1</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#getLocalHost()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Net.UnknownHostException">if the address lookup fails.
</exception>
      </Docs>
    </Member>
    <Member MemberName="LoopbackAddress">
      <MemberSignature Language="C#" Value="public static Java.Net.InetAddress LoopbackAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Net.InetAddress LoopbackAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLoopbackAddress", "()Ljava/net/InetAddress;", "GetGetLoopbackAddressHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.InetAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the IPv6 loopback address <c>::1</c> or the IPv4 loopback address <c>127.0.0.1</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the IPv6 loopback address <c>::1</c> or the IPv4 loopback address <c>127.0.0.1</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/net/InetAddress.html#getLoopbackAddress()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>