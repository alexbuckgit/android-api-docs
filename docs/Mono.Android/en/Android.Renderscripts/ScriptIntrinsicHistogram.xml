<Type Name="ScriptIntrinsicHistogram" FullName="Android.Renderscripts.ScriptIntrinsicHistogram">
  <TypeSignature Language="C#" Value="public sealed class ScriptIntrinsicHistogram : Android.Renderscripts.ScriptIntrinsic" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ScriptIntrinsicHistogram extends Android.Renderscripts.ScriptIntrinsic" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Renderscripts.ScriptIntrinsic</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/renderscript/ScriptIntrinsicHistogram", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="19">
    <summary>Intrinsic Histogram filter.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Intrinsic Histogram filter.


</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Android.Renderscripts.ScriptIntrinsicHistogram Create (Android.Renderscripts.RenderScript rs, Android.Renderscripts.Element e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Renderscripts.ScriptIntrinsicHistogram Create(class Android.Renderscripts.RenderScript rs, class Android.Renderscripts.Element e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("create", "(Landroid/renderscript/RenderScript;Landroid/renderscript/Element;)Landroid/renderscript/ScriptIntrinsicHistogram;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Renderscripts.ScriptIntrinsicHistogram</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rs" Type="Android.Renderscripts.RenderScript" />
        <Parameter Name="e" Type="Android.Renderscripts.Element" />
      </Parameters>
      <Docs>
        <param name="rs">The RenderScript context</param>
        <param name="e">Element type for inputs</param>
        <summary>Create an intrinsic for calculating the histogram of an uchar
 or uchar4 image.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Create an intrinsic for calculating the histogram of an uchar
 or uchar4 image.

 Supported elements types are
 <c><see cref="M:Android.Renderscripts.Element.U8_4(Android.Renderscripts.RenderScript)" /></c>, <c><see cref="M:Android.Renderscripts.Element.U8_3(Android.Renderscripts.RenderScript)" /></c>,
 <c><see cref="M:Android.Renderscripts.Element.U8_2(Android.Renderscripts.RenderScript)" /></c>, <c><see cref="M:Android.Renderscripts.Element.U8(Android.Renderscripts.RenderScript)" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#create(android.renderscript.RenderScript, android.renderscript.Element)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldID_Input">
      <MemberSignature Language="C#" Value="public Android.Renderscripts.Script.FieldID FieldID_Input { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Renderscripts.Script/FieldID FieldID_Input" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFieldID_Input", "()Landroid/renderscript/Script$FieldID;", "GetGetFieldID_InputHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Renderscripts.Script+FieldID</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get a FieldID for the input field of this intrinsic.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get a FieldID for the input field of this intrinsic.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#getFieldID_Input()" target="_blank">[Android Documentation]</a>
              <since version="Added in API level 19" />
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach">
      <MemberSignature Language="C#" Value="public void ForEach (Android.Renderscripts.Allocation ain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForEach(class Android.Renderscripts.Allocation ain) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("forEach", "(Landroid/renderscript/Allocation;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ain" Type="Android.Renderscripts.Allocation" />
      </Parameters>
      <Docs>
        <param name="ain">The input image
</param>
        <summary>Process an input buffer and place the histogram into the
 output allocation.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Process an input buffer and place the histogram into the
 output allocation. The output allocation may be a narrower
 vector size than the input. In this case the vector size of
 the output is used to determine how many of the input
 channels are used in the computation. This is useful if you
 have an RGBA input buffer but only want the histogram for
 RGB.

 1D and 2D input allocations are supported.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#forEach(android.renderscript.Allocation)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach">
      <MemberSignature Language="C#" Value="public void ForEach (Android.Renderscripts.Allocation ain, Android.Renderscripts.Script.LaunchOptions opt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForEach(class Android.Renderscripts.Allocation ain, class Android.Renderscripts.Script/LaunchOptions opt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("forEach", "(Landroid/renderscript/Allocation;Landroid/renderscript/Script$LaunchOptions;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ain" Type="Android.Renderscripts.Allocation" />
        <Parameter Name="opt" Type="Android.Renderscripts.Script+LaunchOptions" />
      </Parameters>
      <Docs>
        <param name="ain">The input image</param>
        <param name="opt">LaunchOptions for clipping
</param>
        <summary>Process an input buffer and place the histogram into the
 output allocation.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Process an input buffer and place the histogram into the
 output allocation. The output allocation may be a narrower
 vector size than the input. In this case the vector size of
 the output is used to determine how many of the input
 channels are used in the computation. This is useful if you
 have an RGBA input buffer but only want the histogram for
 RGB.

 1D and 2D input allocations are supported.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#forEach(android.renderscript.Allocation, android.renderscript.Script.LaunchOptions)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach_Dot">
      <MemberSignature Language="C#" Value="public void ForEach_Dot (Android.Renderscripts.Allocation ain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForEach_Dot(class Android.Renderscripts.Allocation ain) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("forEach_Dot", "(Landroid/renderscript/Allocation;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ain" Type="Android.Renderscripts.Allocation" />
      </Parameters>
      <Docs>
        <param name="ain">The input image
</param>
        <summary>Process an input buffer and place the histogram into the
 output allocation.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Process an input buffer and place the histogram into the
 output allocation. The dot product of the input channel and
 the coefficients from 'setDotCoefficients' are used to
 calculate the output values.

 1D and 2D input allocations are supported.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#forEach_Dot(android.renderscript.Allocation)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach_Dot">
      <MemberSignature Language="C#" Value="public void ForEach_Dot (Android.Renderscripts.Allocation ain, Android.Renderscripts.Script.LaunchOptions opt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForEach_Dot(class Android.Renderscripts.Allocation ain, class Android.Renderscripts.Script/LaunchOptions opt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("forEach_Dot", "(Landroid/renderscript/Allocation;Landroid/renderscript/Script$LaunchOptions;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ain" Type="Android.Renderscripts.Allocation" />
        <Parameter Name="opt" Type="Android.Renderscripts.Script+LaunchOptions" />
      </Parameters>
      <Docs>
        <param name="ain">The input image</param>
        <param name="opt">LaunchOptions for clipping
</param>
        <summary>Process an input buffer and place the histogram into the
 output allocation.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Process an input buffer and place the histogram into the
 output allocation. The dot product of the input channel and
 the coefficients from 'setDotCoefficients' are used to
 calculate the output values.

 1D and 2D input allocations are supported.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#forEach_Dot(android.renderscript.Allocation, android.renderscript.Script.LaunchOptions)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KernelID_Separate">
      <MemberSignature Language="C#" Value="public Android.Renderscripts.Script.KernelID KernelID_Separate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Renderscripts.Script/KernelID KernelID_Separate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getKernelID_Separate", "()Landroid/renderscript/Script$KernelID;", "GetGetKernelID_SeparateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Renderscripts.Script+KernelID</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get a KernelID for this intrinsic kernel.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get a KernelID for this intrinsic kernel.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#getKernelID_Separate()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDotCoefficients">
      <MemberSignature Language="C#" Value="public void SetDotCoefficients (float r, float g, float b, float a);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDotCoefficients(float32 r, float32 g, float32 b, float32 a) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDotCoefficients", "(FFFF)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Single" />
        <Parameter Name="g" Type="System.Single" />
        <Parameter Name="b" Type="System.Single" />
        <Parameter Name="a" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="r">Red coefficient</param>
        <param name="g">Green coefficient</param>
        <param name="b">Blue coefficient</param>
        <param name="a">Alpha coefficient
</param>
        <summary>Set the coefficients used for the RGBA to Luminocity
 calculation.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the coefficients used for the RGBA to Luminocity
 calculation. The default is {0.299f, 0.587f, 0.114f, 0.f}.

 Coefficients must be &gt;= 0 and sum to 1.0 or less.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#setDotCoefficients(float, float, float, float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutput">
      <MemberSignature Language="C#" Value="public void SetOutput (Android.Renderscripts.Allocation aout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutput(class Android.Renderscripts.Allocation aout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOutput", "(Landroid/renderscript/Allocation;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aout" Type="Android.Renderscripts.Allocation" />
      </Parameters>
      <Docs>
        <param name="aout">The output allocation
</param>
        <summary tool="true">Set the output of the histogram.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the output of the histogram.  32 bit integer types are
 supported.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html#setOutput(android.renderscript.Allocation)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>