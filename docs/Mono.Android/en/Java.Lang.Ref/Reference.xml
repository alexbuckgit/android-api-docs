<Type Name="Reference" FullName="Java.Lang.Ref.Reference">
  <TypeSignature Language="C#" Value="public abstract class Reference : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Reference extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/lang/ref/Reference", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides an abstract class which describes behavior common to all reference
 objects.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Provides an abstract class which describes behavior common to all reference
 objects. It is not possible to create immediate subclasses of
 <c>Reference</c> in addition to the ones provided by this package. It is
 also not desirable to do so, since references require very close cooperation
 with the system's garbage collector. The existing, specialized reference
 classes should be used instead.

 </para>
      <para tool="javadoc-to-mdoc">Three different type of references exist, each being weaker than the preceding one:
 <c><see cref="T:Java.Lang.Ref.SoftReference" /></c>, <c><see cref="T:Java.Lang.Ref.WeakReference" /></c>, and
 <c><see cref="T:Java.Lang.Ref.PhantomReference" /></c>. "Weakness" here means that less restrictions are
 being imposed on the garbage collector as to when it is allowed to
 actually garbage-collect the referenced object.

 </para>
      <para tool="javadoc-to-mdoc">In order to use reference objects properly it is important to understand
 the different types of reachability that trigger their clearing and
 enqueueing. The following table lists these, from strongest to weakest.
 For each row, an object is said to have the reachability on the left side
 if (and only if) it fulfills all of the requirements on the right side. In
 all rows, consider the <i>root set</i> to be a set of references that
 are "resistant" to garbage collection (that is, running threads, method
 parameters, local variables, static fields and the like).

 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <table>
            <tr>
              <td>Strongly reachable</td>
              <td>
                <list type="bullet">
                  <item>
                    <term>There exists at least one path from the root set to the object that does not traverse any
 instance of a <c>java.lang.ref.Reference</c> subclass.
 </term>
                  </item>
                </list>
              </td>
            </tr>
            <tr>
              <td>Softly reachable</td>
              <td>
                <list type="bullet">
                  <item>
                    <term>The object is not strongly reachable.</term>
                  </item>
                  <item>
                    <term>There exists at least one path from the root set to the object that does traverse
 a <c>java.lang.ref.SoftReference</c> instance, but no <c>java.lang.ref.WeakReference</c>
 or <c>java.lang.ref.PhantomReference</c> instances.</term>
                  </item>
                </list>
              </td>
            </tr>
            <tr>
              <td>Weakly reachable</td>
              <td>
                <list type="bullet">
                  <item>
                    <term>The object is neither strongly nor softly reachable.</term>
                  </item>
                  <item>
                    <term>There exists at least one path from the root set to the object that does traverse a
 <c>java.lang.ref.WeakReference</c> instance, but no <c>java.lang.ref.PhantomReference</c>
 instances.</term>
                  </item>
                </list>
              </td>
            </tr>
            <tr>
              <td>Phantom-reachable</td>
              <td>
                <list type="bullet">
                  <item>
                    <term>The object is neither strongly, softly, nor weakly reachable.</term>
                  </item>
                  <item>
                    <term>The object is referenced by a <c>java.lang.ref.PhantomReference</c> instance.</term>
                  </item>
                  <item>
                    <term>The object has already been finalized.</term>
                  </item>
                </list>
              </td>
            </tr>
          </table>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/lang/ref/Reference.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Reference (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clear", "()V", "GetClearHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Makes the referent <c>null</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Makes the referent <c>null</c>. This does not force the reference
 object to be enqueued.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/ref/Reference.html#clear()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public virtual bool Enqueue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Enqueue() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enqueue", "()Z", "GetEnqueueHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Forces the reference object to be enqueued if it has been associated with
 a queue.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Forces the reference object to be enqueued if it has been associated with
 a queue.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/ref/Reference.html#enqueue()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object Get ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Get() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("get", "()Ljava/lang/Object;", "GetGetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the referent of the reference object.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the referent of the reference object.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/ref/Reference.html#get()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsEnqueued">
      <MemberSignature Language="C#" Value="public virtual bool IsEnqueued { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnqueued" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isEnqueued", "()Z", "GetIsEnqueuedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Checks whether the reference object has been enqueued.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Checks whether the reference object has been enqueued.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/ref/Reference.html#isEnqueued()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
