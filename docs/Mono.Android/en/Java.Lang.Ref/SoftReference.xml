<Type Name="SoftReference" FullName="Java.Lang.Ref.SoftReference">
  <TypeSignature Language="C#" Value="public class SoftReference : Java.Lang.Ref.Reference" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SoftReference extends Java.Lang.Ref.Reference" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Ref.Reference</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/lang/ref/SoftReference", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A reference that is cleared when its referent is not strongly reachable and
 there is memory pressure.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A reference that is cleared when its referent is not strongly reachable and
 there is memory pressure.

 <format type="text/html"><h3>Avoid Soft References for Caching</h3></format>
 In practice, soft references are inefficient for caching. The runtime doesn't
 have enough information on which references to clear and which to keep. Most
 fatally, it doesn't know what to do when given the choice between clearing a
 soft reference and growing the heap.

 </para>
      <para tool="javadoc-to-mdoc">The lack of information on the value to your application of each reference
 limits the usefulness of soft references. References that are cleared too
 early cause unnecessary work; those that are cleared too late waste memory.

 </para>
      <para tool="javadoc-to-mdoc">Most applications should use an <c>android.util.LruCache</c> instead of
 soft references. LruCache has an effective eviction policy and lets the user
 tune how much memory is allotted.

 <format type="text/html"><h3>Garbage Collection of Soft References</h3></format>
 When the garbage collector encounters an object <c>obj</c> that is
 softly-reachable, the following happens:
 <list type="bullet"><item><term>A set <c>refs</c> of references is determined. <c>refs</c> contains
       the following elements:
       <list type="bullet" /></term></item><item><term>All soft references pointing to <c>obj</c>.</term></item><item><term>All soft references pointing to objects from which <c>obj</c> is
           strongly reachable.</term></item><item><term>All references in <c>refs</c> are atomically cleared.</term></item><item><term>At the same time or some time in the future, all references in <c>refs</c> will be enqueued with their corresponding reference queues, if
       any.</term></item></list>
 The system may delay clearing and enqueueing soft references, yet all <c>SoftReference</c>s pointing to softly reachable objects will be cleared before
 the runtime throws an <c><see cref="T:Java.Lang.OutOfMemoryError" /></c>.

 </para>
      <para tool="javadoc-to-mdoc">Unlike a <c>WeakReference</c>, a <c>SoftReference</c> will not be
 cleared and enqueued until the runtime must reclaim memory to satisfy an
 allocation.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/lang/ref/SoftReference.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoftReference (Java.Lang.Object r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.Object r) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/Object;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="r" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="r">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoftReference (Java.Lang.Object r, Java.Lang.Ref.ReferenceQueue q);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.Object r, class Java.Lang.Ref.ReferenceQueue q) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="r" Type="Java.Lang.Object" />
        <Parameter Name="q" Type="Java.Lang.Ref.ReferenceQueue" />
      </Parameters>
      <Docs>
        <param name="r">To be added.</param>
        <param name="q">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SoftReference (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>