<Type Name="Runtime" FullName="Java.Lang.Runtime">
  <TypeSignature Language="C#" Value="public class Runtime : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Runtime extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/lang/Runtime", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Allows Java applications to interface with the environment in which they are
 running.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Allows Java applications to interface with the environment in which they are
 running. Applications can not create an instance of this class, but they can
 get a singleton instance by invoking <c><see cref="M:Java.Lang.Runtime.GetRuntime" /></c>.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Java.Lang.JavaSystem" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/lang/Runtime.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Runtime (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddShutdownHook">
      <MemberSignature Language="C#" Value="public virtual void AddShutdownHook (Java.Lang.Thread hook);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddShutdownHook(class Java.Lang.Thread hook) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addShutdownHook", "(Ljava/lang/Thread;)V", "GetAddShutdownHook_Ljava_lang_Thread_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hook" Type="Java.Lang.Thread" />
      </Parameters>
      <Docs>
        <param name="hook">the shutdown hook to register.</param>
        <summary>Registers a VM shutdown hook.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Registers a VM shutdown hook. A shutdown hook is a
 <c>Thread</c> that is ready to run, but has not yet been started. All
 registered shutdown hooks will be executed when the VM
 terminates normally (typically when the <c><see cref="M:Java.Lang.Runtime.Exit(System.Int32)" /></c> method is called).

 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <i>Note that on Android, the application lifecycle does not include VM termination,
 so calling this method will not ensure that your code is run</i>
            </format>. Instead, you should
 use the most appropriate lifecycle notification (<c>Activity.onPause</c>, say).

 </para>
          <para tool="javadoc-to-mdoc">Shutdown hooks are run concurrently and in an unspecified order. Hooks
 failing due to an unhandled exception are not a problem, but the stack
 trace might be printed to the console. Once initiated, the whole shutdown
 process can only be terminated by calling <c>halt()</c>.

 </para>
          <para tool="javadoc-to-mdoc">If <c><see cref="M:Java.Lang.Runtime.RunFinalizersOnExit(System.Boolean)" /></c> has been called with a <c>true</c> argument, garbage collection and finalization will take place after
 all hooks are either finished or have failed. Then the VM
 terminates.

 </para>
          <para tool="javadoc-to-mdoc">It is recommended that shutdown hooks do not do any time-consuming
 activities, in order to not hold up the shutdown process longer than
 necessary.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#addShutdownHook(java.lang.Thread)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the hook has already been started or if it has already
             been registered.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the VM is already shutting down.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AvailableProcessors">
      <MemberSignature Language="C#" Value="public virtual int AvailableProcessors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AvailableProcessors() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("availableProcessors", "()I", "GetAvailableProcessorsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the number of processor cores available to the VM, at least 1.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the number of processor cores available to the VM, at least 1.
 Traditionally this returned the number currently online,
 but many mobile devices are able to take unused cores offline to
 save power, so releases newer than Android 4.2 (Jelly Bean) return the maximum number of
 cores that could be made available if there were no power or heat
 constraints.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#availableProcessors()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Exec">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Process Exec (string prog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Process Exec(string prog) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("exec", "(Ljava/lang/String;)Ljava/lang/Process;", "GetExec_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prog" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prog">the name of the program to execute.</param>
        <summary>Executes the specified program in a separate native process.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Executes the specified program in a separate native process. The new
 process inherits the environment of the caller. Calling this method is
 equivalent to calling <c>exec(prog, null, null)</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#exec(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the requested program can not be executed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Exec">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Process Exec (string[] progArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Process Exec(string[] progArray) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("exec", "([Ljava/lang/String;)Ljava/lang/Process;", "GetExec_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="progArray">the array containing the program to execute as well as any
            arguments to the program.</param>
        <summary>Executes the specified command and its arguments in a separate native
 process.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Executes the specified command and its arguments in a separate native
 process. The new process inherits the environment of the caller. Calling
 this method is equivalent to calling <c>exec(progArray, null, null)</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#exec(java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the requested program can not be executed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Exec">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Process Exec (string prog, string[] envp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Process Exec(string prog, string[] envp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("exec", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;", "GetExec_Ljava_lang_String_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prog" Type="System.String" />
        <Parameter Name="envp" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="prog">the name of the program to execute.</param>
        <param name="envp">the array containing the environment to start the new process
            in.</param>
        <summary>Executes the specified program in a separate native process.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Executes the specified program in a separate native process. The new
 process uses the environment provided in <c>envp</c>. Calling this
 method is equivalent to calling <c>exec(prog, envp, null)</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#exec(java.lang.String, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the requested program can not be executed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Exec">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Process Exec (string[] progArray, string[] envp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Process Exec(string[] progArray, string[] envp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("exec", "([Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;", "GetExec_arrayLjava_lang_String_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progArray" Type="System.String[]" />
        <Parameter Name="envp" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="progArray">the array containing the program to execute as well as any
            arguments to the program.</param>
        <param name="envp">the array containing the environment to start the new process
            in.</param>
        <summary>Executes the specified command and its arguments in a separate native
 process.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Executes the specified command and its arguments in a separate native
 process. The new process uses the environment provided in <c>envp</c>.
 Calling this method is equivalent to calling
 <c>exec(progArray, envp, null)</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#exec(java.lang.String[], java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the requested program can not be executed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Exec">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Process Exec (string prog, string[] envp, Java.IO.File directory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Process Exec(string prog, string[] envp, class Java.IO.File directory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("exec", "(Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;", "GetExec_Ljava_lang_String_arrayLjava_lang_String_Ljava_io_File_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prog" Type="System.String" />
        <Parameter Name="envp" Type="System.String[]" />
        <Parameter Name="directory" Type="Java.IO.File" />
      </Parameters>
      <Docs>
        <param name="prog">the name of the program to execute.</param>
        <param name="envp">the array containing the environment to start the new process
            in.</param>
        <param name="directory">the directory in which to execute the program. If <c>null</c>,
            execute if in the same directory as the parent process.</param>
        <summary>Executes the specified program in a separate native process.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Executes the specified program in a separate native process. The new
 process uses the environment provided in <c>envp</c> and the working
 directory specified by <c>directory</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#exec(java.lang.String, java.lang.String[], java.io.File)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the requested program can not be executed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Exec">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Process Exec (string[] progArray, string[] envp, Java.IO.File directory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Process Exec(string[] progArray, string[] envp, class Java.IO.File directory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("exec", "([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;", "GetExec_arrayLjava_lang_String_arrayLjava_lang_String_Ljava_io_File_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progArray" Type="System.String[]" />
        <Parameter Name="envp" Type="System.String[]" />
        <Parameter Name="directory" Type="Java.IO.File" />
      </Parameters>
      <Docs>
        <param name="progArray">the array containing the program to execute as well as any
            arguments to the program.</param>
        <param name="envp">the array containing the environment to start the new process
            in.</param>
        <param name="directory">the directory in which to execute the program. If <c>null</c>,
            execute if in the same directory as the parent process.</param>
        <summary>Executes the specified command and its arguments in a separate native
 process.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Executes the specified command and its arguments in a separate native
 process. The new process uses the environment provided in <c>envp</c>
 and the working directory specified by <c>directory</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#exec(java.lang.String[], java.lang.String[], java.io.File)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if the requested program can not be executed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public virtual void Exit (int code);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Exit(int32 code) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("exit", "(I)V", "GetExit_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code">To be added.</param>
        <summary>Causes the VM to stop running and the program to exit.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Causes the VM to stop running and the program to exit.
 If <c><see cref="M:Java.Lang.Runtime.RunFinalizersOnExit(System.Boolean)" /></c> has been previously invoked with a
 <c>true</c> argument, then all objects will be properly
 garbage-collected and finalized first.
 Use 0 to signal success to the calling process and 1 to signal failure.
 This method is unlikely to be useful to an Android application.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#exit(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FreeMemory">
      <MemberSignature Language="C#" Value="public virtual long FreeMemory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 FreeMemory() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("freeMemory", "()J", "GetFreeMemoryHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the number of bytes currently available on the heap without expanding the heap.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the number of bytes currently available on the heap without expanding the heap. See
 <c><see cref="M:Java.Lang.Runtime.TotalMemory" /></c> for the heap's current size. When these bytes are exhausted, the heap
 may expand. See <c><see cref="M:Java.Lang.Runtime.MaxMemory" /></c> for that limit.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#freeMemory()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Gc">
      <MemberSignature Language="C#" Value="public virtual void Gc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Gc() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("gc", "()V", "GetGcHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates to the VM that it would be a good time to run the
 garbage collector.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates to the VM that it would be a good time to run the
 garbage collector. Note that this is a hint only. There is no guarantee
 that the garbage collector will actually be run.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#gc()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetLocalizedInputStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream GetLocalizedInputStream (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetLocalizedInputStream(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getLocalizedInputStream", "(Ljava/io/InputStream;)Ljava/io/InputStream;", "GetGetLocalizedInputStream_Ljava_io_InputStream_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">the input stream to localize.</param>
        <summary>Returns the localized version of the specified input stream.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the localized version of the specified input stream. The input
 stream that is returned automatically converts all characters from the
 local character set to Unicode after reading them from the underlying
 stream.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#getLocalizedInputStream(java.io.InputStream)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetLocalizedOutputStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream GetLocalizedOutputStream (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetLocalizedOutputStream(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getLocalizedOutputStream", "(Ljava/io/OutputStream;)Ljava/io/OutputStream;", "GetGetLocalizedOutputStream_Ljava_io_OutputStream_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">the output stream to localize.</param>
        <summary>Returns the localized version of the specified output stream.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the localized version of the specified output stream. The output
 stream that is returned automatically converts all characters from
 Unicode to the local character set before writing them to the underlying
 stream.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#getLocalizedOutputStream(java.io.OutputStream)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetRuntime">
      <MemberSignature Language="C#" Value="public static Java.Lang.Runtime GetRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Lang.Runtime GetRuntime() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getRuntime", "()Ljava/lang/Runtime;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Runtime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the single <c>Runtime</c> instance for the current application.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the single <c>Runtime</c> instance for the current application.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#getRuntime()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Halt">
      <MemberSignature Language="C#" Value="public virtual void Halt (int code);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Halt(int32 code) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("halt", "(I)V", "GetHalt_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code">To be added.</param>
        <summary>Causes the VM to stop running, and the program to exit with the given return code.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Causes the VM to stop running, and the program to exit with the given return code.
 Use 0 to signal success to the calling process and 1 to signal failure.
 Neither shutdown hooks nor finalizers are run before exiting.
 This method is unlikely to be useful to an Android application.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#halt(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (string absolutePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(string absolutePath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("load", "(Ljava/lang/String;)V", "GetLoad_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="absolutePath">the absolute (platform dependent) path to the library to load.</param>
        <summary>Loads the shared library found at the given absolute path.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Loads the shared library found at the given absolute path.
 This should be of the form <c>/path/to/library/libMyLibrary.so</c>.
 Most callers should use <c><see cref="M:Java.Lang.Runtime.LoadLibrary(System.String)" /></c> instead, and
 let the system find the correct file to load.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#load(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.UnsatisfiedLinkError">if the library can not be loaded,
 either because it's not found or because there is something wrong with it.
</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task LoadAsync (string absolutePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task LoadAsync(string absolutePath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="absolutePath">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadLibrary">
      <MemberSignature Language="C#" Value="public virtual void LoadLibrary (string nickname);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadLibrary(string nickname) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("loadLibrary", "(Ljava/lang/String;)V", "GetLoadLibrary_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="nickname">the name of the library to load.</param>
        <summary>Loads a shared library.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Loads a shared library. Class loaders have some influence over this
 process, but for a typical Android app, it works as follows:

 </para>
          <para tool="javadoc-to-mdoc">Given the name <c>"MyLibrary"</c>, that string will be passed to
 <c><see cref="M:Java.Lang.JavaSystem.MapLibraryName(System.String)" /></c>. That means it would be a mistake
 for the caller to include the usual <c>"lib"</c> prefix and <c>".so"</c>
 suffix.

 </para>
          <para tool="javadoc-to-mdoc">That file will then be searched for on the application's native library
 search path. This consists of the application's own native library directory
 followed by the system's native library directories.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#loadLibrary(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.UnsatisfiedLinkError">if the library can not be loaded,
 either because it's not found or because there is something wrong with it.
</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadLibraryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task LoadLibraryAsync (string nickname);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task LoadLibraryAsync(string nickname) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="nickname">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxMemory">
      <MemberSignature Language="C#" Value="public virtual long MaxMemory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 MaxMemory() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("maxMemory", "()J", "GetMaxMemoryHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the maximum number of bytes the heap can expand to.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the maximum number of bytes the heap can expand to. See <c><see cref="M:Java.Lang.Runtime.TotalMemory" /></c> for the
 current number of bytes taken by the heap, and <c><see cref="M:Java.Lang.Runtime.FreeMemory" /></c> for the current number of
 those bytes actually used by live objects.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#maxMemory()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveShutdownHook">
      <MemberSignature Language="C#" Value="public virtual bool RemoveShutdownHook (Java.Lang.Thread hook);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RemoveShutdownHook(class Java.Lang.Thread hook) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeShutdownHook", "(Ljava/lang/Thread;)Z", "GetRemoveShutdownHook_Ljava_lang_Thread_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hook" Type="Java.Lang.Thread" />
      </Parameters>
      <Docs>
        <param name="hook">the shutdown hook to remove.</param>
        <summary>Unregisters a previously registered VM shutdown hook.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Unregisters a previously registered VM shutdown hook.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#removeShutdownHook(java.lang.Thread)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the VM is already shutting down.
</exception>
      </Docs>
    </Member>
    <Member MemberName="RunFinalization">
      <MemberSignature Language="C#" Value="public virtual void RunFinalization ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RunFinalization() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("runFinalization", "()V", "GetRunFinalizationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides a hint to the runtime that it would be useful to attempt
 to perform any outstanding object finalization.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Provides a hint to the runtime that it would be useful to attempt
 to perform any outstanding object finalization.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#runFinalization()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RunFinalizersOnExit">
      <MemberSignature Language="C#" Value="public static void RunFinalizersOnExit (bool run);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RunFinalizersOnExit(bool run) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("runFinalizersOnExit", "(Z)V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="run" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="run">
          <c>true</c> to enable finalization on exit, <c>false</c> to
            disable it.</param>
        <summary>Sets the flag that indicates whether all objects are finalized when the
 runtime is about to exit.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the flag that indicates whether all objects are finalized when the
 runtime is about to exit. Note that all finalization which occurs
 when the system is exiting is performed after all running threads have
 been terminated.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#runFinalizersOnExit(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalMemory">
      <MemberSignature Language="C#" Value="public virtual long TotalMemory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 TotalMemory() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("totalMemory", "()J", "GetTotalMemoryHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the number of bytes taken by the heap at its current size.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the number of bytes taken by the heap at its current size. The heap may expand or
 contract over time, as the number of live objects increases or decreases. See
 <c><see cref="M:Java.Lang.Runtime.MaxMemory" /></c> for the maximum heap size, and <c><see cref="M:Java.Lang.Runtime.FreeMemory" /></c> for an idea of how much
 the heap could currently contract.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#totalMemory()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TraceInstructions">
      <MemberSignature Language="C#" Value="public virtual void TraceInstructions (bool enable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TraceInstructions(bool enable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("traceInstructions", "(Z)V", "GetTraceInstructions_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enable">To be added.</param>
        <summary>Switches the output of debug information for instructions on or off.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Switches the output of debug information for instructions on or off.
 On Android, this method does nothing.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#traceInstructions(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TraceMethodCalls">
      <MemberSignature Language="C#" Value="public virtual void TraceMethodCalls (bool enable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TraceMethodCalls(bool enable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("traceMethodCalls", "(Z)V", "GetTraceMethodCalls_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enable">To be added.</param>
        <summary>Switches the output of debug information for methods on or off.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Switches the output of debug information for methods on or off.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Runtime.html#traceMethodCalls(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
