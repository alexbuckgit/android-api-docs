<Type Name="Thread" FullName="Java.Lang.Thread">
  <TypeSignature Language="C#" Value="public class Thread : Java.Lang.Object, IDisposable, Java.Lang.IRunnable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Thread extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Lang.IRunnable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.Lang.IRunnable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/lang/Thread", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <c>Thread</c> is a concurrent unit of execution.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A <c>Thread</c> is a concurrent unit of execution. It has its own call stack
 for methods being invoked, their arguments and local variables. Each application
 has at least one thread running when it is started, the main thread, in the main
 <c><see cref="T:Java.Lang.ThreadGroup" /></c>. The runtime keeps its own threads in the system thread
 group.

 </para>
      <para tool="javadoc-to-mdoc">There are two ways to execute code in a new thread.
 You can either subclass <c>Thread</c> and overriding its <c><see cref="M:Java.Lang.Thread.Run" /></c> method,
 or construct a new <c>Thread</c> and pass a <c><see cref="T:Java.Lang.IRunnable" /></c> to the constructor.
 In either case, the <c><see cref="M:Java.Lang.Thread.Start" /></c> method must be called to actually execute
 the new <c>Thread</c>.

 </para>
      <para tool="javadoc-to-mdoc">Each <c>Thread</c> has an integer priority that affect how the thread is
 scheduled by the OS. A new thread inherits the priority of its parent.
 A thread's priority can be set using the <c><see cref="P:Java.Lang.Thread.Priority" /></c> method.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/lang/Thread.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Constructs a new <c>Thread</c> with no <c>Runnable</c> object and a
 newly generated name.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>Thread</c> with no <c>Runnable</c> object and a
 newly generated name. The new <c>Thread</c> will belong to the same
 <c>ThreadGroup</c> as the <c>Thread</c> calling this constructor.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#Thread()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Java.Lang.ThreadGroup" />
        <altmember cref="T:Java.Lang.IRunnable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.IRunnable runnable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.IRunnable runnable) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/Runnable;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="runnable" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="runnable">To be added.</param>
        <summary>Constructs a new <c>Thread</c> with a <c>Runnable</c> object and a
 newly generated name.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>Thread</c> with a <c>Runnable</c> object and a
 newly generated name. The new <c>Thread</c> will belong to the same
 <c>ThreadGroup</c> as the <c>Thread</c> calling this constructor.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#Thread(java.lang.Runnable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Java.Lang.ThreadGroup" />
        <altmember cref="T:Java.Lang.IRunnable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Action runHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action runHandler) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="runHandler" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="runHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (string threadName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string threadName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="threadName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="threadName">To be added.</param>
        <summary>Constructs a new <c>Thread</c> with no <c>Runnable</c> object and the
 name provided.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>Thread</c> with no <c>Runnable</c> object and the
 name provided. The new <c>Thread</c> will belong to the same <c>ThreadGroup</c> as the <c>Thread</c> calling this constructor.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#Thread(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Java.Lang.ThreadGroup" />
        <altmember cref="T:Java.Lang.IRunnable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.IRunnable runnable, string threadName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.IRunnable runnable, string threadName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/Runnable;Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="runnable" Type="Java.Lang.IRunnable" />
        <Parameter Name="threadName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="runnable">To be added.</param>
        <param name="threadName">To be added.</param>
        <summary>Constructs a new <c>Thread</c> with a <c>Runnable</c> object and name
 provided.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>Thread</c> with a <c>Runnable</c> object and name
 provided. The new <c>Thread</c> will belong to the same <c>ThreadGroup</c> as the <c>Thread</c> calling this constructor.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#Thread(java.lang.Runnable, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Java.Lang.ThreadGroup" />
        <altmember cref="T:Java.Lang.IRunnable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.ThreadGroup group, Java.Lang.IRunnable runnable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.ThreadGroup group, class Java.Lang.IRunnable runnable) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="group" Type="Java.Lang.ThreadGroup" />
        <Parameter Name="runnable" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <param name="runnable">To be added.</param>
        <summary>Constructs a new <c>Thread</c> with a <c>Runnable</c> object and a
 newly generated name.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>Thread</c> with a <c>Runnable</c> object and a
 newly generated name. The new <c>Thread</c> will belong to the <c>ThreadGroup</c> passed as parameter.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#Thread(java.lang.ThreadGroup, java.lang.Runnable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalThreadStateException">if <c>group.destroy()</c> has already been done</exception>
        <altmember cref="T:Java.Lang.ThreadGroup" />
        <altmember cref="T:Java.Lang.IRunnable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.ThreadGroup group, Action runHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.ThreadGroup group, class System.Action runHandler) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="group" Type="Java.Lang.ThreadGroup" />
        <Parameter Name="runHandler" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <param name="runHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.ThreadGroup group, string threadName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.ThreadGroup group, string threadName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/ThreadGroup;Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="group" Type="Java.Lang.ThreadGroup" />
        <Parameter Name="threadName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <param name="threadName">To be added.</param>
        <summary>Constructs a new <c>Thread</c> with no <c>Runnable</c> object, the
 given name and belonging to the <c>ThreadGroup</c> passed as parameter.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>Thread</c> with no <c>Runnable</c> object, the
 given name and belonging to the <c>ThreadGroup</c> passed as parameter.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#Thread(java.lang.ThreadGroup, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalThreadStateException">if <c>group.destroy()</c> has already been done</exception>
        <altmember cref="T:Java.Lang.ThreadGroup" />
        <altmember cref="T:Java.Lang.IRunnable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Action runHandler, string threadName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action runHandler, string threadName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="runHandler" Type="System.Action" />
        <Parameter Name="threadName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="runHandler">To be added.</param>
        <param name="threadName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Thread (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.ThreadGroup group, Java.Lang.IRunnable runnable, string threadName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.ThreadGroup group, class Java.Lang.IRunnable runnable, string threadName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="group" Type="Java.Lang.ThreadGroup" />
        <Parameter Name="runnable" Type="Java.Lang.IRunnable" />
        <Parameter Name="threadName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <param name="runnable">To be added.</param>
        <param name="threadName">To be added.</param>
        <summary>Constructs a new <c>Thread</c> with a <c>Runnable</c> object, the given
 name and belonging to the <c>ThreadGroup</c> passed as parameter.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>Thread</c> with a <c>Runnable</c> object, the given
 name and belonging to the <c>ThreadGroup</c> passed as parameter.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalThreadStateException">if <c>group.destroy()</c> has already been done</exception>
        <altmember cref="T:Java.Lang.ThreadGroup" />
        <altmember cref="T:Java.Lang.IRunnable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.ThreadGroup group, Action runHandler, string threadName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.ThreadGroup group, class System.Action runHandler, string threadName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="group" Type="Java.Lang.ThreadGroup" />
        <Parameter Name="runHandler" Type="System.Action" />
        <Parameter Name="threadName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <param name="runHandler">To be added.</param>
        <param name="threadName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.ThreadGroup group, Java.Lang.IRunnable runnable, string threadName, long stackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.ThreadGroup group, class Java.Lang.IRunnable runnable, string threadName, int64 stackSize) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="group" Type="Java.Lang.ThreadGroup" />
        <Parameter Name="runnable" Type="Java.Lang.IRunnable" />
        <Parameter Name="threadName" Type="System.String" />
        <Parameter Name="stackSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <param name="runnable">To be added.</param>
        <param name="threadName">To be added.</param>
        <param name="stackSize">To be added.</param>
        <summary>Constructs a new <c>Thread</c> with a <c>Runnable</c> object, the given
 name and belonging to the <c>ThreadGroup</c> passed as parameter.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>Thread</c> with a <c>Runnable</c> object, the given
 name and belonging to the <c>ThreadGroup</c> passed as parameter.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalThreadStateException">if <c>group.destroy()</c> has already been done</exception>
        <altmember cref="T:Java.Lang.ThreadGroup" />
        <altmember cref="T:Java.Lang.IRunnable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.ThreadGroup group, Action runHandler, string threadName, long stackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.ThreadGroup group, class System.Action runHandler, string threadName, int64 stackSize) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="group" Type="Java.Lang.ThreadGroup" />
        <Parameter Name="runHandler" Type="System.Action" />
        <Parameter Name="threadName" Type="System.String" />
        <Parameter Name="stackSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <param name="runHandler">To be added.</param>
        <param name="threadName">To be added.</param>
        <param name="stackSize">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveCount">
      <MemberSignature Language="C#" Value="public static int ActiveCount ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ActiveCount() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("activeCount", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the number of active <c>Thread</c>s in the running <c>Thread</c>'s group and its subgroups.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the number of active <c>Thread</c>s in the running <c>Thread</c>'s group and its subgroups.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#activeCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AllStackTraces">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;Java.Lang.Thread,Java.Lang.StackTraceElement[]&gt; AllStackTraces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IDictionary`2&lt;class Java.Lang.Thread, class Java.Lang.StackTraceElement[]&gt; AllStackTraces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAllStackTraces", "()Ljava/util/Map;", "GetGetAllStackTracesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;Java.Lang.Thread,Java.Lang.StackTraceElement[]&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a map of all the currently live threads to their stack traces.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a map of all the currently live threads to their stack traces.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#getAllStackTraces()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public void CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CheckAccess() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("checkAccess", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Does nothing.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Does nothing.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#checkAccess()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ContextClassLoader">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.ClassLoader ContextClassLoader { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.ClassLoader ContextClassLoader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getContextClassLoader", "()Ljava/lang/ClassLoader;", "GetGetContextClassLoaderHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setContextClassLoader", "(Ljava/lang/ClassLoader;)V", "GetSetContextClassLoader_Ljava_lang_ClassLoader_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ClassLoader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the context ClassLoader for this Thread.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/lang/Thread.html#getContextClassLoader()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the context ClassLoader for this Thread.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/lang/Thread.html#setContextClassLoader(java.lang.ClassLoader)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the context ClassLoader for the receiver.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Java.Lang.ClassLoader" />
        <altmember cref="P:Java.Lang.Thread.ContextClassLoader" />
        <altmember cref="P:Java.Lang.Thread.ContextClassLoader" />
      </Docs>
    </Member>
    <Member MemberName="CountStackFrames">
      <MemberSignature Language="C#" Value="public virtual int CountStackFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CountStackFrames() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("countStackFrames", "()I", "GetCountStackFramesHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the number of stack frames in this thread.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the number of stack frames in this thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#countStackFrames()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CurrentThread">
      <MemberSignature Language="C#" Value="public static Java.Lang.Thread CurrentThread ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Lang.Thread CurrentThread() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("currentThread", "()Ljava/lang/Thread;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the Thread of the caller, that is, the current Thread.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the Thread of the caller, that is, the current Thread.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#currentThread()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Daemon">
      <MemberSignature Language="C#" Value="public bool Daemon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Daemon" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isDaemon", "()Z", "GetIsDaemonHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setDaemon", "(Z)V", "GetSetDaemon_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tests whether this is a daemon thread.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/lang/Thread.html#isDaemon()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Tests whether this is a daemon thread.
 A daemon thread only runs as long as there are non-daemon threads running.
 When the last non-daemon thread ends, the runtime will exit. This is not
 normally relevant to applications with a UI.
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/lang/Thread.html#setDaemon(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Marks this thread as a daemon thread.
 A daemon thread only runs as long as there are non-daemon threads running.
 When the last non-daemon thread ends, the runtime will exit. This is not
 normally relevant to applications with a UI.</para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalThreadStateException">- if this thread has already started.
</exception>
        <exception cref="T:Java.Lang.IllegalThreadStateException">- if this thread has already started.
</exception>
        <exception cref="T:Java.Lang.IllegalThreadStateException">- if this thread has already started.
</exception>
        <exception cref="T:Java.Lang.IllegalThreadStateException">- if this thread has already started.
</exception>
        <exception cref="T:Java.Lang.IllegalThreadStateException">- if this thread has already started.
</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultUncaughtExceptionHandler">
      <MemberSignature Language="C#" Value="public static Java.Lang.Thread.IUncaughtExceptionHandler DefaultUncaughtExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Lang.Thread/IUncaughtExceptionHandler DefaultUncaughtExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDefaultUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;", "GetGetDefaultUncaughtExceptionHandlerHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setDefaultUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V", "GetSetDefaultUncaughtExceptionHandler_Ljava_lang_Thread_UncaughtExceptionHandler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread+IUncaughtExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the default exception handler that's executed when uncaught
 exception terminates a thread.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/lang/Thread.html#getDefaultUncaughtExceptionHandler()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the default exception handler that's executed when uncaught
 exception terminates a thread.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/lang/Thread.html#setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the default uncaught exception handler. This handler is invoked in
 case any Thread dies due to an unhandled exception.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Destroy">
      <MemberSignature Language="C#" Value="public virtual void Destroy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Destroy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("destroy", "()V", "GetDestroyHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Throws <c>UnsupportedOperationException</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Throws <c>UnsupportedOperationException</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#destroy()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DumpStack">
      <MemberSignature Language="C#" Value="public static void DumpStack ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DumpStack() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dumpStack", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Prints to the standard error stream a text representation of the current
 stack for this Thread.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Prints to the standard error stream a text representation of the current
 stack for this Thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#dumpStack()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Lang.Throwable.PrintStackTrace" />
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public static int Enumerate (Java.Lang.Thread[] threads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Enumerate(class Java.Lang.Thread[] threads) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enumerate", "([Ljava/lang/Thread;)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threads" Type="Java.Lang.Thread[]" />
      </Parameters>
      <Docs>
        <param name="threads">array into which the Threads will be copied</param>
        <summary>Copies an array with all Threads which are in the same ThreadGroup as the
 receiver - and subgroups - into the array <c>threads</c> passed as
 parameter.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Copies an array with all Threads which are in the same ThreadGroup as the
 receiver - and subgroups - into the array <c>threads</c> passed as
 parameter. If the array passed as parameter is too small no exception is
 thrown - the extra elements are simply not copied.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#enumerate(java.lang.Thread[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetStackTrace">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.StackTraceElement[] GetStackTrace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.StackTraceElement[] GetStackTrace() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getStackTrace", "()[Ljava/lang/StackTraceElement;", "GetGetStackTraceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.StackTraceElement[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of <c><see cref="T:Java.Lang.StackTraceElement" /></c> representing the current thread's stack.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an array of <c><see cref="T:Java.Lang.StackTraceElement" /></c> representing the current thread's stack.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#getStackTrace()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetState">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Thread.State GetState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Thread/State GetState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getState", "()Ljava/lang/Thread$State;", "GetGetStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread+State</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the current state of the Thread.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the current state of the Thread. This method is useful for
 monitoring purposes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#getState()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="HoldsLock">
      <MemberSignature Language="C#" Value="public static bool HoldsLock (Java.Lang.Object object);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HoldsLock(class Java.Lang.Object object) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("holdsLock", "(Ljava/lang/Object;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="object" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="object">the object to test for the monitor lock</param>
        <summary>Indicates whether the current Thread has a monitor lock on the specified
 object.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates whether the current Thread has a monitor lock on the specified
 object.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#holdsLock(java.lang.Object)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public virtual long Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getId", "()J", "GetGetIdHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the thread's identifier.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the thread's identifier. The ID is a positive <c>long</c>
 generated on thread creation, is unique to the thread, and doesn't change
 during the lifetime of the thread; the ID may be reused after the thread
 has been terminated.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#getId()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Interrupt">
      <MemberSignature Language="C#" Value="public virtual void Interrupt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Interrupt() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("interrupt", "()V", "GetInterruptHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Posts an interrupt request to this <c>Thread</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Posts an interrupt request to this <c>Thread</c>. The behavior depends on
 the state of this <c>Thread</c>:
 <list type="bullet"><item><term><c>Thread</c>s blocked in one of <c>Object</c>'s <c>wait()</c> methods
 or one of <c>Thread</c>'s <c>join()</c> or <c>sleep()</c> methods will
 be woken up, their interrupt status will be cleared, and they receive an
 <c><see cref="T:Java.Lang.InterruptedException" /></c>.
 </term></item><item><term><c>Thread</c>s blocked in an I/O operation of an
 <c><see cref="T:Java.Nio.Channels.IInterruptibleChannel" /></c> will have their interrupt
 status set and receive an
 <c><see cref="T:Java.Nio.Channels.ClosedByInterruptException" /></c>. Also, the channel
 will be closed.
 </term></item><item><term><c>Thread</c>s blocked in a <c><see cref="T:Java.Nio.Channels.Selector" /></c> will have
 their interrupt status set and return immediately. They don't receive an
 exception in this case.
 <list type="bullet" /></term></item></list></para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#interrupt()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Lang.Thread.Interrupted" />
        <altmember cref="P:Java.Lang.Thread.IsInterrupted" />
      </Docs>
    </Member>
    <Member MemberName="Interrupted">
      <MemberSignature Language="C#" Value="public static bool Interrupted ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Interrupted() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("interrupted", "()Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a <c>boolean</c> indicating whether the current Thread (
 <c>currentThread()</c>) has a pending interrupt request (<c>
 true</c>) or not (<c>false</c>).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a <c>boolean</c> indicating whether the current Thread (
 <c>currentThread()</c>) has a pending interrupt request (<c>
 true</c>) or not (<c>false</c>). It also has the side-effect of
 clearing the flag.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#interrupted()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Lang.Thread.CurrentThread" />
        <altmember cref="M:Java.Lang.Thread.Interrupt" />
        <altmember cref="P:Java.Lang.Thread.IsInterrupted" />
      </Docs>
    </Member>
    <Member MemberName="IsAlive">
      <MemberSignature Language="C#" Value="public bool IsAlive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isAlive", "()Z", "GetIsAliveHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if the receiver has already been started and
 still runs code (hasn't died yet).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if the receiver has already been started and
 still runs code (hasn't died yet). Returns <c>false</c> either if
 the receiver hasn't been started yet or if it has already started and run
 to completion and died.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#isAlive()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Lang.Thread.Start" />
      </Docs>
    </Member>
    <Member MemberName="IsInterrupted">
      <MemberSignature Language="C#" Value="public virtual bool IsInterrupted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterrupted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isInterrupted", "()Z", "GetIsInterruptedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a <c>boolean</c> indicating whether the receiver has a
 pending interrupt request (<c>true</c>) or not (
 <c>false</c>)</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a <c>boolean</c> indicating whether the receiver has a
 pending interrupt request (<c>true</c>) or not (
 <c>false</c>)</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#isInterrupted()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Lang.Thread.Interrupt" />
        <altmember cref="M:Java.Lang.Thread.Interrupted" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public void Join ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Join() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("join", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Blocks the current Thread (<c>Thread.currentThread()</c>) until
 the receiver finishes its execution and dies.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Blocks the current Thread (<c>Thread.currentThread()</c>) until
 the receiver finishes its execution and dies.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#join()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread has been interrupted.
         The interrupted status of the current thread will be cleared before the exception is
         thrown.</exception>
        <altmember cref="M:Java.Lang.Object.NotifyAll" />
        <altmember cref="T:Java.Lang.ThreadDeath" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public void Join (long millis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Join(int64 millis) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("join", "(J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millis" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="millis">The maximum time to wait (in milliseconds).</param>
        <summary>Blocks the current Thread (<c>Thread.currentThread()</c>) until
 the receiver finishes its execution and dies or the specified timeout
 expires, whatever happens first.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Blocks the current Thread (<c>Thread.currentThread()</c>) until
 the receiver finishes its execution and dies or the specified timeout
 expires, whatever happens first.

 </para>
          <para tool="javadoc-to-mdoc">A timeout of zero means the calling thread should wait forever unless interrupted.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#join(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread has been interrupted.
         The interrupted status of the current thread will be cleared before the exception is
         thrown.</exception>
        <altmember cref="M:Java.Lang.Object.NotifyAll" />
        <altmember cref="T:Java.Lang.ThreadDeath" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public void Join (long millis, int nanos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Join(int64 millis, int32 nanos) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("join", "(JI)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millis" Type="System.Int64" />
        <Parameter Name="nanos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millis">The maximum time to wait (in milliseconds).</param>
        <param name="nanos">Extra nanosecond precision</param>
        <summary>Blocks the current Thread (<c>Thread.currentThread()</c>) until
 the receiver finishes its execution and dies or the specified timeout
 expires, whatever happens first.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Blocks the current Thread (<c>Thread.currentThread()</c>) until
 the receiver finishes its execution and dies or the specified timeout
 expires, whatever happens first.

 </para>
          <para tool="javadoc-to-mdoc">A timeout of zero means the calling thread should wait forever unless interrupted.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#join(long, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread has been interrupted.
         The interrupted status of the current thread will be cleared before the exception is
         thrown.</exception>
        <altmember cref="M:Java.Lang.Object.NotifyAll" />
        <altmember cref="T:Java.Lang.ThreadDeath" />
      </Docs>
    </Member>
    <Member MemberName="MaxPriority">
      <MemberSignature Language="C#" Value="public const int MaxPriority = 10;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxPriority = (10)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MAX_PRIORITY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>10</MemberValue>
      <Docs>
        <summary>The maximum priority value allowed for a thread.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The maximum priority value allowed for a thread.
 This corresponds to (but does not have the same value as)
 <c>android.os.Process.THREAD_PRIORITY_URGENT_DISPLAY</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#MAX_PRIORITY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MinPriority">
      <MemberSignature Language="C#" Value="public const int MinPriority = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MinPriority = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MIN_PRIORITY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>The minimum priority value allowed for a thread.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The minimum priority value allowed for a thread.
 This corresponds to (but does not have the same value as)
 <c>android.os.Process.THREAD_PRIORITY_LOWEST</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#MIN_PRIORITY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getName", "()Ljava/lang/String;", "GetGetNameHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setName", "(Ljava/lang/String;)V", "GetSetName_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the name of the Thread.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/lang/Thread.html#getName()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the name of the Thread.
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/lang/Thread.html#setName(java.lang.String)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the name of the Thread.</para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Java.Lang.Thread.Name" />
      </Docs>
    </Member>
    <Member MemberName="NormPriority">
      <MemberSignature Language="C#" Value="public const int NormPriority = 5;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 NormPriority = (5)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("NORM_PRIORITY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>The normal (default) priority value assigned to the main thread.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The normal (default) priority value assigned to the main thread.
 This corresponds to (but does not have the same value as)
 <c>android.os.Process.THREAD_PRIORITY_DEFAULT</c>.

</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#NORM_PRIORITY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPriority", "()I", "GetGetPriorityHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setPriority", "(I)V", "GetSetPriority_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the priority of the Thread.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/lang/Thread.html#getPriority()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the priority of the Thread.
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/lang/Thread.html#setPriority(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the priority of this thread. If the requested priority is greater than the
 parent thread group's <c><see cref="P:Java.Lang.ThreadGroup.MaxPriority" /></c>, the group's maximum
 priority will be used instead.</para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">- if the new priority is greater than <c><see cref="F:Java.Lang.Thread.MaxPriority" /></c>
     or less than <c><see cref="F:Java.Lang.Thread.MinPriority" /></c></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">- if the new priority is greater than <c><see cref="F:Java.Lang.Thread.MaxPriority" /></c>
     or less than <c><see cref="F:Java.Lang.Thread.MinPriority" /></c></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">- if the new priority is greater than <c><see cref="F:Java.Lang.Thread.MaxPriority" /></c>
     or less than <c><see cref="F:Java.Lang.Thread.MinPriority" /></c></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">- if the new priority is greater than <c><see cref="F:Java.Lang.Thread.MaxPriority" /></c>
     or less than <c><see cref="F:Java.Lang.Thread.MinPriority" /></c></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">- if the new priority is greater than <c><see cref="F:Java.Lang.Thread.MaxPriority" /></c>
     or less than <c><see cref="F:Java.Lang.Thread.MinPriority" /></c></exception>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("resume", "()V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Throws <c>UnsupportedOperationException</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Throws <c>UnsupportedOperationException</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#resume()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public virtual void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Run() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("run", "()V", "GetRunHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Calls the <c>run()</c> method of the Runnable object the receiver
 holds.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Calls the <c>run()</c> method of the Runnable object the receiver
 holds. If no Runnable is set, does nothing.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#run()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Lang.Thread.Start" />
      </Docs>
    </Member>
    <Member MemberName="Sleep">
      <MemberSignature Language="C#" Value="public static void Sleep (long time);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sleep(int64 time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sleep", "(J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="time">The time to sleep in milliseconds.</param>
        <summary tool="true">Causes the thread which sent this message to sleep for the given interval
 of time (given in milliseconds and nanoseconds).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Causes the thread which sent this message to sleep for the given interval
 of time (given in milliseconds). The precision is not guaranteed - the
 Thread may sleep more or less than requested.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#sleep(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread has been interrupted.
            The interrupted status of the current thread will be cleared before the exception
            is thrown.</exception>
        <altmember cref="M:Java.Lang.Thread.Interrupt" />
      </Docs>
    </Member>
    <Member MemberName="Sleep">
      <MemberSignature Language="C#" Value="public static void Sleep (long millis, int nanos);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sleep(int64 millis, int32 nanos) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sleep", "(JI)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millis" Type="System.Int64" />
        <Parameter Name="nanos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millis">The time to sleep in milliseconds.</param>
        <param name="nanos">Extra nanosecond precision</param>
        <summary>Causes the thread which sent this message to sleep for the given interval
 of time (given in milliseconds and nanoseconds).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Causes the thread which sent this message to sleep for the given interval
 of time (given in milliseconds and nanoseconds). The precision is not
 guaranteed - the Thread may sleep more or less than requested.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#sleep(long, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread has been interrupted.
            The interrupted status of the current thread will be cleared before the exception
            is thrown.</exception>
        <altmember cref="M:Java.Lang.Thread.Interrupt" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public virtual void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Start() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("start", "()V", "GetStartHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts the new Thread of execution.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Starts the new Thread of execution. The <c>run()</c> method of
 the receiver will be called by the receiver Thread itself (and not the
 Thread calling <c>start()</c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#start()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalThreadStateException">- if this thread has already started.</exception>
        <altmember cref="M:Java.Lang.Thread.Run" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stop", "()V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Throws <c>UnsupportedOperationException</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Requests the receiver Thread to stop and throw ThreadDeath. The Thread is
 resumed if it was suspended and awakened if it was sleeping, so that it
 can proceed to throw ThreadDeath.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#stop()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop (Java.Lang.Throwable throwable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop(class Java.Lang.Throwable throwable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stop", "(Ljava/lang/Throwable;)V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throwable" Type="Java.Lang.Throwable" />
      </Parameters>
      <Docs>
        <param name="throwable">To be added.</param>
        <summary>Throws <c>UnsupportedOperationException</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Throws <c>UnsupportedOperationException</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#stop(java.lang.Throwable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Suspend">
      <MemberSignature Language="C#" Value="public void Suspend ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Suspend() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("suspend", "()V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Throws <c>UnsupportedOperationException</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Throws <c>UnsupportedOperationException</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#suspend()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThreadGroup">
      <MemberSignature Language="C#" Value="public Java.Lang.ThreadGroup ThreadGroup { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.ThreadGroup ThreadGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getThreadGroup", "()Ljava/lang/ThreadGroup;", "GetGetThreadGroupHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ThreadGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the ThreadGroup to which this Thread belongs.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the ThreadGroup to which this Thread belongs.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#getThreadGroup()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UncaughtExceptionHandler">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Thread.IUncaughtExceptionHandler UncaughtExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Thread/IUncaughtExceptionHandler UncaughtExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;", "GetGetUncaughtExceptionHandlerHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V", "GetSetUncaughtExceptionHandler_Ljava_lang_Thread_UncaughtExceptionHandler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread+IUncaughtExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the thread's uncaught exception handler.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/lang/Thread.html#getUncaughtExceptionHandler()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the thread's uncaught exception handler. If not explicitly set,
 then the ThreadGroup's handler is returned. If the thread is terminated,
 then <c>null</c> is returned.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/lang/Thread.html#setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)" target="_blank">[Android Documentation]</a>
              <br />
            </format>
          </para>
          <para tool="javadoc-to-mdoc">
 Sets the uncaught exception handler. This handler is invoked in case this
 Thread dies due to an unhandled exception.
 </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static void Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Yield() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("yield", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes the calling Thread to yield execution time to another Thread that
 is ready to run.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Causes the calling Thread to yield execution time to another Thread that
 is ready to run. The actual scheduling is implementation-dependent.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/lang/Thread.html#yield()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>