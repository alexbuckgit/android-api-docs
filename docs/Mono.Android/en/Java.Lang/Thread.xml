<Type Name="Thread" FullName="Java.Lang.Thread">
  <TypeSignature Language="C#" Value="public class Thread : Java.Lang.Object, IDisposable, Java.Lang.IRunnable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Thread extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Lang.IRunnable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.Lang.IRunnable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/lang/Thread", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A <c>Thread</c> is a concurrent unit of execution.</summary>
    <remarks />
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Constructs a new <c>Thread</c> with no <c>Runnable</c> object and a
 newly generated name.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="T:Java.Lang.ThreadGroup" />
        <altmember cref="T:Java.Lang.IRunnable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.IRunnable runnable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.IRunnable runnable) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/Runnable;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="runnable" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="runnable">To be added.</param>
        <summary>Constructs a new <c>Thread</c> with a <c>Runnable</c> object and a
 newly generated name.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="T:Java.Lang.ThreadGroup" />
        <altmember cref="T:Java.Lang.IRunnable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Action runHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action runHandler) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="runHandler" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="runHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (string threadName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string threadName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="threadName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="threadName">To be added.</param>
        <summary>Constructs a new <c>Thread</c> with no <c>Runnable</c> object and the
 name provided.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="T:Java.Lang.ThreadGroup" />
        <altmember cref="T:Java.Lang.IRunnable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.IRunnable runnable, string threadName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.IRunnable runnable, string threadName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/Runnable;Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="runnable" Type="Java.Lang.IRunnable" />
        <Parameter Name="threadName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="runnable">To be added.</param>
        <param name="threadName">To be added.</param>
        <summary>Constructs a new <c>Thread</c> with a <c>Runnable</c> object and name
 provided.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="T:Java.Lang.ThreadGroup" />
        <altmember cref="T:Java.Lang.IRunnable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.ThreadGroup group, Java.Lang.IRunnable runnable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.ThreadGroup group, class Java.Lang.IRunnable runnable) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="group" Type="Java.Lang.ThreadGroup" />
        <Parameter Name="runnable" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <param name="runnable">To be added.</param>
        <summary>Constructs a new <c>Thread</c> with a <c>Runnable</c> object and a
 newly generated name.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalThreadStateException">if <c>group.destroy()</c> has already been done</exception>
        <altmember cref="T:Java.Lang.ThreadGroup" />
        <altmember cref="T:Java.Lang.IRunnable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.ThreadGroup group, Action runHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.ThreadGroup group, class System.Action runHandler) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="group" Type="Java.Lang.ThreadGroup" />
        <Parameter Name="runHandler" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <param name="runHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.ThreadGroup group, string threadName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.ThreadGroup group, string threadName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/ThreadGroup;Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="group" Type="Java.Lang.ThreadGroup" />
        <Parameter Name="threadName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <param name="threadName">To be added.</param>
        <summary>Constructs a new <c>Thread</c> with no <c>Runnable</c> object, the
 given name and belonging to the <c>ThreadGroup</c> passed as parameter.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalThreadStateException">if <c>group.destroy()</c> has already been done</exception>
        <altmember cref="T:Java.Lang.ThreadGroup" />
        <altmember cref="T:Java.Lang.IRunnable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Action runHandler, string threadName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action runHandler, string threadName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="runHandler" Type="System.Action" />
        <Parameter Name="threadName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="runHandler">To be added.</param>
        <param name="threadName">To be added.</param>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Thread (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.ThreadGroup group, Java.Lang.IRunnable runnable, string threadName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.ThreadGroup group, class Java.Lang.IRunnable runnable, string threadName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="group" Type="Java.Lang.ThreadGroup" />
        <Parameter Name="runnable" Type="Java.Lang.IRunnable" />
        <Parameter Name="threadName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <param name="runnable">To be added.</param>
        <param name="threadName">To be added.</param>
        <summary>Constructs a new <c>Thread</c> with a <c>Runnable</c> object, the given
 name and belonging to the <c>ThreadGroup</c> passed as parameter.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalThreadStateException">if <c>group.destroy()</c> has already been done</exception>
        <altmember cref="T:Java.Lang.ThreadGroup" />
        <altmember cref="T:Java.Lang.IRunnable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.ThreadGroup group, Action runHandler, string threadName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.ThreadGroup group, class System.Action runHandler, string threadName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="group" Type="Java.Lang.ThreadGroup" />
        <Parameter Name="runHandler" Type="System.Action" />
        <Parameter Name="threadName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <param name="runHandler">To be added.</param>
        <param name="threadName">To be added.</param>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.ThreadGroup group, Java.Lang.IRunnable runnable, string threadName, long stackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.ThreadGroup group, class Java.Lang.IRunnable runnable, string threadName, int64 stackSize) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="group" Type="Java.Lang.ThreadGroup" />
        <Parameter Name="runnable" Type="Java.Lang.IRunnable" />
        <Parameter Name="threadName" Type="System.String" />
        <Parameter Name="stackSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <param name="runnable">To be added.</param>
        <param name="threadName">To be added.</param>
        <param name="stackSize">To be added.</param>
        <summary>Constructs a new <c>Thread</c> with a <c>Runnable</c> object, the given
 name and belonging to the <c>ThreadGroup</c> passed as parameter.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalThreadStateException">if <c>group.destroy()</c> has already been done</exception>
        <altmember cref="T:Java.Lang.ThreadGroup" />
        <altmember cref="T:Java.Lang.IRunnable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (Java.Lang.ThreadGroup group, Action runHandler, string threadName, long stackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Lang.ThreadGroup group, class System.Action runHandler, string threadName, int64 stackSize) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="group" Type="Java.Lang.ThreadGroup" />
        <Parameter Name="runHandler" Type="System.Action" />
        <Parameter Name="threadName" Type="System.String" />
        <Parameter Name="stackSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <param name="runHandler">To be added.</param>
        <param name="threadName">To be added.</param>
        <param name="stackSize">To be added.</param>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ActiveCount">
      <MemberSignature Language="C#" Value="public static int ActiveCount ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ActiveCount() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("activeCount", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the number of active <c>Thread</c>s in the running <c>Thread</c>'s group and its subgroups.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AllStackTraces">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;Java.Lang.Thread,Java.Lang.StackTraceElement[]&gt; AllStackTraces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IDictionary`2&lt;class Java.Lang.Thread, class Java.Lang.StackTraceElement[]&gt; AllStackTraces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAllStackTraces", "()Ljava/util/Map;", "GetGetAllStackTracesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;Java.Lang.Thread,Java.Lang.StackTraceElement[]&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a map of all the currently live threads to their stack traces.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public void CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CheckAccess() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("checkAccess", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Does nothing.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ContextClassLoader">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.ClassLoader ContextClassLoader { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.ClassLoader ContextClassLoader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getContextClassLoader", "()Ljava/lang/ClassLoader;", "GetGetContextClassLoaderHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setContextClassLoader", "(Ljava/lang/ClassLoader;)V", "GetSetContextClassLoader_Ljava_lang_ClassLoader_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ClassLoader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the context ClassLoader for this Thread.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="T:Java.Lang.ClassLoader" />
        <altmember cref="P:Java.Lang.Thread.ContextClassLoader" />
        <altmember cref="P:Java.Lang.Thread.ContextClassLoader" />
      </Docs>
    </Member>
    <Member MemberName="CountStackFrames">
      <MemberSignature Language="C#" Value="public virtual int CountStackFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CountStackFrames() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("countStackFrames", "()I", "GetCountStackFramesHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the number of stack frames in this thread.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CurrentThread">
      <MemberSignature Language="C#" Value="public static Java.Lang.Thread CurrentThread ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Lang.Thread CurrentThread() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("currentThread", "()Ljava/lang/Thread;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the Thread of the caller, that is, the current Thread.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Daemon">
      <MemberSignature Language="C#" Value="public bool Daemon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Daemon" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isDaemon", "()Z", "GetIsDaemonHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setDaemon", "(Z)V", "GetSetDaemon_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tests whether this is a daemon thread.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalThreadStateException">- if this thread has already started.
</exception>
        <exception cref="T:Java.Lang.IllegalThreadStateException">- if this thread has already started.
</exception>
        <exception cref="T:Java.Lang.IllegalThreadStateException">- if this thread has already started.
</exception>
        <exception cref="T:Java.Lang.IllegalThreadStateException">- if this thread has already started.
</exception>
        <exception cref="T:Java.Lang.IllegalThreadStateException">- if this thread has already started.
</exception>
        <exception cref="T:Java.Lang.IllegalThreadStateException">- if this thread has already started.
</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultUncaughtExceptionHandler">
      <MemberSignature Language="C#" Value="public static Java.Lang.Thread.IUncaughtExceptionHandler DefaultUncaughtExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Lang.Thread/IUncaughtExceptionHandler DefaultUncaughtExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDefaultUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;", "GetGetDefaultUncaughtExceptionHandlerHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setDefaultUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V", "GetSetDefaultUncaughtExceptionHandler_Ljava_lang_Thread_UncaughtExceptionHandler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread+IUncaughtExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the default exception handler that's executed when uncaught
 exception terminates a thread.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Destroy">
      <MemberSignature Language="C#" Value="public virtual void Destroy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Destroy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("destroy", "()V", "GetDestroyHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Throws <c>UnsupportedOperationException</c>.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DumpStack">
      <MemberSignature Language="C#" Value="public static void DumpStack ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DumpStack() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dumpStack", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Prints to the standard error stream a text representation of the current
 stack for this Thread.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Lang.Throwable.PrintStackTrace" />
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public static int Enumerate (Java.Lang.Thread[] threads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Enumerate(class Java.Lang.Thread[] threads) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enumerate", "([Ljava/lang/Thread;)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threads" Type="Java.Lang.Thread[]" />
      </Parameters>
      <Docs>
        <param name="threads">array into which the Threads will be copied</param>
        <summary>Copies an array with all Threads which are in the same ThreadGroup as the
 receiver - and subgroups - into the array <c>threads</c> passed as
 parameter.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetStackTrace">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.StackTraceElement[] GetStackTrace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.StackTraceElement[] GetStackTrace() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getStackTrace", "()[Ljava/lang/StackTraceElement;", "GetGetStackTraceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.StackTraceElement[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of <c><see cref="T:Java.Lang.StackTraceElement" /></c> representing the current thread's stack.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetState">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Thread.State GetState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Thread/State GetState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getState", "()Ljava/lang/Thread$State;", "GetGetStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread+State</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the current state of the Thread.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="HoldsLock">
      <MemberSignature Language="C#" Value="public static bool HoldsLock (Java.Lang.Object object);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HoldsLock(class Java.Lang.Object object) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("holdsLock", "(Ljava/lang/Object;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="object" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="object">the object to test for the monitor lock</param>
        <summary>Indicates whether the current Thread has a monitor lock on the specified
 object.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public virtual long Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getId", "()J", "GetGetIdHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the thread's identifier.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Interrupt">
      <MemberSignature Language="C#" Value="public virtual void Interrupt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Interrupt() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("interrupt", "()V", "GetInterruptHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Posts an interrupt request to this <c>Thread</c>.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Lang.Thread.Interrupted" />
        <altmember cref="P:Java.Lang.Thread.IsInterrupted" />
      </Docs>
    </Member>
    <Member MemberName="Interrupted">
      <MemberSignature Language="C#" Value="public static bool Interrupted ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Interrupted() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("interrupted", "()Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a <c>boolean</c> indicating whether the current Thread (
 <c>currentThread()</c>) has a pending interrupt request (<c>
 true</c>) or not (<c>false</c>).</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Lang.Thread.CurrentThread" />
        <altmember cref="M:Java.Lang.Thread.Interrupt" />
        <altmember cref="P:Java.Lang.Thread.IsInterrupted" />
      </Docs>
    </Member>
    <Member MemberName="IsAlive">
      <MemberSignature Language="C#" Value="public bool IsAlive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isAlive", "()Z", "GetIsAliveHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if the receiver has already been started and
 still runs code (hasn't died yet).</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Lang.Thread.Start" />
      </Docs>
    </Member>
    <Member MemberName="IsInterrupted">
      <MemberSignature Language="C#" Value="public virtual bool IsInterrupted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterrupted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isInterrupted", "()Z", "GetIsInterruptedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a <c>boolean</c> indicating whether the receiver has a
 pending interrupt request (<c>true</c>) or not (
 <c>false</c>)</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Lang.Thread.Interrupt" />
        <altmember cref="M:Java.Lang.Thread.Interrupted" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public void Join ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Join() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("join", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Blocks the current Thread (<c>Thread.currentThread()</c>) until
 the receiver finishes its execution and dies.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread has been interrupted.
         The interrupted status of the current thread will be cleared before the exception is
         thrown.</exception>
        <altmember cref="M:Java.Lang.Object.NotifyAll" />
        <altmember cref="T:Java.Lang.ThreadDeath" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public void Join (long millis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Join(int64 millis) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("join", "(J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millis" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="millis">The maximum time to wait (in milliseconds).</param>
        <summary>Blocks the current Thread (<c>Thread.currentThread()</c>) until
 the receiver finishes its execution and dies or the specified timeout
 expires, whatever happens first.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread has been interrupted.
         The interrupted status of the current thread will be cleared before the exception is
         thrown.</exception>
        <altmember cref="M:Java.Lang.Object.NotifyAll" />
        <altmember cref="T:Java.Lang.ThreadDeath" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public void Join (long millis, int nanos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Join(int64 millis, int32 nanos) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("join", "(JI)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millis" Type="System.Int64" />
        <Parameter Name="nanos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millis">The maximum time to wait (in milliseconds).</param>
        <param name="nanos">Extra nanosecond precision</param>
        <summary>Blocks the current Thread (<c>Thread.currentThread()</c>) until
 the receiver finishes its execution and dies or the specified timeout
 expires, whatever happens first.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread has been interrupted.
         The interrupted status of the current thread will be cleared before the exception is
         thrown.</exception>
        <altmember cref="M:Java.Lang.Object.NotifyAll" />
        <altmember cref="T:Java.Lang.ThreadDeath" />
      </Docs>
    </Member>
    <Member MemberName="MaxPriority">
      <MemberSignature Language="C#" Value="public const int MaxPriority = 10;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxPriority = (10)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MAX_PRIORITY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>10</MemberValue>
      <Docs>
        <summary>The maximum priority value allowed for a thread.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MinPriority">
      <MemberSignature Language="C#" Value="public const int MinPriority = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MinPriority = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MIN_PRIORITY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>The minimum priority value allowed for a thread.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getName", "()Ljava/lang/String;", "GetGetNameHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setName", "(Ljava/lang/String;)V", "GetSetName_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the name of the Thread.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="P:Java.Lang.Thread.Name" />
      </Docs>
    </Member>
    <Member MemberName="NormPriority">
      <MemberSignature Language="C#" Value="public const int NormPriority = 5;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 NormPriority = (5)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("NORM_PRIORITY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>The normal (default) priority value assigned to the main thread.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPriority", "()I", "GetGetPriorityHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setPriority", "(I)V", "GetSetPriority_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the priority of the Thread.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">- if the new priority is greater than <c><see cref="F:Java.Lang.Thread.MaxPriority" /></c>
     or less than <c><see cref="F:Java.Lang.Thread.MinPriority" /></c></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">- if the new priority is greater than <c><see cref="F:Java.Lang.Thread.MaxPriority" /></c>
     or less than <c><see cref="F:Java.Lang.Thread.MinPriority" /></c></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">- if the new priority is greater than <c><see cref="F:Java.Lang.Thread.MaxPriority" /></c>
     or less than <c><see cref="F:Java.Lang.Thread.MinPriority" /></c></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">- if the new priority is greater than <c><see cref="F:Java.Lang.Thread.MaxPriority" /></c>
     or less than <c><see cref="F:Java.Lang.Thread.MinPriority" /></c></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">- if the new priority is greater than <c><see cref="F:Java.Lang.Thread.MaxPriority" /></c>
     or less than <c><see cref="F:Java.Lang.Thread.MinPriority" /></c></exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">- if the new priority is greater than <c><see cref="F:Java.Lang.Thread.MaxPriority" /></c>
     or less than <c><see cref="F:Java.Lang.Thread.MinPriority" /></c></exception>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("resume", "()V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Throws <c>UnsupportedOperationException</c>.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public virtual void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Run() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("run", "()V", "GetRunHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Calls the <c>run()</c> method of the Runnable object the receiver
 holds.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Lang.Thread.Start" />
      </Docs>
    </Member>
    <Member MemberName="Sleep">
      <MemberSignature Language="C#" Value="public static void Sleep (long time);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sleep(int64 time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sleep", "(J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="time">The time to sleep in milliseconds.</param>
        <summary tool="true">Causes the thread which sent this message to sleep for the given interval
 of time (given in milliseconds).</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread has been interrupted.
            The interrupted status of the current thread will be cleared before the exception
            is thrown.</exception>
        <altmember cref="M:Java.Lang.Thread.Interrupt" />
      </Docs>
    </Member>
    <Member MemberName="Sleep">
      <MemberSignature Language="C#" Value="public static void Sleep (long millis, int nanos);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sleep(int64 millis, int32 nanos) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sleep", "(JI)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millis" Type="System.Int64" />
        <Parameter Name="nanos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millis">The time to sleep in milliseconds.</param>
        <param name="nanos">Extra nanosecond precision</param>
        <summary>Causes the thread which sent this message to sleep for the given interval
 of time (given in milliseconds and nanoseconds).</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread has been interrupted.
            The interrupted status of the current thread will be cleared before the exception
            is thrown.</exception>
        <altmember cref="M:Java.Lang.Thread.Interrupt" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public virtual void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Start() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("start", "()V", "GetStartHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts the new Thread of execution.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalThreadStateException">- if this thread has already started.</exception>
        <altmember cref="M:Java.Lang.Thread.Run" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stop", "()V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Requests the receiver Thread to stop and throw ThreadDeath.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop (Java.Lang.Throwable throwable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop(class Java.Lang.Throwable throwable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stop", "(Ljava/lang/Throwable;)V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throwable" Type="Java.Lang.Throwable" />
      </Parameters>
      <Docs>
        <param name="throwable">To be added.</param>
        <summary>Throws <c>UnsupportedOperationException</c>.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Suspend">
      <MemberSignature Language="C#" Value="public void Suspend ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Suspend() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("suspend", "()V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Throws <c>UnsupportedOperationException</c>.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThreadGroup">
      <MemberSignature Language="C#" Value="public Java.Lang.ThreadGroup ThreadGroup { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.ThreadGroup ThreadGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getThreadGroup", "()Ljava/lang/ThreadGroup;", "GetGetThreadGroupHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ThreadGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the ThreadGroup to which this Thread belongs.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UncaughtExceptionHandler">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Thread.IUncaughtExceptionHandler UncaughtExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Thread/IUncaughtExceptionHandler UncaughtExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;", "GetGetUncaughtExceptionHandlerHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V", "GetSetUncaughtExceptionHandler_Ljava_lang_Thread_UncaughtExceptionHandler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread+IUncaughtExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the thread's uncaught exception handler.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static void Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Yield() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("yield", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes the calling Thread to yield execution time to another Thread that
 is ready to run.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
