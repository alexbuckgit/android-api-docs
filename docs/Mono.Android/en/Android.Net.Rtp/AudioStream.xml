<Type Name="AudioStream" FullName="Android.Net.Rtp.AudioStream">
  <TypeSignature Language="C#" Value="public class AudioStream : Android.Net.Rtp.RtpStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AudioStream extends Android.Net.Rtp.RtpStream" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Net.Rtp.RtpStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/net/rtp/AudioStream", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An AudioStream is a <c><see cref="T:Android.Net.Rtp.RtpStream" /></c> which carrys audio payloads over
 Real-time Transport Protocol (RTP).</summary>
    <remarks><para tool="javadoc-to-mdoc">An AudioStream is a <c><see cref="T:Android.Net.Rtp.RtpStream" /></c> which carrys audio payloads over
 Real-time Transport Protocol (RTP). Two different classes are developed in
 order to support various usages such as audio conferencing. An AudioStream
 represents a remote endpoint which consists of a network mapping and a
 configured <c><see cref="T:Android.Net.Rtp.AudioCodec" /></c>. On the other side, An <c><see cref="T:Android.Net.Rtp.AudioGroup" /></c>
 represents a local endpoint which mixes all the AudioStreams and optionally
 interacts with the speaker and the microphone at the same time. The simplest
 usage includes one for each endpoints. For other combinations, developers
 should be aware of the limitations described in <c><see cref="T:Android.Net.Rtp.AudioGroup" /></c>.

 </para><para tool="javadoc-to-mdoc">An AudioStream becomes busy when it joins an AudioGroup. In this case most
 of the setter methods are disabled. This is designed to ease the task of
 managing native resources. One can always make an AudioStream leave its
 AudioGroup by calling <c><see cref="M:Android.Net.Rtp.AudioStream.Join(Android.Net.Rtp.AudioGroup)" /></c> with <c>null</c> and put it
 back after the modification is done.</para><para tool="javadoc-to-mdoc">Using this class requires
 <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#INTERNET" /></c> permission.</para><format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="T:Android.Net.Rtp.RtpStream" /></c></term></item><item><term><c><see cref="T:Android.Net.Rtp.AudioGroup" /></c></term></item></list><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/net/rtp/AudioStream.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 12" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AudioStream (Java.Net.InetAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Net.InetAddress address) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/net/InetAddress;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="address" Type="Java.Net.InetAddress" />
      </Parameters>
      <Docs>
        <param name="address">To be added.</param>
        <summary>Creates an AudioStream on the given local address.</summary>
        <remarks><para tool="javadoc-to-mdoc">Creates an AudioStream on the given local address. Note that the local
 port is assigned automatically to conform with RFC 3550.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/net/rtp/AudioStream.html#AudioStream(java.net.InetAddress)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 12" />
        <exception cref="T:Java.Net.SocketException">if the address cannot be bound or a problem
     occurs during binding.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AudioStream (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Codec">
      <MemberSignature Language="C#" Value="public virtual Android.Net.Rtp.AudioCodec Codec { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Net.Rtp.AudioCodec Codec" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCodec", "()Landroid/net/rtp/AudioCodec;", "GetGetCodecHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setCodec", "(Landroid/net/rtp/AudioCodec;)V", "GetSetCodec_Landroid_net_rtp_AudioCodec_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Rtp.AudioCodec</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <c><see cref="T:Android.Net.Rtp.AudioCodec" /></c>, or <c>null</c> if it is not set.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/android/net/rtp/AudioStream.html#getCodec()" target="_blank">[Android Documentation]</a><br /></format>Returns the <c><see cref="T:Android.Net.Rtp.AudioCodec" /></c>, or <c>null</c> if it is not set.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/android/net/rtp/AudioStream.html#setCodec(android.net.rtp.AudioCodec)" target="_blank">[Android Documentation]</a><br /></format>Sets the <c><see cref="T:Android.Net.Rtp.AudioCodec" /></c>.</para></remarks>
        <since version="Added in API level 12" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if its type is used by DTMF.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the stream is busy.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if its type is used by DTMF.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the stream is busy.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if its type is used by DTMF.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the stream is busy.
</exception>
        <altmember cref="P:Android.Net.Rtp.AudioStream.Codec" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if its type is used by DTMF.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the stream is busy.
</exception>
      </Docs>
    </Member>
    <Member MemberName="DtmfType">
      <MemberSignature Language="C#" Value="public virtual int DtmfType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DtmfType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDtmfType", "()I", "GetGetDtmfTypeHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setDtmfType", "(I)V", "GetSetDtmfType_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the RTP payload type for dual-tone multi-frequency (DTMF) digits,
 or <c>-1</c> if it is not enabled.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/android/net/rtp/AudioStream.html#getDtmfType()" target="_blank">[Android Documentation]</a><br /></format>Returns the RTP payload type for dual-tone multi-frequency (DTMF) digits,
 or <c>-1</c> if it is not enabled.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/android/net/rtp/AudioStream.html#setDtmfType(int)" target="_blank">[Android Documentation]</a><br /></format>Sets the RTP payload type for dual-tone multi-frequency (DTMF) digits.
 The primary usage is to send digits to the remote gateway to perform
 certain tasks, such as second-stage dialing. According to RFC 2833, the
 RTP payload type for DTMF is assigned dynamically, so it must be in the
 range of 96 and 127. One can use <c>-1</c> to disable DTMF and free up
 the previous assigned type. This method cannot be called when the stream
 already joined an <c><see cref="T:Android.Net.Rtp.AudioGroup" /></c>.</para></remarks>
        <since version="Added in API level 12" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the type is invalid or used by codec.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the stream is busy.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the type is invalid or used by codec.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the stream is busy.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the type is invalid or used by codec.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the stream is busy.</exception>
        <altmember cref="P:Android.Net.Rtp.AudioStream.DtmfType" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the type is invalid or used by codec.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the stream is busy.</exception>
        <altmember cref="M:Android.Net.Rtp.AudioGroup.SendDtmf(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public virtual Android.Net.Rtp.AudioGroup Group { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Net.Rtp.AudioGroup Group" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getGroup", "()Landroid/net/rtp/AudioGroup;", "GetGetGroupHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Rtp.AudioGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the joined <c><see cref="T:Android.Net.Rtp.AudioGroup" /></c>.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Returns the joined <c><see cref="T:Android.Net.Rtp.AudioGroup" /></c>.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/net/rtp/AudioStream.html#getGroup()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public override bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isBusy", "()Z", "GetIsBusyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if the stream has already joined an
 <c><see cref="T:Android.Net.Rtp.AudioGroup" /></c>.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Returns <c>true</c> if the stream has already joined an
 <c><see cref="T:Android.Net.Rtp.AudioGroup" /></c>.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/net/rtp/AudioStream.html#isBusy()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public virtual void Join (Android.Net.Rtp.AudioGroup group);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Join(class Android.Net.Rtp.AudioGroup group) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("join", "(Landroid/net/rtp/AudioGroup;)V", "GetJoin_Landroid_net_rtp_AudioGroup_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="group" Type="Android.Net.Rtp.AudioGroup" />
      </Parameters>
      <Docs>
        <param name="group">The AudioGroup to join or <c>null</c> to leave.</param>
        <summary>Joins an <c><see cref="T:Android.Net.Rtp.AudioGroup" /></c>.</summary>
        <remarks><para tool="javadoc-to-mdoc">Joins an <c><see cref="T:Android.Net.Rtp.AudioGroup" /></c>. Each stream can join only one group at a
 time. The group can be changed by passing a different one or removed
 by calling this method with <c>null</c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/net/rtp/AudioStream.html#join(android.net.rtp.AudioGroup)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 12" />
        <exception cref="T:Java.Lang.IllegalStateException">if the stream is not properly configured.</exception>
        <altmember cref="T:Android.Net.Rtp.AudioGroup" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
