<Type Name="AudioGroup" FullName="Android.Net.Rtp.AudioGroup">
  <TypeSignature Language="C#" Value="public class AudioGroup : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AudioGroup extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/net/rtp/AudioGroup", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="12">
    <summary>An AudioGroup is an audio hub for the speaker, the microphone, and
 <c><see cref="T:Android.Net.Rtp.AudioStream" /></c>s.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">An AudioGroup is an audio hub for the speaker, the microphone, and
 <c><see cref="T:Android.Net.Rtp.AudioStream" /></c>s. Each of these components can be logically turned on
 or off by calling <c><see cref="P:Android.Net.Rtp.AudioGroup.Mode" /></c> or <c><see cref="P:Android.Net.Rtp.RtpStream.Mode" /></c>.
 The AudioGroup will go through these components and process them one by one
 within its execution loop. The loop consists of four steps. First, for each
 AudioStream not in <c><see cref="!:Android.Net.Rtp.RtpStream.MODE_SEND_ONLY" /></c>, decodes its incoming
 packets and stores in its buffer. Then, if the microphone is enabled,
 processes the recorded audio and stores in its buffer. Third, if the speaker
 is enabled, mixes all AudioStream buffers and plays back. Finally, for each
 AudioStream not in <c><see cref="!:Android.Net.Rtp.RtpStream.MODE_RECEIVE_ONLY" /></c>, mixes all other
 buffers and sends back the encoded packets. An AudioGroup does nothing if
 there is no AudioStream in it.

 </para>
      <para tool="javadoc-to-mdoc">Few things must be noticed before using these classes. The performance is
 highly related to the system load and the network bandwidth. Usually a
 simpler <c><see cref="T:Android.Net.Rtp.AudioCodec" /></c> costs fewer CPU cycles but requires more network
 bandwidth, and vise versa. Using two AudioStreams at the same time doubles
 not only the load but also the bandwidth. The condition varies from one
 device to another, and developers should choose the right combination in
 order to get the best result.</para>
      <para tool="javadoc-to-mdoc">It is sometimes useful to keep multiple AudioGroups at the same time. For
 example, a Voice over IP (VoIP) application might want to put a conference
 call on hold in order to make a new call but still allow people in the
 conference call talking to each other. This can be done easily using two
 AudioGroups, but there are some limitations. Since the speaker and the
 microphone are globally shared resources, only one AudioGroup at a time is
 allowed to run in a mode other than <c><see cref="!:Android.Net.Rtp.AudioGroup.MODE_ON_HOLD" /></c>. The others will
 be unable to acquire these resources and fail silently.</para>
      <para tool="javadoc-to-mdoc">Using this class requires
 <c><see cref="!:NoType:android/Manifest$permission;Href=../../../../reference/android/Manifest.permission.html#RECORD_AUDIO" /></c> permission. Developers
 should set the audio mode to <c><see cref="!:Android.Media.AudioManager.MODE_IN_COMMUNICATION" /></c>
 using <c><see cref="P:Android.Media.AudioManager.Mode" /></c> and change it back when none of
 the AudioGroups is in use.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Android.Net.Rtp.AudioStream" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/net/rtp/AudioGroup.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 12" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AudioGroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates an empty AudioGroup.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates an empty AudioGroup.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/rtp/AudioGroup.html#AudioGroup()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AudioGroup (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T}(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clear", "()V", "GetClearHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes every <c><see cref="T:Android.Net.Rtp.AudioStream" /></c> in this group.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Removes every <c><see cref="T:Android.Net.Rtp.AudioStream" /></c> in this group.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/rtp/AudioGroup.html#clear()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="GetStreams">
      <MemberSignature Language="C#" Value="public virtual Android.Net.Rtp.AudioStream[] GetStreams ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Net.Rtp.AudioStream[] GetStreams() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getStreams", "()[Landroid/net/rtp/AudioStream;", "GetGetStreamsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Rtp.AudioStream[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the <c><see cref="T:Android.Net.Rtp.AudioStream" /></c>s in this group.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the <c><see cref="T:Android.Net.Rtp.AudioStream" /></c>s in this group.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/rtp/AudioGroup.html#getStreams()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public virtual Android.Net.Rtp.AudioGroupMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Net.Rtp.AudioGroupMode Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMode", "()I", "GetGetModeHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setMode", "(I)V", "GetSetMode_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Rtp.AudioGroupMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current mode.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/net/rtp/AudioGroup.html#getMode()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the current mode.
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/net/rtp/AudioGroup.html#setMode(int)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Changes the current mode. It must be one of <c><see cref="!:Android.Net.Rtp.AudioGroup.MODE_ON_HOLD" /></c>,
 <c><see cref="!:Android.Net.Rtp.AudioGroup.MODE_MUTED" /></c>, <c><see cref="!:Android.Net.Rtp.AudioGroup.MODE_NORMAL" /></c>, and
 <c><see cref="!:Android.Net.Rtp.AudioGroup.MODE_ECHO_SUPPRESSION" /></c>.</para>
        </remarks>
        <since version="Added in API level 12" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mode is invalid.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mode is invalid.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mode is invalid.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mode is invalid.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mode is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SendDtmf">
      <MemberSignature Language="C#" Value="public virtual void SendDtmf (int e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendDtmf(int32 e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendDtmf", "(I)V", "GetSendDtmf_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>Sends a DTMF digit to every <c><see cref="T:Android.Net.Rtp.AudioStream" /></c> in this group.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sends a DTMF digit to every <c><see cref="T:Android.Net.Rtp.AudioStream" /></c> in this group. Currently
 only event <c>0</c> to <c>15</c> are supported.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/rtp/AudioGroup.html#sendDtmf(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 12" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the event is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
