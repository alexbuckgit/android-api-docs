<Type Name="PrintedPdfDocument" FullName="Android.Print.Pdf.PrintedPdfDocument">
  <TypeSignature Language="C#" Value="public class PrintedPdfDocument : Android.Graphics.Pdf.PdfDocument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PrintedPdfDocument extends Android.Graphics.Pdf.PdfDocument" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Graphics.Pdf.PdfDocument</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/print/pdf/PrintedPdfDocument", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="19">
    <summary>This class is a helper for creating a PDF file for given print
 attributes.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">This class is a helper for creating a PDF file for given print
 attributes. It is useful for implementing printing via the native
 Android graphics APIs.
 </para>
      <para tool="javadoc-to-mdoc">
 This class computes the page width, page height, and content rectangle
 from the provided print attributes and these precomputed values can be
 accessed via <c><see cref="P:Android.Print.Pdf.PrintedPdfDocument.PageWidth" /></c>, <c><see cref="P:Android.Print.Pdf.PrintedPdfDocument.PageHeight" /></c>, and
 <c><see cref="P:Android.Print.Pdf.PrintedPdfDocument.PageContentRect" /></c>, respectively. The <c><see cref="M:Android.Print.Pdf.PrintedPdfDocument.StartPage(System.Int32)" /></c>
 methods creates pages whose <c><see cref="!:NoType:android/graphics/pdf/PdfDocument$PageInfo;Href=../../../../reference/android/graphics/pdf/PdfDocument.PageInfo.html" /></c> is initialized with the
 precomputed values for width, height, and content rectangle.
 <example><code lang="java">
 // open a new document
 PrintedPdfDocument document = new PrintedPdfDocument(context,
         printAttributes);

 // start a page
 Page page = document.startPage(0);

 // draw something on the page
 View content = getContentView();
 content.draw(page.getCanvas());

 // finish the page
 document.finishPage(page);
 . . .
 // add more pages
 . . .
 // write the document content
 document.writeTo(getOutputStream());

 //close the document
 document.close();
 </code></example></para>
      <para tool="javadoc-to-mdoc">
 A typical use of the APIs looks like this:
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/print/pdf/PrintedPdfDocument.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintedPdfDocument (Android.Content.Context context, Android.Print.PrintAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, class Android.Print.PrintAttributes attributes) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/print/PrintAttributes;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attributes" Type="Android.Print.PrintAttributes" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>Creates a new document.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new document.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> You must close the document after you are
 done by calling <c><see cref="M:Android.Graphics.Pdf.PdfDocument.Close" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/print/pdf/PrintedPdfDocument.html#PrintedPdfDocument(android.content.Context, android.print.PrintAttributes)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PrintedPdfDocument (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageContentRect">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Rect PageContentRect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Graphics.Rect PageContentRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPageContentRect", "()Landroid/graphics/Rect;", "GetGetPageContentRectHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the content rectangle.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the content rectangle. This is the area of the page that
 contains printed data and is relative to the page top left.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/print/pdf/PrintedPdfDocument.html#getPageContentRect()" target="_blank">[Android Documentation]</a>
              <since version="Added in API level 19" />
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageHeight">
      <MemberSignature Language="C#" Value="public virtual int PageHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PageHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPageHeight", "()I", "GetGetPageHeightHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the page height.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the page height.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/print/pdf/PrintedPdfDocument.html#getPageHeight()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageWidth">
      <MemberSignature Language="C#" Value="public virtual int PageWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PageWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPageWidth", "()I", "GetGetPageWidthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the page width.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the page width.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/print/pdf/PrintedPdfDocument.html#getPageWidth()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartPage">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Pdf.PdfDocument.Page StartPage (int pageNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Pdf.PdfDocument/Page StartPage(int32 pageNumber) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startPage", "(I)Landroid/graphics/pdf/PdfDocument$Page;", "GetStartPage_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Pdf.PdfDocument+Page</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pageNumber">The page number. Must be a positive value.</param>
        <summary>Starts a new page.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Starts a new page. The page is created using width, height  and content
 rectangle computed from the print attributes passed in the constructor
 and the given page number to create an appropriate <c><see cref="!:NoType:android/graphics/pdf/PdfDocument$PageInfo;Href=../../../../reference/android/graphics/pdf/PdfDocument.PageInfo.html" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 After the page is created you can draw arbitrary content on the page's
 canvas which you can get by calling <c><see cref="!:NoType:android/graphics/pdf/PdfDocument$Page;Href=../../../../reference/android/graphics/pdf/PdfDocument.Page.html#getCanvas()" /></c>.
 After you are done drawing the content you should finish the page by calling
 <c><see cref="M:Android.Graphics.Pdf.PdfDocument.FinishPage(.Page)" /></c>. After the page is finished you should no longer
 access the page or its canvas.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> Do not call this method after <c><see cref="M:Android.Graphics.Pdf.PdfDocument.Close" /></c>.
 Also do not call this method if the last page returned by this method
 is not finished by calling <c><see cref="M:Android.Graphics.Pdf.PdfDocument.FinishPage(.Page)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/print/pdf/PrintedPdfDocument.html#startPage(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Graphics.Pdf.PdfDocument.FinishPage(.Page)" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>