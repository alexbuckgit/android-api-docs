<Type Name="HttpResponseCache" FullName="Android.Net.Http.HttpResponseCache">
  <TypeSignature Language="C#" Value="public sealed class HttpResponseCache : Java.Net.ResponseCache, IDisposable, Java.IO.ICloseable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpResponseCache extends Java.Net.ResponseCache implements class Android.Runtime.IJavaObject, class Java.IO.ICloseable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Net.ResponseCache</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.IO.ICloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/net/http/HttpResponseCache", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="13">
    <summary>Caches HTTP and HTTPS responses to the filesystem so they may be reused,
 saving time and bandwidth.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Caches HTTP and HTTPS responses to the filesystem so they may be reused,
 saving time and bandwidth. This class supports <c><see cref="T:Java.Net.HttpURLConnection" /></c> and <c><see cref="T:Javax.Net.Ssl.HttpsURLConnection" /></c>;
 there is no platform-provided cache for <c>DefaultHttpClient</c> or
 <c>AndroidHttpClient</c>.

 <format type="text/html"><h3>Installing an HTTP response cache</h3></format>
 Enable caching of all of your application's HTTP requests by installing the
 cache at application startup. For example, this code installs a 10 MiB cache
 in the <c><see cref="P:Android.Content.Context.CacheDir" /></c> of the filesystem}: <example><code lang="java">protected void onCreate(Bundle savedInstanceState) {
       ...

       try {
           File httpCacheDir = new File(context.getCacheDir(), "http");
           long httpCacheSize = 10 * 1024 * 1024; // 10 MiB
           HttpResponseCache.install(httpCacheDir, httpCacheSize);
        catch (IOException e) {
           Log.i(TAG, "HTTP response cache installation failed:" + e);
       }
   }

   protected void onStop() {
       ...

       HttpResponseCache cache = HttpResponseCache.getInstalled();
       if (cache != null) {
           cache.flush();
       }
   }}</code></example>
 This cache will evict entries as necessary to keep its size from exceeding
 10 MiB. The best cache size is application specific and depends on the size
 and frequency of the files being downloaded. Increasing the limit may improve
 the hit rate, but it may also just waste filesystem space!

 </para>
      <para tool="javadoc-to-mdoc">For some applications it may be preferable to create the cache in the
 external storage directory. <i>There are no access controls on the
 external storage directory so it should not be used for caches that could
 contain private data.</i> Although it often has more free space,
 external storage is optional and&amp;#8212;even if available&amp;#8212;can disappear
 during use. Retrieve the external cache directory using <c><see cref="P:Android.Content.Context.ExternalCacheDir" /></c>. If this method returns null,
 your application should fall back to either not caching or caching on
 non-external storage. If the external storage is removed during use, the
 cache hit rate will drop to zero and ongoing cache reads will fail.

 </para>
      <para tool="javadoc-to-mdoc">Flushing the cache forces its data to the filesystem. This ensures that
 all responses written to the cache will be readable the next time the
 activity starts.

 <format type="text/html"><h3>Cache Optimization</h3></format>
 To measure cache effectiveness, this class tracks three statistics:
 <list type="bullet"><item><term><i><c><see cref="P:Android.Net.Http.HttpResponseCache.RequestCount" /></c></i> the number
         of HTTP requests issued since this cache was created.
     </term></item><item><term><i><c><see cref="P:Android.Net.Http.HttpResponseCache.NetworkCount" /></c></i> the
         number of those requests that required network use.
     </term></item><item><term><i><c><see cref="P:Android.Net.Http.HttpResponseCache.HitCount" /></c></i> the number of
         those requests whose responses were served by the cache.
 </term></item></list>
 Sometimes a request will result in a conditional cache hit. If the cache
 contains a stale copy of the response, the client will issue a conditional
 <c>GET</c>. The server will then send either the updated response if it has
 changed, or a short 'not modified' response if the client's copy is still
 valid. Such responses increment both the network count and hit count.

 </para>
      <para tool="javadoc-to-mdoc">The best way to improve the cache hit rate is by configuring the web
 server to return cacheable responses. Although this client honors all  cache
 headers, it doesn't cache partial responses.

 <format type="text/html"><h3>Force a Network Response</h3></format>
 In some situations, such as after a user clicks a 'refresh' button, it may be
 necessary to skip the cache, and fetch data directly from the server. To force
 a full refresh, add the <c>no-cache</c> directive: <example><code lang="java">connection.addRequestProperty("Cache-Control", "no-cache");
 </code></example>
 If it is only necessary to force a cached response to be validated by the
 server, use the more efficient <c>max-age=0</c> instead: <example><code lang="java">connection.addRequestProperty("Cache-Control", "max-age=0");
 </code></example><format type="text/html"><h3>Force a Cache Response</h3></format>
 Sometimes you'll want to show resources if they are available immediately,
 but not otherwise. This can be used so your application can show
 <format type="text/html"><i>something</i></format> while waiting for the latest data to be downloaded. To
 restrict a request to locally-cached resources, add the <c>only-if-cached</c> directive: <example><code lang="java">try {
         connection.addRequestProperty("Cache-Control", "only-if-cached");
         InputStream cached = connection.getInputStream();
         // the resource was cached! show it
      catch (FileNotFoundException e) {
         // the resource was not cached
     }
 }</code></example>
 This technique works even better in situations where a stale response is
 better than no response. To permit stale cached responses, use the <c>max-stale</c> directive with the maximum staleness in seconds: <example><code lang="java">int maxStale = 60 * 60 * 24 * 28; // tolerate 4-weeks stale
         connection.addRequestProperty("Cache-Control", "max-stale=" + maxStale);
 </code></example><format type="text/html"><h3>Working With Earlier Releases</h3></format>
 This class was added in Android 4.0 (Ice Cream Sandwich). Use reflection to
 enable the response cache without impacting earlier releases: <example><code lang="java">try {
           File httpCacheDir = new File(context.getCacheDir(), "http");
           long httpCacheSize = 10 * 1024 * 1024; // 10 MiB
           Class.forName("android.net.http.HttpResponseCache")
                   .getMethod("install", File.class, long.class)
                   .invoke(null, httpCacheDir, httpCacheSize);
        catch (Exception httpResponseCacheNotAvailable) {
       }}</code></example></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/net/http/HttpResponseCache.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 13" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Uninstalls the cache and releases any active resources.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Uninstalls the cache and releases any active resources. Stored contents
 will remain on the filesystem.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/http/HttpResponseCache.html#close()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("delete", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Uninstalls the cache and deletes all of its stored contents.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Uninstalls the cache and deletes all of its stored contents.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/http/HttpResponseCache.html#delete()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("flush", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Force buffered operations to the filesystem.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Force buffered operations to the filesystem. This ensures that responses
 written to the cache will be available the next time the cache is opened,
 even if this process is killed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/http/HttpResponseCache.html#flush()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public override Java.Net.CacheResponse Get (Java.Net.URI uri, string requestMethod, System.Collections.Generic.IDictionary&lt;string,System.Collections.Generic.IList&lt;string&gt;&gt; requestHeaders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Net.CacheResponse Get(class Java.Net.URI uri, string requestMethod, class System.Collections.Generic.IDictionary`2&lt;string, class System.Collections.Generic.IList`1&lt;string&gt;&gt; requestHeaders) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("get", "(Ljava/net/URI;Ljava/lang/String;Ljava/util/Map;)Ljava/net/CacheResponse;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.CacheResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Java.Net.URI" />
        <Parameter Name="requestMethod" Type="System.String" />
        <Parameter Name="requestHeaders" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Collections.Generic.IList&lt;System.String&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="uri">To be added.</param>
        <param name="requestMethod">To be added.</param>
        <param name="requestHeaders">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HitCount">
      <MemberSignature Language="C#" Value="public int HitCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HitCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getHitCount", "()I", "GetGetHitCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of HTTP requests whose response was provided by the
 cache.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the number of HTTP requests whose response was provided by the
 cache. This may include conditional <c>GET</c> requests that were
 validated over the network.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/http/HttpResponseCache.html#getHitCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public static Android.Net.Http.HttpResponseCache Install (Java.IO.File directory, long maxSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Net.Http.HttpResponseCache Install(class Java.IO.File directory, int64 maxSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("install", "(Ljava/io/File;J)Landroid/net/http/HttpResponseCache;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Http.HttpResponseCache</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="Java.IO.File" />
        <Parameter Name="maxSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="directory">the directory to hold cache data.</param>
        <param name="maxSize">the maximum size of the cache in bytes.</param>
        <summary>Creates a new HTTP response cache and sets it as the system default cache.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new HTTP response cache and sets it as the system default cache.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/http/HttpResponseCache.html#install(java.io.File, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
        <exception cref="T:Java.IO.IOException">if <c>directory</c> cannot be used for this cache.
     Most applications should respond to this exception by logging a
     warning.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Installed">
      <MemberSignature Language="C#" Value="public static Android.Net.Http.HttpResponseCache Installed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Net.Http.HttpResponseCache Installed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getInstalled", "()Landroid/net/http/HttpResponseCache;", "GetGetInstalledHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Http.HttpResponseCache</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the currently-installed <c>HttpResponseCache</c>, or null if
 there is no cache installed or it is not a <c>HttpResponseCache</c>.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the currently-installed <c>HttpResponseCache</c>, or null if
 there is no cache installed or it is not a <c>HttpResponseCache</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/http/HttpResponseCache.html#getInstalled()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
      </Docs>
    </Member>
    <Member MemberName="MaxSize">
      <MemberSignature Language="C#" Value="public long MaxSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 MaxSize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("maxSize", "()J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the maximum number of bytes that this cache should use to store
 its data.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the maximum number of bytes that this cache should use to store
 its data.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/http/HttpResponseCache.html#maxSize()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
      </Docs>
    </Member>
    <Member MemberName="NetworkCount">
      <MemberSignature Language="C#" Value="public int NetworkCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NetworkCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNetworkCount", "()I", "GetGetNetworkCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of HTTP requests that required the network to either
 supply a response or validate a locally cached response.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the number of HTTP requests that required the network to either
 supply a response or validate a locally cached response.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/http/HttpResponseCache.html#getNetworkCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public override Java.Net.CacheRequest Put (Java.Net.URI uri, Java.Net.URLConnection urlConnection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Net.CacheRequest Put(class Java.Net.URI uri, class Java.Net.URLConnection urlConnection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("put", "(Ljava/net/URI;Ljava/net/URLConnection;)Ljava/net/CacheRequest;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.CacheRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Java.Net.URI" />
        <Parameter Name="urlConnection" Type="Java.Net.URLConnection" />
      </Parameters>
      <Docs>
        <param name="uri">the reference to the requested resource.</param>
        <param name="urlConnection">the connection to fetch the response.</param>
        <summary>Allows the protocol handler to cache data after retrieving resources.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Allows the protocol handler to cache data after retrieving resources. The
 <c>ResponseCache</c> decides whether the resource data should be cached
 or not. If so, this method returns a <c>CacheRequest</c> to write the
 resource data to. Otherwise, this method returns <c>null</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/http/HttpResponseCache.html#put(java.net.URI, java.net.URLConnection)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="RequestCount">
      <MemberSignature Language="C#" Value="public int RequestCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RequestCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRequestCount", "()I", "GetGetRequestCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the total number of HTTP requests that were made.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the total number of HTTP requests that were made. This includes
 both client requests and requests that were made on the client's behalf
 to handle a redirects and retries.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/http/HttpResponseCache.html#getRequestCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public long Size ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Size() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("size", "()J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the number of bytes currently being used to store the values in
 this cache.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the number of bytes currently being used to store the values in
 this cache. This may be greater than the <c><see cref="M:Android.Net.Http.HttpResponseCache.MaxSize" /></c> if a background
 deletion is pending. <c>-1</c> is returned if the size cannot be determined.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/http/HttpResponseCache.html#size()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 13" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
