<Type Name="IDocumentFragment" FullName="Org.W3c.Dom.IDocumentFragment">
  <TypeSignature Language="C#" Value="public interface IDocumentFragment : IDisposable, Org.W3c.Dom.INode" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDocumentFragment implements class Android.Runtime.IJavaObject, class Org.W3c.Dom.INode, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Org.W3c.Dom.INode</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("org/w3c/dom/DocumentFragment", "", "Org.W3c.Dom.IDocumentFragmentInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><c>DocumentFragment</c> is a "lightweight" or "minimal"
 <c>Document</c> object.</summary>
    <remarks><para tool="javadoc-to-mdoc"><c>DocumentFragment</c> is a "lightweight" or "minimal"
 <c>Document</c> object. It is very common to want to be able to
 extract a portion of a document's tree or to create a new fragment of a
 document. Imagine implementing a user command like cut or rearranging a
 document by moving fragments around. It is desirable to have an object
 which can hold such fragments and it is quite natural to use a Node for
 this purpose. While it is true that a <c>Document</c> object could
 fulfill this role, a <c>Document</c> object can potentially be a
 heavyweight object, depending on the underlying implementation. What is
 really needed for this is a very lightweight object.
 <c>DocumentFragment</c> is such an object.
 </para><para tool="javadoc-to-mdoc">Furthermore, various operations -- such as inserting nodes as children
 of another <c>Node</c> -- may take <c>DocumentFragment</c>
 objects as arguments; this results in all the child nodes of the
 <c>DocumentFragment</c> being moved to the child list of this node.
 </para><para tool="javadoc-to-mdoc">The children of a <c>DocumentFragment</c> node are zero or more
 nodes representing the tops of any sub-trees defining the structure of
 the document. <c>DocumentFragment</c> nodes do not need to be
 well-formed XML documents (although they do need to follow the rules
 imposed upon well-formed XML parsed entities, which can have multiple top
 nodes). For example, a <c>DocumentFragment</c> might have only one
 child and that child node could be a <c>Text</c> node. Such a
 structure model represents neither an HTML document nor a well-formed XML
 document.
 </para><para tool="javadoc-to-mdoc">When a <c>DocumentFragment</c> is inserted into a
 <c>Document</c> (or indeed any other <c>Node</c> that may
 take children) the children of the <c>DocumentFragment</c> and not
 the <c>DocumentFragment</c> itself are inserted into the
 <c>Node</c>. This makes the <c>DocumentFragment</c> very
 useful when the user wishes to create nodes that are siblings; the
 <c>DocumentFragment</c> acts as the parent of these nodes so that
 the user can use the standard methods from the <c>Node</c>
 interface, such as <c>Node.insertBefore</c> and
 <c>Node.appendChild</c>.
 </para><para tool="javadoc-to-mdoc">See also the .
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/w3c/dom/DocumentFragment.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members />
</Type>
