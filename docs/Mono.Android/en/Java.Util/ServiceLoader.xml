<Type Name="ServiceLoader" FullName="Java.Util.ServiceLoader">
  <TypeSignature Language="C#" Value="public sealed class ServiceLoader : Java.Lang.Object, IDisposable, Java.Lang.IIterable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ServiceLoader extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.Lang.IIterable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.Lang.IIterable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/ServiceLoader", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="9">
    <summary>A service-provider loader.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A service-provider loader.

 </para>
      <para tool="javadoc-to-mdoc">A service provider is a factory for creating all known implementations of a particular
 class or interface <c>S</c>. The known implementations are read from a configuration file in
 <c>META-INF/services/</c>. The file's name should match the class' binary name (such as
 <c>java.util.Outer$Inner</c>).

 </para>
      <para tool="javadoc-to-mdoc">The file format is as follows.
 The file's character encoding must be UTF-8.
 Whitespace is ignored, and <c>#</c> is used to begin a comment that continues to the
 next newline.
 Lines that are empty after comment removal and whitespace trimming are ignored.
 Otherwise, each line contains the binary name of one implementation class.
 Duplicate entries are ignored, but entries are otherwise returned in order (that is, the file
 is treated as an ordered set).

 </para>
      <para tool="javadoc-to-mdoc">Given these classes:
 <example><code lang="java">
 package a.b.c;
 public interface MyService { ... }
 public class MyImpl1 implements MyService { ... }
 public class MyImpl2 implements MyService { ... }
 </code></example>
 And this configuration file (stored as <c>META-INF/services/a.b.c.MyService</c>):
 <example><code lang="java">
 # Known MyService providers.
 a.b.c.MyImpl1  # The original implementation for handling "bar"s.
 a.b.c.MyImpl2  # A later implementation for "foo"s.
 </code></example>
 You might use <c>ServiceProvider</c> something like this:
 <example><code lang="java">
   for (MyService service : ServiceLoader.load(MyService.class)) {
     if (service.supports(o)) {
       return service.handle(o);
     }
   }
 </code></example></para>
      <para tool="javadoc-to-mdoc">Note that each iteration creates new instances of the various service implementations, so
 any heavily-used code will likely want to cache the known implementations itself and reuse them.
 Note also that the candidate classes are instantiated lazily as you call <c>next</c> on the
 iterator: construction of the iterator itself does not instantiate any of the providers.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/ServiceLoader.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 9" />
  </Docs>
  <Members>
    <Member MemberName="Iterator">
      <MemberSignature Language="C#" Value="public Java.Util.IIterator Iterator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.IIterator Iterator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("iterator", "()Ljava/util/Iterator;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IIterator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an iterator over all the service providers offered by this service loader.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an iterator over all the service providers offered by this service loader.
 Note that <c>hasNext</c> and <c>next</c> may throw if the configuration is invalid.

 </para>
          <para tool="javadoc-to-mdoc">Each iterator will return new instances of the classes it iterates over, so callers
 may want to cache the results of a single call to this method rather than call it
 repeatedly.

 </para>
          <para tool="javadoc-to-mdoc">The returned iterator does not support <c>remove</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/ServiceLoader.html#iterator()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static Java.Util.ServiceLoader Load (Java.Lang.Class service);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.ServiceLoader Load(class Java.Lang.Class service) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("load", "(Ljava/lang/Class;)Ljava/util/ServiceLoader;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.ServiceLoader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="service">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static Java.Util.ServiceLoader Load (Java.Lang.Class service, Java.Lang.ClassLoader classLoader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.ServiceLoader Load(class Java.Lang.Class service, class Java.Lang.ClassLoader classLoader) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("load", "(Ljava/lang/Class;Ljava/lang/ClassLoader;)Ljava/util/ServiceLoader;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.ServiceLoader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="Java.Lang.Class" />
        <Parameter Name="classLoader" Type="Java.Lang.ClassLoader" />
      </Parameters>
      <Docs>
        <param name="service">To be added.</param>
        <param name="classLoader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadInstalled">
      <MemberSignature Language="C#" Value="public static Java.Util.ServiceLoader LoadInstalled (Java.Lang.Class service);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.ServiceLoader LoadInstalled(class Java.Lang.Class service) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("loadInstalled", "(Ljava/lang/Class;)Ljava/util/ServiceLoader;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.ServiceLoader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="service">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reload">
      <MemberSignature Language="C#" Value="public void Reload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reload() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reload", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalidates the cache of known service provider class names.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Invalidates the cache of known service provider class names.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/ServiceLoader.html#reload()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>