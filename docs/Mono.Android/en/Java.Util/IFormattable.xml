<Type Name="IFormattable" FullName="Java.Util.IFormattable">
  <TypeSignature Language="C#" Value="public interface IFormattable : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormattable implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Util.IFormattable" />
  <TypeSignature Language="F#" Value="type IFormattable = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/Formattable", "", "Java.Util.IFormattableInvoker", ApiSince=1)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Classes that handle custom formatting for the 's' specifier of <c>Formatter</c>
 should implement the <c>Formattable</c> interface.</summary>
    <remarks>
      <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="http://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="FormatTo">
      <MemberSignature Language="C#" Value="public void FormatTo (Java.Util.Formatter formatter, Java.Util.FormatFlags flags, int width, int precision);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FormatTo(class Java.Util.Formatter formatter, valuetype Java.Util.FormatFlags flags, int32 width, int32 precision) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Util.IFormattable.FormatTo(Java.Util.Formatter,Java.Util.FormatFlags,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member FormatTo : Java.Util.Formatter * Java.Util.FormatFlags * int * int -&gt; unit" Usage="iFormattable.FormatTo (formatter, flags, width, precision)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("formatTo", "(Ljava/util/Formatter;III)V", "GetFormatTo_Ljava_util_Formatter_IIIHandler:Java.Util.IFormattableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatter" Type="Java.Util.Formatter" />
        <Parameter Name="flags" Type="Java.Util.FormatFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="precision" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="formatter">the <c>Formatter</c> to use.</param>
        <param name="flags">the flags applied to the output format, which is a bitmask
            that is any combination of <c>FormattableFlags.LEFT_JUSTIFY</c>,
            <c>FormattableFlags.UPPERCASE</c>, and <c>FormattableFlags.ALTERNATE</c>. If
            no such flag is set, the output is formatted by the default
            formatting of the implementation.</param>
        <param name="width">the minimum number of characters that should be written to the
            output. If the length of the converted value is less than <c>width</c>
            Additional space characters (' ') are added to the output if the
            as needed to make up the difference. These spaces are added at the
            beginning by default unless the flag
            FormattableFlags.LEFT_JUSTIFY is set, which denotes that
            padding should be added at the end. If width is -1, then
            minimum length is not enforced.</param>
        <param name="precision">the maximum number of characters that can be written to the
            output. The length of the output is trimmed down to this size
            before the width padding is applied. If the precision
            is -1, then maximum length is not enforced.</param>
        <summary>Formats the object using the specified <c>Formatter</c>.</summary>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="http://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.IllegalFormatException">if any of the parameters is not supported.
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
