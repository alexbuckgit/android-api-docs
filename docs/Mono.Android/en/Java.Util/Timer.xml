<Type Name="Timer" FullName="Java.Util.Timer">
  <TypeSignature Language="C#" Value="public class Timer : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/Timer", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Timers schedule one-shot or recurring <c><see cref="T:Java.Util.TimerTask" /></c> for execution.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Timers schedule one-shot or recurring <c><see cref="T:Java.Util.TimerTask" /></c> for execution.
 Prefer <c><see cref="T:Java.Util.Concurrent.ScheduledThreadPoolExecutor" /></c> for new code.

 </para>
      <para tool="javadoc-to-mdoc">Each timer has one thread on which tasks are executed sequentially. When
 this thread is busy running a task, runnable tasks may be subject to delays.

 </para>
      <para tool="javadoc-to-mdoc">One-shot tasks are scheduled to run at an absolute time or after a relative
 delay.

 </para>
      <para tool="javadoc-to-mdoc">Recurring tasks are scheduled with either a fixed period or a fixed rate:
 <list type="bullet"><item><term>With the default <i>fixed-period execution</i>, each
       successive run of a task is scheduled relative to the start time of
       the previous run, so two runs are never fired closer together in time
       than the specified <c>period</c>.
   </term></item><item><term>With <i>fixed-rate execution</i>, the start time of each
       successive run of a task is scheduled without regard for when the
       previous run took place. This may result in a series of bunched-up runs
       (one launched immediately after another) if delays prevent the timer
       from starting tasks on time.
 </term></item></list></para>
      <para tool="javadoc-to-mdoc">When a timer is no longer needed, users should call <c><see cref="M:Java.Util.Timer.Cancel" /></c>, which
 releases the timer's thread and other resources. Timers not explicitly
 cancelled may hold resources indefinitely.

 </para>
      <para tool="javadoc-to-mdoc">This class does not offer guarantees about the real-time nature of task
 scheduling. Multiple threads can share a single timer without
 synchronization.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/Timer.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a new non-daemon <c>Timer</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new non-daemon <c>Timer</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Timer.html#Timer()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (bool isDaemon);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isDaemon) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Z)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="isDaemon" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isDaemon">To be added.</param>
        <summary>Creates a new <c>Timer</c> which may be specified to be run as a daemon thread.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new <c>Timer</c> which may be specified to be run as a daemon thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Timer.html#Timer(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Creates a new named <c>Timer</c> which does not run as a daemon thread.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new named <c>Timer</c> which does not run as a daemon thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Timer.html#Timer(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if <c>name == null</c></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Timer (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (string name, bool isDaemon);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool isDaemon) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;Z)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="isDaemon" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="isDaemon">To be added.</param>
        <summary>Creates a new named <c>Timer</c> which may be specified to be run as a
 daemon thread.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new named <c>Timer</c> which may be specified to be run as a
 daemon thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Timer.html#Timer(java.lang.String, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if <c>name == null</c></exception>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public virtual void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("cancel", "()V", "GetCancelHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels the <c>Timer</c> and all scheduled tasks.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Cancels the <c>Timer</c> and all scheduled tasks. If there is a
 currently running task it is not affected. No more tasks may be scheduled
 on this <c>Timer</c>. Subsequent calls do nothing.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Timer.html#cancel()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public virtual int Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Purge() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("purge", "()I", "GetPurgeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all canceled tasks from the task queue.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Removes all canceled tasks from the task queue. If there are no
 other references on the tasks, then after this call they are free
 to be garbage collected.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Timer.html#purge()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public virtual void Schedule (Java.Util.TimerTask task, Java.Util.Date when);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Schedule(class Java.Util.TimerTask task, class Java.Util.Date when) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("schedule", "(Ljava/util/TimerTask;Ljava/util/Date;)V", "GetSchedule_Ljava_util_TimerTask_Ljava_util_Date_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.TimerTask" />
        <Parameter Name="when" Type="Java.Util.Date" />
      </Parameters>
      <Docs>
        <param name="task">the task to schedule.</param>
        <param name="when">time of execution.</param>
        <summary tool="true">Schedule a task for single execution.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Schedule a task for single execution. If <c>when</c> is less than the
 current time, it will be scheduled to be executed as soon as possible.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Timer.html#schedule(java.util.TimerTask, java.util.Date)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>when.getTime() </c>.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Timer</c> has been canceled, or if the task has been
                scheduled or canceled.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public virtual void Schedule (Java.Util.TimerTask task, long delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Schedule(class Java.Util.TimerTask task, int64 delay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("schedule", "(Ljava/util/TimerTask;J)V", "GetSchedule_Ljava_util_TimerTask_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.TimerTask" />
        <Parameter Name="delay" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="task">the task to schedule.</param>
        <param name="delay">amount of time in milliseconds before execution.</param>
        <summary>Schedule a task for single execution after a specified delay.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Schedule a task for single execution after a specified delay.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Timer.html#schedule(java.util.TimerTask, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>delay </c>.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Timer</c> has been canceled, or if the task has been
                scheduled or canceled.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public virtual void Schedule (Java.Util.TimerTask task, Java.Util.Date when, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Schedule(class Java.Util.TimerTask task, class Java.Util.Date when, int64 period) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("schedule", "(Ljava/util/TimerTask;Ljava/util/Date;J)V", "GetSchedule_Ljava_util_TimerTask_Ljava_util_Date_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.TimerTask" />
        <Parameter Name="when" Type="Java.Util.Date" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="task">the task to schedule.</param>
        <param name="when">time of first execution.</param>
        <param name="period">amount of time in milliseconds between subsequent executions.</param>
        <summary>Schedule a task for repeated fixed-delay execution after a specific time
 has been reached.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Schedule a task for repeated fixed-delay execution after a specific time
 has been reached.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Timer.html#schedule(java.util.TimerTask, java.util.Date, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>when.getTime() </c> or <c>period &lt;= 0</c>.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Timer</c> has been canceled, or if the task has been
                scheduled or canceled.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public virtual void Schedule (Java.Util.TimerTask task, long delay, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Schedule(class Java.Util.TimerTask task, int64 delay, int64 period) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("schedule", "(Ljava/util/TimerTask;JJ)V", "GetSchedule_Ljava_util_TimerTask_JJHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.TimerTask" />
        <Parameter Name="delay" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="task">the task to schedule.</param>
        <param name="delay">amount of time in milliseconds before first execution.</param>
        <param name="period">amount of time in milliseconds between subsequent executions.</param>
        <summary>Schedule a task for repeated fixed-delay execution after a specific delay.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Schedule a task for repeated fixed-delay execution after a specific delay.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Timer.html#schedule(java.util.TimerTask, long, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>delay </c> or <c>period &lt;= 0</c>.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Timer</c> has been canceled, or if the task has been
                scheduled or canceled.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ScheduleAtFixedRate">
      <MemberSignature Language="C#" Value="public virtual void ScheduleAtFixedRate (Java.Util.TimerTask task, Java.Util.Date when, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScheduleAtFixedRate(class Java.Util.TimerTask task, class Java.Util.Date when, int64 period) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("scheduleAtFixedRate", "(Ljava/util/TimerTask;Ljava/util/Date;J)V", "GetScheduleAtFixedRate_Ljava_util_TimerTask_Ljava_util_Date_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.TimerTask" />
        <Parameter Name="when" Type="Java.Util.Date" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="task">the task to schedule.</param>
        <param name="when">time of first execution.</param>
        <param name="period">amount of time in milliseconds between subsequent executions.</param>
        <summary tool="true">Schedule a task for repeated fixed-rate execution after a specific time
 has been reached.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Schedule a task for repeated fixed-rate execution after a specific time
 has been reached.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Timer.html#scheduleAtFixedRate(java.util.TimerTask, java.util.Date, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>when.getTime() </c> or <c>period &lt;= 0</c>.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Timer</c> has been canceled, or if the task has been
                scheduled or canceled.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ScheduleAtFixedRate">
      <MemberSignature Language="C#" Value="public virtual void ScheduleAtFixedRate (Java.Util.TimerTask task, long delay, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScheduleAtFixedRate(class Java.Util.TimerTask task, int64 delay, int64 period) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("scheduleAtFixedRate", "(Ljava/util/TimerTask;JJ)V", "GetScheduleAtFixedRate_Ljava_util_TimerTask_JJHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.TimerTask" />
        <Parameter Name="delay" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="task">the task to schedule.</param>
        <param name="delay">amount of time in milliseconds before first execution.</param>
        <param name="period">amount of time in milliseconds between subsequent executions.</param>
        <summary>Schedule a task for repeated fixed-rate execution after a specific delay
 has passed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Schedule a task for repeated fixed-rate execution after a specific delay
 has passed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/Timer.html#scheduleAtFixedRate(java.util.TimerTask, long, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>delay </c> or <c>period &lt;= 0</c>.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if the <c>Timer</c> has been canceled, or if the task has been
                scheduled or canceled.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
