<Type Name="IReadWriteLock" FullName="Java.Util.Concurrent.Locks.IReadWriteLock">
  <TypeSignature Language="C#" Value="public interface IReadWriteLock : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReadWriteLock implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/locks/ReadWriteLock", "", "Java.Util.Concurrent.Locks.IReadWriteLockInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <c>ReadWriteLock</c> maintains a pair of associated <c><see cref="T:Java.Util.Concurrent.Locks.ILock" /></c>, one for read-only operations and one for writing.</summary>
    <remarks><para tool="javadoc-to-mdoc">A <c>ReadWriteLock</c> maintains a pair of associated <c><see cref="T:Java.Util.Concurrent.Locks.ILock" /></c>, one for read-only operations and one for writing.
 The <c><see cref="M:Java.Util.Concurrent.Locks.IReadWriteLock.ReadLock" /></c> may be held simultaneously by
 multiple reader threads, so long as there are no writers.  The
 <c><see cref="M:Java.Util.Concurrent.Locks.IReadWriteLock.WriteLock" /></c> is exclusive.

 </para><para tool="javadoc-to-mdoc">All <c>ReadWriteLock</c> implementations must guarantee that
 the memory synchronization effects of <c>writeLock</c> operations
 (as specified in the <c><see cref="T:Java.Util.Concurrent.Locks.ILock" /></c> interface) also hold with respect
 to the associated <c>readLock</c>. That is, a thread successfully
 acquiring the read lock will see all updates made upon previous
 release of the write lock.

 </para><para tool="javadoc-to-mdoc">A read-write lock allows for a greater level of concurrency in
 accessing shared data than that permitted by a mutual exclusion lock.
 It exploits the fact that while only a single thread at a time (a
 <i>writer</i> thread) can modify the shared data, in many cases any
 number of threads can concurrently read the data (hence <i>reader</i>
 threads).
 In theory, the increase in concurrency permitted by the use of a read-write
 lock will lead to performance improvements over the use of a mutual
 exclusion lock. In practice this increase in concurrency will only be fully
 realized on a multi-processor, and then only if the access patterns for
 the shared data are suitable.

 </para><para tool="javadoc-to-mdoc">Whether or not a read-write lock will improve performance over the use
 of a mutual exclusion lock depends on the frequency that the data is
 read compared to being modified, the duration of the read and write
 operations, and the contention for the data - that is, the number of
 threads that will try to read or write the data at the same time.
 For example, a collection that is initially populated with data and
 thereafter infrequently modified, while being frequently searched
 (such as a directory of some kind) is an ideal candidate for the use of
 a read-write lock. However, if updates become frequent then the data
 spends most of its time being exclusively locked and there is little, if any
 increase in concurrency. Further, if the read operations are too short
 the overhead of the read-write lock implementation (which is inherently
 more complex than a mutual exclusion lock) can dominate the execution
 cost, particularly as many read-write lock implementations still serialize
 all threads through a small section of code. Ultimately, only profiling
 and measurement will establish whether the use of a read-write lock is
 suitable for your application.


 </para><para tool="javadoc-to-mdoc">Although the basic operation of a read-write lock is straight-forward,
 there are many policy decisions that an implementation must make, which
 may affect the effectiveness of the read-write lock in a given application.
 Examples of these policies include:
 <list type="bullet"><item><term>Determining whether to grant the read lock or the write lock, when
 both readers and writers are waiting, at the time that a writer releases
 the write lock. Writer preference is common, as writes are expected to be
 short and infrequent. Reader preference is less common as it can lead to
 lengthy delays for a write if the readers are frequent and long-lived as
 expected. Fair, or "in-order" implementations are also possible.

 </term></item><item><term>Determining whether readers that request the read lock while a
 reader is active and a writer is waiting, are granted the read lock.
 Preference to the reader can delay the writer indefinitely, while
 preference to the writer can reduce the potential for concurrency.

 </term></item><item><term>Determining whether the locks are reentrant: can a thread with the
 write lock reacquire it? Can it acquire a read lock while holding the
 write lock? Is the read lock itself reentrant?

 </term></item><item><term>Can the write lock be downgraded to a read lock without allowing
 an intervening writer? Can a read lock be upgraded to a write lock,
 in preference to other waiting readers or writers?

 </term></item></list>
 You should consider all of these things when evaluating the suitability
 of a given implementation for your application.</para><format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="T:Java.Util.Concurrent.Locks.ReentrantReadWriteLock" /></c></term></item><item><term><c><see cref="T:Java.Util.Concurrent.Locks.ILock" /></c></term></item><item><term><c><see cref="T:Java.Util.Concurrent.Locks.ReentrantLock" /></c></term></item></list><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/util/concurrent/locks/ReadWriteLock.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="public Java.Util.Concurrent.Locks.ILock ReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.Locks.ILock ReadLock() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("readLock", "()Ljava/util/concurrent/locks/Lock;", "GetReadLockHandler:Java.Util.Concurrent.Locks.IReadWriteLockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.Locks.ILock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the lock used for reading.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns the lock used for reading.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/util/concurrent/locks/ReadWriteLock.html#readLock()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="public Java.Util.Concurrent.Locks.ILock WriteLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.Locks.ILock WriteLock() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("writeLock", "()Ljava/util/concurrent/locks/Lock;", "GetWriteLockHandler:Java.Util.Concurrent.Locks.IReadWriteLockInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.Locks.ILock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the lock used for writing.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns the lock used for writing.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/util/concurrent/locks/ReadWriteLock.html#writeLock()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
