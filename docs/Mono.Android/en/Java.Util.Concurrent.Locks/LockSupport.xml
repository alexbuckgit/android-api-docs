<Type Name="LockSupport" FullName="Java.Util.Concurrent.Locks.LockSupport">
  <TypeSignature Language="C#" Value="public class LockSupport : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LockSupport extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/locks/LockSupport", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Basic thread blocking primitives for creating locks and other
 synchronization classes.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Basic thread blocking primitives for creating locks and other
 synchronization classes.

 </para>
      <para tool="javadoc-to-mdoc">This class associates, with each thread that uses it, a permit
 (in the sense of the <c><see cref="T:Java.Util.Concurrent.Semaphore" /></c> class). A call to <c>park</c> will return immediately
 if the permit is available, consuming it in the process; otherwise
 it <i>may</i> block.  A call to <c>unpark</c> makes the permit
 available, if it was not already available. (Unlike with Semaphores
 though, permits do not accumulate. There is at most one.)

 </para>
      <para tool="javadoc-to-mdoc">Methods <c>park</c> and <c>unpark</c> provide efficient
 means of blocking and unblocking threads that do not encounter the
 problems that cause the deprecated methods <c>Thread.suspend</c>
 and <c>Thread.resume</c> to be unusable for such purposes: Races
 between one thread invoking <c>park</c> and another thread trying
 to <c>unpark</c> it will preserve liveness, due to the
 permit. Additionally, <c>park</c> will return if the caller's
 thread was interrupted, and timeout versions are supported. The
 <c>park</c> method may also return at any other time, for "no
 reason", so in general must be invoked within a loop that rechecks
 conditions upon return. In this sense <c>park</c> serves as an
 optimization of a "busy wait" that does not waste as much time
 spinning, but must be paired with an <c>unpark</c> to be
 effective.

 </para>
      <para tool="javadoc-to-mdoc">The three forms of <c>park</c> each also support a
 <c>blocker</c> object parameter. This object is recorded while
 the thread is blocked to permit monitoring and diagnostic tools to
 identify the reasons that threads are blocked. (Such tools may
 access blockers using method <c><see cref="M:Java.Util.Concurrent.Locks.LockSupport.GetBlocker(Java.Lang.Thread)" /></c>.) The use of these
 forms rather than the original forms without this parameter is
 strongly encouraged. The normal argument to supply as a
 <c>blocker</c> within a lock implementation is <c>this</c>.

 </para>
      <para tool="javadoc-to-mdoc">These methods are designed to be used as tools for creating
 higher-level synchronization utilities, and are not in themselves
 useful for most concurrency control applications.  The <c>park</c>
 method is designed for use only in constructions of the form:

  <example><code lang="java">while (!canProceed()) { ... LockSupport.park(this); }</code></example>

 where neither <c>canProceed</c> nor any other actions prior to the
 call to <c>park</c> entail locking or blocking.  Because only one
 permit is associated with each thread, any intermediary uses of
 <c>park</c> could interfere with its intended effects.

 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Sample Usage.</b>
        </format> Here is a sketch of a first-in-first-out
 non-reentrant lock class:
  <example><code lang="java">class FIFOMutex {
   private final AtomicBoolean locked = new AtomicBoolean(false);
   private final Queue waiters
     = new ConcurrentLinkedQueue();

   public void lock() {
     boolean wasInterrupted = false;
     Thread current = Thread.currentThread();
     waiters.add(current);

     // Block while not first in queue or cannot acquire lock
     while (waiters.peek() != current ||
            !locked.compareAndSet(false, true)) {
       LockSupport.park(this);
       if (Thread.interrupted()) // ignore interrupts while waiting
         wasInterrupted = true;
     

     waiters.remove();
     if (wasInterrupted)          // reassert interrupt status on exit
       current.interrupt();
   }

   public void unlock() {
     locked.set(false);
     LockSupport.unpark(waiters.peek());
   }
 }}</code></example></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/locks/LockSupport.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LockSupport (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlocker">
      <MemberSignature Language="C#" Value="public static Java.Lang.Object GetBlocker (Java.Lang.Thread t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Lang.Object GetBlocker(class Java.Lang.Thread t) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getBlocker", "(Ljava/lang/Thread;)Ljava/lang/Object;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Java.Lang.Thread" />
      </Parameters>
      <Docs>
        <param name="t">the thread</param>
        <summary>Returns the blocker object supplied to the most recent
 invocation of a park method that has not yet unblocked, or null
 if not blocked.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the blocker object supplied to the most recent
 invocation of a park method that has not yet unblocked, or null
 if not blocked.  The value returned is just a momentary
 snapshot -- the thread may have since unblocked or blocked on a
 different blocker object.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/LockSupport.html#getBlocker(java.lang.Thread)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.NullPointerException">if argument is null</exception>
      </Docs>
    </Member>
    <Member MemberName="Park">
      <MemberSignature Language="C#" Value="public static void Park ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Park() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("park", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disables the current thread for thread scheduling purposes unless the
 permit is available.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disables the current thread for thread scheduling purposes unless the
 permit is available.

 </para>
          <para tool="javadoc-to-mdoc">If the permit is available then it is consumed and the call
 returns immediately; otherwise the current thread becomes disabled
 for thread scheduling purposes and lies dormant until one of three
 things happens:

 <list type="bullet"><item><term>Some other thread invokes <c><see cref="M:Java.Util.Concurrent.Locks.LockSupport.Unpark(Java.Lang.Thread)" /></c> with the
 current thread as the target; or

 </term></item><item><term>Some other thread <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>
 the current thread; or

 </term></item><item><term>The call spuriously (that is, for no reason) returns.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">This method does <i>not</i> report which of these caused the
 method to return. Callers should re-check the conditions which caused
 the thread to park in the first place. Callers may also determine,
 for example, the interrupt status of the thread upon return.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/LockSupport.html#park()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="Park">
      <MemberSignature Language="C#" Value="public static void Park (Java.Lang.Object blocker);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Park(class Java.Lang.Object blocker) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("park", "(Ljava/lang/Object;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="blocker">the synchronization object responsible for this
        thread parking</param>
        <summary>Disables the current thread for thread scheduling purposes unless the
 permit is available.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disables the current thread for thread scheduling purposes unless the
 permit is available.

 </para>
          <para tool="javadoc-to-mdoc">If the permit is available then it is consumed and the call returns
 immediately; otherwise
 the current thread becomes disabled for thread scheduling
 purposes and lies dormant until one of three things happens:

 <list type="bullet"><item><term>Some other thread invokes <c><see cref="M:Java.Util.Concurrent.Locks.LockSupport.Unpark(Java.Lang.Thread)" /></c> with the
 current thread as the target; or

 </term></item><item><term>Some other thread <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>
 the current thread; or

 </term></item><item><term>The call spuriously (that is, for no reason) returns.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">This method does <i>not</i> report which of these caused the
 method to return. Callers should re-check the conditions which caused
 the thread to park in the first place. Callers may also determine,
 for example, the interrupt status of the thread upon return.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/LockSupport.html#park(java.lang.Object)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ParkNanos">
      <MemberSignature Language="C#" Value="public static void ParkNanos (long nanos);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ParkNanos(int64 nanos) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parkNanos", "(J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nanos" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="nanos">the maximum number of nanoseconds to wait
</param>
        <summary>Disables the current thread for thread scheduling purposes, for up to
 the specified waiting time, unless the permit is available.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disables the current thread for thread scheduling purposes, for up to
 the specified waiting time, unless the permit is available.

 </para>
          <para tool="javadoc-to-mdoc">If the permit is available then it is consumed and the call
 returns immediately; otherwise the current thread becomes disabled
 for thread scheduling purposes and lies dormant until one of four
 things happens:

 <list type="bullet"><item><term>Some other thread invokes <c><see cref="M:Java.Util.Concurrent.Locks.LockSupport.Unpark(Java.Lang.Thread)" /></c> with the
 current thread as the target; or

 </term></item><item><term>Some other thread <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>
 the current thread; or

 </term></item><item><term>The specified waiting time elapses; or

 </term></item><item><term>The call spuriously (that is, for no reason) returns.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">This method does <i>not</i> report which of these caused the
 method to return. Callers should re-check the conditions which caused
 the thread to park in the first place. Callers may also determine,
 for example, the interrupt status of the thread, or the elapsed time
 upon return.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/LockSupport.html#parkNanos(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ParkNanos">
      <MemberSignature Language="C#" Value="public static void ParkNanos (Java.Lang.Object blocker, long nanos);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ParkNanos(class Java.Lang.Object blocker, int64 nanos) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parkNanos", "(Ljava/lang/Object;J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Java.Lang.Object" />
        <Parameter Name="p1" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="blocker">the synchronization object responsible for this
        thread parking</param>
        <param name="nanos">the maximum number of nanoseconds to wait</param>
        <summary>Disables the current thread for thread scheduling purposes, for up to
 the specified waiting time, unless the permit is available.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disables the current thread for thread scheduling purposes, for up to
 the specified waiting time, unless the permit is available.

 </para>
          <para tool="javadoc-to-mdoc">If the permit is available then it is consumed and the call
 returns immediately; otherwise the current thread becomes disabled
 for thread scheduling purposes and lies dormant until one of four
 things happens:

 <list type="bullet"><item><term>Some other thread invokes <c><see cref="M:Java.Util.Concurrent.Locks.LockSupport.Unpark(Java.Lang.Thread)" /></c> with the
 current thread as the target; or

 </term></item><item><term>Some other thread <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>
 the current thread; or

 </term></item><item><term>The specified waiting time elapses; or

 </term></item><item><term>The call spuriously (that is, for no reason) returns.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">This method does <i>not</i> report which of these caused the
 method to return. Callers should re-check the conditions which caused
 the thread to park in the first place. Callers may also determine,
 for example, the interrupt status of the thread, or the elapsed time
 upon return.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/LockSupport.html#parkNanos(java.lang.Object, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ParkUntil">
      <MemberSignature Language="C#" Value="public static void ParkUntil (long deadline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ParkUntil(int64 deadline) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parkUntil", "(J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deadline" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="deadline">the absolute time, in milliseconds from the Epoch,
        to wait until
</param>
        <summary>Disables the current thread for thread scheduling purposes, until
 the specified deadline, unless the permit is available.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disables the current thread for thread scheduling purposes, until
 the specified deadline, unless the permit is available.

 </para>
          <para tool="javadoc-to-mdoc">If the permit is available then it is consumed and the call
 returns immediately; otherwise the current thread becomes disabled
 for thread scheduling purposes and lies dormant until one of four
 things happens:

 <list type="bullet"><item><term>Some other thread invokes <c><see cref="M:Java.Util.Concurrent.Locks.LockSupport.Unpark(Java.Lang.Thread)" /></c> with the
 current thread as the target; or

 </term></item><item><term>Some other thread <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>
 the current thread; or

 </term></item><item><term>The specified deadline passes; or

 </term></item><item><term>The call spuriously (that is, for no reason) returns.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">This method does <i>not</i> report which of these caused the
 method to return. Callers should re-check the conditions which caused
 the thread to park in the first place. Callers may also determine,
 for example, the interrupt status of the thread, or the current time
 upon return.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/LockSupport.html#parkUntil(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ParkUntil">
      <MemberSignature Language="C#" Value="public static void ParkUntil (Java.Lang.Object blocker, long deadline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ParkUntil(class Java.Lang.Object blocker, int64 deadline) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parkUntil", "(Ljava/lang/Object;J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Java.Lang.Object" />
        <Parameter Name="p1" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="blocker">the synchronization object responsible for this
        thread parking</param>
        <param name="deadline">the absolute time, in milliseconds from the Epoch,
        to wait until</param>
        <summary>Disables the current thread for thread scheduling purposes, until
 the specified deadline, unless the permit is available.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disables the current thread for thread scheduling purposes, until
 the specified deadline, unless the permit is available.

 </para>
          <para tool="javadoc-to-mdoc">If the permit is available then it is consumed and the call
 returns immediately; otherwise the current thread becomes disabled
 for thread scheduling purposes and lies dormant until one of four
 things happens:

 <list type="bullet"><item><term>Some other thread invokes <c><see cref="M:Java.Util.Concurrent.Locks.LockSupport.Unpark(Java.Lang.Thread)" /></c> with the
 current thread as the target; or

 </term></item><item><term>Some other thread <c><see cref="M:Java.Lang.Thread.Interrupt" /></c> the
 current thread; or

 </term></item><item><term>The specified deadline passes; or

 </term></item><item><term>The call spuriously (that is, for no reason) returns.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">This method does <i>not</i> report which of these caused the
 method to return. Callers should re-check the conditions which caused
 the thread to park in the first place. Callers may also determine,
 for example, the interrupt status of the thread, or the current time
 upon return.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/LockSupport.html#parkUntil(java.lang.Object, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unpark">
      <MemberSignature Language="C#" Value="public static void Unpark (Java.Lang.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unpark(class Java.Lang.Thread thread) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unpark", "(Ljava/lang/Thread;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="Java.Lang.Thread" />
      </Parameters>
      <Docs>
        <param name="thread">the thread to unpark, or <c>null</c>, in which case
        this operation has no effect
</param>
        <summary>Makes available the permit for the given thread, if it
 was not already available.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Makes available the permit for the given thread, if it
 was not already available.  If the thread was blocked on
 <c>park</c> then it will unblock.  Otherwise, its next call
 to <c>park</c> is guaranteed not to block. This operation
 is not guaranteed to have any effect at all if the given
 thread has not been started.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/LockSupport.html#unpark(java.lang.Thread)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>