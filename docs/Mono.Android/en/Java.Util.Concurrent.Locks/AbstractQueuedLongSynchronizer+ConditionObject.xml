<Type Name="AbstractQueuedLongSynchronizer+ConditionObject" FullName="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer+ConditionObject">
  <TypeSignature Language="C#" Value="public class AbstractQueuedLongSynchronizer.ConditionObject : Java.Lang.Object, IDisposable, Java.IO.ISerializable, Java.Util.Concurrent.Locks.ICondition" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit AbstractQueuedLongSynchronizer/ConditionObject extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.IO.ISerializable, class Java.Util.Concurrent.Locks.ICondition, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Util.Concurrent.Locks.ICondition</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Condition implementation for a <c><see cref="T:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer" /></c> serving as the basis of a <c><see cref="T:Java.Util.Concurrent.Locks.ILock" /></c> implementation.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Condition implementation for a <c><see cref="T:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer" /></c> serving as the basis of a <c><see cref="T:Java.Util.Concurrent.Locks.ILock" /></c> implementation.

 </para>
      <para tool="javadoc-to-mdoc">Method documentation for this class describes mechanics,
 not behavioral specifications from the point of view of Lock
 and Condition users. Exported versions of this class will in
 general need to be accompanied by documentation describing
 condition semantics that rely on those of the associated
 <c>AbstractQueuedLongSynchronizer</c>.

 </para>
      <para tool="javadoc-to-mdoc">This class is Serializable, but all fields are transient,
 so deserialized conditions have no waiters.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 9" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConditionObject (Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer __self);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer __self) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="__self" Type="Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer" />
      </Parameters>
      <Docs>
        <param name="__self">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ConditionObject (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Await">
      <MemberSignature Language="C#" Value="public void Await ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Await() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("await", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implements interruptible condition wait.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Implements interruptible condition wait.
 <list type="number"><item><term> If current thread is interrupted, throw InterruptedException.
 </term></item><item><term> Save lock state returned by <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_State" /></c>.
 </term></item><item><term> Invoke <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.Release(System.Int64)" /></c> with
      saved state as argument, throwing
      IllegalMonitorStateException if it fails.
 </term></item><item><term> Block until signalled or interrupted.
 </term></item><item><term> Reacquire by invoking specialized version of
      <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.Acquire(System.Int64)" /></c> with saved state as argument.
 </term></item><item><term> If interrupted while blocked in step 4, throw InterruptedException.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject.html#await()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.InterruptedException" />
      </Docs>
    </Member>
    <Member MemberName="Await">
      <MemberSignature Language="C#" Value="public bool Await (long time, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Await(int64 time, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("await", "(JLjava/util/concurrent/TimeUnit;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="time">the maximum time to wait</param>
        <param name="unit">the time unit of the <c>time</c> argument</param>
        <summary>Implements timed condition wait.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implements timed condition wait.
 <list type="number"><item><term> If current thread is interrupted, throw InterruptedException.
 </term></item><item><term> Save lock state returned by <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_State" /></c>.
 </term></item><item><term> Invoke <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.Release(System.Int64)" /></c> with
      saved state as argument, throwing
      IllegalMonitorStateException if it fails.
 </term></item><item><term> Block until signalled, interrupted, or timed out.
 </term></item><item><term> Reacquire by invoking specialized version of
      <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.Acquire(System.Int64)" /></c> with saved state as argument.
 </term></item><item><term> If interrupted while blocked in step 4, throw InterruptedException.
 </term></item><item><term> If timed out while blocked in step 4, return false, else true.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject.html#await(long, java.util.concurrent.TimeUnit)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.InterruptedException" />
      </Docs>
    </Member>
    <Member MemberName="AwaitNanos">
      <MemberSignature Language="C#" Value="public long AwaitNanos (long nanosTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 AwaitNanos(int64 nanosTimeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("awaitNanos", "(J)J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nanosTimeout" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="nanosTimeout">the maximum time to wait, in nanoseconds</param>
        <summary>Implements timed condition wait.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implements timed condition wait.
 <list type="number"><item><term> If current thread is interrupted, throw InterruptedException.
 </term></item><item><term> Save lock state returned by <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_State" /></c>.
 </term></item><item><term> Invoke <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.Release(System.Int64)" /></c> with
      saved state as argument, throwing
      IllegalMonitorStateException if it fails.
 </term></item><item><term> Block until signalled, interrupted, or timed out.
 </term></item><item><term> Reacquire by invoking specialized version of
      <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.Acquire(System.Int64)" /></c> with saved state as argument.
 </term></item><item><term> If interrupted while blocked in step 4, throw InterruptedException.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject.html#awaitNanos(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.InterruptedException" />
      </Docs>
    </Member>
    <Member MemberName="AwaitUninterruptibly">
      <MemberSignature Language="C#" Value="public void AwaitUninterruptibly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AwaitUninterruptibly() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("awaitUninterruptibly", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implements uninterruptible condition wait.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Implements uninterruptible condition wait.
 <list type="number"><item><term> Save lock state returned by <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_State" /></c>.
 </term></item><item><term> Invoke <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.Release(System.Int64)" /></c> with
      saved state as argument, throwing
      IllegalMonitorStateException if it fails.
 </term></item><item><term> Block until signalled.
 </term></item><item><term> Reacquire by invoking specialized version of
      <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.Acquire(System.Int64)" /></c> with saved state as argument.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject.html#awaitUninterruptibly()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="AwaitUntil">
      <MemberSignature Language="C#" Value="public bool AwaitUntil (Java.Util.Date deadline);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AwaitUntil(class Java.Util.Date deadline) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("awaitUntil", "(Ljava/util/Date;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deadline" Type="Java.Util.Date" />
      </Parameters>
      <Docs>
        <param name="deadline">the absolute time to wait until</param>
        <summary>Implements absolute timed condition wait.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implements absolute timed condition wait.
 <list type="number"><item><term> If current thread is interrupted, throw InterruptedException.
 </term></item><item><term> Save lock state returned by <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_State" /></c>.
 </term></item><item><term> Invoke <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.Release(System.Int64)" /></c> with
      saved state as argument, throwing
      IllegalMonitorStateException if it fails.
 </term></item><item><term> Block until signalled, interrupted, or timed out.
 </term></item><item><term> Reacquire by invoking specialized version of
      <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.Acquire(System.Int64)" /></c> with saved state as argument.
 </term></item><item><term> If interrupted while blocked in step 4, throw InterruptedException.
 </term></item><item><term> If timed out while blocked in step 4, return false, else true.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject.html#awaitUntil(java.util.Date)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.InterruptedException" />
      </Docs>
    </Member>
    <Member MemberName="HasWaiters">
      <MemberSignature Language="C#" Value="protected bool HasWaiters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasWaiters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasWaiters", "()Z", "GetHasWaitersHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries whether any threads are waiting on this condition.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Queries whether any threads are waiting on this condition.
 Implements <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.HasWaiters(Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject.html#hasWaiters()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_IsHeldExclusively" /></c>
         returns <c>false</c></exception>
      </Docs>
    </Member>
    <Member MemberName="Signal">
      <MemberSignature Language="C#" Value="public void Signal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Signal() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("signal", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Moves the longest-waiting thread, if one exists, from the
 wait queue for this condition to the wait queue for the
 owning lock.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Moves the longest-waiting thread, if one exists, from the
 wait queue for this condition to the wait queue for the
 owning lock.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject.html#signal()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_IsHeldExclusively" /></c>
         returns <c>false</c></exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAll">
      <MemberSignature Language="C#" Value="public void SignalAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SignalAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("signalAll", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Moves all threads from the wait queue for this condition to
 the wait queue for the owning lock.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Moves all threads from the wait queue for this condition to
 the wait queue for the owning lock.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject.html#signalAll()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_IsHeldExclusively" /></c>
         returns <c>false</c></exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingThreads">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt; WaitingThreads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Java.Lang.Thread&gt; WaitingThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWaitingThreads", "()Ljava/util/Collection;", "GetGetWaitingThreadsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Java.Lang.Thread&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a collection containing those threads that may be
 waiting on this Condition.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a collection containing those threads that may be
 waiting on this Condition.
 Implements <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.GetWaitingThreads(Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject.html#getWaitingThreads()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_IsHeldExclusively" /></c>
         returns <c>false</c></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitQueueLength">
      <MemberSignature Language="C#" Value="protected int WaitQueueLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitQueueLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWaitQueueLength", "()I", "GetGetWaitQueueLengthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of threads waiting on
 this condition.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an estimate of the number of threads waiting on
 this condition.
 Implements <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.GetWaitQueueLength(Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.ConditionObject)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject.html#getWaitQueueLength()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalMonitorStateException">if <c><see cref="M:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer.get_IsHeldExclusively" /></c>
         returns <c>false</c></exception>
      </Docs>
    </Member>
  </Members>
</Type>
