<Type Name="PskKeyManager" FullName="Android.Net.PskKeyManager">
  <TypeSignature Language="C#" Value="public abstract class PskKeyManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PskKeyManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/net/PskKeyManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>Provider of key material for pre-shared key (PSK) key exchange used in TLS-PSK cipher suites.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Provider of key material for pre-shared key (PSK) key exchange used in TLS-PSK cipher suites.

 <format type="text/html"><h3>Overview of TLS-PSK</h3></format><format type="text/html"><h3>Supporting multiple keys</h3></format><format type="text/html"><h3>Maximum sizes</h3></format><format type="text/html"><h3>Subclassing</h3></format>
 Subclasses should normally provide their own implementation of <c>getKey</c> because the default
 implementation returns no key, which aborts the handshake.

 <format type="text/html"><h3>Known issues</h3></format>
 The implementation of <c>ECDHE_PSK</c> cipher suites in API Level 21 contains a bug which breaks
 compatibility with other implementations. <c>ECDHE_PSK</c> cipher suites are enabled by default
 on platforms with API Level 21 when an <c>SSLContext</c> is initialized with a
 <c>PskKeyManager</c>. A workaround is to disable <c>ECDHE_PSK</c> cipher suites on platforms
 with API Level 21.

 <format type="text/html"><h3>Example</h3></format>
 The following example illustrates how to create an <c>SSLContext</c> which enables the use of
 TLS-PSK in <c>SSLSocket</c>, <c>SSLServerSocket</c> and <c>SSLEngine</c> instances obtained
 from it.
 <sample external-id="A59990ADA85AD87FB0FB43E43D1AB7A8" /></para>
      <para tool="javadoc-to-mdoc">TLS-PSK is a set of TLS/SSL cipher suites which rely on a symmetric pre-shared key (PSK) to
 secure the TLS/SSL connection and mutually authenticate its peers. These cipher suites may be
 a more natural fit compared to conventional public key based cipher suites in some scenarios
 where communication between peers is bootstrapped via a separate step (for example, a pairing
 step) and requires both peers to authenticate each other. In such scenarios a symmetric key (PSK)
 can be exchanged during the bootstrapping step, removing the need to generate and exchange public
 key pairs and X.509 certificates.</para>
      <para tool="javadoc-to-mdoc">When a TLS-PSK cipher suite is used, both peers have to use the same key for the TLS/SSL
 handshake to succeed. Thus, both peers are implicitly authenticated by a successful handshake.
 This removes the need to use a <c>TrustManager</c> in conjunction with this <c>KeyManager</c>.
 </para>
      <para tool="javadoc-to-mdoc">A peer may have multiple keys to choose from. To help choose the right key, during the
 handshake the server can provide a <i>PSK identity hint</i> to the client, and the client can
 provide a <i>PSK identity</i> to the server. The contents of these two pieces of information
 are specific to application-level protocols.</para>
      <para tool="javadoc-to-mdoc">
        <i>NOTE: Both the PSK identity hint and the PSK identity are transmitted in cleartext.
 Moreover, these data are received and processed prior to peer having been authenticated. Thus,
 they must not contain or leak key material or other sensitive information, and should be
 treated (e.g., parsed) with caution, as untrusted data.</i>
      </para>
      <para tool="javadoc-to-mdoc">The high-level flow leading to peers choosing a key during TLS/SSL handshake is as follows:
 <list type="number"><item><term>Server receives a handshake request from client.
 </term></item><item><term>Server replies, optionally providing a PSK identity hint to client.</term></item><item><term>Client chooses the key.</term></item><item><term>Client provides a PSK identity of the chosen key to server.</term></item><item><term>Server chooses the key.</term></item></list></para>
      <para tool="javadoc-to-mdoc">In the flow above, either peer can signal that they do not have a suitable key, in which case
 the the handshake will be aborted immediately. This may enable a network attacker who does not
 know the key to learn which PSK identity hints or PSK identities are supported. If this is a
 concern then a randomly generated key should be used in the scenario where no key is available.
 This will lead to the handshake aborting later, due to key mismatch -- same as in the scenario
 where a key is available -- making it appear to the attacker that all PSK identity hints and PSK
 identities are supported.</para>
      <para tool="javadoc-to-mdoc">The maximum supported sizes are as follows:
 <list type="bullet"><item><term>256 bytes for keys (see <c><see cref="F:Android.Net.PskKeyManager.MaxKeyLengthBytes" /></c>),</term></item><item><term>128 bytes for PSK identity and PSK identity hint (in modified UTF-8 representation) (see
 <c><see cref="F:Android.Net.PskKeyManager.MaxIdentityLengthBytes" /></c> and <c><see cref="F:Android.Net.PskKeyManager.MaxIdentityHintLengthBytes" /></c>).</term></item></list></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/net/PskKeyManager.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PskKeyManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary></summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/PskKeyManager.html#PskKeyManager()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PskKeyManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChooseClientKeyIdentity">
      <MemberSignature Language="C#" Value="public virtual string ChooseClientKeyIdentity (string identityHint, Java.Net.Socket socket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ChooseClientKeyIdentity(string identityHint, class Java.Net.Socket socket) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("chooseClientKeyIdentity", "(Ljava/lang/String;Ljava/net/Socket;)Ljava/lang/String;", "GetChooseClientKeyIdentity_Ljava_lang_String_Ljava_net_Socket_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityHint" Type="System.String" />
        <Parameter Name="socket" Type="Java.Net.Socket" />
      </Parameters>
      <Docs>
        <param name="identityHint">identity hint provided by the server or <c>null</c> if none provided.</param>
        <param name="socket">To be added.</param>
        <summary>Gets the PSK identity to report to the server to help agree on the PSK for the provided
 socket.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the PSK identity to report to the server to help agree on the PSK for the provided
 socket.

 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation returns an empty string.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/PskKeyManager.html#chooseClientKeyIdentity(java.lang.String, java.net.Socket)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChooseClientKeyIdentity">
      <MemberSignature Language="C#" Value="public virtual string ChooseClientKeyIdentity (string identityHint, Javax.Net.Ssl.SSLEngine engine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ChooseClientKeyIdentity(string identityHint, class Javax.Net.Ssl.SSLEngine engine) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("chooseClientKeyIdentity", "(Ljava/lang/String;Ljavax/net/ssl/SSLEngine;)Ljava/lang/String;", "GetChooseClientKeyIdentity_Ljava_lang_String_Ljavax_net_ssl_SSLEngine_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityHint" Type="System.String" />
        <Parameter Name="engine" Type="Javax.Net.Ssl.SSLEngine" />
      </Parameters>
      <Docs>
        <param name="identityHint">identity hint provided by the server or <c>null</c> if none provided.</param>
        <param name="engine">To be added.</param>
        <summary>Gets the PSK identity to report to the server to help agree on the PSK for the provided
 engine.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the PSK identity to report to the server to help agree on the PSK for the provided
 engine.

 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation returns an empty string.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/PskKeyManager.html#chooseClientKeyIdentity(java.lang.String, javax.net.ssl.SSLEngine)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChooseServerKeyIdentityHint">
      <MemberSignature Language="C#" Value="public virtual string ChooseServerKeyIdentityHint (Java.Net.Socket socket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ChooseServerKeyIdentityHint(class Java.Net.Socket socket) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("chooseServerKeyIdentityHint", "(Ljava/net/Socket;)Ljava/lang/String;", "GetChooseServerKeyIdentityHint_Ljava_net_Socket_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="socket" Type="Java.Net.Socket" />
      </Parameters>
      <Docs>
        <param name="socket">To be added.</param>
        <summary>Gets the PSK identity hint to report to the client to help agree on the PSK for the provided
 socket.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the PSK identity hint to report to the client to help agree on the PSK for the provided
 socket.

 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation returns <c>null</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/PskKeyManager.html#chooseServerKeyIdentityHint(java.net.Socket)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChooseServerKeyIdentityHint">
      <MemberSignature Language="C#" Value="public virtual string ChooseServerKeyIdentityHint (Javax.Net.Ssl.SSLEngine engine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ChooseServerKeyIdentityHint(class Javax.Net.Ssl.SSLEngine engine) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("chooseServerKeyIdentityHint", "(Ljavax/net/ssl/SSLEngine;)Ljava/lang/String;", "GetChooseServerKeyIdentityHint_Ljavax_net_ssl_SSLEngine_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="engine" Type="Javax.Net.Ssl.SSLEngine" />
      </Parameters>
      <Docs>
        <param name="engine">To be added.</param>
        <summary>Gets the PSK identity hint to report to the client to help agree on the PSK for the provided
 engine.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the PSK identity hint to report to the client to help agree on the PSK for the provided
 engine.

 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation returns <c>null</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/PskKeyManager.html#chooseServerKeyIdentityHint(javax.net.ssl.SSLEngine)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="public virtual Javax.Crypto.ISecretKey GetKey (string identityHint, string identity, Java.Net.Socket socket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Javax.Crypto.ISecretKey GetKey(string identityHint, string identity, class Java.Net.Socket socket) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getKey", "(Ljava/lang/String;Ljava/lang/String;Ljava/net/Socket;)Ljavax/crypto/SecretKey;", "GetGetKey_Ljava_lang_String_Ljava_lang_String_Ljava_net_Socket_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Crypto.ISecretKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityHint" Type="System.String" />
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="socket" Type="Java.Net.Socket" />
      </Parameters>
      <Docs>
        <param name="identityHint">identity hint provided by the server to help select the key or
        <c>null</c> if none provided.</param>
        <param name="identity">identity provided by the client to help select the key.</param>
        <param name="socket">To be added.</param>
        <summary>Gets the PSK to use for the provided socket.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the PSK to use for the provided socket.

 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation returns <c>null</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/PskKeyManager.html#getKey(java.lang.String, java.lang.String, java.net.Socket)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="public virtual Javax.Crypto.ISecretKey GetKey (string identityHint, string identity, Javax.Net.Ssl.SSLEngine engine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Javax.Crypto.ISecretKey GetKey(string identityHint, string identity, class Javax.Net.Ssl.SSLEngine engine) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getKey", "(Ljava/lang/String;Ljava/lang/String;Ljavax/net/ssl/SSLEngine;)Ljavax/crypto/SecretKey;", "GetGetKey_Ljava_lang_String_Ljava_lang_String_Ljavax_net_ssl_SSLEngine_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Crypto.ISecretKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityHint" Type="System.String" />
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="engine" Type="Javax.Net.Ssl.SSLEngine" />
      </Parameters>
      <Docs>
        <param name="identityHint">identity hint provided by the server to help select the key or
        <c>null</c> if none provided.</param>
        <param name="identity">identity provided by the client to help select the key.</param>
        <param name="engine">To be added.</param>
        <summary>Gets the PSK to use for the provided engine.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the PSK to use for the provided engine.

 </para>
          <para tool="javadoc-to-mdoc">
 The default implementation returns <c>null</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/PskKeyManager.html#getKey(java.lang.String, java.lang.String, javax.net.ssl.SSLEngine)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxIdentityHintLengthBytes">
      <MemberSignature Language="C#" Value="public const int MaxIdentityHintLengthBytes = 128;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxIdentityHintLengthBytes = (128)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MAX_IDENTITY_HINT_LENGTH_BYTES")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>128</MemberValue>
      <Docs>
        <summary>Maximum supported length (in bytes) for PSK identity hint (in modified UTF-8 representation).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Maximum supported length (in bytes) for PSK identity hint (in modified UTF-8 representation).
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/PskKeyManager.html#MAX_IDENTITY_HINT_LENGTH_BYTES" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxIdentityLengthBytes">
      <MemberSignature Language="C#" Value="public const int MaxIdentityLengthBytes = 128;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxIdentityLengthBytes = (128)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MAX_IDENTITY_LENGTH_BYTES")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>128</MemberValue>
      <Docs>
        <summary>Maximum supported length (in bytes) for PSK identity (in modified UTF-8 representation).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Maximum supported length (in bytes) for PSK identity (in modified UTF-8 representation). </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/PskKeyManager.html#MAX_IDENTITY_LENGTH_BYTES" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxKeyLengthBytes">
      <MemberSignature Language="C#" Value="public const int MaxKeyLengthBytes = 256;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxKeyLengthBytes = (256)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MAX_KEY_LENGTH_BYTES")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary>Maximum supported length (in bytes) for PSK.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Maximum supported length (in bytes) for PSK. </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/PskKeyManager.html#MAX_KEY_LENGTH_BYTES" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
