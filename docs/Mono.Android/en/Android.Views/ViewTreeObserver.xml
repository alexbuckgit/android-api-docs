<Type Name="ViewTreeObserver" FullName="Android.Views.ViewTreeObserver">
  <TypeSignature Language="C#" Value="public sealed class ViewTreeObserver : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ViewTreeObserver extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/ViewTreeObserver", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A view tree observer is used to register listeners that can be notified of global
 changes in the view tree.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A view tree observer is used to register listeners that can be notified of global
 changes in the view tree. Such global events include, but are not limited to,
 layout of the whole tree, beginning of the drawing pass, touch mode change....

 A ViewTreeObserver should never be instantiated by applications as it is provided
 by the views hierarchy. Refer to <c><see cref="P:Android.Views.View.ViewTreeObserver" /></c>
 for more information.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="AddOnDrawListener">
      <MemberSignature Language="C#" Value="public void AddOnDrawListener (Android.Views.ViewTreeObserver.IOnDrawListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnDrawListener(class Android.Views.ViewTreeObserver/IOnDrawListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addOnDrawListener", "(Landroid/view/ViewTreeObserver$OnDrawListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewTreeObserver+IOnDrawListener" />
      </Parameters>
      <Docs>
        <param name="listener">The callback to add</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when the view tree is about to be drawn.</para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> this method <i>cannot</i> be invoked from
 <c><see cref="!:NoType:android/view/ViewTreeObserver$OnDrawListener;Href=../../../reference/android/view/ViewTreeObserver.OnDrawListener.html#onDraw()" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnDrawListener(android.view.ViewTreeObserver.OnDrawListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOnGlobalFocusChangeListener">
      <MemberSignature Language="C#" Value="public void AddOnGlobalFocusChangeListener (Android.Views.ViewTreeObserver.IOnGlobalFocusChangeListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnGlobalFocusChangeListener(class Android.Views.ViewTreeObserver/IOnGlobalFocusChangeListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addOnGlobalFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewTreeObserver+IOnGlobalFocusChangeListener" />
      </Parameters>
      <Docs>
        <param name="listener">The callback to add</param>
        <summary>Register a callback to be invoked when the focus state within the view tree changes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when the focus state within the view tree changes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnGlobalFocusChangeListener(android.view.ViewTreeObserver.OnGlobalFocusChangeListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOnGlobalLayoutListener">
      <MemberSignature Language="C#" Value="public void AddOnGlobalLayoutListener (Android.Views.ViewTreeObserver.IOnGlobalLayoutListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnGlobalLayoutListener(class Android.Views.ViewTreeObserver/IOnGlobalLayoutListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addOnGlobalLayoutListener", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewTreeObserver+IOnGlobalLayoutListener" />
      </Parameters>
      <Docs>
        <param name="listener">The callback to add</param>
        <summary>Register a callback to be invoked when the global layout state or the visibility of views
 within the view tree changes</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when the global layout state or the visibility of views
 within the view tree changes</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOnPreDrawListener">
      <MemberSignature Language="C#" Value="public void AddOnPreDrawListener (Android.Views.ViewTreeObserver.IOnPreDrawListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnPreDrawListener(class Android.Views.ViewTreeObserver/IOnPreDrawListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addOnPreDrawListener", "(Landroid/view/ViewTreeObserver$OnPreDrawListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewTreeObserver+IOnPreDrawListener" />
      </Parameters>
      <Docs>
        <param name="listener">The callback to add</param>
        <summary>Register a callback to be invoked when the view tree is about to be drawn</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when the view tree is about to be drawn</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnPreDrawListener(android.view.ViewTreeObserver.OnPreDrawListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOnScrollChangedListener">
      <MemberSignature Language="C#" Value="public void AddOnScrollChangedListener (Android.Views.ViewTreeObserver.IOnScrollChangedListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnScrollChangedListener(class Android.Views.ViewTreeObserver/IOnScrollChangedListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addOnScrollChangedListener", "(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewTreeObserver+IOnScrollChangedListener" />
      </Parameters>
      <Docs>
        <param name="listener">The callback to add</param>
        <summary>Register a callback to be invoked when a view has been scrolled.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when a view has been scrolled.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnScrollChangedListener(android.view.ViewTreeObserver.OnScrollChangedListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOnTouchModeChangeListener">
      <MemberSignature Language="C#" Value="public void AddOnTouchModeChangeListener (Android.Views.ViewTreeObserver.IOnTouchModeChangeListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnTouchModeChangeListener(class Android.Views.ViewTreeObserver/IOnTouchModeChangeListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addOnTouchModeChangeListener", "(Landroid/view/ViewTreeObserver$OnTouchModeChangeListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewTreeObserver+IOnTouchModeChangeListener" />
      </Parameters>
      <Docs>
        <param name="listener">The callback to add</param>
        <summary>Register a callback to be invoked when the invoked when the touch mode changes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when the invoked when the touch mode changes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnTouchModeChangeListener(android.view.ViewTreeObserver.OnTouchModeChangeListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOnWindowAttachListener">
      <MemberSignature Language="C#" Value="public void AddOnWindowAttachListener (Android.Views.ViewTreeObserver.IOnWindowAttachListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnWindowAttachListener(class Android.Views.ViewTreeObserver/IOnWindowAttachListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addOnWindowAttachListener", "(Landroid/view/ViewTreeObserver$OnWindowAttachListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewTreeObserver+IOnWindowAttachListener" />
      </Parameters>
      <Docs>
        <param name="listener">The callback to add</param>
        <summary>Register a callback to be invoked when the view hierarchy is attached to a window.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when the view hierarchy is attached to a window.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnWindowAttachListener(android.view.ViewTreeObserver.OnWindowAttachListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOnWindowFocusChangeListener">
      <MemberSignature Language="C#" Value="public void AddOnWindowFocusChangeListener (Android.Views.ViewTreeObserver.IOnWindowFocusChangeListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnWindowFocusChangeListener(class Android.Views.ViewTreeObserver/IOnWindowFocusChangeListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addOnWindowFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnWindowFocusChangeListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewTreeObserver+IOnWindowFocusChangeListener" />
      </Parameters>
      <Docs>
        <param name="listener">The callback to add</param>
        <summary>Register a callback to be invoked when the window focus state within the view tree changes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when the window focus state within the view tree changes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnWindowFocusChangeListener(android.view.ViewTreeObserver.OnWindowFocusChangeListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false
</exception>
      </Docs>
    </Member>
    <Member MemberName="DispatchOnDraw">
      <MemberSignature Language="C#" Value="public void DispatchOnDraw ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DispatchOnDraw() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchOnDraw", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifies registered listeners that the drawing pass is about to start.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notifies registered listeners that the drawing pass is about to start.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#dispatchOnDraw()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="DispatchOnGlobalLayout">
      <MemberSignature Language="C#" Value="public void DispatchOnGlobalLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DispatchOnGlobalLayout() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchOnGlobalLayout", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifies registered listeners that a global layout happened.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Notifies registered listeners that a global layout happened. This can be called
 manually if you are forcing a layout on a View or a hierarchy of Views that are
 not attached to a Window or in the GONE state.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#dispatchOnGlobalLayout()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchOnPreDraw">
      <MemberSignature Language="C#" Value="public bool DispatchOnPreDraw ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DispatchOnPreDraw() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchOnPreDraw", "()Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifies registered listeners that the drawing pass is about to start.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Notifies registered listeners that the drawing pass is about to start. If a
 listener returns true, then the drawing pass is canceled and rescheduled. This can
 be called manually if you are forcing the drawing on a View or a hierarchy of Views
 that are not attached to a Window or in the GONE state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#dispatchOnPreDraw()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public event EventHandler Draw;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Draw" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalFocusChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.ViewTreeObserver.GlobalFocusChangeEventArgs&gt; GlobalFocusChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.ViewTreeObserver/GlobalFocusChangeEventArgs&gt; GlobalFocusChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.ViewTreeObserver+GlobalFocusChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalLayout">
      <MemberSignature Language="C#" Value="public event EventHandler GlobalLayout;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler GlobalLayout" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAlive">
      <MemberSignature Language="C#" Value="public bool IsAlive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isAlive", "()Z", "GetIsAliveHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this ViewTreeObserver is alive.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates whether this ViewTreeObserver is alive. When an observer is not alive,
 any call to a method (except this one) will throw an exception.

 If an application keeps a long-lived reference to this ViewTreeObserver, it should
 always check for the result of this method before calling any other method.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#isAlive()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PreDraw">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.ViewTreeObserver.PreDrawEventArgs&gt; PreDraw;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.ViewTreeObserver/PreDrawEventArgs&gt; PreDraw" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.ViewTreeObserver+PreDrawEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveGlobalOnLayoutListener">
      <MemberSignature Language="C#" Value="public void RemoveGlobalOnLayoutListener (Android.Views.ViewTreeObserver.IOnGlobalLayoutListener victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveGlobalOnLayoutListener(class Android.Views.ViewTreeObserver/IOnGlobalLayoutListener victim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeGlobalOnLayoutListener", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnGlobalLayoutListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed global layout callback</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove a previously installed global layout callback</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#removeGlobalOnLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnGlobalLayoutListener(.IOnGlobalLayoutListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnDrawListener">
      <MemberSignature Language="C#" Value="public void RemoveOnDrawListener (Android.Views.ViewTreeObserver.IOnDrawListener victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnDrawListener(class Android.Views.ViewTreeObserver/IOnDrawListener victim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeOnDrawListener", "(Landroid/view/ViewTreeObserver$OnDrawListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnDrawListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Remove a previously installed pre-draw callback.</para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> this method <i>cannot</i> be invoked from
 <c><see cref="!:NoType:android/view/ViewTreeObserver$OnDrawListener;Href=../../../reference/android/view/ViewTreeObserver.OnDrawListener.html#onDraw()" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnDrawListener(android.view.ViewTreeObserver.OnDrawListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnDrawListener(.IOnDrawListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnGlobalFocusChangeListener">
      <MemberSignature Language="C#" Value="public void RemoveOnGlobalFocusChangeListener (Android.Views.ViewTreeObserver.IOnGlobalFocusChangeListener victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnGlobalFocusChangeListener(class Android.Views.ViewTreeObserver/IOnGlobalFocusChangeListener victim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeOnGlobalFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnGlobalFocusChangeListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed focus change callback.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove a previously installed focus change callback.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver.OnGlobalFocusChangeListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnGlobalFocusChangeListener(.IOnGlobalFocusChangeListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnGlobalLayoutListener">
      <MemberSignature Language="C#" Value="public void RemoveOnGlobalLayoutListener (Android.Views.ViewTreeObserver.IOnGlobalLayoutListener victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnGlobalLayoutListener(class Android.Views.ViewTreeObserver/IOnGlobalLayoutListener victim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeOnGlobalLayoutListener", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnGlobalLayoutListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed global layout callback</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove a previously installed global layout callback</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnGlobalLayoutListener(.IOnGlobalLayoutListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnPreDrawListener">
      <MemberSignature Language="C#" Value="public void RemoveOnPreDrawListener (Android.Views.ViewTreeObserver.IOnPreDrawListener victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnPreDrawListener(class Android.Views.ViewTreeObserver/IOnPreDrawListener victim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeOnPreDrawListener", "(Landroid/view/ViewTreeObserver$OnPreDrawListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnPreDrawListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed pre-draw callback</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove a previously installed pre-draw callback</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnPreDrawListener(android.view.ViewTreeObserver.OnPreDrawListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnPreDrawListener(.IOnPreDrawListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnScrollChangedListener">
      <MemberSignature Language="C#" Value="public void RemoveOnScrollChangedListener (Android.Views.ViewTreeObserver.IOnScrollChangedListener victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnScrollChangedListener(class Android.Views.ViewTreeObserver/IOnScrollChangedListener victim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeOnScrollChangedListener", "(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnScrollChangedListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed scroll-changed callback</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove a previously installed scroll-changed callback</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnScrollChangedListener(android.view.ViewTreeObserver.OnScrollChangedListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnScrollChangedListener(.IOnScrollChangedListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnTouchModeChangeListener">
      <MemberSignature Language="C#" Value="public void RemoveOnTouchModeChangeListener (Android.Views.ViewTreeObserver.IOnTouchModeChangeListener victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnTouchModeChangeListener(class Android.Views.ViewTreeObserver/IOnTouchModeChangeListener victim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeOnTouchModeChangeListener", "(Landroid/view/ViewTreeObserver$OnTouchModeChangeListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnTouchModeChangeListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed touch mode change callback</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove a previously installed touch mode change callback</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnTouchModeChangeListener(android.view.ViewTreeObserver.OnTouchModeChangeListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnTouchModeChangeListener(.IOnTouchModeChangeListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnWindowAttachListener">
      <MemberSignature Language="C#" Value="public void RemoveOnWindowAttachListener (Android.Views.ViewTreeObserver.IOnWindowAttachListener victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnWindowAttachListener(class Android.Views.ViewTreeObserver/IOnWindowAttachListener victim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeOnWindowAttachListener", "(Landroid/view/ViewTreeObserver$OnWindowAttachListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnWindowAttachListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed window attach callback.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove a previously installed window attach callback.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnWindowAttachListener(android.view.ViewTreeObserver.OnWindowAttachListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnWindowAttachListener(.IOnWindowAttachListener)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveOnWindowFocusChangeListener">
      <MemberSignature Language="C#" Value="public void RemoveOnWindowFocusChangeListener (Android.Views.ViewTreeObserver.IOnWindowFocusChangeListener victim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnWindowFocusChangeListener(class Android.Views.ViewTreeObserver/IOnWindowFocusChangeListener victim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeOnWindowFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnWindowFocusChangeListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="victim" Type="Android.Views.ViewTreeObserver+IOnWindowFocusChangeListener" />
      </Parameters>
      <Docs>
        <param name="victim">The callback to remove</param>
        <summary>Remove a previously installed window focus change callback.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove a previously installed window focus change callback.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnWindowFocusChangeListener(android.view.ViewTreeObserver.OnWindowFocusChangeListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">If <c><see cref="P:Android.Views.ViewTreeObserver.IsAlive" /></c> returns false</exception>
        <altmember cref="M:Android.Views.ViewTreeObserver.AddOnWindowFocusChangeListener(.IOnWindowFocusChangeListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScrollChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ScrollChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ScrollChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchModeChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.ViewTreeObserver.TouchModeChangeEventArgs&gt; TouchModeChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.ViewTreeObserver/TouchModeChangeEventArgs&gt; TouchModeChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.ViewTreeObserver+TouchModeChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowAttached">
      <MemberSignature Language="C#" Value="public event EventHandler WindowAttached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler WindowAttached" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowDetached">
      <MemberSignature Language="C#" Value="public event EventHandler WindowDetached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler WindowDetached" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowFocusChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.ViewTreeObserver.WindowFocusChangeEventArgs&gt; WindowFocusChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.ViewTreeObserver/WindowFocusChangeEventArgs&gt; WindowFocusChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.ViewTreeObserver+WindowFocusChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>