<Type Name="IWindowManager" FullName="Android.Views.IWindowManager">
  <TypeSignature Language="C#" Value="public interface IWindowManager : Android.Views.IViewManager, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWindowManager implements class Android.Runtime.IJavaObject, class Android.Views.IViewManager, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Views.IViewManager</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/WindowManager", "", "Android.Views.IWindowManagerInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>The interface that apps use to talk to the window manager.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">The interface that apps use to talk to the window manager.
 </para>
      <para tool="javadoc-to-mdoc">
 Use <c>Context.getSystemService(Context.WINDOW_SERVICE)</c> to get one of these.
 </para>
      <para tool="javadoc-to-mdoc">
 Each window manager instance is bound to a particular <c><see cref="T:Android.Views.Display" /></c>.
 To obtain a <c><see cref="T:Android.Views.IWindowManager" /></c> for a different display, use
 <c><see cref="M:Android.Content.Context.CreateDisplayContext(Android.Views.Display)" /></c> to obtain a <c><see cref="T:Android.Content.Context" /></c> for that
 display, then use <c>Context.getSystemService(Context.WINDOW_SERVICE)</c>
 to get the WindowManager.
 </para>
      <para tool="javadoc-to-mdoc">
 The simplest way to show a window on another display is to create a
 <c><see cref="T:Android.App.Presentation" /></c>.  The presentation will automatically obtain a
 <c><see cref="T:Android.Views.IWindowManager" /></c> and <c><see cref="T:Android.Content.Context" /></c> for that display.
 </para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="!:Android.Content.Context.getSystemService(java.lang.Class&lt;T&gt;)" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="F:Android.Content.Context.WindowService" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/view/WindowManager.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="DefaultDisplay">
      <MemberSignature Language="C#" Value="public Android.Views.Display DefaultDisplay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Display DefaultDisplay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDefaultDisplay", "()Landroid/view/Display;", "GetGetDefaultDisplayHandler:Android.Views.IWindowManagerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Display</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <c><see cref="T:Android.Views.Display" /></c> upon which this <c><see cref="T:Android.Views.IWindowManager" /></c> instance
 will create new windows.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the <c><see cref="T:Android.Views.Display" /></c> upon which this <c><see cref="T:Android.Views.IWindowManager" /></c> instance
 will create new windows.
 </para>
          <para tool="javadoc-to-mdoc">
 Despite the name of this method, the display that is returned is not
 necessarily the primary display of the system (see <c><see cref="F:Android.Views.Display.DefaultDisplay" /></c>).
 The returned display could instead be a secondary display that this
 window manager instance is managing.  Think of it as the display that
 this <c><see cref="T:Android.Views.IWindowManager" /></c> instance uses by default.
 </para>
          <para tool="javadoc-to-mdoc">
 To create windows on a different display, you need to obtain a
 <c><see cref="T:Android.Views.IWindowManager" /></c> for that <c><see cref="T:Android.Views.Display" /></c>.  (See the <c><see cref="T:Android.Views.IWindowManager" /></c>
 class documentation for more information.)
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/WindowManager.html#getDefaultDisplay()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveViewImmediate">
      <MemberSignature Language="C#" Value="public void RemoveViewImmediate (Android.Views.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveViewImmediate(class Android.Views.View view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeViewImmediate", "(Landroid/view/View;)V", "GetRemoveViewImmediate_Landroid_view_View_Handler:Android.Views.IWindowManagerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">The view to be removed.
</param>
        <summary>Special variation of <c><see cref="M:Android.Views.IViewManager.RemoveView(Android.Views.View)" /></c> that immediately invokes
 the given view hierarchy's <c><see cref="M:Android.Views.View.OnDetachedFromWindow" /></c> methods before returning.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Special variation of <c><see cref="M:Android.Views.IViewManager.RemoveView(Android.Views.View)" /></c> that immediately invokes
 the given view hierarchy's <c><see cref="M:Android.Views.View.OnDetachedFromWindow" /></c> methods before returning.  This is not
 for normal applications; using it correctly requires great care.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/WindowManager.html#removeViewImmediate(android.view.View)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
