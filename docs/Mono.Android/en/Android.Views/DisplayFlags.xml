<Type Name="DisplayFlags" FullName="Android.Views.DisplayFlags">
  <TypeSignature Language="C#" Value="public enum DisplayFlags" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed DisplayFlags extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enumerates values returned by  several types and taken as a parameter of the <see cref="F:Android.Media.Projection.MediaProjection.CreateVirtualDisplay" /> member.</summary>
    <remarks />
  </Docs>
  <Members>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.DisplayFlags None = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.DisplayFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="Presentation">
      <MemberSignature Language="C#" Value="Presentation" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.DisplayFlags Presentation = int32(8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.DisplayFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="Private">
      <MemberSignature Language="C#" Value="Private" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.DisplayFlags Private = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.DisplayFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="Secure">
      <MemberSignature Language="C#" Value="Secure" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.DisplayFlags Secure = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.DisplayFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Display flag: Indicates that the display has a secure video output and
 supports compositing secure surfaces.
 </para>
          <para tool="javadoc-to-mdoc">
 If this flag is set then the display device has a secure video output
 and is capable of showing secure surfaces.  It may also be capable of
 showing <c><see cref="F:Android.Views.Display.FlagSupportsProtectedBuffers" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 If this flag is not set then the display device may not have a secure video
 output; the user may see a blank region on the screen instead of
 the contents of secure surfaces or protected buffers.
 </para>
          <para tool="javadoc-to-mdoc">
 Secure surfaces are used to prevent content rendered into those surfaces
 by applications from appearing in screenshots or from being viewed
 on non-secure displays.  Protected buffers are used by secure video decoders
 for a similar purpose.
 </para>
          <para tool="javadoc-to-mdoc">
 An application creates a window with a secure surface by specifying the
 <c><see cref="F:Android.Views.WindowManagerFlags.Secure" /></c> window flag.
 Likewise, an application creates a <c><see cref="T:Android.Views.SurfaceView" /></c> with a secure surface
 by calling <c><see cref="M:Android.Views.SurfaceView.SetSecure(System.Boolean)" /></c> before attaching the secure view to
 its containing window.
 </para>
          <para tool="javadoc-to-mdoc">
 An application can use the absence of this flag as a hint that it should not create
 secure surfaces or protected buffers on this display because the content may
 not be visible.  For example, if the flag is not set then the application may
 choose not to show content on this display, show an informative error message,
 select an alternate content stream or adopt a different strategy for decoding
 content that does not rely on secure surfaces or protected buffers.
 </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="SupportsProtectedBuffers">
      <MemberSignature Language="C#" Value="SupportsProtectedBuffers" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.DisplayFlags SupportsProtectedBuffers = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.DisplayFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Display flag: Indicates that the display supports compositing content
 that is stored in protected graphics buffers.
 </para>
          <para tool="javadoc-to-mdoc">
 If this flag is set then the display device supports compositing protected buffers.
 </para>
          <para tool="javadoc-to-mdoc">
 If this flag is not set then the display device may not support compositing
 protected buffers; the user may see a blank region on the screen instead of
 the protected content.
 </para>
          <para tool="javadoc-to-mdoc">
 Secure (DRM) video decoders may allocate protected graphics buffers to request that
 a hardware-protected path be provided between the video decoder and the external
 display sink.  If a hardware-protected path is not available, then content stored
 in protected graphics buffers may not be composited.
 </para>
          <para tool="javadoc-to-mdoc">
 An application can use the absence of this flag as a hint that it should not use protected
 buffers for this display because the content may not be visible.  For example,
 if the flag is not set then the application may choose not to show content on this
 display, show an informative error message, select an alternate content stream
 or adopt a different strategy for decoding content that does not rely on
 protected buffers.
 </para>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>
