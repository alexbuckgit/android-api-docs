<Type Name="ViewGroup" FullName="Android.Views.ViewGroup">
  <TypeSignature Language="C#" Value="public abstract class ViewGroup : Android.Views.View, Android.Views.IViewManager, Android.Views.IViewParent, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ViewGroup extends Android.Views.View implements class Android.Runtime.IJavaObject, class Android.Views.IViewManager, class Android.Views.IViewParent, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Views.View</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Views.IViewManager</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Views.IViewParent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/ViewGroup", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><format type="text/html"><h3>Developer Guides</h3></format><sample external-id="C06EDCCC157A7EB6795080314AF0CAC5" /><sample external-id="10923D0C9759B1EA62EA80AF4370C855" /><sample external-id="4F8B9AFB3E2BEFB6651B56CCA84DA373" /></summary>
    <remarks><para tool="javadoc-to-mdoc"><format type="text/html"><h3>Developer Guides</h3></format><sample external-id="C06EDCCC157A7EB6795080314AF0CAC5" /><sample external-id="10923D0C9759B1EA62EA80AF4370C855" /><sample external-id="4F8B9AFB3E2BEFB6651B56CCA84DA373" /></para><para tool="javadoc-to-mdoc">
 A <c>ViewGroup</c> is a special view that can contain other views
 (called children.) The view group is the base class for layouts and views
 containers. This class also defines the
 <c><see cref="!:NoType:android/view/ViewGroup$LayoutParams;Href=../../../reference/android/view/ViewGroup.LayoutParams.html" /></c> class which serves as the base
 class for layouts parameters.
 </para><para tool="javadoc-to-mdoc">
 Also see <c><see cref="!:NoType:android/view/ViewGroup$LayoutParams;Href=../../../reference/android/view/ViewGroup.LayoutParams.html" /></c> for layout attributes.
 </para><para tool="javadoc-to-mdoc">For more information about creating user interface layouts, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/ui/declaring-layout.html">XML Layouts</a></format> developer
 guide.</para><para tool="javadoc-to-mdoc">Here is a complete implementation of a custom ViewGroup that implements
 a simple <c><see cref="T:Android.Widget.FrameLayout" /></c> along with the ability to stack
 children in left and right gutters.</para><para tool="javadoc-to-mdoc">If you are implementing XML layout attributes as shown in the example, this is the
 corresponding definition for them that would go in <c>res/values/attrs.xml</c>:</para><para tool="javadoc-to-mdoc">Finally the layout manager can be used in an XML layout like so:</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ViewGroup (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary></summary>
        <remarks><para tool="javadoc-to-mdoc" /><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#ViewGroup(android.content.Context)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ViewGroup (Android.Content.Context context, Android.Util.IAttributeSet attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="attrs">To be added.</param>
        <summary></summary>
        <remarks><para tool="javadoc-to-mdoc" /><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#ViewGroup(android.content.Context, android.util.AttributeSet)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ViewGroup (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ViewGroup (Android.Content.Context context, Android.Util.IAttributeSet attrs, int defStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, class Android.Util.IAttributeSet attrs, int32 defStyle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/util/AttributeSet;I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
        <Parameter Name="defStyle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="attrs">To be added.</param>
        <param name="defStyle">To be added.</param>
        <summary></summary>
        <remarks><para tool="javadoc-to-mdoc" /><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#ViewGroup(android.content.Context, android.util.AttributeSet, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AddStatesFromChildren">
      <MemberSignature Language="C#" Value="public virtual bool AddStatesFromChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AddStatesFromChildren() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addStatesFromChildren", "()Z", "GetAddStatesFromChildrenHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns whether this ViewGroup's drawable states also include
 its children's drawable states.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns whether this ViewGroup's drawable states also include
 its children's drawable states.  This is used, for example, to
 make a group appear to be focused when its child EditText or button
 is focused.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#addStatesFromChildren()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AddView">
      <MemberSignature Language="C#" Value="public virtual void AddView (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddView(class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addView", "(Landroid/view/View;)V", "GetAddView_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">the child view to add</param>
        <summary></summary>
        <remarks><para tool="javadoc-to-mdoc" /><para tool="javadoc-to-mdoc">Adds a child view. If no layout parameters are already set on the child, the
 default parameters for this ViewGroup are set on the child.</para><para tool="javadoc-to-mdoc"><i>Note:</i> do not invoke this method from
 <c><see cref="M:Android.Views.View.Draw(Android.Graphics.Canvas)" /></c>, <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c>,
 <c><see cref="!:Android.Views.ViewGroup.dispatchDraw(android.graphics.Canvas)" /></c> or any related method.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#addView(android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.GenerateDefaultLayoutParams" />
      </Docs>
    </Member>
    <Member MemberName="AddView">
      <MemberSignature Language="C#" Value="public virtual void AddView (Android.Views.View child, Android.Views.ViewGroup.LayoutParams params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddView(class Android.Views.View child, class Android.Views.ViewGroup/LayoutParams params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addView", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V", "GetAddView_Landroid_view_View_Landroid_view_ViewGroup_LayoutParams_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="child">the child view to add</param>
        <param name="params">the layout parameters to set on the child
</param>
        <summary>Adds a child view with the specified layout parameters.</summary>
        <remarks><para tool="javadoc-to-mdoc">Adds a child view with the specified layout parameters.

 </para><para tool="javadoc-to-mdoc"><i>Note:</i> do not invoke this method from
 <c><see cref="M:Android.Views.View.Draw(Android.Graphics.Canvas)" /></c>, <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c>,
 <c><see cref="!:Android.Views.ViewGroup.dispatchDraw(android.graphics.Canvas)" /></c> or any related method.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#addView(android.view.View, android.view.ViewGroup.LayoutParams)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AddView">
      <MemberSignature Language="C#" Value="public virtual void AddView (Android.Views.View child, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddView(class Android.Views.View child, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addView", "(Landroid/view/View;I)V", "GetAddView_Landroid_view_View_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">the child view to add</param>
        <param name="index">the position at which to add the child</param>
        <summary>Adds a child view.</summary>
        <remarks><para tool="javadoc-to-mdoc">Adds a child view. If no layout parameters are already set on the child, the
 default parameters for this ViewGroup are set on the child.
 
 </para><para tool="javadoc-to-mdoc"><i>Note:</i> do not invoke this method from
 <c><see cref="M:Android.Views.View.Draw(Android.Graphics.Canvas)" /></c>, <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c>,
 <c><see cref="!:Android.Views.ViewGroup.dispatchDraw(android.graphics.Canvas)" /></c> or any related method.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#addView(android.view.View, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.GenerateDefaultLayoutParams" />
      </Docs>
    </Member>
    <Member MemberName="AddView">
      <MemberSignature Language="C#" Value="public virtual void AddView (Android.Views.View child, int index, Android.Views.ViewGroup.LayoutParams params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddView(class Android.Views.View child, int32 index, class Android.Views.ViewGroup/LayoutParams params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addView", "(Landroid/view/View;ILandroid/view/ViewGroup$LayoutParams;)V", "GetAddView_Landroid_view_View_ILandroid_view_ViewGroup_LayoutParams_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="child">the child view to add</param>
        <param name="index">the position at which to add the child</param>
        <param name="params">the layout parameters to set on the child
</param>
        <summary>Adds a child view with the specified layout parameters.</summary>
        <remarks><para tool="javadoc-to-mdoc">Adds a child view with the specified layout parameters.

 </para><para tool="javadoc-to-mdoc"><i>Note:</i> do not invoke this method from
 <c><see cref="M:Android.Views.View.Draw(Android.Graphics.Canvas)" /></c>, <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c>,
 <c><see cref="!:Android.Views.ViewGroup.dispatchDraw(android.graphics.Canvas)" /></c> or any related method.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#addView(android.view.View, int, android.view.ViewGroup.LayoutParams)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AddView">
      <MemberSignature Language="C#" Value="public virtual void AddView (Android.Views.View child, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddView(class Android.Views.View child, int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addView", "(Landroid/view/View;II)V", "GetAddView_Landroid_view_View_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">the child view to add
</param>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <summary>Adds a child view with this ViewGroup's default layout parameters and the
 specified width and height.</summary>
        <remarks><para tool="javadoc-to-mdoc">Adds a child view with this ViewGroup's default layout parameters and the
 specified width and height.

 </para><para tool="javadoc-to-mdoc"><i>Note:</i> do not invoke this method from
 <c><see cref="M:Android.Views.View.Draw(Android.Graphics.Canvas)" /></c>, <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c>,
 <c><see cref="!:Android.Views.ViewGroup.dispatchDraw(android.graphics.Canvas)" /></c> or any related method.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#addView(android.view.View, int, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AddViewInLayout">
      <MemberSignature Language="C#" Value="protected virtual bool AddViewInLayout (Android.Views.View child, int index, Android.Views.ViewGroup.LayoutParams params);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AddViewInLayout(class Android.Views.View child, int32 index, class Android.Views.ViewGroup/LayoutParams params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addViewInLayout", "(Landroid/view/View;ILandroid/view/ViewGroup$LayoutParams;)Z", "GetAddViewInLayout_Landroid_view_View_ILandroid_view_ViewGroup_LayoutParams_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="child">the view to add to the group</param>
        <param name="index">the index at which the child must be added</param>
        <param name="params">the layout parameters to associate with the child</param>
        <summary>Adds a view during layout.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Adds a view during layout. This is useful if in your onLayout() method,
 you need to add more views (as does the list view for example).

 If index is negative, it means put it at the end of the list.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#addViewInLayout(android.view.View, int, android.view.ViewGroup.LayoutParams)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AddViewInLayout">
      <MemberSignature Language="C#" Value="protected virtual bool AddViewInLayout (Android.Views.View child, int index, Android.Views.ViewGroup.LayoutParams params, bool preventRequestLayout);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AddViewInLayout(class Android.Views.View child, int32 index, class Android.Views.ViewGroup/LayoutParams params, bool preventRequestLayout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addViewInLayout", "(Landroid/view/View;ILandroid/view/ViewGroup$LayoutParams;Z)Z", "GetAddViewInLayout_Landroid_view_View_ILandroid_view_ViewGroup_LayoutParams_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
        <Parameter Name="preventRequestLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">the view to add to the group</param>
        <param name="index">the index at which the child must be added</param>
        <param name="params">the layout parameters to associate with the child</param>
        <param name="preventRequestLayout">if true, calling this method will not trigger a
        layout request on child</param>
        <summary>Adds a view during layout.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Adds a view during layout. This is useful if in your onLayout() method,
 you need to add more views (as does the list view for example).

 If index is negative, it means put it at the end of the list.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#addViewInLayout(android.view.View, int, android.view.ViewGroup.LayoutParams, boolean)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AlwaysDrawnWithCacheEnabled">
      <MemberSignature Language="C#" Value="public virtual bool AlwaysDrawnWithCacheEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AlwaysDrawnWithCacheEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isAlwaysDrawnWithCacheEnabled", "()Z", "GetIsAlwaysDrawnWithCacheEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setAlwaysDrawnWithCacheEnabled", "(Z)V", "GetSetAlwaysDrawnWithCacheEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this ViewGroup will always try to draw its children using their
 drawing cache.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#isAlwaysDrawnWithCacheEnabled()" target="_blank">[Android Documentation]</a><br /></format>Indicates whether this ViewGroup will always try to draw its children using their
 drawing cache. By default this property is enabled.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#setAlwaysDrawnWithCacheEnabled(boolean)" target="_blank">[Android Documentation]</a><br /></format>Indicates whether this ViewGroup will always try to draw its children using their
 drawing cache. This property can be set to true when the cache rendering is
 slightly different from the children's normal rendering. Renderings can be different,
 for instance, when the cache's quality is set to low.

 When this property is disabled, the ViewGroup will use the drawing cache of its
 children only when asked to. It's usually the task of subclasses to tell ViewGroup
 when to start using the drawing cache and when to stop using it.</para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.ViewGroup.AlwaysDrawnWithCacheEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.ChildrenDrawnWithCacheEnabled" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.AlwaysDrawnWithCacheEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.ChildrenDrawnWithCacheEnabled" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
        <altmember cref="P:Android.Views.View.DrawingCacheQuality" />
      </Docs>
    </Member>
    <Member MemberName="AnimationCacheEnabled">
      <MemberSignature Language="C#" Value="public virtual bool AnimationCacheEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AnimationCacheEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isAnimationCacheEnabled", "()Z", "GetIsAnimationCacheEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setAnimationCacheEnabled", "(Z)V", "GetSetAnimationCacheEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the children's drawing cache is used during a layout
 animation.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#isAnimationCacheEnabled()" target="_blank">[Android Documentation]</a><br /></format>Indicates whether the children's drawing cache is used during a layout
 animation. By default, the drawing cache is enabled but this will prevent
 nested layout animations from working. To nest animations, you must disable
 the cache.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#setAnimationCacheEnabled(boolean)" target="_blank">[Android Documentation]</a><br /></format>Enables or disables the children's drawing cache during a layout animation.
 By default, the drawing cache is enabled but this will prevent nested
 layout animations from working. To nest animations, you must disable the
 cache.</para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.ViewGroup.AnimationCacheEnabled" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.AnimationCacheEnabled" />
        <altmember cref="P:Android.Views.View.DrawingCacheEnabled" />
      </Docs>
    </Member>
    <Member MemberName="AnimationEnd">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.Animations.Animation.AnimationEndEventArgs&gt; AnimationEnd;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.Animations.Animation/AnimationEndEventArgs&gt; AnimationEnd" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.Animations.Animation+AnimationEndEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnimationRepeat">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.Animations.Animation.AnimationRepeatEventArgs&gt; AnimationRepeat;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.Animations.Animation/AnimationRepeatEventArgs&gt; AnimationRepeat" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.Animations.Animation+AnimationRepeatEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnimationStart">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.Animations.Animation.AnimationStartEventArgs&gt; AnimationStart;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.Animations.Animation/AnimationStartEventArgs&gt; AnimationStart" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.Animations.Animation+AnimationStartEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachLayoutAnimationParameters">
      <MemberSignature Language="C#" Value="protected virtual void AttachLayoutAnimationParameters (Android.Views.View child, Android.Views.ViewGroup.LayoutParams params, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AttachLayoutAnimationParameters(class Android.Views.View child, class Android.Views.ViewGroup/LayoutParams params, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("attachLayoutAnimationParameters", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;II)V", "GetAttachLayoutAnimationParameters_Landroid_view_View_Landroid_view_ViewGroup_LayoutParams_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">the child to associate with animation parameters</param>
        <param name="params">the child's layout parameters which hold the animation
        parameters</param>
        <param name="index">the index of the child in the view group</param>
        <param name="count">the number of children in the view group
</param>
        <summary>Subclasses should override this method to set layout animation
 parameters on the supplied child.</summary>
        <remarks><para tool="javadoc-to-mdoc">Subclasses should override this method to set layout animation
 parameters on the supplied child.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#attachLayoutAnimationParameters(android.view.View, android.view.ViewGroup.LayoutParams, int, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AttachViewToParent">
      <MemberSignature Language="C#" Value="protected virtual void AttachViewToParent (Android.Views.View child, int index, Android.Views.ViewGroup.LayoutParams params);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AttachViewToParent(class Android.Views.View child, int32 index, class Android.Views.ViewGroup/LayoutParams params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("attachViewToParent", "(Landroid/view/View;ILandroid/view/ViewGroup$LayoutParams;)V", "GetAttachViewToParent_Landroid_view_View_ILandroid_view_ViewGroup_LayoutParams_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="child">the child to attach</param>
        <param name="index">the index at which the child should be attached</param>
        <param name="params">the layout parameters of the child</param>
        <summary>Attaches a view to this view group.</summary>
        <remarks><para tool="javadoc-to-mdoc">Attaches a view to this view group. Attaching a view assigns this group as the parent,
 sets the layout parameters and puts the view in the list of children so that
 it can be retrieved by calling <c><see cref="M:Android.Views.ViewGroup.GetChildAt(System.Int32)" /></c>.
 </para><para tool="javadoc-to-mdoc">
 This method is intended to be lightweight and makes no assumptions about whether the
 parent or child should be redrawn. Proper use of this method will include also making
 any appropriate <c><see cref="M:Android.Views.View.RequestLayout" /></c> or <c><see cref="M:Android.Views.View.Invalidate" /></c> calls.
 For example, callers can <c><see cref="M:Android.Views.View.Post(Java.Lang.IRunnable)" /></c> a <c><see cref="T:Java.Lang.IRunnable" /></c>
 which performs a <c><see cref="M:Android.Views.View.RequestLayout" /></c> on the next frame, after all detach/attach
 calls are finished, causing layout to be run prior to redrawing the view hierarchy.
 </para><para tool="javadoc-to-mdoc">
 This method should be called only for views which were detached from their parent.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#attachViewToParent(android.view.View, int, android.view.ViewGroup.LayoutParams)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.RemoveDetachedView(Android.Views.View, System.Boolean)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachAllViewsFromParent" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(Android.Views.View)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="BringChildToFront">
      <MemberSignature Language="C#" Value="public virtual void BringChildToFront (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BringChildToFront(class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("bringChildToFront", "(Landroid/view/View;)V", "GetBringChildToFront_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The child to bring to the top of the z order
</param>
        <summary>Change the z order of the child so it's on top of all other children.</summary>
        <remarks><para tool="javadoc-to-mdoc">Change the z order of the child so it's on top of all other children.
 This ordering change may affect layout, if this container
 uses an order-dependent layout scheme (e.g., LinearLayout). Prior
 to <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../reference/android/os/Build.VERSION_CODES.html#KITKAT" /></c> this
 method should be followed by calls to <c><see cref="M:Android.Views.IViewParent.RequestLayout" /></c> and
 <c><see cref="M:Android.Views.View.Invalidate" /></c> on this parent to force the parent to redraw
 with the new child ordering.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#bringChildToFront(android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CanAnimate">
      <MemberSignature Language="C#" Value="protected virtual bool CanAnimate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CanAnimate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canAnimate", "()Z", "GetCanAnimateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the view group has the ability to animate its children
 after the first layout.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Indicates whether the view group has the ability to animate its children
 after the first layout.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#canAnimate()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CheckLayoutParams">
      <MemberSignature Language="C#" Value="protected virtual bool CheckLayoutParams (Android.Views.ViewGroup.LayoutParams p);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CheckLayoutParams(class Android.Views.ViewGroup/LayoutParams p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("checkLayoutParams", "(Landroid/view/ViewGroup$LayoutParams;)Z", "GetCheckLayoutParams_Landroid_view_ViewGroup_LayoutParams_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="p">To be added.</param>
        <summary></summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc" /><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#checkLayoutParams(android.view.ViewGroup.LayoutParams)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ChildCount">
      <MemberSignature Language="C#" Value="public virtual int ChildCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChildCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getChildCount", "()I", "GetGetChildCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of children in the group.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Returns the number of children in the group.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#getChildCount()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ChildDrawableStateChanged">
      <MemberSignature Language="C#" Value="public virtual void ChildDrawableStateChanged (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ChildDrawableStateChanged(class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("childDrawableStateChanged", "(Landroid/view/View;)V", "GetChildDrawableStateChanged_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The child whose drawable state has changed.
</param>
        <summary>If <c><see cref="M:Android.Views.ViewGroup.AddStatesFromChildren" /></c> is true, refreshes this group's
 drawable state (to include the states from its children).</summary>
        <remarks><para tool="javadoc-to-mdoc">If <c><see cref="M:Android.Views.ViewGroup.AddStatesFromChildren" /></c> is true, refreshes this group's
 drawable state (to include the states from its children).
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#childDrawableStateChanged(android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ChildHasTransientStateChanged">
      <MemberSignature Language="C#" Value="public virtual void ChildHasTransientStateChanged (Android.Views.View child, bool childHasTransientState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ChildHasTransientStateChanged(class Android.Views.View child, bool childHasTransientState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("childHasTransientStateChanged", "(Landroid/view/View;Z)V", "GetChildHasTransientStateChanged_Landroid_view_View_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="childHasTransientState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">Child view whose state has changed</param>
        <param name="childHasTransientState">true if this child has transient state
</param>
        <summary>Called when a child view has changed whether or not it is tracking transient state.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called when a child view has changed whether or not it is tracking transient state.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#childHasTransientStateChanged(android.view.View, boolean)" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildrenDrawingOrderEnabled">
      <MemberSignature Language="C#" Value="protected virtual bool ChildrenDrawingOrderEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ChildrenDrawingOrderEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isChildrenDrawingOrderEnabled", "()Z", "GetIsChildrenDrawingOrderEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setChildrenDrawingOrderEnabled", "(Z)V", "GetSetChildrenDrawingOrderEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the ViewGroup is drawing its children in the order defined by
 <c><see cref="M:Android.Views.ViewGroup.GetChildDrawingOrder(System.Int32, System.Int32)" /></c>.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#isChildrenDrawingOrderEnabled()" target="_blank">[Android Documentation]</a><br /></format>Indicates whether the ViewGroup is drawing its children in the order defined by
 <c><see cref="M:Android.Views.ViewGroup.GetChildDrawingOrder(System.Int32, System.Int32)" /></c>.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#setChildrenDrawingOrderEnabled(boolean)" target="_blank">[Android Documentation]</a><br /></format>Tells the ViewGroup whether to draw its children in the order defined by the method
 <c><see cref="M:Android.Views.ViewGroup.GetChildDrawingOrder(System.Int32, System.Int32)" /></c>.
 
 Note that <c><see cref="M:Android.Views.View.GetZ" /></c> reordering, done by <c><see cref="!:Android.Views.ViewGroup.dispatchDraw(android.graphics.Canvas)" /></c>,
 will override custom child ordering done via this method.</para><para tool="javadoc-to-mdoc" /></remarks>
        <since version="Added in API level 7" />
        <altmember cref="P:Android.Views.ViewGroup.ChildrenDrawingOrderEnabled" />
        <altmember cref="M:Android.Views.ViewGroup.GetChildDrawingOrder(System.Int32, System.Int32)" />
        <altmember cref="P:Android.Views.ViewGroup.ChildrenDrawingOrderEnabled" />
        <altmember cref="M:Android.Views.ViewGroup.GetChildDrawingOrder(System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ChildrenDrawnWithCacheEnabled">
      <MemberSignature Language="C#" Value="protected virtual bool ChildrenDrawnWithCacheEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ChildrenDrawnWithCacheEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isChildrenDrawnWithCacheEnabled", "()Z", "GetIsChildrenDrawnWithCacheEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setChildrenDrawnWithCacheEnabled", "(Z)V", "GetSetChildrenDrawnWithCacheEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the ViewGroup is currently drawing its children using
 their drawing cache.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#isChildrenDrawnWithCacheEnabled()" target="_blank">[Android Documentation]</a><br /></format>Indicates whether the ViewGroup is currently drawing its children using
 their drawing cache.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#setChildrenDrawnWithCacheEnabled(boolean)" target="_blank">[Android Documentation]</a><br /></format>Tells the ViewGroup to draw its children using their drawing cache. This property
 is ignored when <c><see cref="P:Android.Views.ViewGroup.AlwaysDrawnWithCacheEnabled" /></c> is true. A child's drawing cache
 will be used only if it has been enabled.

 Subclasses should call this method to start and stop using the drawing cache when
 they perform performance sensitive operations, like scrolling or animating.</para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.ViewGroup.AlwaysDrawnWithCacheEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.ChildrenDrawnWithCacheEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.AlwaysDrawnWithCacheEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.ChildrenDrawnWithCacheEnabled" />
      </Docs>
    </Member>
    <Member MemberName="ChildViewAdded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.ViewGroup.ChildViewAddedEventArgs&gt; ChildViewAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.ViewGroup/ChildViewAddedEventArgs&gt; ChildViewAdded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.ViewGroup+ChildViewAddedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildViewRemoved">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.ViewGroup.ChildViewRemovedEventArgs&gt; ChildViewRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.ViewGroup/ChildViewRemovedEventArgs&gt; ChildViewRemoved" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.ViewGroup+ChildViewRemovedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanupLayoutState">
      <MemberSignature Language="C#" Value="protected virtual void CleanupLayoutState (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CleanupLayoutState(class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("cleanupLayoutState", "(Landroid/view/View;)V", "GetCleanupLayoutState_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">the child on which to perform the cleanup
</param>
        <summary>Prevents the specified child to be laid out during the next layout pass.</summary>
        <remarks><para tool="javadoc-to-mdoc">Prevents the specified child to be laid out during the next layout pass.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#cleanupLayoutState(android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClearChildFocus">
      <MemberSignature Language="C#" Value="public virtual void ClearChildFocus (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearChildFocus(class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearChildFocus", "(Landroid/view/View;)V", "GetClearChildFocus_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The view that is giving up focus
</param>
        <summary>Called when a child of this parent is giving up focus
</summary>
        <remarks><para tool="javadoc-to-mdoc">Called when a child of this parent is giving up focus
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#clearChildFocus(android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClearDisappearingChildren">
      <MemberSignature Language="C#" Value="public virtual void ClearDisappearingChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearDisappearingChildren() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearDisappearingChildren", "()V", "GetClearDisappearingChildrenHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes any pending animations for views that have been removed.</summary>
        <remarks><para tool="javadoc-to-mdoc">Removes any pending animations for views that have been removed. Call
 this if you don't want animations for exiting views to stack up.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#clearDisappearingChildren()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ClipChildren">
      <MemberSignature Language="C#" Value="public virtual bool ClipChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getClipChildren", "()Z", "GetGetClipChildrenHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this group's children are clipped to their bounds before drawing.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Returns whether this group's children are clipped to their bounds before drawing.
 The default value is true.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#getClipChildren()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 18" />
        <altmember cref="M:Android.Views.ViewGroup.SetClipChildren(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="ClipToPaddingMask">
      <MemberSignature Language="C#" Value="protected const int ClipToPaddingMask = 34;" />
      <MemberSignature Language="ILAsm" Value=".field family static literal int32 ClipToPaddingMask = (34)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CLIP_TO_PADDING_MASK")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>34</MemberValue>
      <Docs>
        <summary>We clip to padding when FLAG_CLIP_TO_PADDING and FLAG_PADDING_NOT_NULL
 are set at the same time.</summary>
        <remarks><para tool="javadoc-to-mdoc">We clip to padding when FLAG_CLIP_TO_PADDING and FLAG_PADDING_NOT_NULL
 are set at the same time.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#CLIP_TO_PADDING_MASK" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Debug">
      <MemberSignature Language="C#" Value="protected virtual void Debug (int depth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Debug(int32 depth) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("debug", "(I)V", "GetDebug_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="depth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="depth">the indentation level</param>
        <summary>Prints information about this view in the log output, with the tag
 <c><see cref="F:Android.Views.View.ViewLogTag" /></c>.</summary>
        <remarks><para tool="javadoc-to-mdoc">Prints information about this view in the log output, with the tag
 <c><see cref="F:Android.Views.View.ViewLogTag" /></c>. Each line in the output is preceded with an
 indentation defined by the <c>depth</c>.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#debug(int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DescendantFocusability">
      <MemberSignature Language="C#" Value="public virtual Android.Views.DescendantFocusability DescendantFocusability { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.DescendantFocusability DescendantFocusability" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDescendantFocusability", "()I", "GetGetDescendantFocusabilityHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setDescendantFocusability", "(I)V", "GetSetDescendantFocusability_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.DescendantFocusability</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the descendant focusability of this view group.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#getDescendantFocusability()" target="_blank">[Android Documentation]</a><br /></format>Gets the descendant focusability of this view group.  The descendant
 focusability defines the relationship between this view group and its
 descendants when looking for a view to take focus in
 <c><see cref="!:Android.Views.ViewGroup.requestFocus(int, android.graphics.Rect)" /></c>.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#setDescendantFocusability(int)" target="_blank">[Android Documentation]</a><br /></format>Set the descendant focusability of this view group. This defines the relationship
 between this view group and its descendants when looking for a view to
 take focus in <c><see cref="!:Android.Views.ViewGroup.requestFocus(int, android.graphics.Rect)" /></c>.</para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DetachAllViewsFromParent">
      <MemberSignature Language="C#" Value="protected virtual void DetachAllViewsFromParent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DetachAllViewsFromParent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("detachAllViewsFromParent", "()V", "GetDetachAllViewsFromParentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Detaches all views from the parent.</summary>
        <remarks><para tool="javadoc-to-mdoc">Detaches all views from the parent. Detaching a view should be followed
 either by a call to
 <c><see cref="M:Android.Views.ViewGroup.AttachViewToParent(Android.Views.View, System.Int32, System.Int32)" /></c>
 or a call to <c><see cref="M:Android.Views.ViewGroup.RemoveDetachedView(Android.Views.View, System.Boolean)" /></c>. Detachment should only be
 temporary; reattachment or removal should happen within the same drawing cycle as
 detachment. When a view is detached, its parent is null and cannot be retrieved by a
 call to <c><see cref="M:Android.Views.ViewGroup.GetChildAt(System.Int32)" /></c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#detachAllViewsFromParent()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(Android.Views.View)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewsFromParent(System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.AttachViewToParent(Android.Views.View, System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.RemoveDetachedView(Android.Views.View, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DetachViewFromParent">
      <MemberSignature Language="C#" Value="protected virtual void DetachViewFromParent (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DetachViewFromParent(class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("detachViewFromParent", "(Landroid/view/View;)V", "GetDetachViewFromParent_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">the child to detach</param>
        <summary>Detaches a view from its parent.</summary>
        <remarks><para tool="javadoc-to-mdoc">Detaches a view from its parent. Detaching a view should be followed
 either by a call to
 <c><see cref="M:Android.Views.ViewGroup.AttachViewToParent(Android.Views.View, System.Int32, System.Int32)" /></c>
 or a call to <c><see cref="M:Android.Views.ViewGroup.RemoveDetachedView(Android.Views.View, System.Boolean)" /></c>. Detachment should only be
 temporary; reattachment or removal should happen within the same drawing cycle as
 detachment. When a view is detached, its parent is null and cannot be retrieved by a
 call to <c><see cref="M:Android.Views.ViewGroup.GetChildAt(System.Int32)" /></c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#detachViewFromParent(android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewsFromParent(System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachAllViewsFromParent" />
        <altmember cref="M:Android.Views.ViewGroup.AttachViewToParent(Android.Views.View, System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.RemoveDetachedView(Android.Views.View, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DetachViewFromParent">
      <MemberSignature Language="C#" Value="protected virtual void DetachViewFromParent (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DetachViewFromParent(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("detachViewFromParent", "(I)V", "GetDetachViewFromParent_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index of the child to detach</param>
        <summary>Detaches a view from its parent.</summary>
        <remarks><para tool="javadoc-to-mdoc">Detaches a view from its parent. Detaching a view should be followed
 either by a call to
 <c><see cref="M:Android.Views.ViewGroup.AttachViewToParent(Android.Views.View, System.Int32, System.Int32)" /></c>
 or a call to <c><see cref="M:Android.Views.ViewGroup.RemoveDetachedView(Android.Views.View, System.Boolean)" /></c>. Detachment should only be
 temporary; reattachment or removal should happen within the same drawing cycle as
 detachment. When a view is detached, its parent is null and cannot be retrieved by a
 call to <c><see cref="M:Android.Views.ViewGroup.GetChildAt(System.Int32)" /></c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#detachViewFromParent(int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(Android.Views.View)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachAllViewsFromParent" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewsFromParent(System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.AttachViewToParent(Android.Views.View, System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.RemoveDetachedView(Android.Views.View, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DetachViewsFromParent">
      <MemberSignature Language="C#" Value="protected virtual void DetachViewsFromParent (int start, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DetachViewsFromParent(int32 start, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("detachViewsFromParent", "(II)V", "GetDetachViewsFromParent_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">the first index of the childrend range to detach</param>
        <param name="count">the number of children to detach</param>
        <summary>Detaches a range of views from their parents.</summary>
        <remarks><para tool="javadoc-to-mdoc">Detaches a range of views from their parents. Detaching a view should be followed
 either by a call to
 <c><see cref="M:Android.Views.ViewGroup.AttachViewToParent(Android.Views.View, System.Int32, System.Int32)" /></c>
 or a call to <c><see cref="M:Android.Views.ViewGroup.RemoveDetachedView(Android.Views.View, System.Boolean)" /></c>. Detachment should only be
 temporary; reattachment or removal should happen within the same drawing cycle as
 detachment. When a view is detached, its parent is null and cannot be retrieved by a
 call to <c><see cref="M:Android.Views.ViewGroup.GetChildAt(System.Int32)" /></c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#detachViewsFromParent(int, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(Android.Views.View)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachAllViewsFromParent" />
        <altmember cref="M:Android.Views.ViewGroup.AttachViewToParent(Android.Views.View, System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.RemoveDetachedView(Android.Views.View, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DispatchFreezeSelfOnly">
      <MemberSignature Language="C#" Value="protected virtual void DispatchFreezeSelfOnly (Android.Util.SparseArray container);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DispatchFreezeSelfOnly(class Android.Util.SparseArray container) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchFreezeSelfOnly", "(Landroid/util/SparseArray;)V", "GetDispatchFreezeSelfOnly_Landroid_util_SparseArray_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="Android.Util.SparseArray" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchSetActivated">
      <MemberSignature Language="C#" Value="public virtual void DispatchSetActivated (bool activated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchSetActivated(bool activated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchSetActivated", "(Z)V", "GetDispatchSetActivated_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="activated">The new activated state
</param>
        <summary>Dispatch setActivated to all of this View's children.</summary>
        <remarks><para tool="javadoc-to-mdoc">Dispatch setActivated to all of this View's children.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#dispatchSetActivated(boolean)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="DispatchSetSelected">
      <MemberSignature Language="C#" Value="public virtual void DispatchSetSelected (bool selected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchSetSelected(bool selected) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchSetSelected", "(Z)V", "GetDispatchSetSelected_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selected" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="selected">The new selected state
</param>
        <summary>Dispatch setSelected to all of this View's children.</summary>
        <remarks><para tool="javadoc-to-mdoc">Dispatch setSelected to all of this View's children.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#dispatchSetSelected(boolean)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchThawSelfOnly">
      <MemberSignature Language="C#" Value="protected virtual void DispatchThawSelfOnly (Android.Util.SparseArray container);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DispatchThawSelfOnly(class Android.Util.SparseArray container) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchThawSelfOnly", "(Landroid/util/SparseArray;)V", "GetDispatchThawSelfOnly_Landroid_util_SparseArray_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="Android.Util.SparseArray" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawChild">
      <MemberSignature Language="C#" Value="protected virtual bool DrawChild (Android.Graphics.Canvas canvas, Android.Views.View child, long drawingTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DrawChild(class Android.Graphics.Canvas canvas, class Android.Views.View child, int64 drawingTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("drawChild", "(Landroid/graphics/Canvas;Landroid/view/View;J)Z", "GetDrawChild_Landroid_graphics_Canvas_Landroid_view_View_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="canvas" Type="Android.Graphics.Canvas" />
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="drawingTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="canvas">The canvas on which to draw the child</param>
        <param name="child">Who to draw</param>
        <param name="drawingTime">The time at which draw is occurring</param>
        <summary>Draw one child of this View Group.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Draw one child of this View Group. This method is responsible for getting
 the canvas in the right state. This includes clipping, translating so
 that the child's scrolled origin is at 0, 0, and applying any animation
 transformations.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#drawChild(android.graphics.Canvas, android.view.View, long)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="EndViewTransition">
      <MemberSignature Language="C#" Value="public virtual void EndViewTransition (Android.Views.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndViewTransition(class Android.Views.View view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("endViewTransition", "(Landroid/view/View;)V", "GetEndViewTransition_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">To be added.</param>
        <summary>This method should always be called following an earlier call to
 <c><see cref="M:Android.Views.ViewGroup.StartViewTransition(Android.Views.View)" /></c>.</summary>
        <remarks><para tool="javadoc-to-mdoc">This method should always be called following an earlier call to
 <c><see cref="M:Android.Views.ViewGroup.StartViewTransition(Android.Views.View)" /></c>. The given View is finally removed from its parent
 and will no longer be displayed. Note that this method does not perform the functionality
 of removing a view from its parent; it just discontinues the display of a View that
 has previously been removed.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#endViewTransition(android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="FlagUseChildDrawingOrder">
      <MemberSignature Language="C#" Value="protected const int FlagUseChildDrawingOrder = 1024;" />
      <MemberSignature Language="ILAsm" Value=".field family static literal int32 FlagUseChildDrawingOrder = (1024)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_USE_CHILD_DRAWING_ORDER")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1024</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusableViewAvailable">
      <MemberSignature Language="C#" Value="public virtual void FocusableViewAvailable (Android.Views.View v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FocusableViewAvailable(class Android.Views.View v) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("focusableViewAvailable", "(Landroid/view/View;)V", "GetFocusableViewAvailable_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="v" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="v">The view that has become newly focusable
</param>
        <summary>Tells the parent that a new focusable view has become available.</summary>
        <remarks><para tool="javadoc-to-mdoc">Tells the parent that a new focusable view has become available. This is
 to handle transitions from the case where there are no focusable views to
 the case where the first focusable view appears.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#focusableViewAvailable(android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FocusedChild">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View FocusedChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.View FocusedChild" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFocusedChild", "()Landroid/view/View;", "GetGetFocusedChildHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the focused child of this view, if any.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Returns the focused child of this view, if any. The child may have focus
 or contain focus.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#getFocusedChild()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FocusSearch">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View FocusSearch (Android.Views.View focused, Android.Views.FocusSearchDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View FocusSearch(class Android.Views.View focused, valuetype Android.Views.FocusSearchDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("focusSearch", "(Landroid/view/View;I)Landroid/view/View;", "GetFocusSearch_Landroid_view_View_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="focused" Type="Android.Views.View" />
        <Parameter Name="direction" Type="Android.Views.FocusSearchDirection" />
      </Parameters>
      <Docs>
        <param name="focused">The view that currently has focus</param>
        <param name="direction">One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and
        FOCUS_RIGHT, or 0 for not applicable.
</param>
        <summary>Find the nearest view in the specified direction that wants to take
 focus.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Find the nearest view in the specified direction that wants to take
 focus.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#focusSearch(android.view.View, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GatherTransparentRegion">
      <MemberSignature Language="C#" Value="public virtual bool GatherTransparentRegion (Android.Graphics.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GatherTransparentRegion(class Android.Graphics.Region region) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("gatherTransparentRegion", "(Landroid/graphics/Region;)Z", "GetGatherTransparentRegion_Landroid_graphics_Region_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="Android.Graphics.Region" />
      </Parameters>
      <Docs>
        <param name="region">The transparent region for this ViewAncestor (window).</param>
        <summary>This is used by the RootView to perform an optimization when
 the view hierarchy contains one or several SurfaceView.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">This is used by the RootView to perform an optimization when
 the view hierarchy contains one or several SurfaceView.
 SurfaceView is always considered transparent, but its children are not,
 therefore all View objects remove themselves from the global transparent
 region (passed as a parameter to this function).
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#gatherTransparentRegion(android.graphics.Region)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GenerateDefaultLayoutParams">
      <MemberSignature Language="C#" Value="protected virtual Android.Views.ViewGroup.LayoutParams GenerateDefaultLayoutParams ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Android.Views.ViewGroup/LayoutParams GenerateDefaultLayoutParams() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("generateDefaultLayoutParams", "()Landroid/view/ViewGroup$LayoutParams;", "GetGenerateDefaultLayoutParamsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewGroup+LayoutParams</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a set of default layout parameters.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns a set of default layout parameters. These parameters are requested
 when the View passed to <c><see cref="M:Android.Views.ViewGroup.AddView(Android.Views.View)" /></c> has no layout parameters
 already set. If null is returned, an exception is thrown from addView.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#generateDefaultLayoutParams()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GenerateLayoutParams">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ViewGroup.LayoutParams GenerateLayoutParams (Android.Util.IAttributeSet attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ViewGroup/LayoutParams GenerateLayoutParams(class Android.Util.IAttributeSet attrs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("generateLayoutParams", "(Landroid/util/AttributeSet;)Landroid/view/ViewGroup$LayoutParams;", "GetGenerateLayoutParams_Landroid_util_AttributeSet_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewGroup+LayoutParams</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrs" Type="Android.Util.IAttributeSet" />
      </Parameters>
      <Docs>
        <param name="attrs">the attributes to build the layout parameters from</param>
        <summary>Returns a new set of layout parameters based on the supplied attributes set.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns a new set of layout parameters based on the supplied attributes set.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#generateLayoutParams(android.util.AttributeSet)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GenerateLayoutParams">
      <MemberSignature Language="C#" Value="protected virtual Android.Views.ViewGroup.LayoutParams GenerateLayoutParams (Android.Views.ViewGroup.LayoutParams p);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Android.Views.ViewGroup/LayoutParams GenerateLayoutParams(class Android.Views.ViewGroup/LayoutParams p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("generateLayoutParams", "(Landroid/view/ViewGroup$LayoutParams;)Landroid/view/ViewGroup$LayoutParams;", "GetGenerateLayoutParams_Landroid_view_ViewGroup_LayoutParams_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewGroup+LayoutParams</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="p">The layout parameters to convert into a suitable set of layout parameters
          for this ViewGroup.</param>
        <summary>Returns a safe set of layout parameters based on the supplied layout params.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns a safe set of layout parameters based on the supplied layout params.
 When a ViewGroup is passed a View whose layout params do not pass the test of
 <c><see cref="M:Android.Views.ViewGroup.CheckLayoutParams(.LayoutParams)" /></c>, this method
 is invoked. This method should return a new set of layout params suitable for
 this ViewGroup, possibly by copying the appropriate attributes from the
 specified set of layout params.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#generateLayoutParams(android.view.ViewGroup.LayoutParams)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetChildAt">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View GetChildAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View GetChildAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getChildAt", "(I)Landroid/view/View;", "GetGetChildAt_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the position at which to get the view from</param>
        <summary>Returns the view at the specified position in the group.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns the view at the specified position in the group.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#getChildAt(int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetChildDrawingOrder">
      <MemberSignature Language="C#" Value="protected virtual int GetChildDrawingOrder (int childCount, int i);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 GetChildDrawingOrder(int32 childCount, int32 i) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getChildDrawingOrder", "(II)I", "GetGetChildDrawingOrder_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childCount" Type="System.Int32" />
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="childCount">To be added.</param>
        <param name="i">The current iteration.</param>
        <summary>Returns the index of the child to draw for this iteration.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns the index of the child to draw for this iteration. Override this
 if you want to change the drawing order of children. By default, it
 returns i.
 </para><para tool="javadoc-to-mdoc">
 NOTE: In order for this method to be called, you must enable child ordering
 first by calling <c><see cref="P:Android.Views.ViewGroup.ChildrenDrawingOrderEnabled" /></c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#getChildDrawingOrder(int, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.ViewGroup.ChildrenDrawingOrderEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.ChildrenDrawingOrderEnabled" />
      </Docs>
    </Member>
    <Member MemberName="GetChildMeasureSpec">
      <MemberSignature Language="C#" Value="public static int GetChildMeasureSpec (int spec, int padding, int childDimension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetChildMeasureSpec(int32 spec, int32 padding, int32 childDimension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getChildMeasureSpec", "(III)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spec" Type="System.Int32" />
        <Parameter Name="padding" Type="System.Int32" />
        <Parameter Name="childDimension" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="spec">The requirements for this view</param>
        <param name="padding">The padding of this view for the current dimension and
        margins, if applicable</param>
        <param name="childDimension">How big the child wants to be in the current
        dimension</param>
        <summary>Does the hard part of measureChildren: figuring out the MeasureSpec to
 pass to a particular child.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Does the hard part of measureChildren: figuring out the MeasureSpec to
 pass to a particular child. This method figures out the right MeasureSpec
 for one dimension (height or width) of one child view.

 The goal is to combine information from our MeasureSpec with the
 LayoutParams of the child to get the best possible results. For example,
 if the this view knows its size (because its MeasureSpec has a mode of
 EXACTLY), and the child has indicated in its LayoutParams that it wants
 to be the same size as the parent, the parent should ask the child to
 layout given an exact size.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#getChildMeasureSpec(int, int, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetChildStaticTransformation">
      <MemberSignature Language="C#" Value="protected virtual bool GetChildStaticTransformation (Android.Views.View child, Android.Views.Animations.Transformation t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetChildStaticTransformation(class Android.Views.View child, class Android.Views.Animations.Transformation t) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getChildStaticTransformation", "(Landroid/view/View;Landroid/view/animation/Transformation;)Z", "GetGetChildStaticTransformation_Landroid_view_View_Landroid_view_animation_Transformation_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="t" Type="Android.Views.Animations.Transformation" />
      </Parameters>
      <Docs>
        <param name="child">The child view whose static transform is being requested</param>
        <param name="t">The Transformation which will hold the result</param>
        <summary>Sets  <c>t</c> to be the static transformation of the child, if set, returning a
 boolean to indicate whether a static transform was set.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Sets  <c>t</c> to be the static transformation of the child, if set, returning a
 boolean to indicate whether a static transform was set. The default implementation
 simply returns <c>false</c>; subclasses may override this method for different
 behavior. <c><see cref="M:Android.Views.ViewGroup.SetStaticTransformationsEnabled(System.Boolean)" /></c> must be set to true
 for this method to be called.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#getChildStaticTransformation(android.view.View, android.view.animation.Transformation)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.SetStaticTransformationsEnabled(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetChildVisibleRect">
      <MemberSignature Language="C#" Value="public virtual bool GetChildVisibleRect (Android.Views.View child, Android.Graphics.Rect r, Android.Graphics.Point offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetChildVisibleRect(class Android.Views.View child, class Android.Graphics.Rect r, class Android.Graphics.Point offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getChildVisibleRect", "(Landroid/view/View;Landroid/graphics/Rect;Landroid/graphics/Point;)Z", "GetGetChildVisibleRect_Landroid_view_View_Landroid_graphics_Rect_Landroid_graphics_Point_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="r" Type="Android.Graphics.Rect" />
        <Parameter Name="offset" Type="Android.Graphics.Point" />
      </Parameters>
      <Docs>
        <param name="child">A child View, whose rectangular visible region we want to compute</param>
        <param name="r">The input rectangle, defined in the child coordinate system. Will be overwritten to
 contain the resulting visible rectangle, expressed in global (root) coordinates</param>
        <param name="offset">The input coordinates of a point, defined in the child coordinate system.
 As with the <c>r</c> parameter, this will be overwritten to contain the global (root)
 coordinates of that point.
 A <c>null</c> value is valid (in case you are not interested in this result)</param>
        <summary>Compute the visible part of a rectangular region defined in terms of a child view's
 coordinates.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Compute the visible part of a rectangular region defined in terms of a child view's
 coordinates.

 </para><para tool="javadoc-to-mdoc">Returns the clipped visible part of the rectangle <c>r</c>, defined in the
 <c>child</c>'s local coordinate system. <c>r</c> is modified by this method to
 contain the result, expressed in the global (root) coordinate system.</para><para tool="javadoc-to-mdoc">The resulting rectangle is always axis aligned. If a rotation is applied to a node in the
 View hierarchy, the result is the axis-aligned bounding box of the visible rectangle.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfChild">
      <MemberSignature Language="C#" Value="public virtual int IndexOfChild (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfChild(class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("indexOfChild", "(Landroid/view/View;)I", "GetIndexOfChild_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">the view for which to get the position</param>
        <summary>Returns the position in the group of the specified child view.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns the position in the group of the specified child view.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#indexOfChild(android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateChild">
      <MemberSignature Language="C#" Value="public void InvalidateChild (Android.Views.View child, Android.Graphics.Rect dirty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateChild(class Android.Views.View child, class Android.Graphics.Rect dirty) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invalidateChild", "(Landroid/view/View;Landroid/graphics/Rect;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="dirty" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="child">The child which is dirty</param>
        <param name="dirty">The area within the child that is invalid
</param>
        <summary>Don't call or override this method.</summary>
        <remarks><para tool="javadoc-to-mdoc">Don't call or override this method. It is used for the implementation of
 the view hierarchy.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#invalidateChild(android.view.View, android.graphics.Rect)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateChildInParent">
      <MemberSignature Language="C#" Value="public virtual Android.Views.IViewParent InvalidateChildInParent (int[] location, Android.Graphics.Rect dirty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.IViewParent InvalidateChildInParent(int32[] location, class Android.Graphics.Rect dirty) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invalidateChildInParent", "([ILandroid/graphics/Rect;)Landroid/view/ViewParent;", "GetInvalidateChildInParent_arrayILandroid_graphics_Rect_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.IViewParent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32[]" />
        <Parameter Name="dirty" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="location">An array of 2 ints containing the left and top
        coordinates of the child to invalidate</param>
        <param name="dirty">The area within the child that is invalid</param>
        <summary>Don't call or override this method.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Don't call or override this method. It is used for the implementation of
 the view hierarchy.

 This implementation returns null if this ViewGroup does not have a parent,
 if this ViewGroup is already fully invalidated or if the dirty rectangle
 does not intersect with this ViewGroup's bounds.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#invalidateChildInParent(int[], android.graphics.Rect)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Layout">
      <MemberSignature Language="C#" Value="public override sealed void Layout (int l, int t, int r, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Layout(int32 l, int32 t, int32 r, int32 b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("layout", "(IIII)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="System.Int32" />
        <Parameter Name="t" Type="System.Int32" />
        <Parameter Name="r" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="l">Left position, relative to parent</param>
        <param name="t">Top position, relative to parent</param>
        <param name="r">Right position, relative to parent</param>
        <param name="b">Bottom position, relative to parent
</param>
        <summary>Assign a size and position to a view and all of its
 descendants

 </summary>
        <remarks><para tool="javadoc-to-mdoc">Assign a size and position to a view and all of its
 descendants

 </para><para tool="javadoc-to-mdoc">This is the second phase of the layout mechanism.
 (The first is measuring). In this phase, each parent calls
 layout on all of its children to position them.
 This is typically done using the child measurements
 that were stored in the measure pass().</para><para tool="javadoc-to-mdoc">Derived classes should not override this method.
 Derived classes with children should override
 onLayout. In that method, they should
 call layout on each of their children.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#layout(int, int, int, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LayoutAnimation">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Animations.LayoutAnimationController LayoutAnimation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Animations.LayoutAnimationController LayoutAnimation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLayoutAnimation", "()Landroid/view/animation/LayoutAnimationController;", "GetGetLayoutAnimationHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setLayoutAnimation", "(Landroid/view/animation/LayoutAnimationController;)V", "GetSetLayoutAnimation_Landroid_view_animation_LayoutAnimationController_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Animations.LayoutAnimationController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the layout animation controller used to animate the group's
 children.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#getLayoutAnimation()" target="_blank">[Android Documentation]</a><br /></format>Returns the layout animation controller used to animate the group's
 children.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#setLayoutAnimation(android.view.animation.LayoutAnimationController)" target="_blank">[Android Documentation]</a><br /></format>Sets the layout animation controller used to animate the group's
 children after the first layout.</para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LayoutAnimationListener">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Animations.Animation.IAnimationListener LayoutAnimationListener { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Animations.Animation/IAnimationListener LayoutAnimationListener" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLayoutAnimationListener", "()Landroid/view/animation/Animation$AnimationListener;", "GetGetLayoutAnimationListenerHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setLayoutAnimationListener", "(Landroid/view/animation/Animation$AnimationListener;)V", "GetSetLayoutAnimationListener_Landroid_view_animation_Animation_AnimationListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Animations.Animation+IAnimationListener</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the animation listener to which layout animation events are
 sent.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#getLayoutAnimationListener()" target="_blank">[Android Documentation]</a><br /></format>Returns the animation listener to which layout animation events are
 sent.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#setLayoutAnimationListener(android.view.animation.Animation.AnimationListener)" target="_blank">[Android Documentation]</a><br /></format>Specifies the animation listener to which layout animation events must
 be sent. Only
 <c><see cref="!:NoType:android/view/animation/Animation$AnimationListener;Href=../../../reference/android/view/animation/Animation.AnimationListener.html#onAnimationStart(android.view.animation.Animation)" /></c>
 and
 <c><see cref="!:NoType:android/view/animation/Animation$AnimationListener;Href=../../../reference/android/view/animation/Animation.AnimationListener.html#onAnimationEnd(android.view.animation.Animation)" /></c>
 are invoked.</para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LayoutMode">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ViewLayoutMode LayoutMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.ViewLayoutMode LayoutMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLayoutMode", "()I", "GetGetLayoutModeHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setLayoutMode", "(I)V", "GetSetLayoutMode_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewLayoutMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the basis of alignment during layout operations on this ViewGroup:
 either <c><see cref="F:Android.Views.ViewGroup.LayoutModeClipBounds" /></c> or <c><see cref="F:Android.Views.ViewGroup.LayoutModeOpticalBounds" /></c>.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#getLayoutMode()" target="_blank">[Android Documentation]</a><br /></format>Returns the basis of alignment during layout operations on this ViewGroup:
 either <c><see cref="F:Android.Views.ViewGroup.LayoutModeClipBounds" /></c> or <c><see cref="F:Android.Views.ViewGroup.LayoutModeOpticalBounds" /></c>.
 
 If no layoutMode was explicitly set, either programmatically or in an XML resource,
 the method returns the layoutMode of the view's parent ViewGroup if such a parent exists,
 otherwise the method returns a default value of <c><see cref="F:Android.Views.ViewGroup.LayoutModeClipBounds" /></c>.</para><para tool="javadoc-to-mdoc" /><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#setLayoutMode(int)" target="_blank">[Android Documentation]</a><br /></format>Sets the basis of alignment during the layout of this ViewGroup.
 Valid values are either <c><see cref="F:Android.Views.ViewGroup.LayoutModeClipBounds" /></c> or
 <c><see cref="F:Android.Views.ViewGroup.LayoutModeOpticalBounds" /></c>.</para></remarks>
        <since version="Added in API level 18" />
        <altmember cref="P:Android.Views.ViewGroup.LayoutMode" />
        <altmember cref="P:Android.Views.ViewGroup.LayoutMode" />
      </Docs>
    </Member>
    <Member MemberName="LayoutModeClipBounds">
      <MemberSignature Language="C#" Value="public const Android.Views.ViewLayoutMode LayoutModeClipBounds = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.ViewLayoutMode LayoutModeClipBounds = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LAYOUT_MODE_CLIP_BOUNDS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.ViewLayoutMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewLayoutMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>This constant is a <c><see cref="P:Android.Views.ViewGroup.LayoutMode" /></c>.</summary>
        <remarks><para tool="javadoc-to-mdoc">This constant is a <c><see cref="P:Android.Views.ViewGroup.LayoutMode" /></c>.
 Clip bounds are the raw values of <c><see cref="P:Android.Views.View.Left" /></c>, <c><see cref="P:Android.Views.View.Top" /></c>,
 <c><see cref="P:Android.Views.View.Right" /></c> and <c><see cref="P:Android.Views.View.Bottom" /></c>.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#LAYOUT_MODE_CLIP_BOUNDS" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="LayoutModeOpticalBounds">
      <MemberSignature Language="C#" Value="public const Android.Views.ViewLayoutMode LayoutModeOpticalBounds = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.ViewLayoutMode LayoutModeOpticalBounds = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LAYOUT_MODE_OPTICAL_BOUNDS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Views.ViewLayoutMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewLayoutMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>This constant is a <c><see cref="P:Android.Views.ViewGroup.LayoutMode" /></c>.</summary>
        <remarks><para tool="javadoc-to-mdoc">This constant is a <c><see cref="P:Android.Views.ViewGroup.LayoutMode" /></c>.
 Optical bounds describe where a widget appears to be. They sit inside the clip
 bounds which need to cover a larger area to allow other effects,
 such as shadows and glows, to be drawn.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#LAYOUT_MODE_OPTICAL_BOUNDS" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="LayoutTransition">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.LayoutTransition LayoutTransition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Animation.LayoutTransition LayoutTransition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLayoutTransition", "()Landroid/animation/LayoutTransition;", "GetGetLayoutTransitionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setLayoutTransition", "(Landroid/animation/LayoutTransition;)V", "GetSetLayoutTransition_Landroid_animation_LayoutTransition_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.LayoutTransition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the LayoutTransition object for this ViewGroup.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#getLayoutTransition()" target="_blank">[Android Documentation]</a><br /></format>Gets the LayoutTransition object for this ViewGroup. If the LayoutTransition object is
 not null, changes in layout which occur because of children being added to or removed from
 the ViewGroup will be animated according to the animations defined in that LayoutTransition
 object. By default, the transition object is null (so layout changes are not animated).</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#setLayoutTransition(android.animation.LayoutTransition)" target="_blank">[Android Documentation]</a><br /></format>Sets the LayoutTransition object for this ViewGroup. If the LayoutTransition object is
 not null, changes in layout which occur because of children being added to or removed from
 the ViewGroup will be animated according to the animations defined in that LayoutTransition
 object. By default, the transition object is null (so layout changes are not animated).

 </para><para tool="javadoc-to-mdoc">Replacing a non-null transition will cause that previous transition to be
 canceled, if it is currently running, to restore this container to
 its correct post-transition state.</para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="MeasureChild">
      <MemberSignature Language="C#" Value="protected virtual void MeasureChild (Android.Views.View child, int parentWidthMeasureSpec, int parentHeightMeasureSpec);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void MeasureChild(class Android.Views.View child, int32 parentWidthMeasureSpec, int32 parentHeightMeasureSpec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("measureChild", "(Landroid/view/View;II)V", "GetMeasureChild_Landroid_view_View_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="parentWidthMeasureSpec" Type="System.Int32" />
        <Parameter Name="parentHeightMeasureSpec" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">The child to measure</param>
        <param name="parentWidthMeasureSpec">The width requirements for this view</param>
        <param name="parentHeightMeasureSpec">The height requirements for this view
</param>
        <summary>Ask one of the children of this view to measure itself, taking into
 account both the MeasureSpec requirements for this view and its padding.</summary>
        <remarks><para tool="javadoc-to-mdoc">Ask one of the children of this view to measure itself, taking into
 account both the MeasureSpec requirements for this view and its padding.
 The heavy lifting is done in getChildMeasureSpec.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#measureChild(android.view.View, int, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MeasureChildren">
      <MemberSignature Language="C#" Value="protected virtual void MeasureChildren (int widthMeasureSpec, int heightMeasureSpec);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void MeasureChildren(int32 widthMeasureSpec, int32 heightMeasureSpec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("measureChildren", "(II)V", "GetMeasureChildren_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="widthMeasureSpec" Type="System.Int32" />
        <Parameter Name="heightMeasureSpec" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="widthMeasureSpec">The width requirements for this view</param>
        <param name="heightMeasureSpec">The height requirements for this view
</param>
        <summary>Ask all of the children of this view to measure themselves, taking into
 account both the MeasureSpec requirements for this view and its padding.</summary>
        <remarks><para tool="javadoc-to-mdoc">Ask all of the children of this view to measure themselves, taking into
 account both the MeasureSpec requirements for this view and its padding.
 We skip children that are in the GONE state The heavy lifting is done in
 getChildMeasureSpec.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#measureChildren(int, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MeasureChildWithMargins">
      <MemberSignature Language="C#" Value="protected virtual void MeasureChildWithMargins (Android.Views.View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void MeasureChildWithMargins(class Android.Views.View child, int32 parentWidthMeasureSpec, int32 widthUsed, int32 parentHeightMeasureSpec, int32 heightUsed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("measureChildWithMargins", "(Landroid/view/View;IIII)V", "GetMeasureChildWithMargins_Landroid_view_View_IIIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="parentWidthMeasureSpec" Type="System.Int32" />
        <Parameter Name="widthUsed" Type="System.Int32" />
        <Parameter Name="parentHeightMeasureSpec" Type="System.Int32" />
        <Parameter Name="heightUsed" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">The child to measure</param>
        <param name="parentWidthMeasureSpec">The width requirements for this view</param>
        <param name="widthUsed">Extra space that has been used up by the parent
        horizontally (possibly by other children of the parent)</param>
        <param name="parentHeightMeasureSpec">The height requirements for this view</param>
        <param name="heightUsed">Extra space that has been used up by the parent
        vertically (possibly by other children of the parent)
</param>
        <summary>Ask one of the children of this view to measure itself, taking into
 account both the MeasureSpec requirements for this view and its padding
 and margins.</summary>
        <remarks><para tool="javadoc-to-mdoc">Ask one of the children of this view to measure itself, taking into
 account both the MeasureSpec requirements for this view and its padding
 and margins. The child must have MarginLayoutParams The heavy lifting is
 done in getChildMeasureSpec.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#measureChildWithMargins(android.view.View, int, int, int, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MotionEventSplittingEnabled">
      <MemberSignature Language="C#" Value="public virtual bool MotionEventSplittingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MotionEventSplittingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isMotionEventSplittingEnabled", "()Z", "GetIsMotionEventSplittingEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setMotionEventSplittingEnabled", "(Z)V", "GetSetMotionEventSplittingEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if MotionEvents dispatched to this ViewGroup can be split to multiple children.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#isMotionEventSplittingEnabled()" target="_blank">[Android Documentation]</a><br /></format>Returns true if MotionEvents dispatched to this ViewGroup can be split to multiple children.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#setMotionEventSplittingEnabled(boolean)" target="_blank">[Android Documentation]</a><br /></format>Enable or disable the splitting of MotionEvents to multiple children during touch event
 dispatch. This behavior is enabled by default for applications that target an
 SDK version of <c><see cref="!:NoType:android/os/Build$VERSION_CODES;Href=../../../reference/android/os/Build.VERSION_CODES.html#HONEYCOMB" /></c> or newer.

 When this option is enabled MotionEvents may be split and dispatched to different child
 views depending on where each pointer initially went down. This allows for user interactions
 such as scrolling two panes of content independently, chording of buttons, and performing
 independent gestures on different pieces of content.</para><para tool="javadoc-to-mdoc" /></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="NotifySubtreeAccessibilityStateChanged">
      <MemberSignature Language="C#" Value="public virtual void NotifySubtreeAccessibilityStateChanged (Android.Views.View child, Android.Views.View source, Android.Views.Accessibility.ContentChangeTypes changeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifySubtreeAccessibilityStateChanged(class Android.Views.View child, class Android.Views.View source, valuetype Android.Views.Accessibility.ContentChangeTypes changeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("notifySubtreeAccessibilityStateChanged", "(Landroid/view/View;Landroid/view/View;I)V", "GetNotifySubtreeAccessibilityStateChanged_Landroid_view_View_Landroid_view_View_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="source" Type="Android.Views.View" />
        <Parameter Name="changeType" Type="Android.Views.Accessibility.ContentChangeTypes" />
      </Parameters>
      <Docs>
        <param name="child">The direct child whose subtree has changed.</param>
        <param name="source">The descendant view that changed.</param>
        <param name="changeType">A bit mask of the types of changes that occurred. One
            or more of:
            <list type="bullet"><item><term><c><see cref="F:Android.Views.Accessibility.AccessibilityEvent.ContentChangeTypeContentDescription" /></c><item><term><c><see cref="F:Android.Views.Accessibility.AccessibilityEvent.ContentChangeTypeSubtree" /></c><item><term><c><see cref="F:Android.Views.Accessibility.AccessibilityEvent.ContentChangeTypeText" /></c><item><term><c><see cref="F:Android.Views.Accessibility.AccessibilityEvent.ContentChangeTypeUndefined" /></c></term></item></term></item></term></item></term></item></list></param>
        <summary>Notifies a view parent that the accessibility state of one of its
 descendants has changed and that the structure of the subtree is
 different.</summary>
        <remarks><para tool="javadoc-to-mdoc">Notifies a view parent that the accessibility state of one of its
 descendants has changed and that the structure of the subtree is
 different.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#notifySubtreeAccessibilityStateChanged(android.view.View, android.view.View, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OffsetDescendantRectToMyCoords">
      <MemberSignature Language="C#" Value="public void OffsetDescendantRectToMyCoords (Android.Views.View descendant, Android.Graphics.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OffsetDescendantRectToMyCoords(class Android.Views.View descendant, class Android.Graphics.Rect rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("offsetDescendantRectToMyCoords", "(Landroid/view/View;Landroid/graphics/Rect;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descendant" Type="Android.Views.View" />
        <Parameter Name="rect" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="descendant">A descendant of this view</param>
        <param name="rect">A rectangle defined in descendant's coordinate space.
</param>
        <summary>Offset a rectangle that is in a descendant's coordinate
 space into our coordinate space.</summary>
        <remarks><para tool="javadoc-to-mdoc">Offset a rectangle that is in a descendant's coordinate
 space into our coordinate space.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#offsetDescendantRectToMyCoords(android.view.View, android.graphics.Rect)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OffsetRectIntoDescendantCoords">
      <MemberSignature Language="C#" Value="public void OffsetRectIntoDescendantCoords (Android.Views.View descendant, Android.Graphics.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OffsetRectIntoDescendantCoords(class Android.Views.View descendant, class Android.Graphics.Rect rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("offsetRectIntoDescendantCoords", "(Landroid/view/View;Landroid/graphics/Rect;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descendant" Type="Android.Views.View" />
        <Parameter Name="rect" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="descendant">A descendant of this view</param>
        <param name="rect">A rectangle defined in descendant's coordinate space.
</param>
        <summary>Offset a rectangle that is in our coordinate space into an ancestor's
 coordinate space.</summary>
        <remarks><para tool="javadoc-to-mdoc">Offset a rectangle that is in our coordinate space into an ancestor's
 coordinate space.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#offsetRectIntoDescendantCoords(android.view.View, android.graphics.Rect)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnInterceptHoverEvent">
      <MemberSignature Language="C#" Value="public virtual bool OnInterceptHoverEvent (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnInterceptHoverEvent(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onInterceptHoverEvent", "(Landroid/view/MotionEvent;)Z", "GetOnInterceptHoverEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">The motion event that describes the hover.</param>
        <summary>Implement this method to intercept hover events before they are handled
 by child views.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Implement this method to intercept hover events before they are handled
 by child views.
 </para><para tool="javadoc-to-mdoc">
 This method is called before dispatching a hover event to a child of
 the view group or to the view group's own <c><see cref="M:Android.Views.View.OnHoverEvent(Android.Views.MotionEvent)" /></c> to allow
 the view group a chance to intercept the hover event.
 This method can also be used to watch all pointer motions that occur within
 the bounds of the view group even when the pointer is hovering over
 a child of the view group rather than over the view group itself.
 </para><para tool="javadoc-to-mdoc">
 The view group can prevent its children from receiving hover events by
 implementing this method and returning <c>true</c> to indicate
 that it would like to intercept hover events.  The view group must
 continuously return <c>true</c> from <c><see cref="M:Android.Views.ViewGroup.OnInterceptHoverEvent(Android.Views.MotionEvent)" /></c>
 for as long as it wishes to continue intercepting hover events from
 its children.
 </para><para tool="javadoc-to-mdoc">
 Interception preserves the invariant that at most one view can be
 hovered at a time by transferring hover focus from the currently hovered
 child to the view group or vice-versa as needed.
 </para><para tool="javadoc-to-mdoc">
 If this method returns <c>true</c> and a child is already hovered, then the
 child view will first receive a hover exit event and then the view group
 itself will receive a hover enter event in <c><see cref="M:Android.Views.View.OnHoverEvent(Android.Views.MotionEvent)" /></c>.
 Likewise, if this method had previously returned <c>true</c> to intercept hover
 events and instead returns <c>false</c> while the pointer is hovering
 within the bounds of one of a child, then the view group will first receive a
 hover exit event in <c><see cref="M:Android.Views.View.OnHoverEvent(Android.Views.MotionEvent)" /></c> and then the hovered child will
 receive a hover enter event.
 </para><para tool="javadoc-to-mdoc">
 The default implementation always returns false.
 </para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#onInterceptHoverEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="OnInterceptTouchEvent">
      <MemberSignature Language="C#" Value="public virtual bool OnInterceptTouchEvent (Android.Views.MotionEvent ev);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnInterceptTouchEvent(class Android.Views.MotionEvent ev) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onInterceptTouchEvent", "(Landroid/view/MotionEvent;)Z", "GetOnInterceptTouchEvent_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ev" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="ev">The motion event being dispatched down the hierarchy.</param>
        <summary>Implement this method to intercept all touch screen motion events.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Implement this method to intercept all touch screen motion events.  This
 allows you to watch events as they are dispatched to your children, and
 take ownership of the current gesture at any point.

 </para><para tool="javadoc-to-mdoc">Using this function takes some care, as it has a fairly complicated
 interaction with <c><see cref="M:Android.Views.View.OnTouchEvent(Android.Views.MotionEvent)" /></c>, and using it requires implementing
 that method as well as this one in the correct way.  Events will be
 received in the following order:

 <list type="number"><item><term> You will receive the down event here.
 </term></item><item><term> The down event will be handled either by a child of this view
 group, or given to your own onTouchEvent() method to handle; this means
 you should implement onTouchEvent() to return true, so you will
 continue to see the rest of the gesture (instead of looking for
 a parent view to handle it).  Also, by returning true from
 onTouchEvent(), you will not receive any following
 events in onInterceptTouchEvent() and all touch processing must
 happen in onTouchEvent() like normal.
 </term></item><item><term> For as long as you return false from this function, each following
 event (up to and including the final up) will be delivered first here
 and then to the target's onTouchEvent().
 </term></item><item><term> If you return true from here, you will not receive any
 following events: the target view will receive the same event but
 with the action <c><see cref="!:Android.Views.MotionEvent.ACTION_CANCEL" /></c>, and all further
 events will be delivered to your onTouchEvent() method and no longer
 appear here.
 </term></item></list></para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#onInterceptTouchEvent(android.view.MotionEvent)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected abstract void OnLayout (bool changed, int l, int t, int r, int b);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLayout(bool changed, int32 l, int32 t, int32 r, int32 b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onLayout", "(ZIIII)V", "GetOnLayout_ZIIIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changed" Type="System.Boolean" />
        <Parameter Name="l" Type="System.Int32" />
        <Parameter Name="t" Type="System.Int32" />
        <Parameter Name="r" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="changed">This is a new size or position for this view</param>
        <param name="l">Left position, relative to parent</param>
        <param name="t">Top position, relative to parent</param>
        <param name="r">Right position, relative to parent</param>
        <param name="b">Bottom position, relative to parent
</param>
        <summary>Called from layout when this view should
 assign a size and position to each of its children.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called from layout when this view should
 assign a size and position to each of its children.

 Derived classes with children should override
 this method and call layout on each of
 their children.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#onLayout(boolean, int, int, int, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnRequestFocusInDescendants">
      <MemberSignature Language="C#" Value="protected virtual bool OnRequestFocusInDescendants (int direction, Android.Graphics.Rect previouslyFocusedRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnRequestFocusInDescendants(int32 direction, class Android.Graphics.Rect previouslyFocusedRect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onRequestFocusInDescendants", "(ILandroid/graphics/Rect;)Z", "GetOnRequestFocusInDescendants_ILandroid_graphics_Rect_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Int32" />
        <Parameter Name="previouslyFocusedRect" Type="Android.Graphics.Rect" />
      </Parameters>
      <Docs>
        <param name="direction">One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT</param>
        <param name="previouslyFocusedRect">The rectangle (in this View's coordinate system)
        to give a finer grained hint about where focus is coming from.  May be null
        if there is no hint.</param>
        <summary>Look for a descendant to call <c><see cref="M:Android.Views.View.RequestFocus" /></c> on.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Look for a descendant to call <c><see cref="M:Android.Views.View.RequestFocus" /></c> on.
 Called by <c><see cref="!:Android.Views.ViewGroup.requestFocus(int, android.graphics.Rect)" /></c>
 when it wants to request focus within its children.  Override this to
 customize how your <c><see cref="T:Android.Views.ViewGroup" /></c> requests focus within its children.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#onRequestFocusInDescendants(int, android.graphics.Rect)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnRequestSendAccessibilityEvent">
      <MemberSignature Language="C#" Value="public virtual bool OnRequestSendAccessibilityEvent (Android.Views.View child, Android.Views.Accessibility.AccessibilityEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnRequestSendAccessibilityEvent(class Android.Views.View child, class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onRequestSendAccessibilityEvent", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)Z", "GetOnRequestSendAccessibilityEvent_Landroid_view_View_Landroid_view_accessibility_AccessibilityEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="child">The child which requests sending the event.</param>
        <param name="e">The event to be sent.</param>
        <summary>Called when a child has requested sending an <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> and
 gives an opportunity to its parent to augment the event.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Called when a child has requested sending an <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c> and
 gives an opportunity to its parent to augment the event.
 </para><para tool="javadoc-to-mdoc">
 If an <c><see cref="!:NoType:android/view/View$AccessibilityDelegate;Href=../../../reference/android/view/View.AccessibilityDelegate.html" /></c> has been specified via calling
 <c><see cref="M:Android.Views.View.SetAccessibilityDelegate(.AccessibilityDelegate)" /></c> its
 <c><see cref="!:NoType:android/view/View$AccessibilityDelegate;Href=../../../reference/android/view/View.AccessibilityDelegate.html#onRequestSendAccessibilityEvent(android.view.ViewGroup, android.view.View, android.view.accessibility.AccessibilityEvent)" /></c>
 is responsible for handling this call.
 </para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#onRequestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Views.ViewGroup.RequestSendAccessibilityEvent(Android.Views.View, Android.Views.Accessibility.AccessibilityEvent)" />
      </Docs>
    </Member>
    <Member MemberName="PersistentDrawingCache">
      <MemberSignature Language="C#" Value="public virtual Android.Views.PersistentDrawingCaches PersistentDrawingCache { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Views.PersistentDrawingCaches PersistentDrawingCache" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPersistentDrawingCache", "()I", "GetGetPersistentDrawingCacheHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setPersistentDrawingCache", "(I)V", "GetSetPersistentDrawingCache_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.PersistentDrawingCaches</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an integer indicating what types of drawing caches are kept in memory.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#getPersistentDrawingCache()" target="_blank">[Android Documentation]</a><br /></format>Returns an integer indicating what types of drawing caches are kept in memory.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/android/view/ViewGroup.html#setPersistentDrawingCache(int)" target="_blank">[Android Documentation]</a><br /></format>Indicates what types of drawing caches should be kept in memory after
 they have been created.</para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Views.ViewGroup.PersistentDrawingCache" />
        <altmember cref="P:Android.Views.ViewGroup.AnimationCacheEnabled" />
        <altmember cref="P:Android.Views.ViewGroup.PersistentDrawingCache" />
        <altmember cref="P:Android.Views.ViewGroup.AnimationCacheEnabled" />
      </Docs>
    </Member>
    <Member MemberName="RecomputeViewAttributes">
      <MemberSignature Language="C#" Value="public virtual void RecomputeViewAttributes (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RecomputeViewAttributes(class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("recomputeViewAttributes", "(Landroid/view/View;)V", "GetRecomputeViewAttributes_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">View whose attributes have changed.
</param>
        <summary>Tell view hierarchy that the global view attributes need to be
 re-evaluated.</summary>
        <remarks><para tool="javadoc-to-mdoc">Tell view hierarchy that the global view attributes need to be
 re-evaluated.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#recomputeViewAttributes(android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAllViews">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllViews ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllViews() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeAllViews", "()V", "GetRemoveAllViewsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Call this method to remove all child views from the
 ViewGroup.</summary>
        <remarks><para tool="javadoc-to-mdoc">Call this method to remove all child views from the
 ViewGroup.
 
 </para><para tool="javadoc-to-mdoc"><i>Note:</i> do not invoke this method from
 <c><see cref="M:Android.Views.View.Draw(Android.Graphics.Canvas)" /></c>, <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c>,
 <c><see cref="!:Android.Views.ViewGroup.dispatchDraw(android.graphics.Canvas)" /></c> or any related method.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#removeAllViews()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAllViewsInLayout">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllViewsInLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllViewsInLayout() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeAllViewsInLayout", "()V", "GetRemoveAllViewsInLayoutHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called by a ViewGroup subclass to remove child views from itself,
 when it must first know its size on screen before it can calculate how many
 child views it will render.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called by a ViewGroup subclass to remove child views from itself,
 when it must first know its size on screen before it can calculate how many
 child views it will render. An example is a Gallery or a ListView, which
 may "have" 50 children, but actually only render the number of children
 that can currently fit inside the object on screen. Do not call
 this method unless you are extending ViewGroup and understand the
 view measuring and layout pipeline.

 </para><para tool="javadoc-to-mdoc"><i>Note:</i> do not invoke this method from
 <c><see cref="M:Android.Views.View.Draw(Android.Graphics.Canvas)" /></c>, <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c>,
 <c><see cref="!:Android.Views.ViewGroup.dispatchDraw(android.graphics.Canvas)" /></c> or any related method.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#removeAllViewsInLayout()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveDetachedView">
      <MemberSignature Language="C#" Value="protected virtual void RemoveDetachedView (Android.Views.View child, bool animate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RemoveDetachedView(class Android.Views.View child, bool animate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeDetachedView", "(Landroid/view/View;Z)V", "GetRemoveDetachedView_Landroid_view_View_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="animate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">the child to be definitely removed from the view hierarchy</param>
        <param name="animate">if true and the view has an animation, the view is placed in the
                disappearing views list, otherwise, it is detached from the window</param>
        <summary>Finishes the removal of a detached view.</summary>
        <remarks><para tool="javadoc-to-mdoc">Finishes the removal of a detached view. This method will dispatch the detached from
 window event and notify the hierarchy change listener.
 </para><para tool="javadoc-to-mdoc">
 This method is intended to be lightweight and makes no assumptions about whether the
 parent or child should be redrawn. Proper use of this method will include also making
 any appropriate <c><see cref="M:Android.Views.View.RequestLayout" /></c> or <c><see cref="M:Android.Views.View.Invalidate" /></c> calls.
 For example, callers can <c><see cref="M:Android.Views.View.Post(Java.Lang.IRunnable)" /></c> a <c><see cref="T:Java.Lang.IRunnable" /></c>
 which performs a <c><see cref="M:Android.Views.View.RequestLayout" /></c> on the next frame, after all detach/remove
 calls are finished, causing layout to be run prior to redrawing the view hierarchy.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#removeDetachedView(android.view.View, boolean)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Views.ViewGroup.AttachViewToParent(Android.Views.View, System.Int32, System.Int32)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachAllViewsFromParent" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(Android.Views.View)" />
        <altmember cref="M:Android.Views.ViewGroup.DetachViewFromParent(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveView">
      <MemberSignature Language="C#" Value="public virtual void RemoveView (Android.Views.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveView(class Android.Views.View view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeView", "(Landroid/view/View;)V", "GetRemoveView_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">To be added.</param>
        <summary></summary>
        <remarks><para tool="javadoc-to-mdoc" /><para tool="javadoc-to-mdoc"><i>Note:</i> do not invoke this method from
 <c><see cref="M:Android.Views.View.Draw(Android.Graphics.Canvas)" /></c>, <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c>,
 <c><see cref="!:Android.Views.ViewGroup.dispatchDraw(android.graphics.Canvas)" /></c> or any related method.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#removeView(android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveViewAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveViewAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveViewAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeViewAt", "(I)V", "GetRemoveViewAt_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the position in the group of the view to remove
</param>
        <summary>Removes the view at the specified position in the group.</summary>
        <remarks><para tool="javadoc-to-mdoc">Removes the view at the specified position in the group.

 </para><para tool="javadoc-to-mdoc"><i>Note:</i> do not invoke this method from
 <c><see cref="M:Android.Views.View.Draw(Android.Graphics.Canvas)" /></c>, <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c>,
 <c><see cref="!:Android.Views.ViewGroup.dispatchDraw(android.graphics.Canvas)" /></c> or any related method.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#removeViewAt(int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveViewInLayout">
      <MemberSignature Language="C#" Value="public virtual void RemoveViewInLayout (Android.Views.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveViewInLayout(class Android.Views.View view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeViewInLayout", "(Landroid/view/View;)V", "GetRemoveViewInLayout_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">the view to remove from the group
</param>
        <summary>Removes a view during layout.</summary>
        <remarks><para tool="javadoc-to-mdoc">Removes a view during layout. This is useful if in your onLayout() method,
 you need to remove more views.

 </para><para tool="javadoc-to-mdoc"><i>Note:</i> do not invoke this method from
 <c><see cref="M:Android.Views.View.Draw(Android.Graphics.Canvas)" /></c>, <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c>,
 <c><see cref="!:Android.Views.ViewGroup.dispatchDraw(android.graphics.Canvas)" /></c> or any related method.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#removeViewInLayout(android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveViews">
      <MemberSignature Language="C#" Value="public virtual void RemoveViews (int start, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveViews(int32 start, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeViews", "(II)V", "GetRemoveViews_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">the first position in the group of the range of views to remove</param>
        <param name="count">the number of views to remove
</param>
        <summary>Removes the specified range of views from the group.</summary>
        <remarks><para tool="javadoc-to-mdoc">Removes the specified range of views from the group.

 </para><para tool="javadoc-to-mdoc"><i>Note:</i> do not invoke this method from
 <c><see cref="M:Android.Views.View.Draw(Android.Graphics.Canvas)" /></c>, <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c>,
 <c><see cref="!:Android.Views.ViewGroup.dispatchDraw(android.graphics.Canvas)" /></c> or any related method.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#removeViews(int, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveViewsInLayout">
      <MemberSignature Language="C#" Value="public virtual void RemoveViewsInLayout (int start, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveViewsInLayout(int32 start, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeViewsInLayout", "(II)V", "GetRemoveViewsInLayout_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">the index of the first view to remove from the group</param>
        <param name="count">the number of views to remove from the group
</param>
        <summary>Removes a range of views during layout.</summary>
        <remarks><para tool="javadoc-to-mdoc">Removes a range of views during layout. This is useful if in your onLayout() method,
 you need to remove more views.

 </para><para tool="javadoc-to-mdoc"><i>Note:</i> do not invoke this method from
 <c><see cref="M:Android.Views.View.Draw(Android.Graphics.Canvas)" /></c>, <c><see cref="M:Android.Views.View.OnDraw(Android.Graphics.Canvas)" /></c>,
 <c><see cref="!:Android.Views.ViewGroup.dispatchDraw(android.graphics.Canvas)" /></c> or any related method.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#removeViewsInLayout(int, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestChildFocus">
      <MemberSignature Language="C#" Value="public virtual void RequestChildFocus (Android.Views.View child, Android.Views.View focused);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestChildFocus(class Android.Views.View child, class Android.Views.View focused) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestChildFocus", "(Landroid/view/View;Landroid/view/View;)V", "GetRequestChildFocus_Landroid_view_View_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="focused" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">The child of this ViewParent that wants focus. This view
        will contain the focused view. It is not necessarily the view that
        actually has focus.</param>
        <param name="focused">The view that is a descendant of child that actually has
        focus
</param>
        <summary>Called when a child of this parent wants focus
</summary>
        <remarks><para tool="javadoc-to-mdoc">Called when a child of this parent wants focus
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#requestChildFocus(android.view.View, android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestChildRectangleOnScreen">
      <MemberSignature Language="C#" Value="public virtual bool RequestChildRectangleOnScreen (Android.Views.View child, Android.Graphics.Rect rectangle, bool immediate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestChildRectangleOnScreen(class Android.Views.View child, class Android.Graphics.Rect rectangle, bool immediate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestChildRectangleOnScreen", "(Landroid/view/View;Landroid/graphics/Rect;Z)Z", "GetRequestChildRectangleOnScreen_Landroid_view_View_Landroid_graphics_Rect_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="rectangle" Type="Android.Graphics.Rect" />
        <Parameter Name="immediate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">The direct child making the request.</param>
        <param name="rectangle">The rectangle in the child's coordinates the child
        wishes to be on the screen.</param>
        <param name="immediate">True to forbid animated or delayed scrolling,
        false otherwise</param>
        <summary>Called when a child of this group wants a particular rectangle to be
 positioned onto the screen.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Called when a child of this group wants a particular rectangle to be
 positioned onto the screen.  <c><see cref="T:Android.Views.ViewGroup" /></c>s overriding this can trust
 that:
 <list type="bullet"><item><term>child will be a direct child of this group</term></item><item><term>rectangle will be in the child's coordinates</term></item></list></para><para tool="javadoc-to-mdoc"><c><see cref="T:Android.Views.ViewGroup" /></c>s overriding this should uphold the contract:</para><list type="bullet"><item><term>nothing will change if the rectangle is already visible</term></item><item><term>the view port will be scrolled only just enough to make the
       rectangle visible</term></item><list type="bullet" /></list><para tool="javadoc-to-mdoc" /><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestDisallowInterceptTouchEvent">
      <MemberSignature Language="C#" Value="public virtual void RequestDisallowInterceptTouchEvent (bool disallowIntercept);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestDisallowInterceptTouchEvent(bool disallowIntercept) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestDisallowInterceptTouchEvent", "(Z)V", "GetRequestDisallowInterceptTouchEvent_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disallowIntercept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disallowIntercept">True if the child does not want the parent to
            intercept touch events.
</param>
        <summary>Called when a child does not want this parent and its ancestors to
 intercept touch events with
 <c><see cref="M:Android.Views.ViewGroup.OnInterceptTouchEvent(Android.Views.MotionEvent)" /></c>.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called when a child does not want this parent and its ancestors to
 intercept touch events with
 <c><see cref="M:Android.Views.ViewGroup.OnInterceptTouchEvent(Android.Views.MotionEvent)" /></c>.

 </para><para tool="javadoc-to-mdoc">This parent should pass this call onto its parents. This parent must obey
 this request for the duration of the touch (that is, only clear the flag
 after this parent has received an up or a cancel.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#requestDisallowInterceptTouchEvent(boolean)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RequestSendAccessibilityEvent">
      <MemberSignature Language="C#" Value="public virtual bool RequestSendAccessibilityEvent (Android.Views.View child, Android.Views.Accessibility.AccessibilityEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestSendAccessibilityEvent(class Android.Views.View child, class Android.Views.Accessibility.AccessibilityEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestSendAccessibilityEvent", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)Z", "GetRequestSendAccessibilityEvent_Landroid_view_View_Landroid_view_accessibility_AccessibilityEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
        <Parameter Name="e" Type="Android.Views.Accessibility.AccessibilityEvent" />
      </Parameters>
      <Docs>
        <param name="child">The child which requests sending the event.</param>
        <param name="e">The event to be sent.</param>
        <summary>Called by a child to request from its parent to send an <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Called by a child to request from its parent to send an <c><see cref="T:Android.Views.Accessibility.AccessibilityEvent" /></c>.
 The child has already populated a record for itself in the event and is delegating
 to its parent to send the event. The parent can optionally add a record for itself.
 </para><para tool="javadoc-to-mdoc">
 Note: An accessibility event is fired by an individual view which populates the
       event with a record for its state and requests from its parent to perform
       the sending. The parent can optionally add a record for itself before
       dispatching the request to its parent. A parent can also choose not to
       respect the request for sending the event. The accessibility event is sent
       by the topmost view in the view tree.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#requestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="RequestTransparentRegion">
      <MemberSignature Language="C#" Value="public virtual void RequestTransparentRegion (Android.Views.View child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestTransparentRegion(class Android.Views.View child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestTransparentRegion", "(Landroid/view/View;)V", "GetRequestTransparentRegion_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="child">the view requesting the transparent region computation
 
</param>
        <summary>Called when a child wants the view hierarchy to gather and report
 transparent regions to the window compositor.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called when a child wants the view hierarchy to gather and report
 transparent regions to the window compositor. Views that "punch" holes in
 the view hierarchy, such as SurfaceView can use this API to improve
 performance of the system. When no such a view is present in the
 hierarchy, this optimization in unnecessary and might slightly reduce the
 view hierarchy performance.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#requestTransparentRegion(android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ResetResolvedLayoutDirection">
      <MemberSignature Language="C#" Value="protected virtual void ResetResolvedLayoutDirection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ResetResolvedLayoutDirection() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("resetResolvedLayoutDirection", "()V", "GetResetResolvedLayoutDirectionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetResolvedTextDirection">
      <MemberSignature Language="C#" Value="protected virtual void ResetResolvedTextDirection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ResetResolvedTextDirection() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("resetResolvedTextDirection", "()V", "GetResetResolvedTextDirectionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleLayoutAnimation">
      <MemberSignature Language="C#" Value="public virtual void ScheduleLayoutAnimation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScheduleLayoutAnimation() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("scheduleLayoutAnimation", "()V", "GetScheduleLayoutAnimationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schedules the layout animation to be played after the next layout pass
 of this view group.</summary>
        <remarks><para tool="javadoc-to-mdoc">Schedules the layout animation to be played after the next layout pass
 of this view group. This can be used to restart the layout animation
 when the content of the view group changes or when the activity is
 paused and resumed.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#scheduleLayoutAnimation()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetAddStatesFromChildren">
      <MemberSignature Language="C#" Value="public virtual void SetAddStatesFromChildren (bool addsStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAddStatesFromChildren(bool addsStates) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAddStatesFromChildren", "(Z)V", "GetSetAddStatesFromChildren_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addsStates" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="addsStates">To be added.</param>
        <summary>Sets whether this ViewGroup's drawable states also include
 its children's drawable states.</summary>
        <remarks><para tool="javadoc-to-mdoc">Sets whether this ViewGroup's drawable states also include
 its children's drawable states.  This is used, for example, to
 make a group appear to be focused when its child EditText or button
 is focused.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#setAddStatesFromChildren(boolean)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetChildrenDrawingCacheEnabled">
      <MemberSignature Language="C#" Value="protected virtual void SetChildrenDrawingCacheEnabled (bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetChildrenDrawingCacheEnabled(bool enabled) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setChildrenDrawingCacheEnabled", "(Z)V", "GetSetChildrenDrawingCacheEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enabled">true to enable the cache, false to dispose of it
</param>
        <summary>Enables or disables the drawing cache for each child of this view group.</summary>
        <remarks><para tool="javadoc-to-mdoc">Enables or disables the drawing cache for each child of this view group.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#setChildrenDrawingCacheEnabled(boolean)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetClipChildren">
      <MemberSignature Language="C#" Value="public virtual void SetClipChildren (bool clipChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetClipChildren(bool clipChildren) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setClipChildren", "(Z)V", "GetSetClipChildren_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clipChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clipChildren">true to clip children to their bounds,
        false otherwise</param>
        <summary>By default, children are clipped to their bounds before drawing.</summary>
        <remarks><para tool="javadoc-to-mdoc">By default, children are clipped to their bounds before drawing. This
 allows view groups to override this behavior for animations, etc.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#setClipChildren(boolean)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetClipToPadding">
      <MemberSignature Language="C#" Value="public virtual void SetClipToPadding (bool clipToPadding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetClipToPadding(bool clipToPadding) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setClipToPadding", "(Z)V", "GetSetClipToPadding_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clipToPadding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clipToPadding">true to clip children to the padding of the
        group, false otherwise</param>
        <summary>By default, children are clipped to the padding of the ViewGroup.</summary>
        <remarks><para tool="javadoc-to-mdoc">By default, children are clipped to the padding of the ViewGroup. This
 allows view groups to override this behavior</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#setClipToPadding(boolean)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnHierarchyChangeListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnHierarchyChangeListener (Android.Views.ViewGroup.IOnHierarchyChangeListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnHierarchyChangeListener(class Android.Views.ViewGroup/IOnHierarchyChangeListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnHierarchyChangeListener", "(Landroid/view/ViewGroup$OnHierarchyChangeListener;)V", "GetSetOnHierarchyChangeListener_Landroid_view_ViewGroup_OnHierarchyChangeListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ViewGroup+IOnHierarchyChangeListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback to invoke on hierarchy change
</param>
        <summary>Register a callback to be invoked when a child is added to or removed
 from this view.</summary>
        <remarks><para tool="javadoc-to-mdoc">Register a callback to be invoked when a child is added to or removed
 from this view.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#setOnHierarchyChangeListener(android.view.ViewGroup.OnHierarchyChangeListener)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetStaticTransformationsEnabled">
      <MemberSignature Language="C#" Value="protected virtual void SetStaticTransformationsEnabled (bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetStaticTransformationsEnabled(bool enabled) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setStaticTransformationsEnabled", "(Z)V", "GetSetStaticTransformationsEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enabled">True to enable static transformations on children, false otherwise.</param>
        <summary>When this property is set to true, this ViewGroup supports static transformations on
 children; this causes
 <c><see cref="M:Android.Views.ViewGroup.GetChildStaticTransformation(Android.Views.View, Android.Views.Animations.Transformation)" /></c> to be
 invoked when a child is drawn.</summary>
        <remarks><para tool="javadoc-to-mdoc">When this property is set to true, this ViewGroup supports static transformations on
 children; this causes
 <c><see cref="M:Android.Views.ViewGroup.GetChildStaticTransformation(Android.Views.View, Android.Views.Animations.Transformation)" /></c> to be
 invoked when a child is drawn.

 Any subclass overriding
 <c><see cref="M:Android.Views.ViewGroup.GetChildStaticTransformation(Android.Views.View, Android.Views.Animations.Transformation)" /></c> should
 set this property to true.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#setStaticTransformationsEnabled(boolean)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.Views.ViewGroup.GetChildStaticTransformation(Android.Views.View, Android.Views.Animations.Transformation)" />
      </Docs>
    </Member>
    <Member MemberName="ShouldDelayChildPressedState">
      <MemberSignature Language="C#" Value="public virtual bool ShouldDelayChildPressedState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldDelayChildPressedState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("shouldDelayChildPressedState", "()Z", "GetShouldDelayChildPressedStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Return true if the pressed state should be delayed for children or descendants of this
 ViewGroup.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Return true if the pressed state should be delayed for children or descendants of this
 ViewGroup. Generally, this should be done for containers that can scroll, such as a List.
 This prevents the pressed state from appearing when the user is actually trying to scroll
 the content.

 The default implementation returns true for compatibility reasons. Subclasses that do
 not scroll should generally override this method and return false.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#shouldDelayChildPressedState()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenuForChild">
      <MemberSignature Language="C#" Value="public virtual bool ShowContextMenuForChild (Android.Views.View originalView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShowContextMenuForChild(class Android.Views.View originalView) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("showContextMenuForChild", "(Landroid/view/View;)Z", "GetShowContextMenuForChild_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalView" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="originalView">The source view where the context menu was first invoked</param>
        <summary>Bring up a context menu for the specified view or its ancestors.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Bring up a context menu for the specified view or its ancestors.

 </para><para tool="javadoc-to-mdoc">In most cases, a subclass does not need to override this.  However, if
 the subclass is added directly to the window manager (for example,
 <c><see cref="M:Android.Views.IViewManager.AddView(Android.Views.View, .LayoutParams)" /></c>)
 then it should override this and show the context menu.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#showContextMenuForChild(android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StartActionModeForChild">
      <MemberSignature Language="C#" Value="public virtual Android.Views.ActionMode StartActionModeForChild (Android.Views.View originalView, Android.Views.ActionMode.ICallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.ActionMode StartActionModeForChild(class Android.Views.View originalView, class Android.Views.ActionMode/ICallback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActionModeForChild", "(Landroid/view/View;Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;", "GetStartActionModeForChild_Landroid_view_View_Landroid_view_ActionMode_Callback_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ActionMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalView" Type="Android.Views.View" />
        <Parameter Name="callback" Type="Android.Views.ActionMode+ICallback" />
      </Parameters>
      <Docs>
        <param name="originalView">The source view where the action mode was first invoked</param>
        <param name="callback">The callback that will handle lifecycle events for the action mode</param>
        <summary>Start an action mode for the specified view.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Start an action mode for the specified view.

 </para><para tool="javadoc-to-mdoc">In most cases, a subclass does not need to override this. However, if the
 subclass is added directly to the window manager (for example,
 <c><see cref="M:Android.Views.IViewManager.AddView(Android.Views.View, .LayoutParams)" /></c>)
 then it should override this and start the action mode.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#startActionModeForChild(android.view.View, android.view.ActionMode.Callback)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="StartLayoutAnimation">
      <MemberSignature Language="C#" Value="public virtual void StartLayoutAnimation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartLayoutAnimation() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startLayoutAnimation", "()V", "GetStartLayoutAnimationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Runs the layout animation.</summary>
        <remarks><para tool="javadoc-to-mdoc">Runs the layout animation. Calling this method triggers a relayout of
 this view group.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#startLayoutAnimation()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StartViewTransition">
      <MemberSignature Language="C#" Value="public virtual void StartViewTransition (Android.Views.View view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartViewTransition(class Android.Views.View view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startViewTransition", "(Landroid/view/View;)V", "GetStartViewTransition_Landroid_view_View_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">The View object to be kept visible even if it gets removed from its parent.
</param>
        <summary>This method tells the ViewGroup that the given View object, which should have this
 ViewGroup as its parent,
 should be kept around  (re-displayed when the ViewGroup draws its children) even if it
 is removed from its parent.</summary>
        <remarks><para tool="javadoc-to-mdoc">This method tells the ViewGroup that the given View object, which should have this
 ViewGroup as its parent,
 should be kept around  (re-displayed when the ViewGroup draws its children) even if it
 is removed from its parent. This allows animations, such as those used by
 <c><see cref="T:Android.App.Fragment" /></c> and <c><see cref="T:Android.Animation.LayoutTransition" /></c> to animate
 the removal of views. A call to this method should always be accompanied by a later call
 to <c><see cref="M:Android.Views.ViewGroup.EndViewTransition(Android.Views.View)" /></c>, such as after an animation on the View has finished,
 so that the View finally gets removed.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#startViewTransition(android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateViewLayout">
      <MemberSignature Language="C#" Value="public virtual void UpdateViewLayout (Android.Views.View view, Android.Views.ViewGroup.LayoutParams params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateViewLayout(class Android.Views.View view, class Android.Views.ViewGroup/LayoutParams params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("updateViewLayout", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V", "GetUpdateViewLayout_Landroid_view_View_Landroid_view_ViewGroup_LayoutParams_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
        <Parameter Name="params" Type="Android.Views.ViewGroup+LayoutParams" />
      </Parameters>
      <Docs>
        <param name="view">To be added.</param>
        <param name="params">To be added.</param>
        <summary></summary>
        <remarks><para tool="javadoc-to-mdoc" /><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ViewGroup.html#updateViewLayout(android.view.View, android.view.ViewGroup.LayoutParams)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
