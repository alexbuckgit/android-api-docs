<Type Name="Choreographer+IFrameCallback" FullName="Android.Views.Choreographer+IFrameCallback">
  <TypeSignature Language="C#" Value="public interface Choreographer.IFrameCallback : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class nested public interface auto ansi abstract Choreographer/IFrameCallback implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/Choreographer$FrameCallback", "", "Android.Views.Choreographer/IFrameCallbackInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implement this interface to receive a callback when a new display frame is
 being rendered.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Implement this interface to receive a callback when a new display frame is
 being rendered.  The callback is invoked on the <c><see cref="T:Android.OS.Looper" /></c> thread to
 which the <c><see cref="T:Android.Views.Choreographer" /></c> is attached.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/view/Choreographer.FrameCallback.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 16" />
  </Docs>
  <Members>
    <Member MemberName="DoFrame">
      <MemberSignature Language="C#" Value="public void DoFrame (long frameTimeNanos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DoFrame(int64 frameTimeNanos) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("doFrame", "(J)V", "GetDoFrame_JHandler:Android.Views.Choreographer/IFrameCallbackInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frameTimeNanos" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="frameTimeNanos">The time in nanoseconds when the frame started being rendered,
 in the <c><see cref="M:Java.Lang.JavaSystem.NanoTime" /></c> timebase.  Divide this value by <c>1000000</c>
 to convert it to the <c><see cref="M:Android.OS.SystemClock.UptimeMillis" /></c> time base.
</param>
        <summary>Called when a new display frame is being rendered.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when a new display frame is being rendered.
 </para>
          <para tool="javadoc-to-mdoc">
 This method provides the time in nanoseconds when the frame started being rendered.
 The frame time provides a stable time base for synchronizing animations
 and drawing.  It should be used instead of <c><see cref="M:Android.OS.SystemClock.UptimeMillis" /></c>
 or <c><see cref="M:Java.Lang.JavaSystem.NanoTime" /></c> for animations and drawing in the UI.  Using the frame
 time helps to reduce inter-frame jitter because the frame time is fixed at the time
 the frame was scheduled to start, regardless of when the animations or drawing
 callback actually runs.  All callbacks that run as part of rendering a frame will
 observe the same frame time so using the frame time also helps to synchronize effects
 that are performed by different callbacks.
 </para>
          <para tool="javadoc-to-mdoc">
 Please note that the framework already takes care to process animations and
 drawing using the frame time as a stable time base.  Most applications should
 not need to use the frame time information directly.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/Choreographer.FrameCallback.html#doFrame(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
  </Members>
</Type>
