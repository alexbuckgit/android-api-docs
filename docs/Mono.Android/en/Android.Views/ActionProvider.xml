<Type Name="ActionProvider" FullName="Android.Views.ActionProvider">
  <TypeSignature Language="C#" Value="public abstract class ActionProvider : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ActionProvider extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/ActionProvider", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An ActionProvider defines rich menu interaction in a single component.</summary>
    <remarks><para tool="javadoc-to-mdoc">An ActionProvider defines rich menu interaction in a single component.
 ActionProvider can generate action views for use in the action bar,
 dynamically populate submenus of a MenuItem, and handle default menu
 item invocations.

 </para><para tool="javadoc-to-mdoc">An ActionProvider can be optionally specified for a <c><see cref="T:Android.Views.IMenuItem" /></c> and will be
 responsible for creating the action view that appears in the <c><see cref="T:Android.App.ActionBar" /></c>
 in place of a simple button in the bar. When the menu item is presented in a way that
 does not allow custom action views, (e.g. in an overflow menu,) the ActionProvider
 can perform a default action.</para><para tool="javadoc-to-mdoc">There are two ways to use an action provider:
 <list type="bullet"><item><term>
 Set the action provider on a <c><see cref="T:Android.Views.IMenuItem" /></c> directly by calling
 <c><see cref="M:Android.Views.IMenuItem.SetActionProvider(Android.Views.ActionProvider)" /></c>.
 </term></item><item><term>
 Declare the action provider in an XML menu resource. For example:
 <example><code lang="xml">
   &lt;item android:id="@+id/my_menu_item"
     android:title="Title"
     android:icon="@drawable/my_menu_item_icon"
     android:showAsAction="ifRoom"
     android:actionProviderClass="foo.bar.SomeActionProvider" /&gt;
 </code></example></term></item></list></para><format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="M:Android.Views.IMenuItem.SetActionProvider(Android.Views.ActionProvider)" /></c></term></item><item><term><c><see cref="P:Android.Views.IMenuItem.ActionProvider" /></c></term></item></list><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ActionProvider.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 14" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ActionProvider (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Creates a new instance.</summary>
        <remarks><para tool="javadoc-to-mdoc">Creates a new instance. ActionProvider classes should always implement a
 constructor that takes a single Context parameter for inflating from menu XML.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ActionProvider.html#ActionProvider(android.content.Context)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ActionProvider (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSubMenu">
      <MemberSignature Language="C#" Value="public virtual bool HasSubMenu { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasSubMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasSubMenu", "()Z", "GetHasSubMenuHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines if this ActionProvider has a submenu associated with it.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Determines if this ActionProvider has a submenu associated with it.

 </para><para tool="javadoc-to-mdoc">Associated submenus will be shown when an action view is not. This
 provider instance will receive a call to <c><see cref="M:Android.Views.ActionProvider.OnPrepareSubMenu(Android.Views.ISubMenu)" /></c>
 after the call to <c><see cref="M:Android.Views.ActionProvider.OnPerformDefaultAction" /></c> and before a submenu is
 displayed to the user.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ActionProvider.html#hasSubMenu()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public virtual bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isVisible", "()Z", "GetIsVisibleHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If <c><see cref="M:Android.Views.ActionProvider.OverridesItemVisibility" /></c> returns true, the return value of this method
 will help determine the visibility of the <c><see cref="T:Android.Views.IMenuItem" /></c> this ActionProvider is bound to.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">If <c><see cref="M:Android.Views.ActionProvider.OverridesItemVisibility" /></c> returns true, the return value of this method
 will help determine the visibility of the <c><see cref="T:Android.Views.IMenuItem" /></c> this ActionProvider is bound to.

 </para><para tool="javadoc-to-mdoc">If the MenuItem's visibility is explicitly set to false by the application,
 the MenuItem will not be shown, even if this method returns true.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ActionProvider.html#isVisible()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateActionView">
      <MemberSignature Language="C#" Value="public abstract Android.Views.View OnCreateActionView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View OnCreateActionView() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateActionView", "()Landroid/view/View;", "GetOnCreateActionViewHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Factory method called by the Android framework to create new action views.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Factory method called by the Android framework to create new action views.

 </para><para tool="javadoc-to-mdoc">This method has been deprecated in favor of <c><see cref="M:Android.Views.ActionProvider.OnCreateActionView(Android.Views.IMenuItem)" /></c>.
 Newer apps that wish to support platform versions prior to API 16 should also
 implement this method to return a valid action view.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ActionProvider.html#onCreateActionView()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateActionView">
      <MemberSignature Language="C#" Value="public virtual Android.Views.View OnCreateActionView (Android.Views.IMenuItem forItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.View OnCreateActionView(class Android.Views.IMenuItem forItem) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreateActionView", "(Landroid/view/MenuItem;)Landroid/view/View;", "GetOnCreateActionView_Landroid_view_MenuItem_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.View</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forItem" Type="Android.Views.IMenuItem" />
      </Parameters>
      <Docs>
        <param name="forItem">MenuItem to create the action view for</param>
        <summary>Factory method called by the Android framework to create new action views.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Factory method called by the Android framework to create new action views.
 This method returns a new action view for the given MenuItem.

 </para><para tool="javadoc-to-mdoc">If your ActionProvider implementation overrides the deprecated no-argument overload
 <c><see cref="M:Android.Views.ActionProvider.OnCreateActionView" /></c>, overriding this method for devices running API 16 or later
 is recommended but optional. The default implementation calls <c><see cref="M:Android.Views.ActionProvider.OnCreateActionView" /></c>
 for compatibility with applications written for older platform versions.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ActionProvider.html#onCreateActionView(android.view.MenuItem)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="OnPerformDefaultAction">
      <MemberSignature Language="C#" Value="public virtual bool OnPerformDefaultAction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnPerformDefaultAction() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPerformDefaultAction", "()Z", "GetOnPerformDefaultActionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs an optional default action.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Performs an optional default action.
 </para><para tool="javadoc-to-mdoc">
 For the case of an action provider placed in a menu item not shown as an action this
 method is invoked if previous callbacks for processing menu selection has handled
 the event.
 </para><para tool="javadoc-to-mdoc">
 A menu item selection is processed in the following order:
 <list type="bullet"><item><term>
 Receiving a call to <c><see cref="M:Android.Views.IMenuItemOnMenuItemClickListener.OnMenuItemClick(Android.Views.IMenuItem)" /></c>.
 </term></item><item><term>
 Receiving a call to <c><see cref="M:Android.App.Activity.OnOptionsItemSelected(Android.Views.IMenuItem)" /></c></term></item><item><term>
 Receiving a call to <c><see cref="M:Android.App.Fragment.OnOptionsItemSelected(Android.Views.IMenuItem)" /></c></term></item><item><term>
 Launching the <c><see cref="T:Android.Content.Intent" /></c> set via
 <c><see cref="M:Android.Views.IMenuItem.SetIntent(Android.Content.Intent)" /></c></term></item><item><term>
 Invoking this method.
 </term></item></list></para><para tool="javadoc-to-mdoc">
 The default implementation does not perform any action and returns false.
 </para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ActionProvider.html#onPerformDefaultAction()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="OnPrepareSubMenu">
      <MemberSignature Language="C#" Value="public virtual void OnPrepareSubMenu (Android.Views.ISubMenu subMenu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnPrepareSubMenu(class Android.Views.ISubMenu subMenu) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onPrepareSubMenu", "(Landroid/view/SubMenu;)V", "GetOnPrepareSubMenu_Landroid_view_SubMenu_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subMenu" Type="Android.Views.ISubMenu" />
      </Parameters>
      <Docs>
        <param name="subMenu">Submenu that will be displayed
</param>
        <summary>Called to prepare an associated submenu for the menu item backed by this ActionProvider.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called to prepare an associated submenu for the menu item backed by this ActionProvider.

 </para><para tool="javadoc-to-mdoc">if <c><see cref="P:Android.Views.ActionProvider.HasSubMenu" /></c> returns true, this method will be called when the
 menu item is selected to prepare the submenu for presentation to the user. Apps
 may use this to create or alter submenu content right before display.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ActionProvider.html#onPrepareSubMenu(android.view.SubMenu)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="OverridesItemVisibility">
      <MemberSignature Language="C#" Value="public virtual bool OverridesItemVisibility ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OverridesItemVisibility() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("overridesItemVisibility", "()Z", "GetOverridesItemVisibilityHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The result of this method determines whether or not <c><see cref="P:Android.Views.ActionProvider.IsVisible" /></c> will be used
 by the <c><see cref="T:Android.Views.IMenuItem" /></c> this ActionProvider is bound to help determine its visibility.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">The result of this method determines whether or not <c><see cref="P:Android.Views.ActionProvider.IsVisible" /></c> will be used
 by the <c><see cref="T:Android.Views.IMenuItem" /></c> this ActionProvider is bound to help determine its visibility.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ActionProvider.html#overridesItemVisibility()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <altmember cref="P:Android.Views.ActionProvider.IsVisible" />
      </Docs>
    </Member>
    <Member MemberName="RefreshVisibility">
      <MemberSignature Language="C#" Value="public virtual void RefreshVisibility ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RefreshVisibility() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("refreshVisibility", "()V", "GetRefreshVisibilityHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>If this ActionProvider is associated with an item in a menu,
 refresh the visibility of the item based on <c><see cref="M:Android.Views.ActionProvider.OverridesItemVisibility" /></c> and
 <c><see cref="P:Android.Views.ActionProvider.IsVisible" /></c>.</summary>
        <remarks><para tool="javadoc-to-mdoc">If this ActionProvider is associated with an item in a menu,
 refresh the visibility of the item based on <c><see cref="M:Android.Views.ActionProvider.OverridesItemVisibility" /></c> and
 <c><see cref="P:Android.Views.ActionProvider.IsVisible" /></c>. If <c><see cref="M:Android.Views.ActionProvider.OverridesItemVisibility" /></c> returns false, this call
 will have no effect.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ActionProvider.html#refreshVisibility()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="SetVisibilityListener">
      <MemberSignature Language="C#" Value="public virtual void SetVisibilityListener (Android.Views.ActionProvider.IVisibilityListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisibilityListener(class Android.Views.ActionProvider/IVisibilityListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVisibilityListener", "(Landroid/view/ActionProvider$VisibilityListener;)V", "GetSetVisibilityListener_Landroid_view_ActionProvider_VisibilityListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Views.ActionProvider+IVisibilityListener" />
      </Parameters>
      <Docs>
        <param name="listener">listener to set
</param>
        <summary>Set a listener to be notified when this ActionProvider's overridden visibility changes.</summary>
        <remarks><para tool="javadoc-to-mdoc">Set a listener to be notified when this ActionProvider's overridden visibility changes.
 This should only be used by MenuItem implementations.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/view/ActionProvider.html#setVisibilityListener(android.view.ActionProvider.VisibilityListener)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Views.ActionProvider.VisibilityEventArgs&gt; Visibility;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Views.ActionProvider/VisibilityEventArgs&gt; Visibility" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Views.ActionProvider+VisibilityEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
