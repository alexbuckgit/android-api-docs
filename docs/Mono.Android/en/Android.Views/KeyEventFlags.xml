<Type Name="KeyEventFlags" FullName="Android.Views.KeyEventFlags">
  <TypeSignature Language="C#" Value="public enum KeyEventFlags" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed KeyEventFlags extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enumerates values returned by  several types and taken as a parameter of several methods of <see cref="T:Android.Views.KeyEvent" />.</summary>
    <remarks>Enumerates values returned by the following: <list type="bullet"><item><term><see cref="M:Android.Views.KeyEvent.Flags" /></term></item><item><term><see cref="M:Android.Views.KeyEventFlags.Canceled" /></term></item><item><term><see cref="M:Android.Views.KeyEventFlags.CanceledLongPress" /></term></item><item><term><see cref="M:Android.Views.KeyEventFlags.EditorAction" /></term></item><item><term><see cref="M:Android.Views.KeyEventFlags.Fallback" /></term></item><item><term><see cref="M:Android.Views.KeyEventFlags.FromSystem" /></term></item><item><term><see cref="M:Android.Views.KeyEventFlags.KeepTouchMode" /></term></item><item><term><see cref="M:Android.Views.KeyEventFlags.LongPress" /></term></item><item><term><see cref="M:Android.Views.KeyEventFlags.SoftKeyboard" /></term></item><item><term><see cref="M:Android.Views.KeyEventFlags.Tracking" /></term></item><item><term><see cref="M:Android.Views.KeyEventFlags.VirtualHardKey" /></term></item><item><term><see cref="M:Android.Views.KeyEventFlags.WokeHere" /></term></item></list>
 and taken as a parameter of the following: <list type="bullet"><item><term><see cref="C:Android.Views.KeyEvent" /></term></item><item><term><see cref="C:Android.Views.KeyEvent" /></term></item><item><term><see cref="C:Android.Views.KeyEvent" /></term></item><item><term><see cref="M:Android.Views.KeyEvent.ChangeFlags" /></term></item><item><term><see cref="M:Android.Views.KeyEvent.ChangeTimeRepeat" /></term></item></list>
.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Canceled">
      <MemberSignature Language="C#" Value="Canceled" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.KeyEventFlags Canceled = int32(32)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.KeyEventFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">When associated with up key events, this indicates that the key press
 has been canceled.  Typically this is used with virtual touch screen
 keys, where the user can slide from the virtual key area on to the
 display: in that case, the application will receive a canceled up
 event and should not perform the action normally associated with the
 key.  Note that for this to work, the application can not perform an
 action for a key until it receives an up or the long press timeout has
 expired. 
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="CanceledLongPress">
      <MemberSignature Language="C#" Value="CanceledLongPress" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.KeyEventFlags CanceledLongPress = int32(256)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.KeyEventFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Set when a key event has <c><see cref="F:Android.Views.KeyEventFlags.Canceled" /></c> set because a long
 press action was executed while it was down. 
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="EditorAction">
      <MemberSignature Language="C#" Value="EditorAction" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.KeyEventFlags EditorAction = int32(16)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.KeyEventFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">This mask is used for compatibility, to identify enter keys that are
 coming from an IME whose enter key has been auto-labelled "next" or
 "done".  This allows TextView to dispatch these as normal enter keys
 for old applications, but still do the appropriate action when
 receiving them.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="Fallback" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.KeyEventFlags Fallback = int32(1024)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.KeyEventFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Set when a key event has been synthesized to implement default behavior
 for an event that the application did not handle.
 Fallback key events are generated by unhandled trackball motions
 (to emulate a directional keypad) and by certain unhandled key presses
 that are declared in the key map (such as special function numeric keypad
 keys when numlock is off).
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="FromSystem">
      <MemberSignature Language="C#" Value="FromSystem" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.KeyEventFlags FromSystem = int32(8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.KeyEventFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">This mask is set if an event was known to come from a trusted part
 of the system.  That is, the event is known to come from the user,
 and could not have been spoofed by a third party component.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="KeepTouchMode">
      <MemberSignature Language="C#" Value="KeepTouchMode" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.KeyEventFlags KeepTouchMode = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.KeyEventFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">This mask is set if we don't want the key event to cause us to leave
 touch mode.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="LongPress">
      <MemberSignature Language="C#" Value="LongPress" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.KeyEventFlags LongPress = int32(128)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.KeyEventFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">This flag is set for the first key repeat that occurs after the
 long press timeout.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="SoftKeyboard">
      <MemberSignature Language="C#" Value="SoftKeyboard" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.KeyEventFlags SoftKeyboard = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.KeyEventFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">This mask is set if the key event was generated by a software keyboard.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Tracking">
      <MemberSignature Language="C#" Value="Tracking" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.KeyEventFlags Tracking = int32(512)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.KeyEventFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Set for <c><see cref="F:Android.Views.KeyEventActions.Up" /></c> when this event's key code is still being
 tracked from its initial down.  That is, somebody requested that tracking
 started on the key down and a long press has not caused
 the tracking to be canceled.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="VirtualHardKey">
      <MemberSignature Language="C#" Value="VirtualHardKey" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.KeyEventFlags VirtualHardKey = int32(64)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.KeyEventFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">This key event was generated by a virtual (on-screen) hard key area.
 Typically this is an area of the touchscreen, outside of the regular
 display, dedicated to "hardware" buttons.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="WokeHere">
      <MemberSignature Language="C#" Value="WokeHere" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Views.KeyEventFlags WokeHere = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Views.KeyEventFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">This mask is set if the device woke because of this key event.
</para>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>
