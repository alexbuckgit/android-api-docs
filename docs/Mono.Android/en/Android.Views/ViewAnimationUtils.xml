<Type Name="ViewAnimationUtils" FullName="Android.Views.ViewAnimationUtils">
  <TypeSignature Language="C#" Value="public sealed class ViewAnimationUtils : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ViewAnimationUtils extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/ViewAnimationUtils", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>Defines common utilities for working with View's animations.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Defines common utilities for working with View's animations.

</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/view/ViewAnimationUtils.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateCircularReveal">
      <MemberSignature Language="C#" Value="public static Android.Animation.Animator CreateCircularReveal (Android.Views.View view, int centerX, int centerY, float startRadius, float endRadius);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Animation.Animator CreateCircularReveal(class Android.Views.View view, int32 centerX, int32 centerY, float32 startRadius, float32 endRadius) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createCircularReveal", "(Landroid/view/View;IIFF)Landroid/animation/Animator;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.Animator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
        <Parameter Name="centerX" Type="System.Int32" />
        <Parameter Name="centerY" Type="System.Int32" />
        <Parameter Name="startRadius" Type="System.Single" />
        <Parameter Name="endRadius" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="view">The View will be clipped to the animating circle.</param>
        <param name="centerX">The x coordinate of the center of the animating circle, relative to
                <c>view</c>.</param>
        <param name="centerY">The y coordinate of the center of the animating circle, relative to
                <c>view</c>.</param>
        <param name="startRadius">The starting radius of the animating circle.</param>
        <param name="endRadius">The ending radius of the animating circle.
</param>
        <summary>Returns an Animator which can animate a clipping circle.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an Animator which can animate a clipping circle.
 </para>
          <para tool="javadoc-to-mdoc">
 Any shadow cast by the View will respect the circular clip from this animator.
 </para>
          <para tool="javadoc-to-mdoc">
 Only a single non-rectangular clip can be applied on a View at any time.
 Views clipped by a circular reveal animation take priority over
 <c><see cref="P:Android.Views.View.ClipToOutline" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Note that the animation returned here is a one-shot animation. It cannot
 be re-used, and once started it cannot be paused or resumed. It is also
 an asynchronous animation that automatically runs off of the UI thread.
 As a result <c><see cref="!:NoType:android/animation/Animator$AnimatorListener;Href=../../../reference/android/animation/Animator.AnimatorListener.html#onAnimationEnd(android.animation.Animator)" /></c>
 will occur after the animation has ended, but it may be delayed depending
 on thread responsiveness.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/ViewAnimationUtils.html#createCircularReveal(android.view.View, int, int, float, float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
