<Type Name="Visibility" FullName="Android.Opengl.Visibility">
  <TypeSignature Language="C#" Value="public class Visibility : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Visibility extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/opengl/Visibility", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="3">
    <summary>A collection of utility methods for computing the visibility of triangle
 meshes.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A collection of utility methods for computing the visibility of triangle
 meshes.

</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/opengl/Visibility.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 3" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Visibility ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary></summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/Visibility.html#Visibility()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Visibility (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeBoundingSphere">
      <MemberSignature Language="C#" Value="public static void ComputeBoundingSphere (float[] positions, int positionsOffset, int positionsCount, float[] sphere, int sphereOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ComputeBoundingSphere(float32[] positions, int32 positionsOffset, int32 positionsCount, float32[] sphere, int32 sphereOffset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("computeBoundingSphere", "([FII[FI)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="positions" Type="System.Single[]" />
        <Parameter Name="positionsOffset" Type="System.Int32" />
        <Parameter Name="positionsCount" Type="System.Int32" />
        <Parameter Name="sphere" Type="System.Single[]" />
        <Parameter Name="sphereOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="positions">positions in x, y, z triples</param>
        <param name="positionsOffset">offset into positions array</param>
        <param name="positionsCount">number of position triples to process</param>
        <param name="sphere">array containing the output as (x, y, z, r)</param>
        <param name="sphereOffset">offset where the sphere data will be written</param>
        <summary>Compute a bounding sphere for a set of points.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Compute a bounding sphere for a set of points. It is approximately the
 minimal bounding sphere of an axis-aligned box that bounds the points.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/Visibility.html#computeBoundingSphere(float[], int, int, float[], int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if positions is null,
 positionsOffset  positions.length - positionsCount,
 sphere is null, sphereOffset  sphere.length - 4.
</exception>
      </Docs>
    </Member>
    <Member MemberName="FrustumCullSpheres">
      <MemberSignature Language="C#" Value="public static int FrustumCullSpheres (float[] mvp, int mvpOffset, float[] spheres, int spheresOffset, int spheresCount, int[] results, int resultsOffset, int resultsCapacity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FrustumCullSpheres(float32[] mvp, int32 mvpOffset, float32[] spheres, int32 spheresOffset, int32 spheresCount, int32[] results, int32 resultsOffset, int32 resultsCapacity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("frustumCullSpheres", "([FI[FII[III)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mvp" Type="System.Single[]" />
        <Parameter Name="mvpOffset" Type="System.Int32" />
        <Parameter Name="spheres" Type="System.Single[]" />
        <Parameter Name="spheresOffset" Type="System.Int32" />
        <Parameter Name="spheresCount" Type="System.Int32" />
        <Parameter Name="results" Type="System.Int32[]" />
        <Parameter Name="resultsOffset" Type="System.Int32" />
        <Parameter Name="resultsCapacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="mvp">a float array containing the mode-view-projection matrix</param>
        <param name="mvpOffset">The offset of the mvp data within the mvp array.</param>
        <param name="spheres">a float array containing the sphere data.</param>
        <param name="spheresOffset">an offset into the sphere array where the sphere
        data starts</param>
        <param name="spheresCount">the number of spheres to cull.</param>
        <param name="results">an integer array containing the indices of the spheres
 that are either contained entirely within or intersect the frustum.</param>
        <param name="resultsOffset">an offset into the results array where the results
        start.</param>
        <param name="resultsCapacity">the number of array elements available for storing
        results.</param>
        <summary>Given an OpenGL ES ModelView-Projection matrix (which implicitly
 describes a frustum) and a list of spheres, determine which spheres
 intersect the frustum.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Given an OpenGL ES ModelView-Projection matrix (which implicitly
 describes a frustum) and a list of spheres, determine which spheres
 intersect the frustum.
 </para>
          <para tool="javadoc-to-mdoc">
 A ModelView-Projection matrix can be computed by multiplying the
 a Projection matrix by the a ModelView matrix (in that order.). There
 are several possible ways to obtain the current ModelView and
 Projection matrices. The most generally applicable way is to keep
 track of the current matrices in application code. If that is not
 convenient, there are two optional OpenGL ES extensions which may
 be used to read the current matrices from OpenGL ES:
 <list type="bullet"><item><term>GL10Ext.glQueryMatrixxOES
 </term></item><item><term>GL11.GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES and
 GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES
 </term></item></list>
 The problem with reading back the matrices is that your application
 will only work with devices that support the extension(s) that
 it uses.
 </para>
          <para tool="javadoc-to-mdoc">
 A frustum is a six-sided truncated pyramid that defines the portion of
 world space that is visible in the view.
 </para>
          <para tool="javadoc-to-mdoc">
 Spheres are described as four floating point values: x, y, z, and r, in
 world-space coordinates. R is the radius of the sphere.
 </para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/Visibility.html#frustumCullSpheres(float[], int, float[], int, int, int[], int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if mvp is null, mvpOffset  mvp.length - 16, spheres is null, spheresOffset  spheres.length - sphereCount,
 results is null, resultsOffset  results.length -
 resultsCapacity.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibilityTest">
      <MemberSignature Language="C#" Value="public static int VisibilityTest (float[] ws, int wsOffset, float[] positions, int positionsOffset, char[] indices, int indicesOffset, int indexCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 VisibilityTest(float32[] ws, int32 wsOffset, float32[] positions, int32 positionsOffset, char[] indices, int32 indicesOffset, int32 indexCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("visibilityTest", "([FI[FI[CII)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.Single[]" />
        <Parameter Name="wsOffset" Type="System.Int32" />
        <Parameter Name="positions" Type="System.Single[]" />
        <Parameter Name="positionsOffset" Type="System.Int32" />
        <Parameter Name="indices" Type="System.Char[]" />
        <Parameter Name="indicesOffset" Type="System.Int32" />
        <Parameter Name="indexCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ws">the world space to screen space transform matrix, as an OpenGL
 column matrix.</param>
        <param name="wsOffset">an index into the ws array where the data starts.</param>
        <param name="positions">the vertex positions (x, y, z).</param>
        <param name="positionsOffset">the index in the positions array where the data
        starts.</param>
        <param name="indices">the indices of the triangle list. The indices are
 expressed as chars because they are unsigned 16-bit values.</param>
        <param name="indicesOffset">the index in the indices array where the index data
        starts.</param>
        <param name="indexCount">the number of indices in use. Typically a multiple of
 three. If not a multiple of three, the remaining one or two indices will
 be ignored.</param>
        <summary>Test whether a given triangle mesh is visible on the screen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Test whether a given triangle mesh is visible on the screen. The mesh
 is specified as an indexed triangle list.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/opengl/Visibility.html#visibilityTest(float[], int, float[], int, char[], int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if ws is null, wsOffset  indices.length - indexCount
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
