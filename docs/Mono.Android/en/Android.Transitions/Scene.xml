<Type Name="Scene" FullName="Android.Transitions.Scene">
  <TypeSignature Language="C#" Value="public sealed class Scene : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Scene extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/transition/Scene", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A scene represents the collection of values that various properties in the
 View hierarchy will have when the scene is applied.</summary>
    <remarks><para tool="javadoc-to-mdoc">A scene represents the collection of values that various properties in the
 View hierarchy will have when the scene is applied. A Scene can be
 configured to automatically run a Transition when it is applied, which will
 animate the various property changes that take place during the
 scene change.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/transition/Scene.html" target="_blank">[Android Documentation]</a></format></para></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Scene (Android.Views.ViewGroup sceneRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Views.ViewGroup sceneRoot) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/view/ViewGroup;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sceneRoot" Type="Android.Views.ViewGroup" />
      </Parameters>
      <Docs>
        <param name="sceneRoot">To be added.</param>
        <summary>Constructs a Scene with no information about how values will change
 when this scene is applied.</summary>
        <remarks><para tool="javadoc-to-mdoc">Constructs a Scene with no information about how values will change
 when this scene is applied. This constructor might be used when
 a Scene is created with the intention of being dynamically configured,
 through setting <c><see cref="M:Android.Transitions.Scene.SetEnterAction(Java.Lang.IRunnable)" /></c> and possibly
 <c><see cref="M:Android.Transitions.Scene.SetExitAction(Java.Lang.IRunnable)" /></c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/transition/Scene.html#Scene(android.view.ViewGroup)" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Scene (Android.Views.ViewGroup sceneRoot, Android.Views.View layout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Views.ViewGroup sceneRoot, class Android.Views.View layout) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/view/ViewGroup;Landroid/view/View;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sceneRoot" Type="Android.Views.ViewGroup" />
        <Parameter Name="layout" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="sceneRoot">To be added.</param>
        <param name="layout">To be added.</param>
        <summary>Constructs a Scene which, when entered, will remove any
 children from the sceneRoot container and add the layout
 object as a new child of that container.</summary>
        <remarks><para tool="javadoc-to-mdoc">Constructs a Scene which, when entered, will remove any
 children from the sceneRoot container and add the layout
 object as a new child of that container.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/transition/Scene.html#Scene(android.view.ViewGroup, android.view.View)" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Scene (Android.Views.ViewGroup sceneRoot, Android.Views.ViewGroup layout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Views.ViewGroup sceneRoot, class Android.Views.ViewGroup layout) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/view/ViewGroup;Landroid/view/ViewGroup;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sceneRoot" Type="Android.Views.ViewGroup" />
        <Parameter Name="layout" Type="Android.Views.ViewGroup" />
      </Parameters>
      <Docs>
        <param name="sceneRoot">To be added.</param>
        <param name="layout">To be added.</param>
        <summary></summary>
        <remarks><para tool="javadoc-to-mdoc" /><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/transition/Scene.html#Scene(android.view.ViewGroup, android.view.ViewGroup)" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public void Enter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enter() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enter", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enters this scene, which entails changing all values that
 are specified by this scene.</summary>
        <remarks><para tool="javadoc-to-mdoc">Enters this scene, which entails changing all values that
 are specified by this scene. These may be values associated
 with a layout view group or layout resource file which will
 now be added to the scene root, or it may be values changed by
 an <c><see cref="M:Android.Transitions.Scene.SetEnterAction(Java.Lang.IRunnable)" /></c> enter action}, or a
 combination of the these. No transition will be run when the
 scene is entered. To get transition behavior in scene changes,
 use one of the methods in <c><see cref="T:Android.Transitions.TransitionManager" /></c> instead.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/transition/Scene.html#enter()" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("exit", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exits this scene, if it is the current scene
 on the scene's <c><see cref="P:Android.Transitions.Scene.SceneRoot" /></c>.</summary>
        <remarks><para tool="javadoc-to-mdoc">Exits this scene, if it is the current scene
 on the scene's <c><see cref="P:Android.Transitions.Scene.SceneRoot" /></c>. The current scene is
 set when <c><see cref="M:Android.Transitions.Scene.Enter" /></c> a scene.
 Exiting a scene runs the <c><see cref="M:Android.Transitions.Scene.SetExitAction(Java.Lang.IRunnable)" /></c>
 if there is one.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/transition/Scene.html#exit()" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSceneForLayout">
      <MemberSignature Language="C#" Value="public static Android.Transitions.Scene GetSceneForLayout (Android.Views.ViewGroup sceneRoot, int layoutId, Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Transitions.Scene GetSceneForLayout(class Android.Views.ViewGroup sceneRoot, int32 layoutId, class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getSceneForLayout", "(Landroid/view/ViewGroup;ILandroid/content/Context;)Landroid/transition/Scene;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Transitions.Scene</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sceneRoot" Type="Android.Views.ViewGroup" />
        <Parameter Name="layoutId" Type="System.Int32" />
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="sceneRoot">The root of the hierarchy in which scene changes
 and transitions will take place.</param>
        <param name="layoutId">The id of a standard layout resource file.</param>
        <param name="context">The context used in the process of inflating
 the layout resource.</param>
        <summary>Returns a Scene described by the resource file associated with the given
 <c>layoutId</c> parameter.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns a Scene described by the resource file associated with the given
 <c>layoutId</c> parameter. If such a Scene has already been created for
 the given <c>sceneRoot</c>, that same Scene will be returned.
 This caching of layoutId-based scenes enables sharing of common scenes
 between those created in code and those referenced by <c><see cref="T:Android.Transitions.TransitionManager" /></c>
 XML resource files.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/transition/Scene.html#getSceneForLayout(android.view.ViewGroup, int, android.content.Context)" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SceneRoot">
      <MemberSignature Language="C#" Value="public Android.Views.ViewGroup SceneRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.ViewGroup SceneRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSceneRoot", "()Landroid/view/ViewGroup;", "GetGetSceneRootHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.ViewGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the root of the scene, which is the root of the view hierarchy
 affected by changes due to this scene, and which will be animated
 when this scene is entered.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Gets the root of the scene, which is the root of the view hierarchy
 affected by changes due to this scene, and which will be animated
 when this scene is entered.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/transition/Scene.html#getSceneRoot()" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEnterAction">
      <MemberSignature Language="C#" Value="public void SetEnterAction (Java.Lang.IRunnable action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetEnterAction(class Java.Lang.IRunnable action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEnterAction", "(Ljava/lang/Runnable;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="action">The runnable whose <c><see cref="M:Java.Lang.IRunnable.Run" /></c> method will
 be called when this scene is entered</param>
        <summary>Scenes that are not defined with layout resources or
 hierarchies, or which need to perform additional steps
 after those hierarchies are changed to, should set an enter
 action, and possibly an exit action as well.</summary>
        <remarks><para tool="javadoc-to-mdoc">Scenes that are not defined with layout resources or
 hierarchies, or which need to perform additional steps
 after those hierarchies are changed to, should set an enter
 action, and possibly an exit action as well. An enter action
 will cause Scene to call back into application code to do
 anything else the application needs after transitions have
 captured pre-change values and after any other scene changes
 have been applied, such as the layout (if any) being added to
 the view hierarchy. After this method is called, Transitions will
 be played.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/transition/Scene.html#setEnterAction(java.lang.Runnable)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <altmember cref="M:Android.Transitions.Scene.SetExitAction(Java.Lang.IRunnable)" />
        <altmember cref="C:Android.Transitions.Scene(Android.Views.ViewGroup, Android.Views.ViewGroup)" />
      </Docs>
    </Member>
    <Member MemberName="SetExitAction">
      <MemberSignature Language="C#" Value="public void SetExitAction (Java.Lang.IRunnable action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExitAction(class Java.Lang.IRunnable action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setExitAction", "(Ljava/lang/Runnable;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>Scenes that are not defined with layout resources or
 hierarchies, or which need to perform additional steps
 after those hierarchies are changed to, should set an enter
 action, and possibly an exit action as well.</summary>
        <remarks><para tool="javadoc-to-mdoc">Scenes that are not defined with layout resources or
 hierarchies, or which need to perform additional steps
 after those hierarchies are changed to, should set an enter
 action, and possibly an exit action as well. An exit action
 will cause Scene to call back into application code to do
 anything the application needs to do after applicable transitions have
 captured pre-change values, but before any other scene changes
 have been applied, such as the new layout (if any) being added to
 the view hierarchy. After this method is called, the next scene
 will be entered, including a call to <c><see cref="M:Android.Transitions.Scene.SetEnterAction(Java.Lang.IRunnable)" /></c>
 if an enter action is set.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/transition/Scene.html#setExitAction(java.lang.Runnable)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <altmember cref="M:Android.Transitions.Scene.SetEnterAction(Java.Lang.IRunnable)" />
        <altmember cref="C:Android.Transitions.Scene(Android.Views.ViewGroup, Android.Views.ViewGroup)" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
