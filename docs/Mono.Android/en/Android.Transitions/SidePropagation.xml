<Type Name="SidePropagation" FullName="Android.Transitions.SidePropagation">
  <TypeSignature Language="C#" Value="public class SidePropagation : Android.Transitions.VisibilityPropagation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SidePropagation extends Android.Transitions.VisibilityPropagation" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Transitions.VisibilityPropagation</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/transition/SidePropagation", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>A <c>TransitionPropagation</c> that propagates based on the distance to the side
 and, orthogonally, the distance to epicenter.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A <c>TransitionPropagation</c> that propagates based on the distance to the side
 and, orthogonally, the distance to epicenter. If the transitioning View is visible in
 the start of the transition, then it will transition sooner when closer to the side and
 later when farther. If the view is not visible in the start of the transition, then
 it will transition later when closer to the side and sooner when farther from the edge.
 This is the default TransitionPropagation used with <c><see cref="T:Android.Transitions.Slide" /></c>.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/transition/SidePropagation.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SidePropagation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary></summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/SidePropagation.html#SidePropagation()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SidePropagation (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStartDelay">
      <MemberSignature Language="C#" Value="public override long GetStartDelay (Android.Views.ViewGroup sceneRoot, Android.Transitions.Transition transition, Android.Transitions.TransitionValues startValues, Android.Transitions.TransitionValues endValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 GetStartDelay(class Android.Views.ViewGroup sceneRoot, class Android.Transitions.Transition transition, class Android.Transitions.TransitionValues startValues, class Android.Transitions.TransitionValues endValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getStartDelay", "(Landroid/view/ViewGroup;Landroid/transition/Transition;Landroid/transition/TransitionValues;Landroid/transition/TransitionValues;)J", "GetGetStartDelay_Landroid_view_ViewGroup_Landroid_transition_Transition_Landroid_transition_TransitionValues_Landroid_transition_TransitionValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sceneRoot" Type="Android.Views.ViewGroup" />
        <Parameter Name="transition" Type="Android.Transitions.Transition" />
        <Parameter Name="startValues" Type="Android.Transitions.TransitionValues" />
        <Parameter Name="endValues" Type="Android.Transitions.TransitionValues" />
      </Parameters>
      <Docs>
        <param name="sceneRoot">The root of the View hierarchy running the transition.</param>
        <param name="transition">The transition that created the Animator</param>
        <param name="startValues">The values for a specific target in the start scene.</param>
        <param name="endValues">The values for the target in the end scene.</param>
        <summary>Called by Transition to alter the Animator start delay.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by Transition to alter the Animator start delay. All start delays will be adjusted
 such that the minimum becomes zero.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/SidePropagation.html#getStartDelay(android.view.ViewGroup, android.transition.Transition, android.transition.TransitionValues, android.transition.TransitionValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPropagationSpeed">
      <MemberSignature Language="C#" Value="public virtual void SetPropagationSpeed (float propagationSpeed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPropagationSpeed(float32 propagationSpeed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPropagationSpeed", "(F)V", "GetSetPropagationSpeed_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propagationSpeed" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propagationSpeed">The speed at which propagation occurs, relative to the duration
                         of the transition. A speed of 4 means it works 4 times as fast
                         as the duration of the transition. May not be 0.
</param>
        <summary>Sets the speed at which transition propagation happens, relative to the duration of the
 Transition.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the speed at which transition propagation happens, relative to the duration of the
 Transition. A <c>propagationSpeed</c> of 1 means that a View centered at the side
 set in <c><see cref="M:Android.Transitions.SidePropagation.SetSide(Android.Views.GravityFlags)" /></c> and View centered at the opposite edge will have a difference
 in start delay of approximately the duration of the Transition. A speed of 2 means the
 start delay difference will be approximately half of the duration of the transition. A
 value of 0 is illegal, but negative values will invert the propagation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/SidePropagation.html#setPropagationSpeed(float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSide">
      <MemberSignature Language="C#" Value="public virtual void SetSide (Android.Views.GravityFlags side);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSide(valuetype Android.Views.GravityFlags side) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setSide", "(I)V", "GetSetSide_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="side" Type="Android.Views.GravityFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="side">The side that is used to calculate the transition propagation. Must be one of
             <c><see cref="!:Android.Views.Gravity.LEFT" /></c>, <c><see cref="!:Android.Views.Gravity.TOP" /></c>, <c><see cref="!:Android.Views.Gravity.RIGHT" /></c>,
             <c><see cref="!:Android.Views.Gravity.BOTTOM" /></c>, <c><see cref="!:Android.Views.Gravity.START" /></c>, or <c><see cref="!:Android.Views.Gravity.END" /></c>.
</param>
        <summary>Sets the side that is used to calculate the transition propagation.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the side that is used to calculate the transition propagation. If the transitioning
 View is visible in the start of the transition, then it will transition sooner when
 closer to the side and later when farther. If the view is not visible in the start of
 the transition, then it will transition later when closer to the side and sooner when
 farther from the edge. The default is <c><see cref="!:Android.Views.Gravity.BOTTOM" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/transition/SidePropagation.html#setSide(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>