<Type Name="BluetoothSocket" FullName="Android.Bluetooth.BluetoothSocket">
  <TypeSignature Language="C#" Value="public sealed class BluetoothSocket : Java.Lang.Object, IDisposable, Java.IO.ICloseable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BluetoothSocket extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.IO.ICloseable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.IO.ICloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/bluetooth/BluetoothSocket", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A connected or connecting Bluetooth socket.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A connected or connecting Bluetooth socket.

 </para>
      <para tool="javadoc-to-mdoc">The interface for Bluetooth Sockets is similar to that of TCP sockets:
 <c><see cref="T:Java.Net.Socket" /></c> and <c><see cref="T:Java.Net.ServerSocket" /></c>. On the server
 side, use a <c><see cref="T:Android.Bluetooth.BluetoothServerSocket" /></c> to create a listening server
 socket. When a connection is accepted by the <c><see cref="T:Android.Bluetooth.BluetoothServerSocket" /></c>,
 it will return a new <c><see cref="T:Android.Bluetooth.BluetoothSocket" /></c> to manage the connection.
 On the client side, use a single <c><see cref="T:Android.Bluetooth.BluetoothSocket" /></c> to both initiate
 an outgoing connection and to manage the connection.

 </para>
      <para tool="javadoc-to-mdoc">The most common type of Bluetooth socket is RFCOMM, which is the type
 supported by the Android APIs. RFCOMM is a connection-oriented, streaming
 transport over Bluetooth. It is also known as the Serial Port Profile (SPP).

 </para>
      <para tool="javadoc-to-mdoc">To create a <c><see cref="T:Android.Bluetooth.BluetoothSocket" /></c> for connecting to a known device, use
 <c><see cref="M:Android.Bluetooth.BluetoothDevice.CreateRfcommSocketToServiceRecord(Java.Util.UUID)" /></c>.
 Then call <c><see cref="M:Android.Bluetooth.BluetoothSocket.Connect" /></c> to attempt a connection to the remote device.
 This call will block until a connection is established or the connection
 fails.

 </para>
      <para tool="javadoc-to-mdoc">To create a <c><see cref="T:Android.Bluetooth.BluetoothSocket" /></c> as a server (or "host"), see the
 <c><see cref="T:Android.Bluetooth.BluetoothServerSocket" /></c> documentation.

 </para>
      <para tool="javadoc-to-mdoc">Once the socket is connected, whether initiated as a client or accepted
 as a server, open the IO streams by calling <c><see cref="P:Android.Bluetooth.BluetoothSocket.InputStream" /></c> and
 <c><see cref="P:Android.Bluetooth.BluetoothSocket.OutputStream" /></c> in order to retrieve <c><see cref="T:Java.IO.InputStream" /></c>
 and <c><see cref="T:Java.IO.OutputStream" /></c> objects, respectively, which are
 automatically connected to the socket.

 </para>
      <para tool="javadoc-to-mdoc">
        <c>
          <see cref="T:Android.Bluetooth.BluetoothSocket" />
        </c> is thread
 safe. In particular, <c><see cref="M:Android.Bluetooth.BluetoothSocket.Close" /></c> will always immediately abort ongoing
 operations and close the socket.

 </para>
      <para tool="javadoc-to-mdoc">
        <i>Note:</i>
 Requires the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#BLUETOOTH" /></c> permission.

 <format type="text/html"><h3>Developer Guides</h3></format></para>
      <para tool="javadoc-to-mdoc">For more information about using Bluetooth, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/wireless/bluetooth.html">Bluetooth</a></format> developer guide.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Android.Bluetooth.BluetoothServerSocket" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="T:Java.IO.InputStream" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="T:Java.IO.OutputStream" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/bluetooth/BluetoothSocket.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 5" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the object and release any system resources it holds.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Closes the object and release any system resources it holds.

 </para>
          <para tool="javadoc-to-mdoc">Although only the first call has any effect, it is safe to call close
 multiple times on the same object. This is more lenient than the
 overridden <c>AutoCloseable.close()</c>, which may be called at most
 once.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#close()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("connect", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempt to connect to a remote device.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempt to connect to a remote device.
 </para>
          <para tool="javadoc-to-mdoc">This method will block until a connection is made or the connection
 fails. If this method returns without an exception then this socket
 is now connected.
 </para>
          <para tool="javadoc-to-mdoc">Creating new connections to
 remote Bluetooth devices should not be attempted while device discovery
 is in progress. Device discovery is a heavyweight procedure on the
 Bluetooth adapter and will significantly slow a device connection.
 Use <c><see cref="M:Android.Bluetooth.BluetoothAdapter.CancelDiscovery" /></c> to cancel an ongoing
 discovery. Discovery is not managed by the Activity,
 but is run as a system service, so an application should always call
 <c><see cref="M:Android.Bluetooth.BluetoothAdapter.CancelDiscovery" /></c> even if it
 did not directly request a discovery, just to be sure.
 </para>
          <para tool="javadoc-to-mdoc">
            <c>
              <see cref="M:Android.Bluetooth.BluetoothSocket.Close" />
            </c> can be used to abort this call from another thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#connect()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.IO.IOException">on error, for example connection failure
</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream InputStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream InputStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getInputStream", "()Ljava/io/InputStream;", "GetGetInputStreamHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the input stream associated with this socket.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the input stream associated with this socket.
 </para>
          <para tool="javadoc-to-mdoc">The input stream will be returned even if the socket is not yet
 connected, but operations on that stream will throw IOException until
 the associated socket is connected.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getInputStream()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="IsConnected">
      <MemberSignature Language="C#" Value="public bool IsConnected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConnected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isConnected", "()Z", "GetIsConnectedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the connection status of this socket, ie, whether there is an active connection with
 remote device.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the connection status of this socket, ie, whether there is an active connection with
 remote device.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#isConnected()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="OutputStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream OutputStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream OutputStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getOutputStream", "()Ljava/io/OutputStream;", "GetGetOutputStreamHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the output stream associated with this socket.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the output stream associated with this socket.
 </para>
          <para tool="javadoc-to-mdoc">The output stream will be returned even if the socket is not yet
 connected, but operations on that stream will throw IOException until
 the associated socket is connected.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getOutputStream()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="RemoteDevice">
      <MemberSignature Language="C#" Value="public Android.Bluetooth.BluetoothDevice RemoteDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Bluetooth.BluetoothDevice RemoteDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRemoteDevice", "()Landroid/bluetooth/BluetoothDevice;", "GetGetRemoteDeviceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Bluetooth.BluetoothDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the remote device this socket is connecting, or connected, to.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the remote device this socket is connecting, or connected, to.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getRemoteDevice()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
