<Type Name="Rational" FullName="Android.Util.Rational">
  <TypeSignature Language="C#" Value="public sealed class Rational : Java.Lang.Number, IDisposable, Java.Lang.IComparable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Rational extends Java.Lang.Number implements class Android.Runtime.IJavaObject, class Java.Lang.IComparable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Number</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.Lang.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/util/Rational", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary tool="true"></summary>
    <remarks>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">An immutable data type representation a rational number.</para>
      <para tool="javadoc-to-mdoc">Contains a pair of <c>int</c>s representing the numerator and denominator of a
 Rational number. </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/util/Rational.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rational (int numerator, int denominator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 numerator, int32 denominator) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(II)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="numerator" Type="System.Int32" />
        <Parameter Name="denominator" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numerator">To be added.</param>
        <param name="denominator">To be added.</param>
        <summary></summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Create a <c>Rational</c> with a given numerator and denominator.</para>
          <para tool="javadoc-to-mdoc">The signs of the numerator and the denominator may be flipped such that the denominator
 is always positive. Both the numerator and denominator will be converted to their reduced
 forms (see <c><see cref="!:Android.Util.Rational.equals(java.lang.Object)" /></c> for more details).</para>
          <para tool="javadoc-to-mdoc">For example,
 <list type="bullet"><item><term>a rational of <c>2/4</c> will be reduced to <c>1/2</c>.
 </term></item><item><term>a rational of <c>1/-1</c> will be flipped to <c>-1/1</c></term></item><item><term>a rational of <c>5/0</c> will be reduced to <c>1/0</c></term></item><item><term>a rational of <c>0/5</c> will be reduced to <c>0/1</c></term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#Rational(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (Android.Util.Rational another);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(class Android.Util.Rational another) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("compareTo", "(Landroid/util/Rational;)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="another" Type="Android.Util.Rational" />
      </Parameters>
      <Docs>
        <param name="another">the rational to be compared</param>
        <summary>Compare this rational to the specified rational to determine their natural order.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Compare this rational to the specified rational to determine their natural order.

 <list type="bullet"><item><term>Positive infinity is greater than any other finite number (or negative infinity)
 </term></item><item><term>Negative infinity is less than any other finite number (or positive infinity)
 </term></item><item><term>The finite number represented by this rational is checked numerically
 against the other finite number by converting both rationals to a common denominator multiple
 and comparing their numerators.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <c>
              <see cref="P:Android.Util.Rational.NaN" />
            </c> is considered to be equal to itself and greater than all other
 <c>Rational</c> values. Otherwise, if the objects are not <c><see cref="!:Android.Util.Rational.equals(java.lang.Object)" /></c>, then
 the following rules apply:</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#compareTo(android.util.Rational)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.NullPointerException">if <c>another</c> was <c>null</c></exception>
      </Docs>
    </Member>
    <Member MemberName="Denominator">
      <MemberSignature Language="C#" Value="public int Denominator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Denominator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDenominator", "()I", "GetGetDenominatorHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the denominator of the rational

 </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the denominator of the rational

 </para>
          <para tool="javadoc-to-mdoc">The denominator may return <c>0</c>, in which case the rational may represent
 positive infinity (if the numerator was positive), negative infinity (if the numerator
 was negative), or <c>NaN</c> (if the numerator was <c>0</c>).</para>
          <para tool="javadoc-to-mdoc">The denominator will always return <c>1</c> if the numerator is <c>0</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#getDenominator()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoubleValue">
      <MemberSignature Language="C#" Value="public override double DoubleValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance float64 DoubleValue() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("doubleValue", "()D", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the value of the specified number as a <c>double</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the value of the specified number as a <c>double</c>.

 </para>
          <para tool="javadoc-to-mdoc">The <c>double</c> is calculated by converting both the numerator and denominator
 to a <c>double</c>; then returning the result of dividing the numerator by the
 denominator.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#doubleValue()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FloatValue">
      <MemberSignature Language="C#" Value="public override float FloatValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance float32 FloatValue() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("floatValue", "()F", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the value of the specified number as a <c>float</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the value of the specified number as a <c>float</c>.

 </para>
          <para tool="javadoc-to-mdoc">The <c>float</c> is calculated by converting both the numerator and denominator
 to a <c>float</c>; then returning the result of dividing the numerator by the
 denominator.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#floatValue()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntValue">
      <MemberSignature Language="C#" Value="public override int IntValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 IntValue() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("intValue", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the value of the specified number as a <c>int</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the value of the specified number as a <c>int</c>.

 </para>
          <para tool="javadoc-to-mdoc">
            <c>
              <see cref="P:Android.Util.Rational.IsInfinite" />
            </c> rationals are converted to an <c>int</c> value
 by dividing the numerator by the denominator; conversion for non-finite values happens
 identically to casting a floating point value to an <c>int</c>, in particular:

 </para>
          <para tool="javadoc-to-mdoc">
            <list type="bullet">
              <item>
                <term>Positive infinity saturates to the largest maximum integer
 <c><see cref="F:Java.Lang.Integer.MaxValue" /></c></term>
              </item>
              <item>
                <term>Negative infinity saturates to the smallest maximum integer
 <c><see cref="F:Java.Lang.Integer.MinValue" /></c></term>
              </item>
              <item>
                <term>
                  <i>Not-A-Number (NaN)</i> returns <c>0</c>.</term>
              </item>
            </list>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#intValue()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinite">
      <MemberSignature Language="C#" Value="public bool IsFinite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFinite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isFinite", "()Z", "GetIsFiniteHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this rational represents a finite value.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates whether this rational represents a finite value.

 </para>
          <para tool="javadoc-to-mdoc">A finite value occurs when the denominator is not <c>0</c>; in other words
 the rational is neither infinity or <c>NaN</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#isFinite()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInfinite">
      <MemberSignature Language="C#" Value="public bool IsInfinite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInfinite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isInfinite", "()Z", "GetIsInfiniteHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this rational represents an infinite value.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates whether this rational represents an infinite value.

 </para>
          <para tool="javadoc-to-mdoc">An infinite value occurs when the denominator is <c>0</c> (but the numerator is not).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#isInfinite()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="C#" Value="public bool IsNaN { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNaN" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isNaN", "()Z", "GetIsNaNHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this rational is a <i>Not-a-Number (NaN)</i> value.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates whether this rational is a <i>Not-a-Number (NaN)</i> value.

 </para>
          <para tool="javadoc-to-mdoc">A <c>NaN</c> value occurs when both the numerator and the denominator are <c>0</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#isNaN()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsZero">
      <MemberSignature Language="C#" Value="public bool IsZero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsZero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isZero", "()Z", "GetIsZeroHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this rational represents a zero value.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates whether this rational represents a zero value.

 </para>
          <para tool="javadoc-to-mdoc">A zero value is a <c><see cref="P:Android.Util.Rational.IsFinite" /></c> rational with a numerator of <c>0</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#isZero()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Java.Lang.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (Java.Lang.Object another);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 Java.Lang.IComparable.CompareTo(class Java.Lang.Object another) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="another" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="another">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LongValue">
      <MemberSignature Language="C#" Value="public override long LongValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 LongValue() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("longValue", "()J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the value of the specified number as a <c>long</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the value of the specified number as a <c>long</c>.

 </para>
          <para tool="javadoc-to-mdoc">
            <c>
              <see cref="P:Android.Util.Rational.IsInfinite" />
            </c> rationals are converted to an <c>long</c> value
 by dividing the numerator by the denominator; conversion for non-finite values happens
 identically to casting a floating point value to a <c>long</c>, in particular:

 </para>
          <para tool="javadoc-to-mdoc">
            <list type="bullet">
              <item>
                <term>Positive infinity saturates to the largest maximum long
 <c><see cref="F:Java.Lang.Long.MaxValue" /></c></term>
              </item>
              <item>
                <term>Negative infinity saturates to the smallest maximum long
 <c><see cref="F:Java.Lang.Long.MinValue" /></c></term>
              </item>
              <item>
                <term>
                  <i>Not-A-Number (NaN)</i> returns <c>0</c>.</term>
              </item>
            </list>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#longValue()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public static Android.Util.Rational NaN { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Util.Rational NaN" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("NaN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Rational</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Constant for the <i>Not-a-Number (NaN)</i> value of the <c>Rational</c> type.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Constant for the <i>Not-a-Number (NaN)</i> value of the <c>Rational</c> type.

 </para>
          <para tool="javadoc-to-mdoc">A <c>NaN</c> value is considered to be equal to itself (that is <c>NaN.equals(NaN)</c>
 will return <c>true</c>; it is always greater than any non-<c>NaN</c> value (that is
 <c>NaN.compareTo(notNaN)</c> will return a number greater than <c>0</c>).</para>
          <para tool="javadoc-to-mdoc">Equivalent to constructing a new rational with both the numerator and denominator
 equal to <c>0</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#NaN" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinity">
      <MemberSignature Language="C#" Value="public static Android.Util.Rational NegativeInfinity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Util.Rational NegativeInfinity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("NEGATIVE_INFINITY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Rational</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Constant for the negative infinity value of the <c>Rational</c> type.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Constant for the negative infinity value of the <c>Rational</c> type.

 </para>
          <para tool="javadoc-to-mdoc">Equivalent to constructing a new rational with a negative numerator and a denominator
 equal to <c>0</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#NEGATIVE_INFINITY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Numerator">
      <MemberSignature Language="C#" Value="public int Numerator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Numerator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNumerator", "()I", "GetGetNumeratorHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the numerator of the rational.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the numerator of the rational.

 </para>
          <para tool="javadoc-to-mdoc">The numerator will always return <c>1</c> if this rational represents
 infinity (that is, the denominator is <c>0</c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#getNumerator()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseRational">
      <MemberSignature Language="C#" Value="public static Android.Util.Rational ParseRational (string string);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Util.Rational ParseRational(string string) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parseRational", "(Ljava/lang/String;)Landroid/util/Rational;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Rational</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string">the string representation of a rational value.</param>
        <summary>Parses the specified string as a rational value.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Parses the specified string as a rational value.
 <sample external-id="046BF8D4A2D68C2BF251033734600917" /></para>
          <para tool="javadoc-to-mdoc">The ASCII characters <c>\</c><c>u003a</c> (':') and
 <c>\</c><c>u002f</c> ('/') are recognized as separators between
 the numerator and denumerator.</para>
          <para tool="javadoc-to-mdoc">
 For any <c>Rational r</c>: <c>Rational.parseRational(r.toString()).equals(r)</c>.
 However, the method also handles rational numbers expressed in the
 following forms:</para>
          <para tool="javadoc-to-mdoc">
 "<format type="text/html"><i>num</i></format><c>/</c><format type="text/html"><i>den</i></format>" or
 "<format type="text/html"><i>num</i></format><c>:</c><format type="text/html"><i>den</i></format>" <c>=&gt; new Rational(num, den);</c>,
 where <format type="text/html"><i>num</i></format> and <format type="text/html"><i>den</i></format> are string integers potentially
 containing a sign, such as "-10", "+7" or "5".</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#parseRational(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.NumberFormatException">if <c>string</c> cannot be parsed
 as a rational value.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if <c>string</c> was <c>null</c></exception>
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinity">
      <MemberSignature Language="C#" Value="public static Android.Util.Rational PositiveInfinity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Util.Rational PositiveInfinity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("POSITIVE_INFINITY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Rational</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Constant for the positive infinity value of the <c>Rational</c> type.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Constant for the positive infinity value of the <c>Rational</c> type.

 </para>
          <para tool="javadoc-to-mdoc">Equivalent to constructing a new rational with a positive numerator and a denominator
 equal to <c>0</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#POSITIVE_INFINITY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static Android.Util.Rational Zero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Util.Rational Zero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ZERO")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Rational</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Constant for the zero value of the <c>Rational</c> type.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Constant for the zero value of the <c>Rational</c> type.

 </para>
          <para tool="javadoc-to-mdoc">Equivalent to constructing a new rational with a numerator equal to <c>0</c> and
 any non-zero denominator.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/util/Rational.html#ZERO" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>