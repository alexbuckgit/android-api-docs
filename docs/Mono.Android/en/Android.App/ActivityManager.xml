<Type Name="ActivityManager" FullName="Android.App.ActivityManager">
  <TypeSignature Language="C#" Value="public class ActivityManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ActivityManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/app/ActivityManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Interact with the overall activities running in the system.</summary>
    <remarks />
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ActivityManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddAppTask">
      <MemberSignature Language="C#" Value="public virtual int AddAppTask (Android.App.Activity activity, Android.Content.Intent intent, Android.App.ActivityManager.TaskDescription description, Android.Graphics.Bitmap thumbnail);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AddAppTask(class Android.App.Activity activity, class Android.Content.Intent intent, class Android.App.ActivityManager/TaskDescription description, class Android.Graphics.Bitmap thumbnail) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addAppTask", "(Landroid/app/Activity;Landroid/content/Intent;Landroid/app/ActivityManager$TaskDescription;Landroid/graphics/Bitmap;)I", "GetAddAppTask_Landroid_app_Activity_Landroid_content_Intent_Landroid_app_ActivityManager_TaskDescription_Landroid_graphics_Bitmap_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="description" Type="Android.App.ActivityManager+TaskDescription" />
        <Parameter Name="thumbnail" Type="Android.Graphics.Bitmap" />
      </Parameters>
      <Docs>
        <param name="activity">The activity that is adding the entry.   This is used to help determine
 the context that the new recents entry will be in.</param>
        <param name="intent">The Intent that describes the recents entry.  This is the same Intent that
 you would have used to launch the activity for it.  In generally you will want to set
 both <c><see cref="!:Android.Content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT" /></c> and
 <c><see cref="!:Android.Content.Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS" /></c>; the latter is required since this recents
 entry will exist without an activity, so it doesn't make sense to not retain it when
 its activity disappears.  The given Intent here also must have an explicit ComponentName
 set on it.</param>
        <param name="description">Optional additional description information.</param>
        <param name="thumbnail">Thumbnail to use for the recents entry.  Should be the size given by
 <c><see cref="P:Android.App.ActivityManager.AppTaskThumbnailSize" /></c>.  If the bitmap is not that exact size, it will be
 recreated in your process, probably in a way you don't like, before the recents entry
 is added.</param>
        <summary>Add a new <c><see cref="!:NoType:android/app/ActivityManager$AppTask;Href=../../../reference/android/app/ActivityManager.AppTask.html" /></c> for the calling application.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AppTasks">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.App.ActivityManager.AppTask&gt; AppTasks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Android.App.ActivityManager/AppTask&gt; AppTasks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAppTasks", "()Ljava/util/List;", "GetGetAppTasksHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.App.ActivityManager+AppTask&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the list of tasks associated with the calling application.</summary>
        <value>To be added.</value>
        <remarks />
        <exception cref="T:Java.Lang.SecurityException" />
      </Docs>
    </Member>
    <Member MemberName="AppTaskThumbnailSize">
      <MemberSignature Language="C#" Value="public virtual Android.Util.Size AppTaskThumbnailSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Util.Size AppTaskThumbnailSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAppTaskThumbnailSize", "()Landroid/util/Size;", "GetGetAppTaskThumbnailSizeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the current design dimensions for <c><see cref="!:NoType:android/app/ActivityManager$AppTask;Href=../../../reference/android/app/ActivityManager.AppTask.html" /></c> thumbnails, for use
 with <c><see cref="M:Android.App.ActivityManager.AddAppTask(Android.App.Activity, Android.Content.Intent, Android.Content.Intent, Android.Content.Intent)" /></c>.</summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ClearApplicationUserData">
      <MemberSignature Language="C#" Value="public virtual bool ClearApplicationUserData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClearApplicationUserData() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearApplicationUserData", "()Z", "GetClearApplicationUserDataHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Permits an application to erase its own data from disk.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="DeviceConfigurationInfo">
      <MemberSignature Language="C#" Value="public virtual Android.Content.PM.ConfigurationInfo DeviceConfigurationInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.PM.ConfigurationInfo DeviceConfigurationInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDeviceConfigurationInfo", "()Landroid/content/pm/ConfigurationInfo;", "GetGetDeviceConfigurationInfoHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.ConfigurationInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the device configuration attributes.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="DumpPackageState">
      <MemberSignature Language="C#" Value="public virtual void DumpPackageState (Java.IO.FileDescriptor fd, string packageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DumpPackageState(class Java.IO.FileDescriptor fd, string packageName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dumpPackageState", "(Ljava/io/FileDescriptor;Ljava/lang/String;)V", "GetDumpPackageState_Ljava_io_FileDescriptor_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="packageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fd">The file descriptor that the dump should be written to.  The file
 descriptor is <i>not</i> closed by this function; the caller continues to
 own it.</param>
        <param name="packageName">The name of the package that is to be dumped.
</param>
        <summary>Perform a system dump of various state associated with the given application
 package name.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="DumpPackageStateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DumpPackageStateAsync (Java.IO.FileDescriptor fd, string packageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DumpPackageStateAsync(class Java.IO.FileDescriptor fd, string packageName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="packageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fd">To be added.</param>
        <param name="packageName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static Android.App.ActivityManager FromContext (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.ActivityManager FromContext(class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.App.ActivityManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetMemoryInfo">
      <MemberSignature Language="C#" Value="public virtual void GetMemoryInfo (Android.App.ActivityManager.MemoryInfo outInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetMemoryInfo(class Android.App.ActivityManager/MemoryInfo outInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getMemoryInfo", "(Landroid/app/ActivityManager$MemoryInfo;)V", "GetGetMemoryInfo_Landroid_app_ActivityManager_MemoryInfo_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outInfo" Type="Android.App.ActivityManager+MemoryInfo" />
      </Parameters>
      <Docs>
        <param name="outInfo">To be added.</param>
        <summary>Return general information about the memory state of the system.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetMyMemoryState">
      <MemberSignature Language="C#" Value="public static void GetMyMemoryState (Android.App.ActivityManager.RunningAppProcessInfo outState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMyMemoryState(class Android.App.ActivityManager/RunningAppProcessInfo outState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getMyMemoryState", "(Landroid/app/ActivityManager$RunningAppProcessInfo;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outState" Type="Android.App.ActivityManager+RunningAppProcessInfo" />
      </Parameters>
      <Docs>
        <param name="outState">To be added.</param>
        <summary>Return global memory state information for the calling process.</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="GetProcessMemoryInfo">
      <MemberSignature Language="C#" Value="public virtual Android.OS.Debug.MemoryInfo[] GetProcessMemoryInfo (int[] pids);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.Debug/MemoryInfo[] GetProcessMemoryInfo(int32[] pids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getProcessMemoryInfo", "([I)[Landroid/os/Debug$MemoryInfo;", "GetGetProcessMemoryInfo_arrayIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.Debug+MemoryInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pids" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="pids">The pids of the processes whose memory usage is to be
 retrieved.</param>
        <summary>Return information about the memory usage of one or more processes.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="GetRecentTasks">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.App.ActivityManager.RecentTaskInfo&gt; GetRecentTasks (int maxNum, Android.App.RecentTaskFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class Android.App.ActivityManager/RecentTaskInfo&gt; GetRecentTasks(int32 maxNum, valuetype Android.App.RecentTaskFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getRecentTasks", "(II)Ljava/util/List;", "GetGetRecentTasks_IIHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.App.ActivityManager+RecentTaskInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxNum" Type="System.Int32" />
        <Parameter Name="flags" Type="Android.App.RecentTaskFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="maxNum">The maximum number of entries to return in the list.  The
 actual number returned may be smaller, depending on how many tasks the
 user has started and the maximum number the system can remember.</param>
        <param name="flags">Information about what to return.  May be any combination
 of <c><see cref="!:Android.App.ActivityManager.RECENT_WITH_EXCLUDED" /></c> and <c><see cref="!:Android.App.ActivityManager.RECENT_IGNORE_UNAVAILABLE" /></c>.</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.SecurityException" />
      </Docs>
    </Member>
    <Member MemberName="GetRunningServiceControlPanel">
      <MemberSignature Language="C#" Value="public virtual Android.App.PendingIntent GetRunningServiceControlPanel (Android.Content.ComponentName service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.App.PendingIntent GetRunningServiceControlPanel(class Android.Content.ComponentName service) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getRunningServiceControlPanel", "(Landroid/content/ComponentName;)Landroid/app/PendingIntent;", "GetGetRunningServiceControlPanel_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.PendingIntent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="service">To be added.</param>
        <summary>Returns a PendingIntent you can start to show a control panel for the
 given running service.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 5" />
        <exception cref="T:Java.Lang.SecurityException" />
      </Docs>
    </Member>
    <Member MemberName="GetRunningServices">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.App.ActivityManager.RunningServiceInfo&gt; GetRunningServices (int maxNum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class Android.App.ActivityManager/RunningServiceInfo&gt; GetRunningServices(int32 maxNum) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getRunningServices", "(I)Ljava/util/List;", "GetGetRunningServices_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.App.ActivityManager+RunningServiceInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxNum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxNum">The maximum number of entries to return in the list.  The
 actual number returned may be smaller, depending on how many services
 are running.</param>
        <summary>Return a list of the services that are currently running.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.SecurityException" />
      </Docs>
    </Member>
    <Member MemberName="GetRunningTasks">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.App.ActivityManager.RunningTaskInfo&gt; GetRunningTasks (int maxNum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class Android.App.ActivityManager/RunningTaskInfo&gt; GetRunningTasks(int32 maxNum) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getRunningTasks", "(I)Ljava/util/List;", "GetGetRunningTasks_IHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.App.ActivityManager+RunningTaskInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxNum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxNum">The maximum number of entries to return in the list.  The
 actual number returned may be smaller, depending on how many tasks the
 user has started.</param>
        <summary>Return a list of the tasks that are currently running, with
 the most recent being first and older ones after in order.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.SecurityException" />
      </Docs>
    </Member>
    <Member MemberName="IsInLockTaskMode">
      <MemberSignature Language="C#" Value="public virtual bool IsInLockTaskMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInLockTaskMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isInLockTaskMode", "()Z", "GetIsInLockTaskModeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return whether currently in lock task mode.</summary>
        <value>To be added.</value>
        <remarks />
        <altmember cref="M:Android.App.Activity.StartLockTask" />
      </Docs>
    </Member>
    <Member MemberName="IsLowRamDevice">
      <MemberSignature Language="C#" Value="public virtual bool IsLowRamDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLowRamDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isLowRamDevice", "()Z", "GetIsLowRamDeviceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this is a low-RAM device.</summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsRunningInTestHarness">
      <MemberSignature Language="C#" Value="public static bool IsRunningInTestHarness { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsRunningInTestHarness" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isRunningInTestHarness", "()Z", "GetIsRunningInTestHarnessHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns "true" if device is running in a test harness.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsUserAMonkey">
      <MemberSignature Language="C#" Value="public static bool IsUserAMonkey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsUserAMonkey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isUserAMonkey", "()Z", "GetIsUserAMonkeyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns "true" if the user interface is currently being messed with
 by a monkey.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="KillBackgroundProcesses">
      <MemberSignature Language="C#" Value="public virtual void KillBackgroundProcesses (string packageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void KillBackgroundProcesses(string packageName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("killBackgroundProcesses", "(Ljava/lang/String;)V", "GetKillBackgroundProcesses_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="packageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="packageName">The name of the package whose processes are to
 be killed.
</param>
        <summary>Have the system immediately kill all background processes associated
 with the given package.</summary>
        <remarks />
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="LargeMemoryClass">
      <MemberSignature Language="C#" Value="public virtual int LargeMemoryClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LargeMemoryClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLargeMemoryClass", "()I", "GetGetLargeMemoryClassHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the approximate per-application memory class of the current
 device when an application is running with a large heap.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="LauncherLargeIconDensity">
      <MemberSignature Language="C#" Value="public virtual int LauncherLargeIconDensity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LauncherLargeIconDensity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLauncherLargeIconDensity", "()I", "GetGetLauncherLargeIconDensityHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the preferred density of icons for the launcher.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="LauncherLargeIconSize">
      <MemberSignature Language="C#" Value="public virtual int LauncherLargeIconSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LauncherLargeIconSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLauncherLargeIconSize", "()I", "GetGetLauncherLargeIconSizeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the preferred launcher icon size.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="MemoryClass">
      <MemberSignature Language="C#" Value="public virtual int MemoryClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MemoryClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMemoryClass", "()I", "GetGetMemoryClassHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the approximate per-application memory class of the current
 device.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="MetaHomeAlternate">
      <MemberSignature Language="C#" Value="public const string MetaHomeAlternate;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MetaHomeAlternate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("META_HOME_ALTERNATE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <format type="text/html">
            <a href="http://developer.android.com/reference/../guide/topics/manifest/meta-data-element.html">&lt;meta-data&gt;</a>
          </format> name for a 'home' Activity that declares a package that is to be
 uninstalled in lieu of the declaring one.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MoveTaskToFront">
      <MemberSignature Language="C#" Value="public virtual void MoveTaskToFront (int taskId, Android.App.MoveTaskFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveTaskToFront(int32 taskId, valuetype Android.App.MoveTaskFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("moveTaskToFront", "(II)V", "GetMoveTaskToFront_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskId" Type="System.Int32" />
        <Parameter Name="flags" Type="Android.App.MoveTaskFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="taskId">The identifier of the task to be moved, as found in
 <c><see cref="!:NoType:android/app/ActivityManager$RunningTaskInfo;Href=../../../reference/android/app/ActivityManager.RunningTaskInfo.html" /></c> or <c><see cref="!:NoType:android/app/ActivityManager$RecentTaskInfo;Href=../../../reference/android/app/ActivityManager.RecentTaskInfo.html" /></c>.</param>
        <param name="flags">Additional operational flags, 0 or more of
 <c><see cref="!:Android.App.ActivityManager.MOVE_TASK_WITH_HOME" /></c>, <c><see cref="!:Android.App.ActivityManager.MOVE_TASK_NO_USER_ACTION" /></c>.
</param>
        <summary tool="true">Equivalent to calling <c><see cref="M:Android.App.ActivityManager.MoveTaskToFront(System.Int32, Android.App.MoveTaskFlags, Android.App.MoveTaskFlags)" /></c>
 with a null options argument.</summary>
        <remarks />
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="MoveTaskToFront">
      <MemberSignature Language="C#" Value="public void MoveTaskToFront (int taskId, int flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTaskToFront(int32 taskId, int32 flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskId" Type="System.Int32" />
        <Parameter Name="flags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="taskId">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MoveTaskToFront">
      <MemberSignature Language="C#" Value="public virtual void MoveTaskToFront (int taskId, Android.App.MoveTaskFlags flags, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveTaskToFront(int32 taskId, valuetype Android.App.MoveTaskFlags flags, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("moveTaskToFront", "(IILandroid/os/Bundle;)V", "GetMoveTaskToFront_IILandroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskId" Type="System.Int32" />
        <Parameter Name="flags" Type="Android.App.MoveTaskFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="taskId">The identifier of the task to be moved, as found in
 <c><see cref="!:NoType:android/app/ActivityManager$RunningTaskInfo;Href=../../../reference/android/app/ActivityManager.RunningTaskInfo.html" /></c> or <c><see cref="!:NoType:android/app/ActivityManager$RecentTaskInfo;Href=../../../reference/android/app/ActivityManager.RecentTaskInfo.html" /></c>.</param>
        <param name="flags">Additional operational flags, 0 or more of
 <c><see cref="!:Android.App.ActivityManager.MOVE_TASK_WITH_HOME" /></c>, <c><see cref="!:Android.App.ActivityManager.MOVE_TASK_NO_USER_ACTION" /></c>.</param>
        <param name="options">Additional options for the operation, either null or
 as per <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent, Android.OS.Bundle)" /></c>.
</param>
        <summary>Ask that the task associated with a given task ID be moved to the
 front of the stack, so it is now visible to the user.</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ProcessesInErrorState">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.App.ActivityManager.ProcessErrorStateInfo&gt; ProcessesInErrorState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Android.App.ActivityManager/ProcessErrorStateInfo&gt; ProcessesInErrorState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getProcessesInErrorState", "()Ljava/util/List;", "GetGetProcessesInErrorStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.App.ActivityManager+ProcessErrorStateInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a list of any processes that are currently in an error condition.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RestartPackage">
      <MemberSignature Language="C#" Value="public virtual void RestartPackage (string packageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RestartPackage(string packageName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("restartPackage", "(Ljava/lang/String;)V", "GetRestartPackage_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="packageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="packageName">To be added.</param>
        <summary>
        </summary>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="RunningAppProcesses">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.App.ActivityManager.RunningAppProcessInfo&gt; RunningAppProcesses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Android.App.ActivityManager/RunningAppProcessInfo&gt; RunningAppProcesses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRunningAppProcesses", "()Ljava/util/List;", "GetGetRunningAppProcessesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.App.ActivityManager+RunningAppProcessInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a list of application processes that are running on the device.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
  </Members>
</Type>
