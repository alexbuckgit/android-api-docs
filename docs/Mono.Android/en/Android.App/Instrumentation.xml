<Type Name="Instrumentation" FullName="Android.App.Instrumentation">
  <TypeSignature Language="C#" Value="public class Instrumentation : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Instrumentation extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/app/Instrumentation", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Base class for implementing application instrumentation code.</summary>
    <remarks />
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Instrumentation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Instrumentation (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddMonitor">
      <MemberSignature Language="C#" Value="public virtual void AddMonitor (Android.App.Instrumentation.ActivityMonitor monitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddMonitor(class Android.App.Instrumentation/ActivityMonitor monitor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addMonitor", "(Landroid/app/Instrumentation$ActivityMonitor;)V", "GetAddMonitor_Landroid_app_Instrumentation_ActivityMonitor_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="monitor" Type="Android.App.Instrumentation+ActivityMonitor" />
      </Parameters>
      <Docs>
        <param name="monitor">The new ActivityMonitor to see.</param>
        <summary>Add a new <c><see cref="T:Android.App.Instrumentation+ActivityMonitor" tool="ReplaceLinkValue" /></c> that will be checked whenever an 
 activity is started.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Instrumentation.AddMonitor(Android.Content.IntentFilter, .ActivityResult, .ActivityResult)" />
        <altmember cref="M:Android.App.Instrumentation.CheckMonitorHit(.ActivityMonitor, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AddMonitor">
      <MemberSignature Language="C#" Value="public virtual Android.App.Instrumentation.ActivityMonitor AddMonitor (Android.Content.IntentFilter filter, Android.App.Instrumentation.ActivityResult result, bool block);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.App.Instrumentation/ActivityMonitor AddMonitor(class Android.Content.IntentFilter filter, class Android.App.Instrumentation/ActivityResult result, bool block) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addMonitor", "(Landroid/content/IntentFilter;Landroid/app/Instrumentation$ActivityResult;Z)Landroid/app/Instrumentation$ActivityMonitor;", "GetAddMonitor_Landroid_content_IntentFilter_Landroid_app_Instrumentation_ActivityResult_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Instrumentation+ActivityMonitor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="Android.Content.IntentFilter" />
        <Parameter Name="result" Type="Android.App.Instrumentation+ActivityResult" />
        <Parameter Name="block" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="filter">The set of intents this monitor is responsible for.</param>
        <param name="result">A canned result to return if the monitor is hit; can 
               be null.</param>
        <param name="block">Controls whether the monitor should block the activity 
              start (returning its canned result) or let the call
              proceed.</param>
        <summary>A convenience wrapper for <c><see cref="M:Android.App.Instrumentation.AddMonitor(.ActivityMonitor)" /></c> that 
 creates an intent filter matching <c><see cref="T:Android.App.Instrumentation+ActivityMonitor" tool="ReplaceLinkValue" /></c> for you and 
 returns it.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Instrumentation.AddMonitor(.ActivityMonitor)" />
        <altmember cref="M:Android.App.Instrumentation.CheckMonitorHit(.ActivityMonitor, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AddMonitor">
      <MemberSignature Language="C#" Value="public virtual Android.App.Instrumentation.ActivityMonitor AddMonitor (string cls, Android.App.Instrumentation.ActivityResult result, bool block);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.App.Instrumentation/ActivityMonitor AddMonitor(string cls, class Android.App.Instrumentation/ActivityResult result, bool block) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addMonitor", "(Ljava/lang/String;Landroid/app/Instrumentation$ActivityResult;Z)Landroid/app/Instrumentation$ActivityMonitor;", "GetAddMonitor_Ljava_lang_String_Landroid_app_Instrumentation_ActivityResult_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Instrumentation+ActivityMonitor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cls" Type="System.String" />
        <Parameter Name="result" Type="Android.App.Instrumentation+ActivityResult" />
        <Parameter Name="block" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cls">The activity class this monitor is responsible for.</param>
        <param name="result">A canned result to return if the monitor is hit; can 
               be null.</param>
        <param name="block">Controls whether the monitor should block the activity 
              start (returning its canned result) or let the call
              proceed.</param>
        <summary>A convenience wrapper for <c><see cref="M:Android.App.Instrumentation.AddMonitor(.ActivityMonitor)" /></c> that 
 creates a class matching <c><see cref="T:Android.App.Instrumentation+ActivityMonitor" tool="ReplaceLinkValue" /></c> for you and returns it.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Instrumentation.AddMonitor(.ActivityMonitor)" />
        <altmember cref="M:Android.App.Instrumentation.CheckMonitorHit(.ActivityMonitor, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AllocCounts">
      <MemberSignature Language="C#" Value="public virtual Android.OS.Bundle AllocCounts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.OS.Bundle AllocCounts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAllocCounts", "()Landroid/os/Bundle;", "GetGetAllocCountsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.Bundle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a bundle with the current results from the allocation counting.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="BinderCounts">
      <MemberSignature Language="C#" Value="public virtual Android.OS.Bundle BinderCounts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.OS.Bundle BinderCounts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getBinderCounts", "()Landroid/os/Bundle;", "GetGetBinderCountsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.Bundle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a bundle with the counts for various binder counts for this process.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallActivityOnCreate">
      <MemberSignature Language="C#" Value="public virtual void CallActivityOnCreate (Android.App.Activity activity, Android.OS.Bundle icicle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallActivityOnCreate(class Android.App.Activity activity, class Android.OS.Bundle icicle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callActivityOnCreate", "(Landroid/app/Activity;Landroid/os/Bundle;)V", "GetCallActivityOnCreate_Landroid_app_Activity_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="icicle" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="activity">The activity being created.</param>
        <param name="icicle">The previously frozen state (or null) to pass through to onCreate().
</param>
        <summary>Perform calling of an activity's <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c>
 method.</summary>
        <remarks />
        <since version="Added in API level 21" />
      </Docs>
    </Member>
    <Member MemberName="CallActivityOnCreate">
      <MemberSignature Language="C#" Value="public virtual void CallActivityOnCreate (Android.App.Activity activity, Android.OS.Bundle icicle, Android.OS.PersistableBundle persistentState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallActivityOnCreate(class Android.App.Activity activity, class Android.OS.Bundle icicle, class Android.OS.PersistableBundle persistentState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callActivityOnCreate", "(Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/PersistableBundle;)V", "GetCallActivityOnCreate_Landroid_app_Activity_Landroid_os_Bundle_Landroid_os_PersistableBundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="icicle" Type="Android.OS.Bundle" />
        <Parameter Name="persistentState" Type="Android.OS.PersistableBundle" />
      </Parameters>
      <Docs>
        <param name="activity">The activity being created.</param>
        <param name="icicle">The previously frozen state (or null) to pass through to</param>
        <param name="persistentState">The previously persisted state (or null)
</param>
        <summary>Perform calling of an activity's <c><see cref="M:Android.App.Activity.OnCreate(Android.OS.Bundle)" /></c>
 method.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CallActivityOnDestroy">
      <MemberSignature Language="C#" Value="public virtual void CallActivityOnDestroy (Android.App.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallActivityOnDestroy(class Android.App.Activity activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callActivityOnDestroy", "(Landroid/app/Activity;)V", "GetCallActivityOnDestroy_Landroid_app_Activity_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">To be added.</param>
        <summary>
        </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallActivityOnNewIntent">
      <MemberSignature Language="C#" Value="public virtual void CallActivityOnNewIntent (Android.App.Activity activity, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallActivityOnNewIntent(class Android.App.Activity activity, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callActivityOnNewIntent", "(Landroid/app/Activity;Landroid/content/Intent;)V", "GetCallActivityOnNewIntent_Landroid_app_Activity_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="activity">The activity receiving a new Intent.</param>
        <param name="intent">The new intent being received.
</param>
        <summary>Perform calling of an activity's <c><see cref="M:Android.App.Activity.OnNewIntent(Android.Content.Intent)" /></c>
 method.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallActivityOnPause">
      <MemberSignature Language="C#" Value="public virtual void CallActivityOnPause (Android.App.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallActivityOnPause(class Android.App.Activity activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callActivityOnPause", "(Landroid/app/Activity;)V", "GetCallActivityOnPause_Landroid_app_Activity_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">The activity being paused.
</param>
        <summary>Perform calling of an activity's <c><see cref="M:Android.App.Activity.OnPause" /></c> method.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallActivityOnPostCreate">
      <MemberSignature Language="C#" Value="public virtual void CallActivityOnPostCreate (Android.App.Activity activity, Android.OS.Bundle icicle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallActivityOnPostCreate(class Android.App.Activity activity, class Android.OS.Bundle icicle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callActivityOnPostCreate", "(Landroid/app/Activity;Landroid/os/Bundle;)V", "GetCallActivityOnPostCreate_Landroid_app_Activity_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="icicle" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="activity">The activity being created.</param>
        <param name="icicle">The previously frozen state (or null) to pass through to
               onPostCreate().
</param>
        <summary>Perform calling of an activity's <c><see cref="M:Android.App.Activity.OnPostCreate(Android.OS.Bundle)" /></c> method.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallActivityOnPostCreate">
      <MemberSignature Language="C#" Value="public virtual void CallActivityOnPostCreate (Android.App.Activity activity, Android.OS.Bundle icicle, Android.OS.PersistableBundle persistentState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallActivityOnPostCreate(class Android.App.Activity activity, class Android.OS.Bundle icicle, class Android.OS.PersistableBundle persistentState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callActivityOnPostCreate", "(Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/PersistableBundle;)V", "GetCallActivityOnPostCreate_Landroid_app_Activity_Landroid_os_Bundle_Landroid_os_PersistableBundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="icicle" Type="Android.OS.Bundle" />
        <Parameter Name="persistentState" Type="Android.OS.PersistableBundle" />
      </Parameters>
      <Docs>
        <param name="activity">The activity being created.</param>
        <param name="icicle">The previously frozen state (or null) to pass through to
               onPostCreate().
</param>
        <param name="persistentState">To be added.</param>
        <summary>Perform calling of an activity's <c><see cref="M:Android.App.Activity.OnPostCreate(Android.OS.Bundle)" /></c> method.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CallActivityOnRestart">
      <MemberSignature Language="C#" Value="public virtual void CallActivityOnRestart (Android.App.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallActivityOnRestart(class Android.App.Activity activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callActivityOnRestart", "(Landroid/app/Activity;)V", "GetCallActivityOnRestart_Landroid_app_Activity_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">The activity being restarted.
</param>
        <summary>Perform calling of an activity's <c><see cref="M:Android.App.Activity.OnRestart" /></c>
 method.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallActivityOnRestoreInstanceState">
      <MemberSignature Language="C#" Value="public virtual void CallActivityOnRestoreInstanceState (Android.App.Activity activity, Android.OS.Bundle savedInstanceState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallActivityOnRestoreInstanceState(class Android.App.Activity activity, class Android.OS.Bundle savedInstanceState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callActivityOnRestoreInstanceState", "(Landroid/app/Activity;Landroid/os/Bundle;)V", "GetCallActivityOnRestoreInstanceState_Landroid_app_Activity_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="activity">The activity being restored.</param>
        <param name="savedInstanceState">The previously saved state being restored.
</param>
        <summary>Perform calling of an activity's <c><see cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" /></c>
 method.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallActivityOnRestoreInstanceState">
      <MemberSignature Language="C#" Value="public virtual void CallActivityOnRestoreInstanceState (Android.App.Activity activity, Android.OS.Bundle savedInstanceState, Android.OS.PersistableBundle persistentState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallActivityOnRestoreInstanceState(class Android.App.Activity activity, class Android.OS.Bundle savedInstanceState, class Android.OS.PersistableBundle persistentState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callActivityOnRestoreInstanceState", "(Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/PersistableBundle;)V", "GetCallActivityOnRestoreInstanceState_Landroid_app_Activity_Landroid_os_Bundle_Landroid_os_PersistableBundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="savedInstanceState" Type="Android.OS.Bundle" />
        <Parameter Name="persistentState" Type="Android.OS.PersistableBundle" />
      </Parameters>
      <Docs>
        <param name="activity">The activity being restored.</param>
        <param name="savedInstanceState">The previously saved state being restored.</param>
        <param name="persistentState">The previously persisted state (or null)
</param>
        <summary>Perform calling of an activity's <c><see cref="M:Android.App.Activity.OnRestoreInstanceState(Android.OS.Bundle)" /></c>
 method.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CallActivityOnResume">
      <MemberSignature Language="C#" Value="public virtual void CallActivityOnResume (Android.App.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallActivityOnResume(class Android.App.Activity activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callActivityOnResume", "(Landroid/app/Activity;)V", "GetCallActivityOnResume_Landroid_app_Activity_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">The activity being resumed.
</param>
        <summary>Perform calling of an activity's <c><see cref="M:Android.App.Activity.OnResume" /></c> method.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallActivityOnSaveInstanceState">
      <MemberSignature Language="C#" Value="public virtual void CallActivityOnSaveInstanceState (Android.App.Activity activity, Android.OS.Bundle outState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallActivityOnSaveInstanceState(class Android.App.Activity activity, class Android.OS.Bundle outState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callActivityOnSaveInstanceState", "(Landroid/app/Activity;Landroid/os/Bundle;)V", "GetCallActivityOnSaveInstanceState_Landroid_app_Activity_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="outState" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="activity">The activity being saved.</param>
        <param name="outState">The bundle to pass to the call.
</param>
        <summary>Perform calling of an activity's <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c>
 method.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallActivityOnSaveInstanceState">
      <MemberSignature Language="C#" Value="public virtual void CallActivityOnSaveInstanceState (Android.App.Activity activity, Android.OS.Bundle outState, Android.OS.PersistableBundle outPersistentState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallActivityOnSaveInstanceState(class Android.App.Activity activity, class Android.OS.Bundle outState, class Android.OS.PersistableBundle outPersistentState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callActivityOnSaveInstanceState", "(Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/PersistableBundle;)V", "GetCallActivityOnSaveInstanceState_Landroid_app_Activity_Landroid_os_Bundle_Landroid_os_PersistableBundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="outState" Type="Android.OS.Bundle" />
        <Parameter Name="outPersistentState" Type="Android.OS.PersistableBundle" />
      </Parameters>
      <Docs>
        <param name="activity">The activity being saved.</param>
        <param name="outState">The bundle to pass to the call.</param>
        <param name="outPersistentState">The persistent bundle to pass to the call.
</param>
        <summary>Perform calling of an activity's <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c>
 method.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CallActivityOnStart">
      <MemberSignature Language="C#" Value="public virtual void CallActivityOnStart (Android.App.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallActivityOnStart(class Android.App.Activity activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callActivityOnStart", "(Landroid/app/Activity;)V", "GetCallActivityOnStart_Landroid_app_Activity_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">The activity being started.
</param>
        <summary>Perform calling of an activity's <c><see cref="M:Android.App.Activity.OnStart" /></c>
 method.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallActivityOnStop">
      <MemberSignature Language="C#" Value="public virtual void CallActivityOnStop (Android.App.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallActivityOnStop(class Android.App.Activity activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callActivityOnStop", "(Landroid/app/Activity;)V", "GetCallActivityOnStop_Landroid_app_Activity_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">The activity being stopped.
</param>
        <summary>Perform calling of an activity's <c><see cref="M:Android.App.Activity.OnStop" /></c>
 method.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CallActivityOnUserLeaving">
      <MemberSignature Language="C#" Value="public virtual void CallActivityOnUserLeaving (Android.App.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallActivityOnUserLeaving(class Android.App.Activity activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callActivityOnUserLeaving", "(Landroid/app/Activity;)V", "GetCallActivityOnUserLeaving_Landroid_app_Activity_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">The activity being notified that the user has navigated away
</param>
        <summary>Perform calling of an activity's <c><see cref="M:Android.App.Activity.OnUserLeaveHint" /></c> method.</summary>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="CallApplicationOnCreate">
      <MemberSignature Language="C#" Value="public virtual void CallApplicationOnCreate (Android.App.Application app);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CallApplicationOnCreate(class Android.App.Application app) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("callApplicationOnCreate", "(Landroid/app/Application;)V", "GetCallApplicationOnCreate_Landroid_app_Application_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="app" Type="Android.App.Application" />
      </Parameters>
      <Docs>
        <param name="app">The application being created.
</param>
        <summary>Perform calling of the application's <c><see cref="M:Android.App.Application.OnCreate" /></c>
 method.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="CheckMonitorHit">
      <MemberSignature Language="C#" Value="public virtual bool CheckMonitorHit (Android.App.Instrumentation.ActivityMonitor monitor, int minHits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckMonitorHit(class Android.App.Instrumentation/ActivityMonitor monitor, int32 minHits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("checkMonitorHit", "(Landroid/app/Instrumentation$ActivityMonitor;I)Z", "GetCheckMonitorHit_Landroid_app_Instrumentation_ActivityMonitor_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="monitor" Type="Android.App.Instrumentation+ActivityMonitor" />
        <Parameter Name="minHits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="monitor">The ActivityMonitor to check.</param>
        <param name="minHits">The minimum number of hits required.</param>
        <summary>Test whether an existing <c><see cref="T:Android.App.Instrumentation+ActivityMonitor" tool="ReplaceLinkValue" /></c> has been hit.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Instrumentation.AddMonitor(.ActivityMonitor)" />
      </Docs>
    </Member>
    <Member MemberName="ComponentName">
      <MemberSignature Language="C#" Value="public virtual Android.Content.ComponentName ComponentName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.ComponentName ComponentName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getComponentName", "()Landroid/content/ComponentName;", "GetGetComponentNameHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ComponentName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns complete component name of this instrumentation.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Context Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Context Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getContext", "()Landroid/content/Context;", "GetGetContextHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the Context of this instrumentation's package.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="P:Android.App.Instrumentation.TargetContext" />
      </Docs>
    </Member>
    <Member MemberName="EndPerformanceSnapshot">
      <MemberSignature Language="C#" Value="public virtual void EndPerformanceSnapshot ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndPerformanceSnapshot() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("endPerformanceSnapshot", "()V", "GetEndPerformanceSnapshotHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Finish">
      <MemberSignature Language="C#" Value="public virtual void Finish (Android.App.Result resultCode, Android.OS.Bundle results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Finish(valuetype Android.App.Result resultCode, class Android.OS.Bundle results) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("finish", "(ILandroid/os/Bundle;)V", "GetFinish_ILandroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resultCode" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="results" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="resultCode">Overall success/failure of instrumentation.</param>
        <param name="results">Any results to send back to the code that started the 
                instrumentation.
</param>
        <summary>Terminate instrumentation of the application.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InvokeContextMenuAction">
      <MemberSignature Language="C#" Value="public virtual bool InvokeContextMenuAction (Android.App.Activity targetActivity, int id, Android.Views.MenuPerformFlags flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool InvokeContextMenuAction(class Android.App.Activity targetActivity, int32 id, valuetype Android.Views.MenuPerformFlags flag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invokeContextMenuAction", "(Landroid/app/Activity;II)Z", "GetInvokeContextMenuAction_Landroid_app_Activity_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetActivity" Type="Android.App.Activity" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="flag" Type="Android.Views.MenuPerformFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="targetActivity">The activity in question.</param>
        <param name="id">The identifier associated with the context menu item.</param>
        <param name="flag">Additional flags, if any.</param>
        <summary>Show the context menu for the currently focused view and executes a
 particular context menu item.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMenuActionSync">
      <MemberSignature Language="C#" Value="public virtual bool InvokeMenuActionSync (Android.App.Activity targetActivity, int id, Android.Views.MenuPerformFlags flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool InvokeMenuActionSync(class Android.App.Activity targetActivity, int32 id, valuetype Android.Views.MenuPerformFlags flag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invokeMenuActionSync", "(Landroid/app/Activity;II)Z", "GetInvokeMenuActionSync_Landroid_app_Activity_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetActivity" Type="Android.App.Activity" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="flag" Type="Android.Views.MenuPerformFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="targetActivity">The activity in question.</param>
        <param name="id">The identifier associated with the menu item.</param>
        <param name="flag">Additional flags, if any.</param>
        <summary>Execute a particular menu item.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsProfiling">
      <MemberSignature Language="C#" Value="public virtual bool IsProfiling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsProfiling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isProfiling", "()Z", "GetIsProfilingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Check whether this instrumentation was started with profiling enabled.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NewActivity">
      <MemberSignature Language="C#" Value="public virtual Android.App.Activity NewActivity (Java.Lang.ClassLoader cl, string className, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.App.Activity NewActivity(class Java.Lang.ClassLoader cl, string className, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newActivity", "(Ljava/lang/ClassLoader;Ljava/lang/String;Landroid/content/Intent;)Landroid/app/Activity;", "GetNewActivity_Ljava_lang_ClassLoader_Ljava_lang_String_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cl" Type="Java.Lang.ClassLoader" />
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="cl">The ClassLoader with which to instantiate the object.</param>
        <param name="className">The name of the class implementing the Activity
                  object.</param>
        <param name="intent">The Intent object that specified the activity class being
               instantiated.</param>
        <summary>Perform instantiation of the process's <c><see cref="T:Android.App.Activity" /></c> object.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InstantiationException" />
        <exception cref="T:Java.Lang.IllegalAccessException" />
        <exception cref="T:Java.Lang.ClassNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="NewActivity">
      <MemberSignature Language="C#" Value="public virtual Android.App.Activity NewActivity (Java.Lang.Class clazz, Android.Content.Context context, Android.OS.IBinder token, Android.App.Application application, Android.Content.Intent intent, Android.Content.PM.ActivityInfo info, Java.Lang.ICharSequence title, Android.App.Activity parent, string id, Java.Lang.Object lastNonConfigurationInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.App.Activity NewActivity(class Java.Lang.Class clazz, class Android.Content.Context context, class Android.OS.IBinder token, class Android.App.Application application, class Android.Content.Intent intent, class Android.Content.PM.ActivityInfo info, class Java.Lang.ICharSequence title, class Android.App.Activity parent, string id, class Java.Lang.Object lastNonConfigurationInstance) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newActivity", "(Ljava/lang/Class;Landroid/content/Context;Landroid/os/IBinder;Landroid/app/Application;Landroid/content/Intent;Landroid/content/pm/ActivityInfo;Ljava/lang/CharSequence;Landroid/app/Activity;Ljava/lang/String;Ljava/lang/Object;)Landroid/app/Activity;", "GetNewActivity_Ljava_lang_Class_Landroid_content_Context_Landroid_os_IBinder_Landroid_app_Application_Landroid_content_Intent_Landroid_content_pm_ActivityInfo_Ljava_lang_CharSequence_Landroid_app_Activity_Ljava_lang_String_Ljava_lang_Object_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clazz" Type="Java.Lang.Class" />
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="token" Type="Android.OS.IBinder" />
        <Parameter Name="application" Type="Android.App.Application" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="info" Type="Android.Content.PM.ActivityInfo" />
        <Parameter Name="title" Type="Java.Lang.ICharSequence" />
        <Parameter Name="parent" Type="Android.App.Activity" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="lastNonConfigurationInstance" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="clazz">To be added.</param>
        <param name="context">To be added.</param>
        <param name="token">To be added.</param>
        <param name="application">To be added.</param>
        <param name="intent">To be added.</param>
        <param name="info">To be added.</param>
        <param name="title">To be added.</param>
        <param name="parent">To be added.</param>
        <param name="id">To be added.</param>
        <param name="lastNonConfigurationInstance">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="NewActivity">
      <MemberSignature Language="C#" Value="public Android.App.Activity NewActivity (Java.Lang.Class clazz, Android.Content.Context context, Android.OS.IBinder token, Android.App.Application application, Android.Content.Intent intent, Android.Content.PM.ActivityInfo info, string title, Android.App.Activity parent, string id, Java.Lang.Object lastNonConfigurationInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.App.Activity NewActivity(class Java.Lang.Class clazz, class Android.Content.Context context, class Android.OS.IBinder token, class Android.App.Application application, class Android.Content.Intent intent, class Android.Content.PM.ActivityInfo info, string title, class Android.App.Activity parent, string id, class Java.Lang.Object lastNonConfigurationInstance) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.App.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clazz" Type="Java.Lang.Class" />
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="token" Type="Android.OS.IBinder" />
        <Parameter Name="application" Type="Android.App.Application" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="info" Type="Android.Content.PM.ActivityInfo" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="parent" Type="Android.App.Activity" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="lastNonConfigurationInstance" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="clazz">To be added.</param>
        <param name="context">To be added.</param>
        <param name="token">To be added.</param>
        <param name="application">To be added.</param>
        <param name="intent">To be added.</param>
        <param name="info">To be added.</param>
        <param name="title">To be added.</param>
        <param name="parent">To be added.</param>
        <param name="id">To be added.</param>
        <param name="lastNonConfigurationInstance">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="NewApplication">
      <MemberSignature Language="C#" Value="public static Android.App.Application NewApplication (Java.Lang.Class clazz, Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.Application NewApplication(class Java.Lang.Class clazz, class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newApplication", "(Ljava/lang/Class;Landroid/content/Context;)Landroid/app/Application;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Application</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clazz" Type="Java.Lang.Class" />
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="clazz">To be added.</param>
        <param name="context">To be added.</param>
        <summary tool="true">Perform instantiation of the process's <see cref="T:Android.App.Application" /> object.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="NewApplication">
      <MemberSignature Language="C#" Value="public virtual Android.App.Application NewApplication (Java.Lang.ClassLoader cl, string className, Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.App.Application NewApplication(class Java.Lang.ClassLoader cl, string className, class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newApplication", "(Ljava/lang/ClassLoader;Ljava/lang/String;Landroid/content/Context;)Landroid/app/Application;", "GetNewApplication_Ljava_lang_ClassLoader_Ljava_lang_String_Landroid_content_Context_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Application</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cl" Type="Java.Lang.ClassLoader" />
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="cl">The ClassLoader with which to instantiate the object.</param>
        <param name="className">The name of the class implementing the Application
                  object.</param>
        <param name="context">The context to initialize the application with</param>
        <summary>Perform instantiation of the process's <c><see cref="T:Android.App.Application" /></c> object.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InstantiationException" />
        <exception cref="T:Java.Lang.IllegalAccessException" />
        <exception cref="T:Java.Lang.ClassNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="OnCreate">
      <MemberSignature Language="C#" Value="public virtual void OnCreate (Android.OS.Bundle arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCreate(class Android.OS.Bundle arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreate", "(Landroid/os/Bundle;)V", "GetOnCreate_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="arguments">Any additional arguments that were supplied when the 
                  instrumentation was started.
</param>
        <summary>Called when the instrumentation is starting, before any application code
 has been loaded.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnDestroy">
      <MemberSignature Language="C#" Value="public virtual void OnDestroy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDestroy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDestroy", "()V", "GetOnDestroyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the instrumented application is stopping, after all of the
 normal application cleanup has occurred.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnException">
      <MemberSignature Language="C#" Value="public virtual bool OnException (Java.Lang.Object obj, Java.Lang.Throwable e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnException(class Java.Lang.Object obj, class Java.Lang.Throwable e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onException", "(Ljava/lang/Object;Ljava/lang/Throwable;)Z", "GetOnException_Ljava_lang_Object_Ljava_lang_Throwable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Java.Lang.Object" />
        <Parameter Name="e" Type="Java.Lang.Throwable" />
      </Parameters>
      <Docs>
        <param name="obj">The client object that generated the exception.  May be an
            Application, Activity, BroadcastReceiver, Service, or null.</param>
        <param name="e">The exception that was thrown.</param>
        <summary>This is called whenever the system captures an unhandled exception that
 was thrown by the application.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnStart">
      <MemberSignature Language="C#" Value="public virtual void OnStart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnStart() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStart", "()V", "GetOnStartHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Method where the instrumentation thread enters execution.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveMonitor">
      <MemberSignature Language="C#" Value="public virtual void RemoveMonitor (Android.App.Instrumentation.ActivityMonitor monitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveMonitor(class Android.App.Instrumentation/ActivityMonitor monitor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeMonitor", "(Landroid/app/Instrumentation$ActivityMonitor;)V", "GetRemoveMonitor_Landroid_app_Instrumentation_ActivityMonitor_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="monitor" Type="Android.App.Instrumentation+ActivityMonitor" />
      </Parameters>
      <Docs>
        <param name="monitor">The monitor to remove.</param>
        <summary>Remove an <c><see cref="T:Android.App.Instrumentation+ActivityMonitor" tool="ReplaceLinkValue" /></c> that was previously added with 
 <c><see cref="M:Android.App.Instrumentation.AddMonitor(.ActivityMonitor)" /></c>.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Instrumentation.AddMonitor(.ActivityMonitor)" />
      </Docs>
    </Member>
    <Member MemberName="ReportKeyIdentifier">
      <MemberSignature Language="C#" Value="public const string ReportKeyIdentifier;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ReportKeyIdentifier" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("REPORT_KEY_IDENTIFIER")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If included in the status or final bundle sent to an IInstrumentationWatcher, this key 
 identifies the class that is writing the report.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ReportKeyStreamresult">
      <MemberSignature Language="C#" Value="public const string ReportKeyStreamresult;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ReportKeyStreamresult" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("REPORT_KEY_STREAMRESULT")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If included in the status or final bundle sent to an IInstrumentationWatcher, this key 
 identifies a string which can simply be printed to the output stream.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RunOnMainSync">
      <MemberSignature Language="C#" Value="public virtual void RunOnMainSync (Java.Lang.IRunnable runner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RunOnMainSync(class Java.Lang.IRunnable runner) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("runOnMainSync", "(Ljava/lang/Runnable;)V", "GetRunOnMainSync_Ljava_lang_Runnable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runner" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="runner">The code to run on the main thread.
</param>
        <summary>Execute a call on the application's main thread, blocking until it is
 complete.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RunOnMainSync">
      <MemberSignature Language="C#" Value="public void RunOnMainSync (Action runner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunOnMainSync(class System.Action runner) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runner" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="runner">To be added.</param>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SendCharacterSync">
      <MemberSignature Language="C#" Value="public virtual void SendCharacterSync (Android.Views.Keycode keyCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendCharacterSync(valuetype Android.Views.Keycode keyCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendCharacterSync", "(I)V", "GetSendCharacterSync_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyCode" Type="Android.Views.Keycode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keyCode">The key code of the character to send.
</param>
        <summary>Higher-level method for sending both the down and up key events for a
 particular character key code.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SendKeyDownUpSync">
      <MemberSignature Language="C#" Value="public virtual void SendKeyDownUpSync (Android.Views.Keycode key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendKeyDownUpSync(valuetype Android.Views.Keycode key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendKeyDownUpSync", "(I)V", "GetSendKeyDownUpSync_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Android.Views.Keycode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="key">The integer keycode for the event.
</param>
        <summary>Sends an up and down key event sync to the currently focused window.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SendKeySync">
      <MemberSignature Language="C#" Value="public virtual void SendKeySync (Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendKeySync(class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendKeySync", "(Landroid/view/KeyEvent;)V", "GetSendKeySync_Landroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="e">The event to send to the current focus.
</param>
        <summary>Send a key event to the currently focused window/view and wait for it to
 be processed.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SendPointerSync">
      <MemberSignature Language="C#" Value="public virtual void SendPointerSync (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendPointerSync(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendPointerSync", "(Landroid/view/MotionEvent;)V", "GetSendPointerSync_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">A motion event describing the pointer action.  (As noted in 
 <c><see cref="M:Android.Views.MotionEvent.Obtain(System.Int64, System.Int64, System.Int64, System.Int64, System.Int64, System.Int64)" /></c>, be sure to use 
 <c><see cref="M:Android.OS.SystemClock.UptimeMillis" /></c> as the timebase.
</param>
        <summary>Dispatch a pointer event.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SendStatus">
      <MemberSignature Language="C#" Value="public virtual void SendStatus (Android.App.Result resultCode, Android.OS.Bundle results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendStatus(valuetype Android.App.Result resultCode, class Android.OS.Bundle results) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendStatus", "(ILandroid/os/Bundle;)V", "GetSendStatus_ILandroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resultCode" Type="Android.App.Result">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="results" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="resultCode">Current success/failure of instrumentation.</param>
        <param name="results">Any results to send back to the code that started the instrumentation.
</param>
        <summary>Provide a status report about the application.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SendStringSync">
      <MemberSignature Language="C#" Value="public virtual void SendStringSync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendStringSync(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendStringSync", "(Ljava/lang/String;)V", "GetSendStringSync_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text to be sent. 
</param>
        <summary>Sends the key events corresponding to the text to the app being
 instrumented.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SendTrackballEventSync">
      <MemberSignature Language="C#" Value="public virtual void SendTrackballEventSync (Android.Views.MotionEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendTrackballEventSync(class Android.Views.MotionEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendTrackballEventSync", "(Landroid/view/MotionEvent;)V", "GetSendTrackballEventSync_Landroid_view_MotionEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.MotionEvent" />
      </Parameters>
      <Docs>
        <param name="e">A motion event describing the trackball action.  (As noted in 
 <c><see cref="M:Android.Views.MotionEvent.Obtain(System.Int64, System.Int64, System.Int64, System.Int64, System.Int64, System.Int64)" /></c>, be sure to use 
 <c><see cref="M:Android.OS.SystemClock.UptimeMillis" /></c> as the timebase.
</param>
        <summary>Dispatch a trackball event.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetAutomaticPerformanceSnapshots">
      <MemberSignature Language="C#" Value="public virtual void SetAutomaticPerformanceSnapshots ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAutomaticPerformanceSnapshots() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAutomaticPerformanceSnapshots", "()V", "GetSetAutomaticPerformanceSnapshotsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetInTouchMode">
      <MemberSignature Language="C#" Value="public virtual void SetInTouchMode (bool inTouch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetInTouchMode(bool inTouch) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setInTouchMode", "(Z)V", "GetSetInTouchMode_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inTouch" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inTouch">Set to true to be in touch mode, false to be in
 focus mode.
</param>
        <summary>Force the global system in or out of touch mode.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public virtual void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Start() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("start", "()V", "GetStartHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Create and start a new thread in which to run instrumentation.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StartActivitySync">
      <MemberSignature Language="C#" Value="public virtual Android.App.Activity StartActivitySync (Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.App.Activity StartActivitySync(class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivitySync", "(Landroid/content/Intent;)Landroid/app/Activity;", "GetStartActivitySync_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="intent">Description of the activity to start.</param>
        <summary>Start a new activity and wait for it to begin running before returning.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="StartAllocCounting">
      <MemberSignature Language="C#" Value="public virtual void StartAllocCounting ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartAllocCounting() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startAllocCounting", "()V", "GetStartAllocCountingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StartPerformanceSnapshot">
      <MemberSignature Language="C#" Value="public virtual void StartPerformanceSnapshot ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartPerformanceSnapshot() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startPerformanceSnapshot", "()V", "GetStartPerformanceSnapshotHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StartProfiling">
      <MemberSignature Language="C#" Value="public virtual void StartProfiling ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartProfiling() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startProfiling", "()V", "GetStartProfilingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method will start profiling if isProfiling() returns true.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StopAllocCounting">
      <MemberSignature Language="C#" Value="public virtual void StopAllocCounting ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopAllocCounting() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stopAllocCounting", "()V", "GetStopAllocCountingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StopProfiling">
      <MemberSignature Language="C#" Value="public virtual void StopProfiling ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopProfiling() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stopProfiling", "()V", "GetStopProfilingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops profiling if isProfiling() returns true.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TargetContext">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Context TargetContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Context TargetContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getTargetContext", "()Landroid/content/Context;", "GetGetTargetContextHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return a Context for the target application being instrumented.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="P:Android.App.Instrumentation.Context" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UiAutomation">
      <MemberSignature Language="C#" Value="public virtual Android.App.UiAutomation UiAutomation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.UiAutomation UiAutomation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getUiAutomation", "()Landroid/app/UiAutomation;", "GetGetUiAutomationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.UiAutomation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <c><see cref="T:Android.App.UiAutomation" /></c> instance.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 18" />
        <altmember cref="T:Android.App.UiAutomation" />
      </Docs>
    </Member>
    <Member MemberName="WaitForIdle">
      <MemberSignature Language="C#" Value="public virtual void WaitForIdle (Java.Lang.IRunnable recipient);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WaitForIdle(class Java.Lang.IRunnable recipient) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("waitForIdle", "(Ljava/lang/Runnable;)V", "GetWaitForIdle_Ljava_lang_Runnable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipient" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="recipient">Called the next time the thread's message queue is
                  idle.
</param>
        <summary>Schedule a callback for when the application's main thread goes idle
 (has no more events to process).</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WaitForIdle">
      <MemberSignature Language="C#" Value="public void WaitForIdle (Action recipient);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WaitForIdle(class System.Action recipient) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipient" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="recipient">To be added.</param>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="WaitForIdleSync">
      <MemberSignature Language="C#" Value="public virtual void WaitForIdleSync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WaitForIdleSync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("waitForIdleSync", "()V", "GetWaitForIdleSyncHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Synchronously wait for the application to be idle.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WaitForMonitor">
      <MemberSignature Language="C#" Value="public virtual Android.App.Activity WaitForMonitor (Android.App.Instrumentation.ActivityMonitor monitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.App.Activity WaitForMonitor(class Android.App.Instrumentation/ActivityMonitor monitor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("waitForMonitor", "(Landroid/app/Instrumentation$ActivityMonitor;)Landroid/app/Activity;", "GetWaitForMonitor_Landroid_app_Instrumentation_ActivityMonitor_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="monitor" Type="Android.App.Instrumentation+ActivityMonitor" />
      </Parameters>
      <Docs>
        <param name="monitor">The ActivityMonitor to wait for.</param>
        <summary>Wait for an existing <c><see cref="T:Android.App.Instrumentation+ActivityMonitor" tool="ReplaceLinkValue" /></c> to be hit.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WaitForMonitorWithTimeout">
      <MemberSignature Language="C#" Value="public virtual Android.App.Activity WaitForMonitorWithTimeout (Android.App.Instrumentation.ActivityMonitor monitor, long timeOut);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.App.Activity WaitForMonitorWithTimeout(class Android.App.Instrumentation/ActivityMonitor monitor, int64 timeOut) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("waitForMonitorWithTimeout", "(Landroid/app/Instrumentation$ActivityMonitor;J)Landroid/app/Activity;", "GetWaitForMonitorWithTimeout_Landroid_app_Instrumentation_ActivityMonitor_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="monitor" Type="Android.App.Instrumentation+ActivityMonitor" />
        <Parameter Name="timeOut" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="monitor">The ActivityMonitor to wait for.</param>
        <param name="timeOut">The timeout value in secs.</param>
        <summary>Wait for an existing <c><see cref="T:Android.App.Instrumentation+ActivityMonitor" tool="ReplaceLinkValue" /></c> to be hit till the timeout
 expires.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
