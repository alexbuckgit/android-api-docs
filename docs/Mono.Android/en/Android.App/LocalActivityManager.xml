<Type Name="LocalActivityManager" FullName="Android.App.LocalActivityManager">
  <TypeSignature Language="C#" Value="public class LocalActivityManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LocalActivityManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/app/LocalActivityManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("This class is obsoleted in this android platform")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>
    </summary>
    <remarks>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">Helper class for managing multiple running embedded activities in the same
 process. This class is not normally used directly, but rather created for
 you as part of the <c><see cref="T:Android.App.ActivityGroup" /></c> implementation.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Android.App.ActivityGroup" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/app/LocalActivityManager.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1Deprecated since API level 13" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LocalActivityManager (Android.App.Activity parent, bool singleMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.App.Activity parent, bool singleMode) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/app/Activity;Z)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parent" Type="Android.App.Activity" />
        <Parameter Name="singleMode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="parent">To be added.</param>
        <param name="singleMode">To be added.</param>
        <summary>Create a new LocalActivityManager for holding activities running within
 the given <format type="text/html"><var>parent</var></format>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new LocalActivityManager for holding activities running within
 the given <format type="text/html"><var>parent</var></format>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/LocalActivityManager.html#LocalActivityManager(android.app.Activity, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LocalActivityManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T}(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentActivity">
      <MemberSignature Language="C#" Value="public virtual Android.App.Activity CurrentActivity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.App.Activity CurrentActivity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCurrentActivity", "()Landroid/app/Activity;", "GetGetCurrentActivityHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Activity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the Activity that is currently running.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the Activity that is currently running.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/LocalActivityManager.html#getCurrentActivity()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.LocalActivityManager.StartActivity(System.String, Android.Content.Intent)" />
        <altmember cref="P:Android.App.LocalActivityManager.CurrentId" />
      </Docs>
    </Member>
    <Member MemberName="CurrentId">
      <MemberSignature Language="C#" Value="public virtual string CurrentId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCurrentId", "()Ljava/lang/String;", "GetGetCurrentIdHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the ID of the activity that is currently running.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the ID of the activity that is currently running.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/LocalActivityManager.html#getCurrentId()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.LocalActivityManager.StartActivity(System.String, Android.Content.Intent)" />
        <altmember cref="P:Android.App.LocalActivityManager.CurrentActivity" />
      </Docs>
    </Member>
    <Member MemberName="DestroyActivity">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Window DestroyActivity (string id, bool finish);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.Window DestroyActivity(string id, bool finish) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("destroyActivity", "(Ljava/lang/String;Z)Landroid/view/Window;", "GetDestroyActivity_Ljava_lang_String_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Window</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="finish" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="id">Unique identifier of the activity to be destroyed</param>
        <param name="finish">If true, this activity will be finished, so its id and
 all state are removed from the group.</param>
        <summary>Destroy the activity associated with a particular id.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Destroy the activity associated with a particular id.  This activity
 will go through the normal lifecycle events and fine onDestroy(), and
 then the id removed from the group.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/LocalActivityManager.html#destroyActivity(java.lang.String, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchCreate">
      <MemberSignature Language="C#" Value="public virtual void DispatchCreate (Android.OS.Bundle state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchCreate(class Android.OS.Bundle state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchCreate", "(Landroid/os/Bundle;)V", "GetDispatchCreate_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="state">a previously saved state; does nothing if this is null</param>
        <summary>Restore a state that was previously returned by <c><see cref="M:Android.App.LocalActivityManager.SaveInstanceState" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Restore a state that was previously returned by <c><see cref="M:Android.App.LocalActivityManager.SaveInstanceState" /></c>.  This
 adds to the activity group information about all activity IDs that had
 previously been saved, even if they have not been started yet, so if the
 user later navigates to them the correct state will be restored.
 
 </para>
          <para tool="javadoc-to-mdoc">Note: This does <format type="text/html"><b>not</b></format> change the current running activity, or
 start whatever activity was previously running when the state was saved.
 That is up to the client to do, in whatever way it thinks is best.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/LocalActivityManager.html#dispatchCreate(android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.LocalActivityManager.SaveInstanceState" />
      </Docs>
    </Member>
    <Member MemberName="DispatchDestroy">
      <MemberSignature Language="C#" Value="public virtual void DispatchDestroy (bool finishing);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchDestroy(bool finishing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchDestroy", "(Z)V", "GetDispatchDestroy_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finishing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="finishing">To be added.</param>
        <summary>Called by the container activity in its <c><see cref="M:Android.App.Activity.OnDestroy" /></c> so
 that LocalActivityManager can perform the corresponding action on the
 activities it holds.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the container activity in its <c><see cref="M:Android.App.Activity.OnDestroy" /></c> so
 that LocalActivityManager can perform the corresponding action on the
 activities it holds.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/LocalActivityManager.html#dispatchDestroy(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnDestroy" />
      </Docs>
    </Member>
    <Member MemberName="DispatchPause">
      <MemberSignature Language="C#" Value="public virtual void DispatchPause (bool finishing);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchPause(bool finishing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchPause", "(Z)V", "GetDispatchPause_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finishing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="finishing">set to true if the parent activity has been finished;
                  this can be determined by calling
                  Activity.isFinishing()</param>
        <summary>Called by the container activity in its <c><see cref="M:Android.App.Activity.OnPause" /></c> so
 that LocalActivityManager can perform the corresponding action on the
 activities it holds.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the container activity in its <c><see cref="M:Android.App.Activity.OnPause" /></c> so
 that LocalActivityManager can perform the corresponding action on the
 activities it holds.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/LocalActivityManager.html#dispatchPause(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnPause" />
        <altmember cref="P:Android.App.Activity.IsFinishing" />
      </Docs>
    </Member>
    <Member MemberName="DispatchResume">
      <MemberSignature Language="C#" Value="public virtual void DispatchResume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchResume() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchResume", "()V", "GetDispatchResumeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called by the container activity in its <c><see cref="M:Android.App.Activity.OnResume" /></c> so
 that LocalActivityManager can perform the corresponding action on the
 activities it holds.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the container activity in its <c><see cref="M:Android.App.Activity.OnResume" /></c> so
 that LocalActivityManager can perform the corresponding action on the
 activities it holds.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/LocalActivityManager.html#dispatchResume()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnResume" />
      </Docs>
    </Member>
    <Member MemberName="DispatchStop">
      <MemberSignature Language="C#" Value="public virtual void DispatchStop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchStop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchStop", "()V", "GetDispatchStopHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called by the container activity in its <c><see cref="M:Android.App.Activity.OnStop" /></c> so
 that LocalActivityManager can perform the corresponding action on the
 activities it holds.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called by the container activity in its <c><see cref="M:Android.App.Activity.OnStop" /></c> so
 that LocalActivityManager can perform the corresponding action on the
 activities it holds.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/LocalActivityManager.html#dispatchStop()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.Activity.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="GetActivity">
      <MemberSignature Language="C#" Value="public virtual Android.App.Activity GetActivity (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.App.Activity GetActivity(string id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getActivity", "(Ljava/lang/String;)Landroid/app/Activity;", "GetGetActivity_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <summary>Return the Activity object associated with a string ID.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the Activity object associated with a string ID.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/LocalActivityManager.html#getActivity(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.LocalActivityManager.StartActivity(System.String, Android.Content.Intent)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAllActivities">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllActivities ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllActivities() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeAllActivities", "()V", "GetRemoveAllActivitiesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove all activities from this LocalActivityManager, performing an
 <c><see cref="M:Android.App.Activity.OnDestroy" /></c> on any that are currently instantiated.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove all activities from this LocalActivityManager, performing an
 <c><see cref="M:Android.App.Activity.OnDestroy" /></c> on any that are currently instantiated.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/LocalActivityManager.html#removeAllActivities()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SaveInstanceState">
      <MemberSignature Language="C#" Value="public virtual Android.OS.Bundle SaveInstanceState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.Bundle SaveInstanceState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("saveInstanceState", "()Landroid/os/Bundle;", "GetSaveInstanceStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.Bundle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieve the state of all activities known by the group.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the state of all activities known by the group.  For
 activities that have previously run and are now stopped or finished, the
 last saved state is used.  For the current running activity, its
 <c><see cref="M:Android.App.Activity.OnSaveInstanceState(Android.OS.Bundle)" /></c> is called to retrieve its current state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/LocalActivityManager.html#saveInstanceState()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.App.LocalActivityManager.DispatchCreate(Android.OS.Bundle)" />
      </Docs>
    </Member>
    <Member MemberName="StartActivity">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Window StartActivity (string id, Android.Content.Intent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.Window StartActivity(string id, class Android.Content.Intent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivity", "(Ljava/lang/String;Landroid/content/Intent;)Landroid/view/Window;", "GetStartActivity_Ljava_lang_String_Landroid_content_Intent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Window</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
      </Parameters>
      <Docs>
        <param name="id">Unique identifier of the activity to be started</param>
        <param name="intent">The Intent describing the activity to be started</param>
        <summary>Start a new activity running in the group.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Start a new activity running in the group.  Every activity you start
 must have a unique string ID associated with it -- this is used to keep
 track of the activity, so that if you later call startActivity() again
 on it the same activity object will be retained.
 
 </para>
          <para tool="javadoc-to-mdoc">When there had previously been an activity started under this id,
 it may either be destroyed and a new one started, or the current
 one re-used, based on these conditions, in order:<list type="bullet"><item><term> If the Intent maps to a different activity component than is
 currently running, the current activity is finished and a new one
 started.
 </term></item><item><term> If the current activity uses a non-multiple launch mode (such
 as singleTop), or the Intent has the
 <c><see cref="!:Android.Content.Intent.FLAG_ACTIVITY_SINGLE_TOP" /></c> flag set, then the current
 activity will remain running and its
 <c><see cref="M:Android.App.Activity.OnNewIntent(Android.Content.Intent)" /></c> method
 called.
 </term></item><item><term> If the new Intent is the same (excluding extras) as the previous
 one, and the new Intent does not have the
 <c><see cref="!:Android.Content.Intent.FLAG_ACTIVITY_CLEAR_TOP" /></c> set, then the current activity
 will remain running as-is.
 </term></item><item><term> Otherwise, the current activity will be finished and a new
 one started.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">If the given Intent can not be resolved to an available Activity,
 this method throws <c><see cref="T:Android.Content.ActivityNotFoundException" /></c>.
 
 </para>
          <para tool="javadoc-to-mdoc">Warning: There is an issue where, if the Intent does not
 include an explicit component, we can restore the state for a different
 activity class than was previously running when the state was saved (if
 the set of available activities changes between those points).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/app/LocalActivityManager.html#startActivity(java.lang.String, android.content.Intent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Android.Content.ActivityNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>