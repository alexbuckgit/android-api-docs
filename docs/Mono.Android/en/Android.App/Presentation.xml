<Type Name="Presentation" FullName="Android.App.Presentation">
  <TypeSignature Language="C#" Value="public class Presentation : Android.App.Dialog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Presentation extends Android.App.Dialog" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.App.Dialog</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/app/Presentation", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Base class for presentations.</summary>
    <remarks><para tool="javadoc-to-mdoc">Base class for presentations.
 <format type="text/html"><h3>Choosing a presentation display</h3></format><format type="text/html"><h4>Using the media router to choose a presentation display</h4></format><sample external-id="55BCED89554FFC00F9273D11C86D4EFD" /><sample external-id="0D13FE222D69137FEABEDFE00014A8A0" /><format type="text/html"><h4>Using the display manager to choose a presentation display</h4></format><sample external-id="EE932F93F75FB338AAC844DDECA54C75" /><sample external-id="38E4C973B91D7D9CCF4090F44BA58D43" /></para><para tool="javadoc-to-mdoc">
 A presentation is a special kind of dialog whose purpose is to present
 content on a secondary display.  A <c><see cref="T:Android.App.Presentation" /></c> is associated with
 the target <c><see cref="T:Android.Views.Display" /></c> at creation time and configures its context and
 resource configuration according to the display's metrics.
 </para><para tool="javadoc-to-mdoc">
 Notably, the <c><see cref="T:Android.Content.Context" /></c> of a presentation is different from the context
 of its containing <c><see cref="T:Android.App.Activity" /></c>.  It is important to inflate the layout
 of a presentation and load other resources using the presentation's own context
 to ensure that assets of the correct size and density for the target display
 are loaded.
 </para><para tool="javadoc-to-mdoc">
 A presentation is automatically canceled (see <c><see cref="M:Android.App.Dialog.Cancel" /></c>) when
 the display to which it is attached is removed.  An activity should take
 care of pausing and resuming whatever content is playing within the presentation
 whenever the activity itself is paused or resumed.
 </para><para tool="javadoc-to-mdoc">
 Before showing a <c><see cref="T:Android.App.Presentation" /></c> it's important to choose the <c><see cref="T:Android.Views.Display" /></c>
 on which it will appear.  Choosing a presentation display is sometimes difficult
 because there may be multiple displays attached.  Rather than trying to guess
 which display is best, an application should let the system choose a suitable
 presentation display.
 </para><para tool="javadoc-to-mdoc">
 There are two main ways to choose a <c><see cref="T:Android.Views.Display" /></c>.
 </para><para tool="javadoc-to-mdoc">
 The easiest way to choose a presentation display is to use the
 <c><see cref="T:Android.Media.MediaRouter" /></c> API.  The media router service keeps
 track of which audio and video routes are available on the system.
 The media router sends notifications whenever routes are selected or unselected
 or when the preferred presentation display of a route changes.
 So an application can simply watch for these notifications and show or dismiss
 a presentation on the preferred presentation display automatically.
 </para><para tool="javadoc-to-mdoc">
 The preferred presentation display is the display that the media router recommends
 that the application should use if it wants to show content on the secondary display.
 Sometimes there may not be a preferred presentation display in which
 case the application should show its content locally without using a presentation.
 </para><para tool="javadoc-to-mdoc">
 Here's how to use the media router to create and show a presentation on the preferred
 presentation display using <c><see cref="!:NoType:android/media/MediaRouter$RouteInfo;Href=../../../reference/android/media/MediaRouter.RouteInfo.html#getPresentationDisplay()" /></c>.
 </para><para tool="javadoc-to-mdoc">
 The following sample code from <c>ApiDemos</c> demonstrates how to use the media
 router to automatically switch between showing content in the main activity and showing
 the content in a presentation when a presentation display is available.
 </para><para tool="javadoc-to-mdoc">
 Another way to choose a presentation display is to use the <c><see cref="T:Android.Hardware.Display.DisplayManager" /></c> API
 directly.  The display manager service provides functions to enumerate and describe all
 displays that are attached to the system including displays that may be used
 for presentations.
 </para><para tool="javadoc-to-mdoc">
 The display manager keeps track of all displays in the system.  However, not all
 displays are appropriate for showing presentations.  For example, if an activity
 attempted to show a presentation on the main display it might obscure its own content
 (it's like opening a dialog on top of your activity).
 </para><para tool="javadoc-to-mdoc">
 Here's how to identify suitable displays for showing presentations using
 <c><see cref="M:Android.Hardware.Display.DisplayManager.GetDisplays(System.String)" /></c> and the
 <c><see cref="F:Android.Hardware.Display.DisplayManager.DisplayCategoryPresentation" /></c> category.
 </para><para tool="javadoc-to-mdoc">
 The following sample code from <c>ApiDemos</c> demonstrates how to use the display
 manager to enumerate displays and show content on multiple presentation displays
 simultaneously.
 </para><format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="F:Android.Media.MediaRouter.RouteTypeLiveVideo" /></c></term></item><item><term><c><see cref="T:Android.Hardware.Display.DisplayManager" /></c></term></item></list><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/Presentation.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 17" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Presentation (Android.Content.Context outerContext, Android.Views.Display display);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context outerContext, class Android.Views.Display display) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/view/Display;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="outerContext" Type="Android.Content.Context" />
        <Parameter Name="display" Type="Android.Views.Display" />
      </Parameters>
      <Docs>
        <param name="outerContext">To be added.</param>
        <param name="display">To be added.</param>
        <summary>Creates a new presentation that is attached to the specified display
 using the default theme.</summary>
        <remarks><para tool="javadoc-to-mdoc">Creates a new presentation that is attached to the specified display
 using the default theme.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/Presentation.html#Presentation(android.content.Context, android.view.Display)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Presentation (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Presentation (Android.Content.Context outerContext, Android.Views.Display display, int theme);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context outerContext, class Android.Views.Display display, int32 theme) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;Landroid/view/Display;I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="outerContext" Type="Android.Content.Context" />
        <Parameter Name="display" Type="Android.Views.Display" />
        <Parameter Name="theme" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="outerContext">To be added.</param>
        <param name="display">To be added.</param>
        <param name="theme">To be added.</param>
        <summary>Creates a new presentation that is attached to the specified display
 using the optionally specified theme.</summary>
        <remarks><para tool="javadoc-to-mdoc">Creates a new presentation that is attached to the specified display
 using the optionally specified theme.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/Presentation.html#Presentation(android.content.Context, android.view.Display, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Display Display { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Display Display" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDisplay", "()Landroid/view/Display;", "GetGetDisplayHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Display</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <c><see cref="T:Android.Views.Display" /></c> that this presentation appears on.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Gets the <c><see cref="T:Android.Views.Display" /></c> that this presentation appears on.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/Presentation.html#getDisplay()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="OnDisplayChanged">
      <MemberSignature Language="C#" Value="public virtual void OnDisplayChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDisplayChanged() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDisplayChanged", "()V", "GetOnDisplayChangedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called by the system when the properties of the <c><see cref="T:Android.Views.Display" /></c> to which
 the presentation is attached have changed.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called by the system when the properties of the <c><see cref="T:Android.Views.Display" /></c> to which
 the presentation is attached have changed.

 If the display metrics have changed (for example, if the display has been
 resized or rotated), then the system automatically calls
 <c><see cref="M:Android.App.Dialog.Cancel" /></c> to dismiss the presentation.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/Presentation.html#onDisplayChanged()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 17" />
        <altmember cref="P:Android.App.Presentation.Display" />
      </Docs>
    </Member>
    <Member MemberName="OnDisplayRemoved">
      <MemberSignature Language="C#" Value="public virtual void OnDisplayRemoved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDisplayRemoved() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onDisplayRemoved", "()V", "GetOnDisplayRemovedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called by the system when the <c><see cref="T:Android.Views.Display" /></c> to which the presentation
 is attached has been removed.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called by the system when the <c><see cref="T:Android.Views.Display" /></c> to which the presentation
 is attached has been removed.

 The system automatically calls <c><see cref="M:Android.App.Dialog.Cancel" /></c> to dismiss the presentation
 after sending this event.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/Presentation.html#onDisplayRemoved()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 17" />
        <altmember cref="P:Android.App.Presentation.Display" />
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Res.Resources Resources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Res.Resources Resources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getResources", "()Landroid/content/res/Resources;", "GetGetResourcesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.Resources</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <c><see cref="T:Android.Content.Res.Resources" /></c> that should be used to inflate the layout of this presentation.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Gets the <c><see cref="T:Android.Content.Res.Resources" /></c> that should be used to inflate the layout of this presentation.
 This resources object has been configured according to the metrics of the
 display that the presentation appears on.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/Presentation.html#getResources()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
