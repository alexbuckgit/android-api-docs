<Type Name="ShortBuffer" FullName="Java.Nio.ShortBuffer">
  <TypeSignature Language="C#" Value="public abstract class ShortBuffer : Java.Nio.Buffer, IDisposable, Java.Lang.IComparable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ShortBuffer extends Java.Nio.Buffer implements class Android.Runtime.IJavaObject, class Java.Lang.IComparable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Nio.Buffer</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.Lang.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/nio/ShortBuffer", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A buffer of shorts.</summary>
    <remarks />
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ShortBuffer (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public static Java.Nio.ShortBuffer Allocate (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.ShortBuffer Allocate(int32 capacity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("allocate", "(I)Ljava/nio/ShortBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ShortBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">the capacity of the new buffer.</param>
        <summary>Creates a short buffer based on a newly allocated short array.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>capacity</c> is less than zero.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayOffset">
      <MemberSignature Language="C#" Value="public override sealed int ArrayOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ArrayOffset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("arrayOffset", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the offset into the array returned by <c>array</c> of the first
 element of the buffer (optional operation).</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AsReadOnlyBuffer">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ShortBuffer AsReadOnlyBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ShortBuffer AsReadOnlyBuffer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("asReadOnlyBuffer", "()Ljava/nio/ShortBuffer;", "GetAsReadOnlyBufferHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ShortBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a read-only buffer that shares its content with this buffer.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Compact">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ShortBuffer Compact ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ShortBuffer Compact() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("compact", "()Ljava/nio/ShortBuffer;", "GetCompactHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ShortBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Compacts this short buffer.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public virtual int CompareTo (Java.Nio.ShortBuffer otherBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(class Java.Nio.ShortBuffer otherBuffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("compareTo", "(Ljava/nio/ShortBuffer;)I", "GetCompareTo_Ljava_nio_ShortBuffer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherBuffer" Type="Java.Nio.ShortBuffer" />
      </Parameters>
      <Docs>
        <param name="otherBuffer">another short buffer.</param>
        <summary>Compare the remaining shorts of this buffer to another short buffer's
 remaining shorts.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.ClassCastException">if <c>otherBuffer</c> is not a short buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Duplicate">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ShortBuffer Duplicate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ShortBuffer Duplicate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("duplicate", "()Ljava/nio/ShortBuffer;", "GetDuplicateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ShortBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a duplicated buffer that shares its content with this buffer.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public abstract short Get ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int16 Get() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("get", "()S", "GetGetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Returns the short at the current position and increases the position by
 1.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferUnderflowException">if the position is equal or greater than limit.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.ShortBuffer Get (short[] dst);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ShortBuffer Get(int16[] dst) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("get", "([S)Ljava/nio/ShortBuffer;", "GetGet_arraySHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ShortBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Int16[]" />
      </Parameters>
      <Docs>
        <param name="dst">the destination short array.</param>
        <summary>Reads shorts from the current position into the specified short array and
 increases the position by the number of shorts read.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferUnderflowException">if <c>dst.length</c> is greater than <c>remaining()</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public abstract short Get (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int16 Get(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("get", "(I)S", "GetGet_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index, must not be negative and less than limit.</param>
        <summary>Returns the short at the specified index; the position is not changed.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if index is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.ShortBuffer Get (short[] dst, int dstOffset, int shortCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ShortBuffer Get(int16[] dst, int32 dstOffset, int32 shortCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("get", "([SII)Ljava/nio/ShortBuffer;", "GetGet_arraySIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ShortBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Int16[]" />
        <Parameter Name="off" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dst">the target short array.</param>
        <param name="dstOffset">the offset of the short array, must not be negative and not
            greater than <c>dst.length</c>.</param>
        <param name="shortCount">the number of shorts to read, must be no less than zero and
            not greater than <c>dst.length - dstOffset</c>.</param>
        <summary>Reads shorts from the current position into the specified short array,
 starting from the specified offset, and increases the position by the
 number of shorts read.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if either <c>dstOffset</c> or <c>shortCount</c> is invalid.</exception>
        <exception cref="T:Java.Nio.BufferUnderflowException">if <c>shortCount</c> is greater than <c>remaining()</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasArray">
      <MemberSignature Language="C#" Value="public override bool HasArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasArray", "()Z", "GetHasArrayHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if <c>array</c> and <c>arrayOffset</c> won't throw.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Java.Lang.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (Java.Lang.Object another);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 Java.Lang.IComparable.CompareTo(class Java.Lang.Object another) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="another" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="another">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteOrder Order ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteOrder Order() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("order", "()Ljava/nio/ByteOrder;", "GetOrderHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteOrder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the byte order used by this buffer when converting shorts from/to
 bytes.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.ShortBuffer Put (Java.Nio.ShortBuffer src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ShortBuffer Put(class Java.Nio.ShortBuffer src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("put", "(Ljava/nio/ShortBuffer;)Ljava/nio/ShortBuffer;", "GetPut_Ljava_nio_ShortBuffer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ShortBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.ShortBuffer" />
      </Parameters>
      <Docs>
        <param name="src">the source short buffer.</param>
        <summary tool="true">Writes all the remaining shorts of the <c>src</c> short buffer to this
 buffer's current position, and increases both buffers' position by the
 number of shorts copied.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if <c>src.remaining()</c> is greater than this buffer's
                <c>remaining()</c>.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>src</c> is this buffer.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ShortBuffer Put (short s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ShortBuffer Put(int16 s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("put", "(S)Ljava/nio/ShortBuffer;", "GetPut_SHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ShortBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="s">the short to write.</param>
        <summary>Writes the given short to the current position and increases the position
 by 1.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if position is equal or greater than limit.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public Java.Nio.ShortBuffer Put (short[] src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ShortBuffer Put(int16[] src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("put", "([S)Ljava/nio/ShortBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ShortBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Int16[]" />
      </Parameters>
      <Docs>
        <param name="src">the source short array.</param>
        <summary>Writes shorts from the given short array to the current position and
 increases the position by the number of shorts written.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if <c>remaining()</c> is less than <c>src.length</c>.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ShortBuffer Put (int index, short s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ShortBuffer Put(int32 index, int16 s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("put", "(IS)Ljava/nio/ShortBuffer;", "GetPut_ISHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ShortBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="s" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="index">the index, must not be negative and less than the limit.</param>
        <param name="s">the short to write.</param>
        <summary>Writes a short to the specified index of this buffer; the position is not
 changed.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if index is invalid.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.ShortBuffer Put (short[] src, int srcOffset, int shortCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ShortBuffer Put(int16[] src, int32 srcOffset, int32 shortCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("put", "([SII)Ljava/nio/ShortBuffer;", "GetPut_arraySIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ShortBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Int16[]" />
        <Parameter Name="off" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="src">the source short array.</param>
        <param name="srcOffset">the offset of short array, must not be negative and not
            greater than <c>src.length</c>.</param>
        <param name="shortCount">the number of shorts to write, must be no less than zero and
            not greater than <c>src.length - srcOffset</c>.</param>
        <summary>Writes shorts from the given short array, starting from the specified
 offset, to the current position and increases the position by the number
 of shorts written.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if <c>remaining()</c> is less than <c>shortCount</c>.</exception>
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if either <c>srcOffset</c> or <c>shortCount</c> is invalid.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ShortBuffer Slice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ShortBuffer Slice() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("slice", "()Ljava/nio/ShortBuffer;", "GetSliceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ShortBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a sliced buffer that shares its content with this buffer.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public static Java.Nio.ShortBuffer Wrap (short[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.ShortBuffer Wrap(int16[] array) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("wrap", "([S)Ljava/nio/ShortBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ShortBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Int16[]" />
      </Parameters>
      <Docs>
        <param name="array">the short array which the new buffer will be based on.</param>
        <summary>Creates a new short buffer by wrapping the given short array.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public static Java.Nio.ShortBuffer Wrap (short[] array, int start, int shortCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.ShortBuffer Wrap(int16[] array, int32 start, int32 shortCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("wrap", "([SII)Ljava/nio/ShortBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ShortBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Int16[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">the short array which the new buffer will be based on.</param>
        <param name="start">the start index, must not be negative and not greater than
            <c>array.length</c>.</param>
        <param name="shortCount">the length, must not be negative and not greater than
            <c>array.length - start</c>.</param>
        <summary>Creates a new short buffer by wrapping the given short array.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if either <c>start</c> or <c>shortCount</c> is invalid.
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
