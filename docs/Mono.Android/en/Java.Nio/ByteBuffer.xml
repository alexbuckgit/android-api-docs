<Type Name="ByteBuffer" FullName="Java.Nio.ByteBuffer">
  <TypeSignature Language="C#" Value="public abstract class ByteBuffer : Java.Nio.Buffer, IDisposable, Java.Lang.IComparable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ByteBuffer extends Java.Nio.Buffer implements class Android.Runtime.IJavaObject, class Java.Lang.IComparable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Nio.Buffer</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.Lang.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/nio/ByteBuffer", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A buffer for bytes.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A buffer for bytes.
 </para>
      <para tool="javadoc-to-mdoc">
 A byte buffer can be created in either one of the following ways:
 <list type="bullet"><item><term><c><see cref="M:Java.Nio.ByteBuffer.Allocate(System.Int32)" /></c> a new byte array and create a buffer
 based on it;</term></item><item><term><c><see cref="M:Java.Nio.ByteBuffer.AllocateDirect(System.Int32)" /></c> a memory block and create a direct
 buffer based on it;</term></item><item><term><c><see cref="M:Java.Nio.ByteBuffer.Wrap(System.Byte[])" /></c> an existing byte array to create a new
 buffer.</term></item></list></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ByteBuffer (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public static Java.Nio.ByteBuffer Allocate (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.ByteBuffer Allocate(int32 capacity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("allocate", "(I)Ljava/nio/ByteBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">the capacity of the new buffer</param>
        <summary>Creates a byte buffer based on a newly allocated byte array.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a byte buffer based on a newly allocated byte array.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#allocate(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>capacity </c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AllocateDirect">
      <MemberSignature Language="C#" Value="public static Java.Nio.ByteBuffer AllocateDirect (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.ByteBuffer AllocateDirect(int32 capacity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("allocateDirect", "(I)Ljava/nio/ByteBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">the capacity of the new buffer</param>
        <summary>Creates a direct byte buffer based on a newly allocated memory block.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a direct byte buffer based on a newly allocated memory block.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#allocateDirect(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>capacity </c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayOffset">
      <MemberSignature Language="C#" Value="public override sealed int ArrayOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ArrayOffset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("arrayOffset", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the offset of the byte array which this buffer is based on, if
 there is one.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the offset of the byte array which this buffer is based on, if
 there is one.
 </para>
          <para tool="javadoc-to-mdoc">
 The offset is the index of the array which corresponds to the zero
 position of the buffer.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#arrayOffset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if this buffer is based on a read-only array.</exception>
        <exception cref="T:Java.Lang.UnsupportedOperationException">if this buffer is not based on an array.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AsCharBuffer">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.CharBuffer AsCharBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.CharBuffer AsCharBuffer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("asCharBuffer", "()Ljava/nio/CharBuffer;", "GetAsCharBufferHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.CharBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a char buffer which is based on the remaining content of this
 byte buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a char buffer which is based on the remaining content of this
 byte buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The new buffer's position is zero, its limit and capacity is the number
 of remaining bytes divided by two, and its mark is not set. The new
 buffer's read-only property and byte order are the same as this buffer's.
 The new buffer is direct if this byte buffer is direct.
 </para>
          <para tool="javadoc-to-mdoc">
 The new buffer shares its content with this buffer, which means either
 buffer's change of content will be visible to the other. The two buffers'
 position, limit and mark are independent.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#asCharBuffer()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AsDoubleBuffer">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.DoubleBuffer AsDoubleBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.DoubleBuffer AsDoubleBuffer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("asDoubleBuffer", "()Ljava/nio/DoubleBuffer;", "GetAsDoubleBufferHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.DoubleBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a double buffer which is based on the remaining content of this
 byte buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a double buffer which is based on the remaining content of this
 byte buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The new buffer's position is zero, its limit and capacity is the number
 of remaining bytes divided by eight, and its mark is not set. The new
 buffer's read-only property and byte order are the same as this buffer's.
 The new buffer is direct if this byte buffer is direct.
 </para>
          <para tool="javadoc-to-mdoc">
 The new buffer shares its content with this buffer, which means either
 buffer's change of content will be visible to the other. The two buffers'
 position, limit and mark are independent.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#asDoubleBuffer()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AsFloatBuffer">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.FloatBuffer AsFloatBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.FloatBuffer AsFloatBuffer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("asFloatBuffer", "()Ljava/nio/FloatBuffer;", "GetAsFloatBufferHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.FloatBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a float buffer which is based on the remaining content of this
 byte buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a float buffer which is based on the remaining content of this
 byte buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The new buffer's position is zero, its limit and capacity is the number
 of remaining bytes divided by four, and its mark is not set. The new
 buffer's read-only property and byte order are the same as this buffer's.
 The new buffer is direct if this byte buffer is direct.
 </para>
          <para tool="javadoc-to-mdoc">
 The new buffer shares its content with this buffer, which means either
 buffer's change of content will be visible to the other. The two buffers'
 position, limit and mark are independent.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#asFloatBuffer()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AsIntBuffer">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.IntBuffer AsIntBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.IntBuffer AsIntBuffer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("asIntBuffer", "()Ljava/nio/IntBuffer;", "GetAsIntBufferHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.IntBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a int buffer which is based on the remaining content of this byte
 buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a int buffer which is based on the remaining content of this byte
 buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The new buffer's position is zero, its limit and capacity is the number
 of remaining bytes divided by four, and its mark is not set. The new
 buffer's read-only property and byte order are the same as this buffer's.
 The new buffer is direct if this byte buffer is direct.
 </para>
          <para tool="javadoc-to-mdoc">
 The new buffer shares its content with this buffer, which means either
 buffer's change of content will be visible to the other. The two buffers'
 position, limit and mark are independent.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#asIntBuffer()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AsLongBuffer">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.LongBuffer AsLongBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.LongBuffer AsLongBuffer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("asLongBuffer", "()Ljava/nio/LongBuffer;", "GetAsLongBufferHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.LongBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a long buffer which is based on the remaining content of this
 byte buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a long buffer which is based on the remaining content of this
 byte buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The new buffer's position is zero, its limit and capacity is the number
 of remaining bytes divided by eight, and its mark is not set. The new
 buffer's read-only property and byte order are the same as this buffer's.
 The new buffer is direct if this byte buffer is direct.
 </para>
          <para tool="javadoc-to-mdoc">
 The new buffer shares its content with this buffer, which means either
 buffer's change of content will be visible to the other. The two buffers'
 position, limit and mark are independent.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#asLongBuffer()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AsReadOnlyBuffer">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer AsReadOnlyBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer AsReadOnlyBuffer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("asReadOnlyBuffer", "()Ljava/nio/ByteBuffer;", "GetAsReadOnlyBufferHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a read-only buffer that shares its content with this buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a read-only buffer that shares its content with this buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The returned buffer is guaranteed to be a new instance, even if this
 buffer is read-only itself. The new buffer's position, limit, capacity
 and mark are the same as this buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The new buffer shares its content with this buffer, which means this
 buffer's change of content will be visible to the new buffer. The two
 buffer's position, limit and mark are independent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#asReadOnlyBuffer()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AsShortBuffer">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ShortBuffer AsShortBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ShortBuffer AsShortBuffer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("asShortBuffer", "()Ljava/nio/ShortBuffer;", "GetAsShortBufferHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ShortBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a short buffer which is based on the remaining content of this
 byte buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a short buffer which is based on the remaining content of this
 byte buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The new buffer's position is zero, its limit and capacity is the number
 of remaining bytes divided by two, and its mark is not set. The new
 buffer's read-only property and byte order are the same as this buffer's.
 The new buffer is direct if this byte buffer is direct.
 </para>
          <para tool="javadoc-to-mdoc">
 The new buffer shares its content with this buffer, which means either
 buffer's change of content will be visible to the other. The two buffers'
 position, limit and mark are independent.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#asShortBuffer()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Char">
      <MemberSignature Language="C#" Value="public abstract char Char { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Char" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getChar", "()C", "GetGetCharHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the char at the current position and increases the position by 2.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the char at the current position and increases the position by 2.
 </para>
          <para tool="javadoc-to-mdoc">
 The 2 bytes starting at the current position are composed into a char
 according to the current byte order and returned.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#getChar()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferUnderflowException">if the position is greater than <c>limit - 2</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Compact">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer Compact ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer Compact() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("compact", "()Ljava/nio/ByteBuffer;", "GetCompactHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Compacts this byte buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Compacts this byte buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The remaining bytes will be moved to the head of the
 buffer, starting from position zero. Then the position is set to
 <c>remaining()</c>; the limit is set to capacity; the mark is
 cleared.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#compact()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public virtual int CompareTo (Java.Nio.ByteBuffer otherBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(class Java.Nio.ByteBuffer otherBuffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("compareTo", "(Ljava/nio/ByteBuffer;)I", "GetCompareTo_Ljava_nio_ByteBuffer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherBuffer" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="otherBuffer">another byte buffer.</param>
        <summary>Compares the remaining bytes of this buffer to another byte buffer's
 remaining bytes.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Compares the remaining bytes of this buffer to another byte buffer's
 remaining bytes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#compareTo(java.nio.ByteBuffer)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.ClassCastException">if <c>other</c> is not a byte buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Double">
      <MemberSignature Language="C#" Value="public abstract double Double { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Double" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDouble", "()D", "GetGetDoubleHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the double at the current position and increases the position by
 8.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the double at the current position and increases the position by
 8.
 </para>
          <para tool="javadoc-to-mdoc">
 The 8 bytes starting from the current position are composed into a double
 according to the current byte order and returned.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#getDouble()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferUnderflowException">if the position is greater than <c>limit - 8</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Duplicate">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer Duplicate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer Duplicate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("duplicate", "()Ljava/nio/ByteBuffer;", "GetDuplicateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a duplicated buffer that shares its content with this buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a duplicated buffer that shares its content with this buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The duplicated buffer's position, limit, capacity and mark are the same
 as this buffer's. The duplicated buffer's read-only property is the same
 as this buffer's.

 </para>
          <para tool="javadoc-to-mdoc">Note that <format type="text/html"><i>in contrast to all non-<c>byte</c> buffers</i></format>,
 byte order is not preserved in the duplicate, and is instead set to
 big-endian.

 </para>
          <para tool="javadoc-to-mdoc">The new buffer shares its content with this buffer, which means either
 buffer's change of content will be visible to the other. The two buffers'
 position, limit and mark are independent.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#duplicate()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Float">
      <MemberSignature Language="C#" Value="public abstract float Float { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Float" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getFloat", "()F", "GetGetFloatHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the float at the current position and increases the position by
 4.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the float at the current position and increases the position by
 4.
 </para>
          <para tool="javadoc-to-mdoc">
 The 4 bytes starting at the current position are composed into a float
 according to the current byte order and returned.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#getFloat()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferUnderflowException">if the position is greater than <c>limit - 4</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public abstract sbyte Get ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int8 Get() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("get", "()B", "GetGetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Returns the byte at the current position and increases the position by 1.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the byte at the current position and increases the position by 1.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#get()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferUnderflowException">if the position is equal or greater than limit.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.ByteBuffer Get (byte[] dst);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer Get(unsigned int8[] dst) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("get", "([B)Ljava/nio/ByteBuffer;", "GetGet_arrayBHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="dst">the destination byte array.</param>
        <summary>Reads bytes from the current position into the specified byte array and
 increases the position by the number of bytes read.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Reads bytes from the current position into the specified byte array and
 increases the position by the number of bytes read.
 </para>
          <para tool="javadoc-to-mdoc">
 Calling this method has the same effect as
 <c>get(dst, 0, dst.length)</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#get(byte[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferUnderflowException">if <c>dst.length</c> is greater than <c>remaining()</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public abstract sbyte Get (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int8 Get(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("get", "(I)B", "GetGet_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index, must not be negative and less than limit.</param>
        <summary>Returns the byte at the specified index and does not change the position.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the byte at the specified index and does not change the position.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#get(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if index is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.ByteBuffer Get (byte[] dst, int dstOffset, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer Get(unsigned int8[] dst, int32 dstOffset, int32 byteCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("get", "([BII)Ljava/nio/ByteBuffer;", "GetGet_arrayBIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Byte[]" />
        <Parameter Name="off" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dst">the target byte array.</param>
        <param name="dstOffset">the offset of the byte array, must not be negative and
            not greater than <c>dst.length</c>.</param>
        <param name="byteCount">the number of bytes to read, must not be negative and not
            greater than <c>dst.length - dstOffset</c></param>
        <summary>Reads bytes from the current position into the specified byte array,
 starting at the specified offset, and increases the position by the
 number of bytes read.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Reads bytes from the current position into the specified byte array,
 starting at the specified offset, and increases the position by the
 number of bytes read.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#get(byte[], int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>dstOffset </c></exception>
        <exception cref="T:Java.Nio.BufferUnderflowException">if <c>byteCount &gt; remaining()</c></exception>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public abstract char GetChar (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char GetChar(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getChar", "(I)C", "GetGetChar_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index, must not be negative and equal or less than
            <c>limit - 2</c>.</param>
        <summary>Returns the char at the specified index.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the char at the specified index.
 </para>
          <para tool="javadoc-to-mdoc">
 The 2 bytes starting from the specified index are composed into a char
 according to the current byte order and returned. The position is not
 changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#getChar(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>index</c> is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDouble">
      <MemberSignature Language="C#" Value="public abstract double GetDouble (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GetDouble(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDouble", "(I)D", "GetGetDouble_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index, must not be negative and equal or less than
            <c>limit - 8</c>.</param>
        <summary>Returns the double at the specified index.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the double at the specified index.
 </para>
          <para tool="javadoc-to-mdoc">
 The 8 bytes starting at the specified index are composed into a double
 according to the current byte order and returned. The position is not
 changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#getDouble(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>index</c> is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFloat">
      <MemberSignature Language="C#" Value="public abstract float GetFloat (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 GetFloat(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getFloat", "(I)F", "GetGetFloat_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index, must not be negative and equal or less than
            <c>limit - 4</c>.</param>
        <summary>Returns the float at the specified index.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the float at the specified index.
 </para>
          <para tool="javadoc-to-mdoc">
 The 4 bytes starting at the specified index are composed into a float
 according to the current byte order and returned. The position is not
 changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#getFloat(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>index</c> is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInt">
      <MemberSignature Language="C#" Value="public abstract int GetInt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetInt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInt", "(I)I", "GetGetInt_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index, must not be negative and equal or less than
            <c>limit - 4</c>.</param>
        <summary>Returns the int at the specified index.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the int at the specified index.
 </para>
          <para tool="javadoc-to-mdoc">
 The 4 bytes starting at the specified index are composed into a int
 according to the current byte order and returned. The position is not
 changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#getInt(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>index</c> is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetLong">
      <MemberSignature Language="C#" Value="public abstract long GetLong (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetLong(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getLong", "(I)J", "GetGetLong_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index, must not be negative and equal or less than
            <c>limit - 8</c>.</param>
        <summary>Returns the long at the specified index.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the long at the specified index.
 </para>
          <para tool="javadoc-to-mdoc">
 The 8 bytes starting at the specified index are composed into a long
 according to the current byte order and returned. The position is not
 changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#getLong(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>index</c> is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetShort">
      <MemberSignature Language="C#" Value="public abstract short GetShort (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int16 GetShort(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getShort", "(I)S", "GetGetShort_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index, must not be negative and equal or less than
            <c>limit - 2</c>.</param>
        <summary>Returns the short at the specified index.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the short at the specified index.
 </para>
          <para tool="javadoc-to-mdoc">
 The 2 bytes starting at the specified index are composed into a short
 according to the current byte order and returned. The position is not
 changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#getShort(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>index</c> is invalid.
</exception>
      </Docs>
    </Member>
    <Member MemberName="HasArray">
      <MemberSignature Language="C#" Value="public override bool HasArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasArray", "()Z", "GetHasArrayHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if <c>array</c> and <c>arrayOffset</c> won't throw.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if <c>array</c> and <c>arrayOffset</c> won't throw. This method does not
 return true for buffers not backed by arrays because the other methods would throw
 <c>UnsupportedOperationException</c>, nor does it return true for buffers backed by
 read-only arrays, because the other methods would throw <c>ReadOnlyBufferException</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#hasArray()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public abstract int Int { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Int" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getInt", "()I", "GetGetIntHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the int at the current position and increases the position by 4.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the int at the current position and increases the position by 4.
 </para>
          <para tool="javadoc-to-mdoc">
 The 4 bytes starting at the current position are composed into a int
 according to the current byte order and returned.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#getInt()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferUnderflowException">if the position is greater than <c>limit - 4</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Java.Lang.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (Java.Lang.Object another);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 Java.Lang.IComparable.CompareTo(class Java.Lang.Object another) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="another" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="another">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Long">
      <MemberSignature Language="C#" Value="public abstract long Long { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Long" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLong", "()J", "GetGetLongHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the long at the current position and increases the position by 8.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the long at the current position and increases the position by 8.
 </para>
          <para tool="javadoc-to-mdoc">
 The 8 bytes starting at the current position are composed into a long
 according to the current byte order and returned.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#getLong()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferUnderflowException">if the position is greater than <c>limit - 8</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteOrder Order ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteOrder Order() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("order", "()Ljava/nio/ByteOrder;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteOrder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Returns the byte order used by this buffer when converting bytes from/to
 other primitive types.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the byte order used by this buffer when converting bytes from/to
 other primitive types.
 </para>
          <para tool="javadoc-to-mdoc">
 The default byte order of byte buffer is always
 <c><see cref="P:Java.Nio.ByteOrder.BigEndian" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#order()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteBuffer Order (Java.Nio.ByteOrder byteOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteBuffer Order(class Java.Nio.ByteOrder byteOrder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("order", "(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteOrder" Type="Java.Nio.ByteOrder" />
      </Parameters>
      <Docs>
        <param name="byteOrder">the byte order to set. If <c>null</c> then the order
            will be <c><see cref="P:Java.Nio.ByteOrder.LittleEndian" /></c>.</param>
        <summary>Sets the byte order of this buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the byte order of this buffer.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#order(java.nio.ByteOrder)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Java.Nio.ByteOrder" />
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.ByteBuffer Put (Java.Nio.ByteBuffer src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer Put(class Java.Nio.ByteBuffer src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("put", "(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;", "GetPut_Ljava_nio_ByteBuffer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="src">the source byte buffer.</param>
        <summary tool="true">Writes all the remaining bytes of the <c>src</c> byte buffer to this
 buffer's current position, and increases both buffers' position by the
 number of bytes copied.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes all the remaining bytes of the <c>src</c> byte buffer to this
 buffer's current position, and increases both buffers' position by the
 number of bytes copied.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#put(java.nio.ByteBuffer)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if <c>src.remaining()</c> is greater than this buffer's
                <c>remaining()</c>.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>src</c> is this buffer.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteBuffer Put (byte[] src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteBuffer Put(unsigned int8[] src) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("put", "([B)Ljava/nio/ByteBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="src">the source byte array.</param>
        <summary>Writes bytes in the given byte array to the current position and
 increases the position by the number of bytes written.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes bytes in the given byte array to the current position and
 increases the position by the number of bytes written.
 </para>
          <para tool="javadoc-to-mdoc">
 Calling this method has the same effect as
 <c>put(src, 0, src.length)</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#put(byte[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if <c>remaining()</c> is less than <c>src.length</c>.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer Put (sbyte b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer Put(int8 b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("put", "(B)Ljava/nio/ByteBuffer;", "GetPut_BHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="b">the byte to write.</param>
        <summary>Writes the given byte to the current position and increases the position
 by 1.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the given byte to the current position and increases the position
 by 1.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#put(byte)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if position is equal or greater than limit.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer Put (int index, sbyte b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer Put(int32 index, int8 b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("put", "(IB)Ljava/nio/ByteBuffer;", "GetPut_IBHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="b" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="index">the index, must not be negative and less than the limit.</param>
        <param name="b">the byte to write.</param>
        <summary>Write a byte to the specified index of this buffer without changing the
 position.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Write a byte to the specified index of this buffer without changing the
 position.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#put(int, byte)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>index</c> is invalid.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Put">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.ByteBuffer Put (byte[] src, int srcOffset, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer Put(unsigned int8[] src, int32 srcOffset, int32 byteCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("put", "([BII)Ljava/nio/ByteBuffer;", "GetPut_arrayBIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Byte[]" />
        <Parameter Name="off" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="src">the source byte array.</param>
        <param name="srcOffset">the offset of byte array, must not be negative and not greater
            than <c>src.length</c>.</param>
        <param name="byteCount">the number of bytes to write, must not be negative and not
            greater than <c>src.length - srcOffset</c>.</param>
        <summary>Writes bytes in the given byte array, starting from the specified offset,
 to the current position and increases the position by the number of bytes
 written.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes bytes in the given byte array, starting from the specified offset,
 to the current position and increases the position by the number of bytes
 written.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#put(byte[], int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if <c>remaining()</c> is less than <c>byteCount</c>.</exception>
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if either <c>srcOffset</c> or <c>byteCount</c> is invalid.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="PutChar">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer PutChar (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer PutChar(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("putChar", "(C)Ljava/nio/ByteBuffer;", "GetPutChar_CHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">the char to write.</param>
        <summary>Writes the given char to the current position and increases the position
 by 2.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the given char to the current position and increases the position
 by 2.
 </para>
          <para tool="javadoc-to-mdoc">
 The char is converted to bytes using the current byte order.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#putChar(char)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if position is greater than <c>limit - 2</c>.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="PutChar">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer PutChar (int index, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer PutChar(int32 index, char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("putChar", "(IC)Ljava/nio/ByteBuffer;", "GetPutChar_ICHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">the index, must not be negative and equal or less than
            <c>limit - 2</c>.</param>
        <param name="value">the char to write.</param>
        <summary>Writes the given char to the specified index of this buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the given char to the specified index of this buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The char is converted to bytes using the current byte order. The position
 is not changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#putChar(int, char)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>index</c> is invalid.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="PutDouble">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer PutDouble (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer PutDouble(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("putDouble", "(D)Ljava/nio/ByteBuffer;", "GetPutDouble_DHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">the double to write.</param>
        <summary>Writes the given double to the current position and increases the position
 by 8.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the given double to the current position and increases the position
 by 8.
 </para>
          <para tool="javadoc-to-mdoc">
 The double is converted to bytes using the current byte order.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#putDouble(double)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if position is greater than <c>limit - 8</c>.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="PutDouble">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer PutDouble (int index, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer PutDouble(int32 index, float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("putDouble", "(ID)Ljava/nio/ByteBuffer;", "GetPutDouble_IDHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="index">the index, must not be negative and equal or less than
            <c>limit - 8</c>.</param>
        <param name="value">the double to write.</param>
        <summary>Writes the given double to the specified index of this buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the given double to the specified index of this buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The double is converted to bytes using the current byte order. The
 position is not changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#putDouble(int, double)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>index</c> is invalid.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="PutFloat">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer PutFloat (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer PutFloat(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("putFloat", "(F)Ljava/nio/ByteBuffer;", "GetPutFloat_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">the float to write.</param>
        <summary>Writes the given float to the current position and increases the position
 by 4.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the given float to the current position and increases the position
 by 4.
 </para>
          <para tool="javadoc-to-mdoc">
 The float is converted to bytes using the current byte order.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#putFloat(float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if position is greater than <c>limit - 4</c>.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="PutFloat">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer PutFloat (int index, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer PutFloat(int32 index, float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("putFloat", "(IF)Ljava/nio/ByteBuffer;", "GetPutFloat_IFHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="index">the index, must not be negative and equal or less than
            <c>limit - 4</c>.</param>
        <param name="value">the float to write.</param>
        <summary>Writes the given float to the specified index of this buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the given float to the specified index of this buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The float is converted to bytes using the current byte order. The
 position is not changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#putFloat(int, float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>index</c> is invalid.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="PutInt">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer PutInt (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer PutInt(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("putInt", "(I)Ljava/nio/ByteBuffer;", "GetPutInt_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">the int to write.</param>
        <summary>Writes the given int to the current position and increases the position by
 4.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the given int to the current position and increases the position by
 4.
 </para>
          <para tool="javadoc-to-mdoc">
 The int is converted to bytes using the current byte order.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#putInt(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if position is greater than <c>limit - 4</c>.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="PutInt">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer PutInt (int index, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer PutInt(int32 index, int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("putInt", "(II)Ljava/nio/ByteBuffer;", "GetPutInt_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index, must not be negative and equal or less than
            <c>limit - 4</c>.</param>
        <param name="value">the int to write.</param>
        <summary>Writes the given int to the specified index of this buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the given int to the specified index of this buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The int is converted to bytes using the current byte order. The position
 is not changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#putInt(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>index</c> is invalid.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="PutLong">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer PutLong (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer PutLong(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("putLong", "(J)Ljava/nio/ByteBuffer;", "GetPutLong_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">the long to write.</param>
        <summary>Writes the given long to the current position and increases the position
 by 8.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the given long to the current position and increases the position
 by 8.
 </para>
          <para tool="javadoc-to-mdoc">
 The long is converted to bytes using the current byte order.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#putLong(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if position is greater than <c>limit - 8</c>.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="PutLong">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer PutLong (int index, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer PutLong(int32 index, int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("putLong", "(IJ)Ljava/nio/ByteBuffer;", "GetPutLong_IJHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="index">the index, must not be negative and equal or less than
            <c>limit - 8</c>.</param>
        <param name="value">the long to write.</param>
        <summary>Writes the given long to the specified index of this buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the given long to the specified index of this buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The long is converted to bytes using the current byte order. The position
 is not changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#putLong(int, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>index</c> is invalid.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="PutShort">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer PutShort (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer PutShort(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("putShort", "(S)Ljava/nio/ByteBuffer;", "GetPutShort_SHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">the short to write.</param>
        <summary>Writes the given short to the current position and increases the position
 by 2.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the given short to the current position and increases the position
 by 2.
 </para>
          <para tool="javadoc-to-mdoc">
 The short is converted to bytes using the current byte order.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#putShort(short)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferOverflowException">if position is greater than <c>limit - 2</c>.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="PutShort">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer PutShort (int index, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer PutShort(int32 index, int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("putShort", "(IS)Ljava/nio/ByteBuffer;", "GetPutShort_ISHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="index">the index, must not be negative and equal or less than
            <c>limit - 2</c>.</param>
        <param name="value">the short to write.</param>
        <summary>Writes the given short to the specified index of this buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the given short to the specified index of this buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The short is converted to bytes using the current byte order. The
 position is not changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#putShort(int, short)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>index</c> is invalid.</exception>
        <exception cref="T:Java.Nio.ReadOnlyBufferException">if no changes may be made to the contents of this buffer.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Short">
      <MemberSignature Language="C#" Value="public abstract short Short { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 Short" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getShort", "()S", "GetGetShortHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the short at the current position and increases the position by 2.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the short at the current position and increases the position by 2.
 </para>
          <para tool="javadoc-to-mdoc">
 The 2 bytes starting at the current position are composed into a short
 according to the current byte order and returned.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#getShort()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.BufferUnderflowException">if the position is greater than <c>limit - 2</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.ByteBuffer Slice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.ByteBuffer Slice() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("slice", "()Ljava/nio/ByteBuffer;", "GetSliceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a sliced buffer that shares its content with this buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a sliced buffer that shares its content with this buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The sliced buffer's capacity will be this buffer's
 <c>remaining()</c>, and it's zero position will correspond to
 this buffer's current position. The new buffer's position will be 0,
 limit will be its capacity, and its mark is cleared. The new buffer's
 read-only property and byte order are the same as this buffer's.
 </para>
          <para tool="javadoc-to-mdoc">
 The new buffer shares its content with this buffer, which means either
 buffer's change of content will be visible to the other. The two buffers'
 position, limit and mark are independent.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#slice()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public static Java.Nio.ByteBuffer Wrap (byte[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.ByteBuffer Wrap(unsigned int8[] array) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("wrap", "([B)Ljava/nio/ByteBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="array">the byte array which the new buffer will be based on</param>
        <summary>Creates a new byte buffer by wrapping the given byte array.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new byte buffer by wrapping the given byte array.
 </para>
          <para tool="javadoc-to-mdoc">
 Calling this method has the same effect as
 <c>wrap(array, 0, array.length)</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#wrap(byte[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public static Java.Nio.ByteBuffer Wrap (byte[] array, int start, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.ByteBuffer Wrap(unsigned int8[] array, int32 start, int32 byteCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("wrap", "([BII)Ljava/nio/ByteBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">the byte array which the new buffer will be based on.</param>
        <param name="start">the start index, must not be negative and not greater than
            <c>array.length</c>.</param>
        <param name="byteCount">the length, must not be negative and not greater than
            <c>array.length - start</c>.</param>
        <summary>Creates a new byte buffer by wrapping the given byte array.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new byte buffer by wrapping the given byte array.
 </para>
          <para tool="javadoc-to-mdoc">
 The new buffer's position will be <c>start</c>, limit will be
 <c>start + byteCount</c>, capacity will be the length of the array.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html#wrap(byte[], int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if either <c>start</c> or <c>byteCount</c> is invalid.
</exception>
      </Docs>
    </Member>
  </Members>
</Type>