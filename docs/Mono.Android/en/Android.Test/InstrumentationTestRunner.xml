<Type Name="InstrumentationTestRunner" FullName="Android.Test.InstrumentationTestRunner">
  <TypeSignature Language="C#" Value="public class InstrumentationTestRunner : Android.App.Instrumentation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InstrumentationTestRunner extends Android.App.Instrumentation" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.App.Instrumentation</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/test/InstrumentationTestRunner", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An <c><see cref="T:Android.App.Instrumentation" /></c> that runs various types of <c><see cref="!:NoType:junit/framework/TestCase;Href=../../../reference/junit/framework/TestCase.html" /></c>s against
 an Android package (application).</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">An <c><see cref="T:Android.App.Instrumentation" /></c> that runs various types of <c><see cref="!:NoType:junit/framework/TestCase;Href=../../../reference/junit/framework/TestCase.html" /></c>s against
 an Android package (application).

 <format type="text/html"><h3>Developer Guides</h3></format></para>
      <para tool="javadoc-to-mdoc">For more information about application testing, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/testing/index.html">Testing</a></format> developer guide.</para>
      <format type="text/html">
        <h3>Typical Usage</h3>
      </format>
      <list type="number">
        <item>
          <term>Write <c><see cref="!:NoType:junit/framework/TestCase;Href=../../../reference/junit/framework/TestCase.html" /></c>s that perform unit, functional, or performance tests
 against the classes in your package.  Typically these are subclassed from:
   <list type="bullet" /></term>
        </item>
        <item>
          <term>
            <c>
              <see cref="!:NoType:android/test/ActivityInstrumentationTestCase2;Href=../../../reference/android/test/ActivityInstrumentationTestCase2.html" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="!:NoType:android/test/ActivityUnitTestCase;Href=../../../reference/android/test/ActivityUnitTestCase.html" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="!:NoType:android/test/AndroidTestCase;Href=../../../reference/android/test/AndroidTestCase.html" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="!:NoType:android/test/ApplicationTestCase;Href=../../../reference/android/test/ApplicationTestCase.html" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="!:NoType:android/test/InstrumentationTestCase;Href=../../../reference/android/test/InstrumentationTestCase.html" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="!:NoType:android/test/ProviderTestCase;Href=../../../reference/android/test/ProviderTestCase.html" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="!:NoType:android/test/ServiceTestCase;Href=../../../reference/android/test/ServiceTestCase.html" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="!:NoType:android/test/SingleLaunchActivityTestCase;Href=../../../reference/android/test/SingleLaunchActivityTestCase.html" />
            </c>
          </term>
        </item>
        <item>
          <term>In an appropriate AndroidManifest.xml, define the this instrumentation with
 the appropriate android:targetPackage set.
 </term>
        </item>
        <item>
          <term>Run the instrumentation using "adb shell am instrument -w",
 with no optional arguments, to run all tests (except performance tests).
 </term>
        </item>
        <item>
          <term>Run the instrumentation using "adb shell am instrument -w",
 with the argument '-e func true' to run all functional tests. These are tests that derive from
 <c><see cref="!:NoType:android/test/InstrumentationTestCase;Href=../../../reference/android/test/InstrumentationTestCase.html" /></c>.
 </term>
        </item>
        <item>
          <term>Run the instrumentation using "adb shell am instrument -w",
 with the argument '-e unit true' to run all unit tests. These are tests that <format type="text/html"><i>do not</i></format>derive
 from <c><see cref="!:NoType:android/test/InstrumentationTestCase;Href=../../../reference/android/test/InstrumentationTestCase.html" /></c> (and are not performance tests).
 </term>
        </item>
        <item>
          <term>Run the instrumentation using "adb shell am instrument -w",
 with the argument '-e class' set to run an individual <c><see cref="!:NoType:junit/framework/TestCase;Href=../../../reference/junit/framework/TestCase.html" /></c>.
 </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Running all tests:</b>
        </format> adb shell am instrument -w
 com.android.foo/android.test.InstrumentationTestRunner
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Running all small tests:</b>
        </format> adb shell am instrument -w
 -e size small
 com.android.foo/android.test.InstrumentationTestRunner
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Running all medium tests:</b>
        </format> adb shell am instrument -w
 -e size medium
 com.android.foo/android.test.InstrumentationTestRunner
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Running all large tests:</b>
        </format> adb shell am instrument -w
 -e size large
 com.android.foo/android.test.InstrumentationTestRunner
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Filter test run to tests with given annotation:</b>
        </format> adb shell am instrument -w
 -e annotation com.android.foo.MyAnnotation
 com.android.foo/android.test.InstrumentationTestRunner
 </para>
      <para tool="javadoc-to-mdoc">
 If used with other options, the resulting test run will contain the union of the two options.
 e.g. "-e size large -e annotation com.android.foo.MyAnnotation" will run only tests with both
 the <c><see cref="T:Android.Test.Suitebuilder.Annotation.ILargeTest" /></c> and "com.android.foo.MyAnnotation" annotations.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Filter test run to tests <i>without</i> given annotation:</b>
        </format> adb shell am instrument -w
 -e notAnnotation com.android.foo.MyAnnotation
 com.android.foo/android.test.InstrumentationTestRunner
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Running a single testcase:</b>
        </format> adb shell am instrument -w
 -e class com.android.foo.FooTest
 com.android.foo/android.test.InstrumentationTestRunner
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Running a single test:</b>
        </format> adb shell am instrument -w
 -e class com.android.foo.FooTest#testFoo
 com.android.foo/android.test.InstrumentationTestRunner
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Running multiple tests:</b>
        </format> adb shell am instrument -w
 -e class com.android.foo.FooTest,com.android.foo.TooTest
 com.android.foo/android.test.InstrumentationTestRunner
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Running all tests in a java package:</b>
        </format> adb shell am instrument -w
 -e package com.android.foo.subpkg
  com.android.foo/android.test.InstrumentationTestRunner
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Including performance tests:</b>
        </format> adb shell am instrument -w
 -e perf true
 com.android.foo/android.test.InstrumentationTestRunner
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>To debug your tests, set a break point in your code and pass:</b>
        </format>
 -e debug true
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>To run in 'log only' mode</b>
        </format>
 -e log true
 This option will load and iterate through all test classes and methods, but will bypass actual
 test execution. Useful for quickly obtaining info on the tests to be executed by an
 instrumentation command.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>To generate EMMA code coverage:</b>
        </format>
 -e coverage true
 Note: this requires an emma instrumented build. By default, the code coverage results file
 will be saved in a /data/<format type="text/html"><app>/coverage.ec file, unless overridden by coverageFile flag (see
 below)
 </app></format></para>
      <para tool="javadoc-to-mdoc">
        <b> To specify EMMA code coverage results file path:</b>
 -e coverageFile /sdcard/myFile.ec
 <br />
 in addition to the other arguments.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/test/InstrumentationTestRunner.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstrumentationTestRunner ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/InstrumentationTestRunner.html#InstrumentationTestRunner()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InstrumentationTestRunner (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public virtual Android.OS.Bundle Arguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.OS.Bundle Arguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getArguments", "()Landroid/os/Bundle;", "GetGetArgumentsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.Bundle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the arguments passed to this instrumentation.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the arguments passed to this instrumentation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/InstrumentationTestRunner.html#getArguments()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="Loader">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.ClassLoader Loader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.ClassLoader Loader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLoader", "()Ljava/lang/ClassLoader;", "GetGetLoaderHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ClassLoader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Override this to provide access to the class loader of your package.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Override this to provide access to the class loader of your package.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/InstrumentationTestRunner.html#getLoader()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ReportKeyNameClass">
      <MemberSignature Language="C#" Value="public const string ReportKeyNameClass;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ReportKeyNameClass" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("REPORT_KEY_NAME_CLASS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If included in the status or final bundle sent to an IInstrumentationWatcher, this key
 identifies the name of the current test class.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If included in the status or final bundle sent to an IInstrumentationWatcher, this key
 identifies the name of the current test class.  This is sent with any status message
 describing a specific test being started or completed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/InstrumentationTestRunner.html#REPORT_KEY_NAME_CLASS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ReportKeyNameTest">
      <MemberSignature Language="C#" Value="public const string ReportKeyNameTest;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ReportKeyNameTest" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("REPORT_KEY_NAME_TEST")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If included in the status or final bundle sent to an IInstrumentationWatcher, this key
 identifies the name of the current test.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If included in the status or final bundle sent to an IInstrumentationWatcher, this key
 identifies the name of the current test.  This is sent with any status message
 describing a specific test being started or completed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/InstrumentationTestRunner.html#REPORT_KEY_NAME_TEST" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ReportKeyNumCurrent">
      <MemberSignature Language="C#" Value="public const string ReportKeyNumCurrent;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ReportKeyNumCurrent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("REPORT_KEY_NUM_CURRENT")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If included in the status or final bundle sent to an IInstrumentationWatcher, this key
 identifies the sequence number of the current test.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If included in the status or final bundle sent to an IInstrumentationWatcher, this key
 identifies the sequence number of the current test.  This is sent with any status message
 describing a specific test being started or completed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/InstrumentationTestRunner.html#REPORT_KEY_NUM_CURRENT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ReportKeyNumTotal">
      <MemberSignature Language="C#" Value="public const string ReportKeyNumTotal;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ReportKeyNumTotal" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("REPORT_KEY_NUM_TOTAL")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If included in the status or final bundle sent to an IInstrumentationWatcher, this key
 identifies the total number of tests that are being run.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If included in the status or final bundle sent to an IInstrumentationWatcher, this key
 identifies the total number of tests that are being run.  This is sent with all status
 messages.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/InstrumentationTestRunner.html#REPORT_KEY_NUM_TOTAL" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ReportKeyStack">
      <MemberSignature Language="C#" Value="public const string ReportKeyStack;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ReportKeyStack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("REPORT_KEY_STACK")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If included in the status bundle sent to an IInstrumentationWatcher, this key
 identifies a stack trace describing an error or failure.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If included in the status bundle sent to an IInstrumentationWatcher, this key
 identifies a stack trace describing an error or failure.  This is sent with any status
 message describing a specific test being completed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/InstrumentationTestRunner.html#REPORT_KEY_STACK" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ReportValueId">
      <MemberSignature Language="C#" Value="public const string ReportValueId;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ReportValueId" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("REPORT_VALUE_ID")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This value, if stored with key <c><see cref="F:Android.App.Instrumentation.ReportKeyIdentifier" /></c>,
 identifies InstrumentationTestRunner as the source of the report.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This value, if stored with key <c><see cref="F:Android.App.Instrumentation.ReportKeyIdentifier" /></c>,
 identifies InstrumentationTestRunner as the source of the report.  This is sent with all
 status messages.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/test/InstrumentationTestRunner.html#REPORT_VALUE_ID" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
