<Type Name="_Format" FullName="Java.Text._Format">
  <TypeSignature Language="C#" Value="public abstract class _Format : Java.Lang.Object, IDisposable, Java.IO.ISerializable, Java.Lang.ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit _Format extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.IO.ISerializable, class Java.Lang.ICloneable, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/text/Format", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>The base class for all formats.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">The base class for all formats.
 </para>
      <para tool="javadoc-to-mdoc">
 This is an abstract base class which specifies the protocol for classes which
 convert other objects or values, such as numeric values and dates, and their
 string representations. In some cases these representations may be localized
 or contain localized characters or strings. For example, a numeric formatter
 such as <c>DecimalFormat</c> may convert a numeric value such as 12345 to
 the string "$12,345". It may also parse the string back into a numeric value.
 A date and time formatter like <c>SimpleDateFormat</c> may represent a
 specific date, encoded numerically, as a string such as "Wednesday, February
 26, 1997 AD".
 </para>
      <para tool="javadoc-to-mdoc">
 Many of the concrete subclasses of <c>Format</c> employ the notion of a
 pattern. A pattern is a string representation of the rules which govern the
 conversion between values and strings. For example, a <c>DecimalFormat</c>
 object may be associated with the pattern "$#,##0.00;($#,##0.00)", which is a
 common US English format for currency values, yielding strings such as
 "$1,234.45" for 1234.45, and "($987.65)" for -987.6543. The specific syntax
 of a pattern is defined by each subclass. Even though many subclasses use
 patterns, the notion of a pattern is not inherent to <c>Format</c> classes
 in general, and is not part of the explicit base class protocol.
 </para>
      <para tool="javadoc-to-mdoc">
 Two complex formatting classes are worth mentioning: <c>MessageFormat</c>
 and <c>ChoiceFormat</c>. <c>ChoiceFormat</c> is a subclass of
 <c>NumberFormat</c> which allows the user to format different number ranges
 as strings. For instance, 0 may be represented as "no files", 1 as "one
 file", and any number greater than 1 as "many files". <c>MessageFormat</c>
 is a formatter which utilizes other <c>Format</c> objects to format a string
 containing multiple values. For instance, a <c>MessageFormat</c> object
 might produce the string "There are no files on the disk MyDisk on February
 27, 1997." given the arguments 0, "MyDisk", and the date value of 2/27/97.
 See the <c><see cref="T:Java.Text.ChoiceFormat" /></c> and <c><see cref="T:Java.Text.MessageFormat" /></c> descriptions for
 further information.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/text/Format.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected _Format ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Used by subclasses.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Used by subclasses. This was public in Java 5.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/Format.html#Format()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected _Format (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clone", "()Ljava/lang/Object;", "GetCloneHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a copy of this <c>Format</c> instance.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a copy of this <c>Format</c> instance.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/Format.html#clone()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Java.Lang.ICloneable" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (Java.Lang.Object object);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Format(class Java.Lang.Object object) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("format", "(Ljava/lang/Object;)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="object" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="object">the object to format.</param>
        <summary>Formats the specified object using the rules of this format.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Formats the specified object using the rules of this format.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/Format.html#format(java.lang.Object)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the object cannot be formatted by this format.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public abstract Java.Lang.StringBuffer Format (Java.Lang.Object object, Java.Lang.StringBuffer buffer, Java.Text.FieldPosition field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.StringBuffer Format(class Java.Lang.Object object, class Java.Lang.StringBuffer buffer, class Java.Text.FieldPosition field) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("format", "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "GetFormat_Ljava_lang_Object_Ljava_lang_StringBuffer_Ljava_text_FieldPosition_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.StringBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="object" Type="Java.Lang.Object" />
        <Parameter Name="buffer" Type="Java.Lang.StringBuffer" />
        <Parameter Name="field" Type="Java.Text.FieldPosition" />
      </Parameters>
      <Docs>
        <param name="object">the object to format.</param>
        <param name="buffer">the string buffer where the formatted string is appended to.</param>
        <param name="field">on input: an optional alignment field; on output: the offsets
            of the alignment field in the formatted text.</param>
        <summary>Appends the specified object to the specified string buffer using the
 rules of this format.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Appends the specified object to the specified string buffer using the
 rules of this format.
 </para>
          <para tool="javadoc-to-mdoc">
            <c>field</c> is an input/output parameter. If its <c>field</c>
 member contains an enum value specifying a field on input, then its
 <c>beginIndex</c> and <c>endIndex</c> members will be updated with the
 text offset of the first occurrence of this field in the formatted text.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/Format.html#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the object cannot be formatted by this format.
</exception>
      </Docs>
    </Member>
    <Member MemberName="FormatToCharacterIterator">
      <MemberSignature Language="C#" Value="public virtual Java.Text.IAttributedCharacterIterator FormatToCharacterIterator (Java.Lang.Object object);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Text.IAttributedCharacterIterator FormatToCharacterIterator(class Java.Lang.Object object) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("formatToCharacterIterator", "(Ljava/lang/Object;)Ljava/text/AttributedCharacterIterator;", "GetFormatToCharacterIterator_Ljava_lang_Object_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.IAttributedCharacterIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="object" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="object">the object to format.</param>
        <summary>Formats the specified object using the rules of this format and returns
 an <c>AttributedCharacterIterator</c> with the formatted string and no
 attributes.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Formats the specified object using the rules of this format and returns
 an <c>AttributedCharacterIterator</c> with the formatted string and no
 attributes.
 </para>
          <para tool="javadoc-to-mdoc">
 Subclasses should return an <c>AttributedCharacterIterator</c> with the
 appropriate attributes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/Format.html#formatToCharacterIterator(java.lang.Object)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the object cannot be formatted by this format.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseObject">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object ParseObject (string string);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object ParseObject(string string) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parseObject", "(Ljava/lang/String;)Ljava/lang/Object;", "GetParseObject_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string">the string to parse.</param>
        <summary tool="true">Parses the specified string starting at the index specified by
 <c>position</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Parses the specified string using the rules of this format.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/Format.html#parseObject(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Text.ParseException">if an error occurs during parsing.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseObject">
      <MemberSignature Language="C#" Value="public abstract Java.Lang.Object ParseObject (string string, Java.Text.ParsePosition position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object ParseObject(string string, class Java.Text.ParsePosition position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parseObject", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;", "GetParseObject_Ljava_lang_String_Ljava_text_ParsePosition_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string" Type="System.String" />
        <Parameter Name="position" Type="Java.Text.ParsePosition" />
      </Parameters>
      <Docs>
        <param name="string">the string to parse.</param>
        <param name="position">input/output parameter, specifies the start index in
            <c>string</c> from where to start parsing. If parsing is
            successful, it is updated with the index following the parsed
            text; on error, the index is unchanged and the error index is
            set to the index where the error occurred.</param>
        <summary>Parses the specified string starting at the index specified by
 <c>position</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Parses the specified string starting at the index specified by
 <c>position</c>. If the string is successfully parsed then the index of
 the <c>ParsePosition</c> is updated to the index following the parsed
 text. On error, the index is unchanged and the error index of
 <c>ParsePosition</c> is set to the index where the error occurred.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/Format.html#parseObject(java.lang.String, java.text.ParsePosition)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>