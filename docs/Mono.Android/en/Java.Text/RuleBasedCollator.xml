<Type Name="RuleBasedCollator" FullName="Java.Text.RuleBasedCollator">
  <TypeSignature Language="C#" Value="public class RuleBasedCollator : Java.Text.Collator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RuleBasedCollator extends Java.Text.Collator" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Text.Collator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/text/RuleBasedCollator", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A concrete implementation class for <c>Collation</c>.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A concrete implementation class for <c>Collation</c>.
 </para>
      <para tool="javadoc-to-mdoc">
        <c>RuleBasedCollator</c> has the following restrictions for efficiency
 (other subclasses may be used for more complex languages):
 <list type="number"><item><term> If a French secondary ordering is specified it applies to the whole
 collator object.</term></item><item><term> All non-mentioned Unicode characters are at the end of the collation
 order.</term></item><item><term> If a character is not located in the <c>RuleBasedCollator</c>, the
 default Unicode Collation Algorithm (UCA) rule-based table is automatically
 searched as a backup.</term></item></list></para>
      <para tool="javadoc-to-mdoc">
 The collation table is composed of a list of collation rules, where each rule
 is of three forms:
 <format type="text/html"><blockquote><sample external-id="484FE1722382B353BC4A1A57732814A0" /></blockquote></format></para>
      <para tool="javadoc-to-mdoc">
 The rule elements are defined as follows:
 <list type="bullet"><item><term><i>Modifier</i>: There is a single modifier which is used to
 specify that all accents (secondary differences) are backwards:
 <list type="bullet" /></term></item><item><term>'@' : Indicates that accents are sorted backwards, as in French.
 </term></item><item><term><i>Relation</i>: The relations are the following:
 <list type="bullet" /></term></item><item><term>'&lt;' : Greater, as a letter difference (primary)
 </term></item><item><term>';' : Greater, as an accent difference (secondary)
 </term></item><item><term>',' : Greater, as a case difference (tertiary)
 </term></item><item><term>'=' : Equal
 </term></item><item><term><i>Text-Argument</i>: A text-argument is any sequence of
 characters, excluding special characters (that is, common whitespace
 characters [0009-000D, 0020] and rule syntax characters [0021-002F,
 003A-0040, 005B-0060, 007B-007E]). If those characters are desired, you can
 put them in single quotes (for example, use '&amp;' for ampersand). Note that
 unquoted white space characters are ignored; for example, <c>b c</c> is
 treated as <c>bc</c>.</term></item><item><term><i>Reset</i>: There is a single reset which is used primarily
 for contractions and expansions, but which can also be used to add a
 modification at the end of a set of rules:
 <list type="bullet" /></term></item><item><term>'&amp;' : Indicates that the next rule follows the position to where the reset
 text-argument would be sorted.
 </term></item></list></para>
      <para tool="javadoc-to-mdoc">
 This sounds more complicated than it is in practice. For example, the
 following are equivalent ways of expressing the same thing:
 <format type="text/html"><blockquote><sample external-id="E74FC398B723DEF8E99D5C1413A473EC" /></blockquote></format></para>
      <para tool="javadoc-to-mdoc">
 Notice that the order is important, as the subsequent item goes immediately
 after the text-argument. The following are not equivalent:
 <format type="text/html"><blockquote><example><code lang="java">
 a </code></example></blockquote></format></para>
      <para tool="javadoc-to-mdoc">
 Either the text-argument must already be present in the sequence, or some
 initial substring of the text-argument must be present. For example
 <c>"a </c> is valid since "a" is present in the sequence before
 "ae" is reset. In this latter case, "ae" is not entered and treated as a
 single character; instead, "e" is sorted as if it were expanded to two
 characters: "a" followed by an "e". This difference appears in natural
 languages: in traditional Spanish "ch" is treated as if it contracts to a
 single character (expressed as <c>"c </c>), while in traditional
 German a-umlaut is treated as if it expands to two characters (expressed as
 <c>"a,A </c>, where ã and Ã
 are the escape sequences for a-umlaut).
 <format type="text/html"><h4>Ignorable Characters</h4></format></para>
      <para tool="javadoc-to-mdoc">
 For ignorable characters, the first rule must start with a relation (the
 examples we have used above are really fragments; <c>"a </c> really
 should be <c>"</c>). If, however, the first relation is not
 <c>"</c>, then all text-arguments up to the first <c>"</c> are
 ignorable. For example, <c>", - </c> makes <c>"-"</c> an ignorable
 character.
 <format type="text/html"><h4>Normalization and Accents</h4></format></para>
      <para tool="javadoc-to-mdoc">
        <c>RuleBasedCollator</c> automatically processes its rule table to include
 both pre-composed and combining-character versions of accented characters.
 Even if the provided rule string contains only base characters and separate
 combining accent characters, the pre-composed accented characters matching
 all canonical combinations of characters from the rule string will be entered
 in the table.
 </para>
      <para tool="javadoc-to-mdoc">
 This allows you to use a RuleBasedCollator to compare accented strings even
 when the collator is set to NO_DECOMPOSITION. However, if the strings to be
 collated contain combining sequences that may not be in canonical order, you
 should set the collator to CANONICAL_DECOMPOSITION to enable sorting of
 combining sequences. For more information, see .
 <format type="text/html"><h4>Errors</h4></format></para>
      <para tool="javadoc-to-mdoc">
 The following rules are not valid:
 <list type="bullet"><item><term>A text-argument contains unquoted punctuation symbols, for example
 <c>"a </c>.</term></item><item><term>A relation or reset character is not followed by a text-argument, for
 example <c>"a </c>.</term></item><item><term>A reset where the text-argument (or an initial substring of the
 text-argument) is not already in the sequence or allocated in the default UCA
 table, for example <c>"a </c>.</term></item></list></para>
      <para tool="javadoc-to-mdoc">
 If you produce one of these errors, <c>RuleBasedCollator</c> throws a
 <c>ParseException</c>.
 <format type="text/html"><h4>Examples</h4></format></para>
      <para tool="javadoc-to-mdoc">
 Normally, to create a rule-based collator object, you will use
 <c>Collator</c>'s factory method <c>getInstance</c>. However, to create a
 rule-based collator object with specialized rules tailored to your needs, you
 construct the <c>RuleBasedCollator</c> with the rules contained in a
 <c>String</c> object. For example:
 <format type="text/html"><blockquote><sample external-id="AD84A7F38E9AE392EB21EF5611FACD56" /></blockquote></format></para>
      <para tool="javadoc-to-mdoc">
 Or:
 <format type="text/html"><blockquote><sample external-id="6C9D30B463E87E188BFF948836DA49CD" /></blockquote></format></para>
      <para tool="javadoc-to-mdoc">
 Combining <c>Collator</c>s is as simple as concatenating strings. Here is
 an example that combines two <c>Collator</c>s from two different locales:
 <format type="text/html"><blockquote><sample external-id="19443020CBC3DA4B4C42FAC4491DCD36" /></blockquote></format></para>
      <para tool="javadoc-to-mdoc">
 The next example shows to make changes on an existing table to create a new
 <c>Collator</c> object. For example, add <c>"&amp; C </c> to
 the <c>en_USCollator</c> object to create your own:
 <format type="text/html"><blockquote><sample external-id="DD94695830BEDAC92BCFB5F6D95C3935" /></blockquote></format></para>
      <para tool="javadoc-to-mdoc">
 The following example demonstrates how to change the order of non-spacing
 accents:
 <format type="text/html"><blockquote><sample external-id="8416DF41F812526BAA122F2EB2C5235D" /></blockquote></format></para>
      <para tool="javadoc-to-mdoc">
 The last example shows how to put new primary ordering in before the default
 setting. For example, in the Japanese <c>Collator</c>, you can either sort
 English characters before or after Japanese characters:
 <format type="text/html"><blockquote><sample external-id="095DA109190B99F1AD0BD6315D0964EB" /></blockquote></format></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/text/RuleBasedCollator.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RuleBasedCollator (string rules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string rules) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="rules" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rules">To be added.</param>
        <summary>Constructs a new instance of <c>RuleBasedCollator</c> using the
 specified <c>rules</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new instance of <c>RuleBasedCollator</c> using the
 specified <c>rules</c>. The <c>rules</c> are usually either
 hand-written based on the <c><see cref="T:Java.Text.RuleBasedCollator" /></c> or
 the result of a former <c><see cref="P:Java.Text.RuleBasedCollator.Rules" /></c> call.
 </para>
          <para tool="javadoc-to-mdoc">
 Note that the <c>rules</c> are actually interpreted as a delta to the
 standard Unicode Collation Algorithm (UCA). This differs
 slightly from other implementations which work with full <c>rules</c>
 specifications and may result in different behavior.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/RuleBasedCollator.html#RuleBasedCollator(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if <c>rules == null</c>.</exception>
        <exception cref="T:Java.Text.ParseException">if <c>rules</c> contains rules with invalid collation rule
             syntax.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RuleBasedCollator (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public override int Compare (string source, string target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Compare(string source, string target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("compare", "(Ljava/lang/String;Ljava/lang/String;)I", "GetCompare_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="target" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">the source text.</param>
        <param name="target">the target text.</param>
        <summary>Compares the <c>source</c> text to the <c>target</c> text according to
 the collation rules, strength and decomposition mode for this
 <c>RuleBasedCollator</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Compares the <c>source</c> text to the <c>target</c> text according to
 the collation rules, strength and decomposition mode for this
 <c>RuleBasedCollator</c>. See the <c>Collator</c> class description
 for an example of use.
 </para>
          <para tool="javadoc-to-mdoc">
 General recommendation: If comparisons are to be done with the same strings
 multiple times, it is more efficient to generate <c>CollationKey</c>
 objects for the strings and use
 <c>CollationKey.compareTo(CollationKey)</c> for the comparisons. If each
 string is compared to only once, using
 <c>RuleBasedCollator.compare(String, String)</c> has better performance.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/RuleBasedCollator.html#compare(java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetCollationElementIterator">
      <MemberSignature Language="C#" Value="public virtual Java.Text.CollationElementIterator GetCollationElementIterator (Java.Text.ICharacterIterator source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Text.CollationElementIterator GetCollationElementIterator(class Java.Text.ICharacterIterator source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCollationElementIterator", "(Ljava/text/CharacterIterator;)Ljava/text/CollationElementIterator;", "GetGetCollationElementIterator_Ljava_text_CharacterIterator_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.CollationElementIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Java.Text.ICharacterIterator" />
      </Parameters>
      <Docs>
        <param name="source">the source character iterator.</param>
        <summary>Obtains a <c>CollationElementIterator</c> for the given
 <c>CharacterIterator</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Obtains a <c>CollationElementIterator</c> for the given
 <c>CharacterIterator</c>. The source iterator's integrity will be
 preserved since a new copy will be created for use.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/RuleBasedCollator.html#getCollationElementIterator(java.text.CharacterIterator)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetCollationElementIterator">
      <MemberSignature Language="C#" Value="public virtual Java.Text.CollationElementIterator GetCollationElementIterator (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Text.CollationElementIterator GetCollationElementIterator(string source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCollationElementIterator", "(Ljava/lang/String;)Ljava/text/CollationElementIterator;", "GetGetCollationElementIterator_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.CollationElementIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">the source string.</param>
        <summary>Obtains a <c>CollationElementIterator</c> for the given string.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Obtains a <c>CollationElementIterator</c> for the given string.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/RuleBasedCollator.html#getCollationElementIterator(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetCollationKey">
      <MemberSignature Language="C#" Value="public override Java.Text.CollationKey GetCollationKey (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Text.CollationKey GetCollationKey(string source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCollationKey", "(Ljava/lang/String;)Ljava/text/CollationKey;", "GetGetCollationKey_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.CollationKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">the specified source text.</param>
        <summary>Returns the <c>CollationKey</c> for the given source text.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the <c>CollationKey</c> for the given source text.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/RuleBasedCollator.html#getCollationKey(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hashCode", "()I", "GetGetHashCodeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an integer hash code for this object.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an integer hash code for this object. By contract, any two
 objects for which <c><see cref="M:Java.Lang.Object.Equals(Java.Lang.Object)" /></c> returns <c>true</c> must return
 the same hash code value. This means that subclasses of <c>Object</c>
 usually override both methods or neither method.

 </para>
          <para tool="javadoc-to-mdoc">Note that hash values must not change over time unless information used in equals
 comparisons also changes.

 </para>
          <para tool="javadoc-to-mdoc">See <see cref="!:Java.Lang.Object.writing_hashCode" />
 if you intend implementing your own <c>hashCode</c> method.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/RuleBasedCollator.html#hashCode()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Rules">
      <MemberSignature Language="C#" Value="public virtual string Rules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Rules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRules", "()Ljava/lang/String;", "GetGetRulesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the collation rules of this collator.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the collation rules of this collator. These <c>rules</c> can be
 fed into the <c>RuleBasedCollator(String)</c> constructor.
 </para>
          <para tool="javadoc-to-mdoc">
 Note that the <c>rules</c> are actually interpreted as a delta to the
 standard Unicode Collation Algorithm (UCA). Hence, an empty <c>rules</c>
 string results in the default UCA rules being applied. This differs
 slightly from other implementations which work with full <c>rules</c>
 specifications and may result in different behavior.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/RuleBasedCollator.html#getRules()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
