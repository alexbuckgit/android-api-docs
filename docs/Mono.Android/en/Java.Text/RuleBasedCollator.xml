<Type Name="RuleBasedCollator" FullName="Java.Text.RuleBasedCollator">
  <TypeSignature Language="C#" Value="public class RuleBasedCollator : Java.Text.Collator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RuleBasedCollator extends Java.Text.Collator" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Text.Collator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/text/RuleBasedCollator", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A concrete subclass of <c><see cref="T:Java.Text.Collator" /></c>.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A concrete subclass of <c><see cref="T:Java.Text.Collator" /></c>.
 It is based on the ICU RuleBasedCollator which implements the
 CLDR and Unicode collation algorithms.

 </para>
      <para tool="javadoc-to-mdoc">Most of the time, you create a <c><see cref="T:Java.Text.Collator" /></c> instance for a <c><see cref="T:Java.Util.Locale" /></c>
 by calling the <c><see cref="P:Java.Text.Collator.Instance" /></c> factory method.
 You can construct a <c>RuleBasedCollator</c> if you need a custom sort order.

 </para>
      <para tool="javadoc-to-mdoc">The root collator's sort order is the CLDR root collation order
 which in turn is the Unicode default sort order with a few modifications.
 A <c>RuleBasedCollator</c> is built from a rule <c>String</c> which changes the
 sort order of some characters and strings relative to the default order.

 </para>
      <para tool="javadoc-to-mdoc">A rule string usually contains one or more rule chains.
 A rule chain consists of a reset followed by one or more rules.
 The reset anchors the following rules in the default sort order.
 The rules change the order of the their characters and strings
 relative to the reset point.

 </para>
      <para tool="javadoc-to-mdoc">A reset is an ampersand <c>&amp;</c> followed by one or more characters for the reset position.
 A rule is a relation operator, which specifies the level of difference,
 also followed by one or more characters.
 A multi-character rule creates a "contraction".
 A multi-character reset position usually creates "expansions".

 </para>
      <para tool="javadoc-to-mdoc">For example, the following rules
 make "ä" sort with a diacritic-like (secondary) difference from "ae"
 (like in German phonebook sorting),
 and make "å" and "aa" sort as a base letter (primary) after "z" (like in Danish).
 Uppercase forms sort with a case-like (tertiary) difference after their lowercase forms.

 <format type="text/html"><blockquote><example><code lang="java">
 &amp;AE&lt;&lt;ä &lt;&lt;&lt;Ä
 &amp;z&lt;å&lt;&lt;&lt;Å&lt;&lt;&lt;aa&lt;&lt;&lt;Aa&lt;&lt;&lt;AA
 </code></example></blockquote></format></para>
      <para tool="javadoc-to-mdoc">For details see
 <list type="bullet"><item><term>CLDR </term></item><item><term>ICU User Guide </term></item></list></para>
      <para tool="javadoc-to-mdoc">Note: earlier versions of <c>RuleBasedCollator</c> up to and including Android 4.4 (KitKat)
 allowed the omission of the reset from the first rule chain.
 This was interpreted as an implied reset after the last non-Han script in the default order.
 However, this is not a useful reset position, except for large tailorings of
 Han characters themselves.
 Starting with the CLDR 24 collation specification and the ICU 53 implementation,
 the initial reset is required.

 </para>
      <para tool="javadoc-to-mdoc">If the rule string does not follow the syntax, then <c>RuleBasedCollator</c> throws a
 <c>ParseException</c>.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/text/RuleBasedCollator.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RuleBasedCollator (string rules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string rules) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="rules" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rules">To be added.</param>
        <summary>Constructs a new instance of <c>RuleBasedCollator</c> using the
 specified <c>rules</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new instance of <c>RuleBasedCollator</c> using the
 specified <c>rules</c>. (See the <c><see cref="T:Java.Text.RuleBasedCollator" /></c>.)
 </para>
          <para tool="javadoc-to-mdoc">
 Note that the <c>rules</c> are interpreted as a delta to the
 default sort order. This differs
 from other implementations which work with full <c>rules</c>
 specifications and may result in different behavior.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/RuleBasedCollator.html#RuleBasedCollator(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.NullPointerException">if <c>rules == null</c>.</exception>
        <exception cref="T:Java.Text.ParseException">if <c>rules</c> contains rules with invalid collation rule
             syntax.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RuleBasedCollator (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public override int Compare (string source, string target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Compare(string source, string target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("compare", "(Ljava/lang/String;Ljava/lang/String;)I", "GetCompare_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="target" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">the source text.</param>
        <param name="target">the target text.</param>
        <summary>Compares the <c>source</c> text to the <c>target</c> text according to
 the collation rules, strength and decomposition mode for this
 <c>RuleBasedCollator</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Compares the <c>source</c> text to the <c>target</c> text according to
 the collation rules, strength and decomposition mode for this
 <c>RuleBasedCollator</c>. See the <c>Collator</c> class description
 for an example of use.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/RuleBasedCollator.html#compare(java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetCollationElementIterator">
      <MemberSignature Language="C#" Value="public virtual Java.Text.CollationElementIterator GetCollationElementIterator (Java.Text.ICharacterIterator source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Text.CollationElementIterator GetCollationElementIterator(class Java.Text.ICharacterIterator source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCollationElementIterator", "(Ljava/text/CharacterIterator;)Ljava/text/CollationElementIterator;", "GetGetCollationElementIterator_Ljava_text_CharacterIterator_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.CollationElementIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Java.Text.ICharacterIterator" />
      </Parameters>
      <Docs>
        <param name="source">the source character iterator.</param>
        <summary tool="true">Obtains a <c>CollationElementIterator</c> for the given
 <c>CharacterIterator</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Obtains a <c>CollationElementIterator</c> for the given
 <c>CharacterIterator</c>. The source iterator's integrity will be
 preserved since a new copy will be created for use.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/RuleBasedCollator.html#getCollationElementIterator(java.text.CharacterIterator)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetCollationElementIterator">
      <MemberSignature Language="C#" Value="public virtual Java.Text.CollationElementIterator GetCollationElementIterator (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Text.CollationElementIterator GetCollationElementIterator(string source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCollationElementIterator", "(Ljava/lang/String;)Ljava/text/CollationElementIterator;", "GetGetCollationElementIterator_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.CollationElementIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">the source string.</param>
        <summary>Obtains a <c>CollationElementIterator</c> for the given string.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Obtains a <c>CollationElementIterator</c> for the given string.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/RuleBasedCollator.html#getCollationElementIterator(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetCollationKey">
      <MemberSignature Language="C#" Value="public override Java.Text.CollationKey GetCollationKey (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Text.CollationKey GetCollationKey(string source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCollationKey", "(Ljava/lang/String;)Ljava/text/CollationKey;", "GetGetCollationKey_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text.CollationKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">the specified source text.</param>
        <summary>Returns the <c>CollationKey</c> for the given source text.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the <c>CollationKey</c> for the given source text.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/RuleBasedCollator.html#getCollationKey(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hashCode", "()I", "GetGetHashCodeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an integer hash code for this object.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an integer hash code for this object. By contract, any two
 objects for which <c><see cref="M:Java.Lang.Object.Equals(Java.Lang.Object)" /></c> returns <c>true</c> must return
 the same hash code value. This means that subclasses of <c>Object</c>
 usually override both methods or neither method.

 </para>
          <para tool="javadoc-to-mdoc">Note that hash values must not change over time unless information used in equals
 comparisons also changes.

 </para>
          <para tool="javadoc-to-mdoc">See <see cref="!:Java.Lang.Object.writing_hashCode" />
 if you intend implementing your own <c>hashCode</c> method.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/RuleBasedCollator.html#hashCode()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Rules">
      <MemberSignature Language="C#" Value="public virtual string Rules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Rules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRules", "()Ljava/lang/String;", "GetGetRulesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the collation rules of this collator.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the collation rules of this collator. These <c>rules</c> can be
 fed into the <c>RuleBasedCollator(String)</c> constructor.

 </para>
          <para tool="javadoc-to-mdoc">The returned string will be empty unless you constructed the instance yourself.
 The string forms of the collation rules are omitted to save space on the device.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/RuleBasedCollator.html#getRules()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>