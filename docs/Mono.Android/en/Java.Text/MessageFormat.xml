<Type Name="MessageFormat" FullName="Java.Text.MessageFormat">
  <TypeSignature Language="C#" Value="public class MessageFormat : Java.Text._Format" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageFormat extends Java.Text._Format" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Text._Format</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/text/MessageFormat", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Produces concatenated messages in language-neutral way.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Produces concatenated messages in language-neutral way. New code
 should probably use <c><see cref="T:Java.Util.Formatter" /></c> instead.
 </para>
      <para tool="javadoc-to-mdoc">
        <c>MessageFormat</c> takes a set of objects, formats them and then
 inserts the formatted strings into the pattern at the appropriate places.
 </para>
      <para tool="javadoc-to-mdoc">
        <i>Note:</i>
        <c>MessageFormat</c> differs from the other
 <c>Format</c> classes in that you create a <c>MessageFormat</c>
 object with one of its constructors (not with a <c>getInstance</c>
 style factory method). The factory methods aren't necessary because
 <c>MessageFormat</c> itself doesn't implement locale-specific
 behavior. Any locale-specific behavior is defined by the pattern that you
 provide as well as the subformats used for inserted arguments.

 <format type="text/html"><h4></h4></format><c>MessageFormat</c> uses patterns of the following form:
 <format type="text/html"><blockquote><sample external-id="149F5D909B18E92844382FD5F70ED232" /></blockquote></format></para>
      <para tool="javadoc-to-mdoc">
 Within a <format type="text/html"><i>String</i></format>, <c>"''"</c> represents a single quote. A
 <format type="text/html"><i>QuotedString</i></format> can contain arbitrary characters except single quotes;
 the surrounding single quotes are removed. An <format type="text/html"><i>UnquotedString</i></format> can
 contain arbitrary characters except single quotes and left curly brackets.
 Thus, a string that should result in the formatted message "'{0}'" can be
 written as <c>"'''{'0</c>''"} or <c>"'''{0</c>'''"}.
 </para>
      <para tool="javadoc-to-mdoc">
 Within a <format type="text/html"><i>SubformatPattern</i></format>, different rules apply. A <format type="text/html"><i>QuotedPattern</i></format>
 can contain arbitrary characters except single quotes, but the surrounding
 single quotes are <i>not</i> removed, so they may be interpreted
 by the subformat. For example, <c>"{1,number,$'#',##</c>"} will
 produce a number format with the hash-sign quoted, with a result such as:
 "$#31,45". An <format type="text/html"><i>UnquotedPattern</i></format> can contain arbitrary characters except
 single quotes, but curly braces within it must be balanced. For example,
 <c>"ab {0</c> de"} and <c>"ab '</c>' de"} are valid subformat
 patterns, but <c>"ab {0'</c>' de"} and <c>"ab </c> de"} are
 not.
 <format type="text/html"><dl><dt><b>Warning:</b></dt><dd>The rules for using quotes within message format patterns unfortunately
 have shown to be somewhat confusing. In particular, it isn't always obvious
 to localizers whether single quotes need to be doubled or not. Make sure to
 inform localizers about the rules, and tell them (for example, by using
 comments in resource bundle source files) which strings will be processed by
 <c>MessageFormat</c>. Note that localizers may need to use single quotes in
 translated strings where the original version doesn't have them. <br />
 Note also that the simplest way to avoid the problem is to use the real
 apostrophe (single quote) character â€™ (') for human-readable text, and
 to use the ASCII apostrophe (' ' ) only in program syntax, like quoting
 in <c>MessageFormat</c>. See the annotations for U+0027 Apostrophe in The Unicode
 Standard.
 </dd></dl></format></para>
      <para tool="javadoc-to-mdoc">
 The <format type="text/html"><i>ArgumentIndex</i></format> value is a non-negative integer written using the
 digits '0' through '9', and represents an index into the
 <c>arguments</c> array passed to the <c>format</c> methods or
 the result array returned by the <c>parse</c> methods.
 </para>
      <para tool="javadoc-to-mdoc">
 The <format type="text/html"><i>FormatType</i></format> and <format type="text/html"><i>FormatStyle</i></format> values are used to create a
 <c>Format</c> instance for the format element. The following table
 shows how the values map to <c>Format</c> instances. Combinations not shown in the
 table are illegal. A <format type="text/html"><i>SubformatPattern</i></format> must be a valid pattern string
 for the <c>Format</c> subclass used.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <table border="1">
            <tr>
              <th>Format Type</th>
              <th>Format Style</th>
              <th>Subformat Created</th>
            </tr>
            <tr>
              <td colspan="2">
                <i>(none)</i>
              </td>
              <td>
                <c>null</c>
              </td>
            </tr>
            <tr>
              <td rowspan="5">
                <c>number</c>
              </td>
              <td>
                <i>(none)</i>
              </td>
              <td>
                <c>NumberFormat.getInstance(getLocale())</c>
              </td>
            </tr>
            <tr>
              <td>
                <c>integer</c>
              </td>
              <td>
                <c>NumberFormat.getIntegerInstance(getLocale())</c>
              </td>
            </tr>
            <tr>
              <td>
                <c>currency</c>
              </td>
              <td>
                <c>NumberFormat.getCurrencyInstance(getLocale())</c>
              </td>
            </tr>
            <tr>
              <td>
                <c>percent</c>
              </td>
              <td>
                <c>NumberFormat.getPercentInstance(getLocale())</c>
              </td>
            </tr>
            <tr>
              <td>
                <i>SubformatPattern</i>
              </td>
              <td>
                <c>new DecimalFormat(subformatPattern, new DecimalFormatSymbols(getLocale()))</c>
              </td>
            </tr>
            <tr>
              <td rowspan="6">
                <c>date</c>
              </td>
              <td>
                <i>(none)</i>
              </td>
              <td>
                <c>DateFormat.getDateInstance(DateFormat.DEFAULT, getLocale())</c>
              </td>
            </tr>
            <tr>
              <td>
                <c>short</c>
              </td>
              <td>
                <c>DateFormat.getDateInstance(DateFormat.SHORT, getLocale())</c>
              </td>
            </tr>
            <tr>
              <td>
                <c>medium</c>
              </td>
              <td>
                <c>DateFormat.getDateInstance(DateFormat.DEFAULT, getLocale())</c>
              </td>
            </tr>
            <tr>
              <td>
                <c>long</c>
              </td>
              <td>
                <c>DateFormat.getDateInstance(DateFormat.LONG, getLocale())</c>
              </td>
            </tr>
            <tr>
              <td>
                <c>full</c>
              </td>
              <td>
                <c>DateFormat.getDateInstance(DateFormat.FULL, getLocale())</c>
              </td>
            </tr>
            <tr>
              <td>
                <i>SubformatPattern</i>
              </td>
              <td>
                <c>new SimpleDateFormat(subformatPattern, getLocale())</c>
              </td>
            </tr>
            <tr>
              <td rowspan="6">
                <c>time</c>
              </td>
              <td>
                <i>(none)</i>
              </td>
              <td>
                <c>DateFormat.getTimeInstance(DateFormat.DEFAULT, getLocale())</c>
              </td>
            </tr>
            <tr>
              <td>
                <c>short</c>
              </td>
              <td>
                <c>DateFormat.getTimeInstance(DateFormat.SHORT, getLocale())</c>
              </td>
            </tr>
            <tr>
              <td>
                <c>medium</c>
              </td>
              <td>
                <c>DateFormat.getTimeInstance(DateFormat.DEFAULT, getLocale())</c>
              </td>
            </tr>
            <tr>
              <td>
                <c>long</c>
              </td>
              <td>
                <c>DateFormat.getTimeInstance(DateFormat.LONG, getLocale())</c>
              </td>
            </tr>
            <tr>
              <td>
                <c>full</c>
              </td>
              <td>
                <c>DateFormat.getTimeInstance(DateFormat.FULL, getLocale())</c>
              </td>
            </tr>
            <tr>
              <td>
                <i>SubformatPattern</i>
              </td>
              <td>
                <c>new SimpleDateFormat(subformatPattern, getLocale())</c>
              </td>
            </tr>
            <tr>
              <td>
                <c>choice</c>
              </td>
              <td>
                <i>SubformatPattern</i>
              </td>
              <td>
                <c>new ChoiceFormat(subformatPattern)</c>
              </td>
            </tr>
          </table>
        </format>
        <format type="text/html">
          <h4>Usage Information</h4>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">
 Here are some examples of usage: <format type="text/html"><blockquote><sample external-id="50A6D834DD9DDE9F3F928B3896A27EF2" /></blockquote></format></para>
      <para tool="javadoc-to-mdoc">
 Typically, the message format will come from resources, and the
 arguments will be dynamically set at runtime.
 </para>
      <para tool="javadoc-to-mdoc">
 Example 2: <format type="text/html"><blockquote><sample external-id="4816B77677A4817165009BF8F091041F" /></blockquote></format></para>
      <para tool="javadoc-to-mdoc">
 For more sophisticated patterns, you can use a <c>ChoiceFormat</c> to
 get output such as:
 <format type="text/html"><blockquote><sample external-id="7F0019DA3C85FEECA4AE3BCB967AB4C4" /></blockquote></format> You can either do this programmatically, as in the above
 example, or by using a pattern (see <c><see cref="T:Java.Text.ChoiceFormat" /></c> for more
 information) as in: <format type="text/html"><blockquote><sample external-id="6769007E8E6A83F4C8E5D81A9FEB7BBD" /></blockquote></format></para>
      <para tool="javadoc-to-mdoc">
        <i>Note:</i> As we see above, the string produced by a
 <c>ChoiceFormat</c> in <c>MessageFormat</c> is treated
 specially; occurances of '{' are used to indicated subformats, and cause
 recursion. If you create both a <c>MessageFormat</c> and
 <c>ChoiceFormat</c> programmatically (instead of using the string
 patterns), then be careful not to produce a format that recurses on itself,
 which will cause an infinite loop.
 </para>
      <para tool="javadoc-to-mdoc">
 When a single argument is parsed more than once in the string, the last match
 will be the final result of the parsing. For example:
 <format type="text/html"><blockquote><sample external-id="D5517EF9F9D3859E8656A4750F93201E" /></blockquote></format></para>
      <para tool="javadoc-to-mdoc">
 Likewise, parsing with a <c>MessageFormat</c> object using patterns
 containing multiple occurrences of the same argument would return the last
 match. For example:
 <format type="text/html"><blockquote><sample external-id="C68A24AAD2838FB521E3F9476E5B0900" /></blockquote></format><format type="text/html"><h4></h4></format></para>
      <para tool="javadoc-to-mdoc">
 Message formats are not synchronized. It is recommended to create separate
 format instances for each thread. If multiple threads access a format
 concurrently, it must be synchronized externally.<format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="T:Java.Util.Formatter" /></c></term></item></list></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/text/MessageFormat.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageFormat (string template);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string template) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="template" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="template">To be added.</param>
        <summary>Constructs a new <c>MessageFormat</c> using the specified pattern and
 the user's default locale.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>MessageFormat</c> using the specified pattern and
 the user's default locale.
 See "<format type="text/html"><a href="http://developer.android.com/reference/../util/Locale.html#default_locale">Be wary of the default locale</a></format>".</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#MessageFormat(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern cannot be parsed.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageFormat (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageFormat (string template, Java.Util.Locale locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string template, class Java.Util.Locale locale) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;Ljava/util/Locale;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="template" Type="System.String" />
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="template">To be added.</param>
        <param name="locale">To be added.</param>
        <summary>Constructs a new <c>MessageFormat</c> using the specified pattern and <c>locale</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>MessageFormat</c> using the specified pattern and <c>locale</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#MessageFormat(java.lang.String, java.util.Locale)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern cannot be parsed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyPattern">
      <MemberSignature Language="C#" Value="public virtual void ApplyPattern (string template);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyPattern(string template) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("applyPattern", "(Ljava/lang/String;)V", "GetApplyPattern_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="template" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="template">the new pattern.</param>
        <summary>Changes this <c>MessageFormat</c> to use the specified pattern.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Changes this <c>MessageFormat</c> to use the specified pattern.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#applyPattern(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern cannot be parsed.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string template, Java.Lang.Object[] objects);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string template, class Java.Lang.Object[] objects) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="template" Type="System.String" />
        <Parameter Name="objects" Type="Java.Lang.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="template">To be added.</param>
        <param name="objects">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public override sealed Java.Lang.StringBuffer Format (Java.Lang.Object object, Java.Lang.StringBuffer buffer, Java.Text.FieldPosition field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Lang.StringBuffer Format(class Java.Lang.Object object, class Java.Lang.StringBuffer buffer, class Java.Text.FieldPosition field) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("format", "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.StringBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="object" Type="Java.Lang.Object" />
        <Parameter Name="buffer" Type="Java.Lang.StringBuffer" />
        <Parameter Name="field" Type="Java.Text.FieldPosition" />
      </Parameters>
      <Docs>
        <param name="object">the object to format, must be an array of <c>Object</c>.</param>
        <param name="buffer">the target string buffer to append the formatted message to.</param>
        <param name="field">on input: an optional alignment field; on output: the offsets
            of the alignment field in the formatted text.</param>
        <summary>Converts the specified objects into a string which it appends to the
 specified string buffer using the pattern of this message format.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Converts the specified objects into a string which it appends to the
 specified string buffer using the pattern of this message format.
 </para>
          <para tool="javadoc-to-mdoc">
 If the <c>field</c> member of the specified <c>FieldPosition</c> is
 <c>MessageFormat.Field.ARGUMENT</c>, then the begin and end index of
 this field position is set to the location of the first occurrence of a
 message format argument. Otherwise, the <c>FieldPosition</c> is ignored.
 </para>
          <para tool="javadoc-to-mdoc">
 Calling this method is equivalent to calling
 <format type="text/html"><blockquote><sample external-id="66727F0A0EB696C679185E71F3C057C7" /></blockquote></format></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.ClassCastException">if <c>object</c> is not an array of <c>Object</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public Java.Lang.StringBuffer Format (Java.Lang.Object[] objects, Java.Lang.StringBuffer buffer, Java.Text.FieldPosition field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Lang.StringBuffer Format(class Java.Lang.Object[] objects, class Java.Lang.StringBuffer buffer, class Java.Text.FieldPosition field) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("format", "([Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.StringBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objects" Type="Java.Lang.Object[]" />
        <Parameter Name="buffer" Type="Java.Lang.StringBuffer" />
        <Parameter Name="field" Type="Java.Text.FieldPosition" />
      </Parameters>
      <Docs>
        <param name="objects">the array of objects to format.</param>
        <param name="buffer">the target string buffer to append the formatted message to.</param>
        <param name="field">on input: an optional alignment field; on output: the offsets
            of the alignment field in the formatted text.</param>
        <summary>Converts the specified objects into a string which it appends to the
 specified string buffer using the pattern of this message format.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Converts the specified objects into a string which it appends to the
 specified string buffer using the pattern of this message format.
 </para>
          <para tool="javadoc-to-mdoc">
 If the <c>field</c> member of the specified <c>FieldPosition</c> is
 <c>MessageFormat.Field.ARGUMENT</c>, then the begin and end index of
 this field position is set to the location of the first occurrence of a
 message format argument. Otherwise, the <c>FieldPosition</c> is ignored.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public virtual Java.Text._Format[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Text._Format[] GetFormats() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getFormats", "()[Ljava/text/Format;", "GetGetFormatsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text._Format[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the <c>Format</c> instances used by this message format.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the <c>Format</c> instances used by this message format.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#getFormats()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetFormatsByArgumentIndex">
      <MemberSignature Language="C#" Value="public virtual Java.Text._Format[] GetFormatsByArgumentIndex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Text._Format[] GetFormatsByArgumentIndex() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getFormatsByArgumentIndex", "()[Ljava/text/Format;", "GetGetFormatsByArgumentIndexHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Text._Format[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the formats used for each argument index.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the formats used for each argument index. If an argument is
 placed more than once in the pattern string, then this returns the format
 of the last one.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#getFormatsByArgumentIndex()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Locale">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Locale Locale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.Locale Locale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLocale", "()Ljava/util/Locale;", "GetGetLocaleHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setLocale", "(Ljava/util/Locale;)V", "GetSetLocale_Ljava_util_Locale_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Locale</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the locale used when creating formats.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#getLocale()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns the locale used when creating formats.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#setLocale(java.util.Locale)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets the locale to use when creating <c>Format</c> instances. Changing
 the locale may change the behavior of <c>applyPattern</c>,
 <c>toPattern</c>, <c>format</c> and <c>formatToCharacterIterator</c>.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object[] Parse (string string);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object[] Parse(string string) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parse", "(Ljava/lang/String;)[Ljava/lang/Object;", "GetParse_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string">the string to parse.</param>
        <summary>Parses the message arguments from the specified string using the rules of
 this message format.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Parses the message arguments from the specified string using the rules of
 this message format.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#parse(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Text.ParseException">if an error occurs during parsing.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object[] Parse (string string, Java.Text.ParsePosition position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object[] Parse(string string, class Java.Text.ParsePosition position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parse", "(Ljava/lang/String;Ljava/text/ParsePosition;)[Ljava/lang/Object;", "GetParse_Ljava_lang_String_Ljava_text_ParsePosition_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string" Type="System.String" />
        <Parameter Name="position" Type="Java.Text.ParsePosition" />
      </Parameters>
      <Docs>
        <param name="string">the string to parse.</param>
        <param name="position">input/output parameter, specifies the start index in
            <c>string</c> from where to start parsing. If parsing is
            successful, it is updated with the index following the parsed
            text; on error, the index is unchanged and the error index is
            set to the index where the error occurred.</param>
        <summary>Parses the message argument from the specified string starting at the
 index specified by <c>position</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Parses the message argument from the specified string starting at the
 index specified by <c>position</c>. If the string is successfully
 parsed then the index of the <c>ParsePosition</c> is updated to the
 index following the parsed text. On error, the index is unchanged and the
 error index of <c>ParsePosition</c> is set to the index where the error
 occurred.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#parse(java.lang.String, java.text.ParsePosition)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ParseObject">
      <MemberSignature Language="C#" Value="public override Java.Lang.Object ParseObject (string string, Java.Text.ParsePosition position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Java.Lang.Object ParseObject(string string, class Java.Text.ParsePosition position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parseObject", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;", "GetParseObject_Ljava_lang_String_Ljava_text_ParsePosition_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string" Type="System.String" />
        <Parameter Name="position" Type="Java.Text.ParsePosition" />
      </Parameters>
      <Docs>
        <param name="string">the string to parse.</param>
        <param name="position">input/output parameter, specifies the start index in
            <c>string</c> from where to start parsing. If parsing is
            successful, it is updated with the index following the parsed
            text; on error, the index is unchanged and the error index is
            set to the index where the error occurred.</param>
        <summary>Parses the message argument from the specified string starting at the
 index specified by <c>position</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Parses the message argument from the specified string starting at the
 index specified by <c>position</c>. If the string is successfully
 parsed then the index of the <c>ParsePosition</c> is updated to the
 index following the parsed text. On error, the index is unchanged and the
 error index of <c>ParsePosition</c> is set to the index where the error
 occurred.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#parseObject(java.lang.String, java.text.ParsePosition)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFormat">
      <MemberSignature Language="C#" Value="public virtual void SetFormat (int offset, Java.Text._Format format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFormat(int32 offset, class Java.Text._Format format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setFormat", "(ILjava/text/Format;)V", "GetSetFormat_ILjava_text_Format_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="format" Type="Java.Text._Format" />
      </Parameters>
      <Docs>
        <param name="offset">the index of the format to change.</param>
        <param name="format">the <c>Format</c> that replaces the old format.
</param>
        <summary>Sets the specified format used by this message format.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the specified format used by this message format.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#setFormat(int, java.text.Format)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFormatByArgumentIndex">
      <MemberSignature Language="C#" Value="public virtual void SetFormatByArgumentIndex (int argIndex, Java.Text._Format format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFormatByArgumentIndex(int32 argIndex, class Java.Text._Format format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setFormatByArgumentIndex", "(ILjava/text/Format;)V", "GetSetFormatByArgumentIndex_ILjava_text_Format_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argIndex" Type="System.Int32" />
        <Parameter Name="format" Type="Java.Text._Format" />
      </Parameters>
      <Docs>
        <param name="argIndex">the index of the format to set.</param>
        <param name="format">the format that will be set at index <c>argIndex</c>.
</param>
        <summary>Sets the format used for the argument at index <c>argIndex</c> to
 <c>format</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the format used for the argument at index <c>argIndex</c> to
 <c>format</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#setFormatByArgumentIndex(int, java.text.Format)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFormats">
      <MemberSignature Language="C#" Value="public virtual void SetFormats (Java.Text._Format[] formats);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFormats(class Java.Text._Format[] formats) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setFormats", "([Ljava/text/Format;)V", "GetSetFormats_arrayLjava_text_Format_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formats" Type="Java.Text._Format[]" />
      </Parameters>
      <Docs>
        <param name="formats">an array of <c>Format</c>.
</param>
        <summary>Sets the formats used by this message format.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the formats used by this message format.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#setFormats(java.text.Format[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetFormatsByArgumentIndex">
      <MemberSignature Language="C#" Value="public virtual void SetFormatsByArgumentIndex (Java.Text._Format[] formats);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFormatsByArgumentIndex(class Java.Text._Format[] formats) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setFormatsByArgumentIndex", "([Ljava/text/Format;)V", "GetSetFormatsByArgumentIndex_arrayLjava_text_Format_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formats" Type="Java.Text._Format[]" />
      </Parameters>
      <Docs>
        <param name="formats">the formats in an array.
</param>
        <summary>Sets the formats used for each argument.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the formats used for each argument. The <c>formats</c> array
 elements should be in the order of the argument indices.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#setFormatsByArgumentIndex(java.text.Format[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToPattern">
      <MemberSignature Language="C#" Value="public virtual string ToPattern ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToPattern() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("toPattern", "()Ljava/lang/String;", "GetToPatternHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the pattern of this message format.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the pattern of this message format.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/text/MessageFormat.html#toPattern()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
