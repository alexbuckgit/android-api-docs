<Type Name="StrictMode" FullName="Android.OS.StrictMode">
  <TypeSignature Language="C#" Value="public sealed class StrictMode : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StrictMode extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/os/StrictMode", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary></summary>
    <remarks><para tool="javadoc-to-mdoc" /><para tool="javadoc-to-mdoc">StrictMode is a developer tool which detects things you might be
 doing by accident and brings them to your attention so you can fix
 them.

 </para><para tool="javadoc-to-mdoc">StrictMode is most commonly used to catch accidental disk or
 network access on the application's main thread, where UI
 operations are received and animations take place.  Keeping disk
 and network operations off the main thread makes for much smoother,
 more responsive applications.  By keeping your application's main thread
 responsive, you also prevent
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/practices/design/responsiveness.html">ANR dialogs</a></format>
 from being shown to users.

 </para><para tool="javadoc-to-mdoc">Note that even though an Android device's disk is
 often on flash memory, many devices run a filesystem on top of that
 memory with very limited concurrency.  It's often the case that
 almost all disk accesses are fast, but may in individual cases be
 dramatically slower when certain I/O is happening in the background
 from other processes.  If possible, it's best to assume that such
 things are not fast.</para><para tool="javadoc-to-mdoc">Example code to enable from early in your
 <c><see cref="T:Android.App.Application" /></c>, <c><see cref="T:Android.App.Activity" /></c>, or
 other application component's
 <c><see cref="M:Android.App.Application.OnCreate" /></c> method:

 <example><code lang="java">
 public void onCreate() {
     if (DEVELOPER_MODE) {
         StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()
                 .detectDiskReads()
                 .detectDiskWrites()
                 .detectNetwork()   // or .detectAll() for all detectable problems
                 .penaltyLog()
                 .build());
         StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()
                 .detectLeakedSqlLiteObjects()
                 .detectLeakedClosableObjects()
                 .penaltyLog()
                 .penaltyDeath()
                 .build());
     }
     super.onCreate();
 }
 </code></example></para><para tool="javadoc-to-mdoc">You can decide what should happen when a violation is detected.
 For example, using <c><see cref="!:NoType:android/os/StrictMode$ThreadPolicy$Builder;Href=../../../reference/android/os/StrictMode.ThreadPolicy.Builder.html#penaltyLog()" /></c> you can
 watch the output of <c>adb logcat</c> while you use your
 application to see the violations as they happen.

 </para><para tool="javadoc-to-mdoc">If you find violations that you feel are problematic, there are
 a variety of tools to help solve them: threads, <c><see cref="T:Android.OS.Handler" /></c>,
 <c><see cref="T:Android.OS.AsyncTask`3" /></c>, <c><see cref="!:NoType:android/app/IntentService;Href=../../../reference/android/app/IntentService.html" /></c>, etc.
 But don't feel compelled to fix everything that StrictMode finds.  In particular,
 many cases of disk access are often necessary during the normal activity lifecycle.  Use
 StrictMode to find things you did by accident.  Network requests on the UI thread
 are almost always a problem, though.

 </para><para tool="javadoc-to-mdoc">StrictMode is not a security mechanism and is not
 guaranteed to find all disk or network accesses.  While it does
 propagate its state across process boundaries when doing
 <c><see cref="T:Android.OS.Binder" /></c> calls, it's still ultimately a best
 effort mechanism.  Notably, disk or network access from JNI calls
 won't necessarily trigger it.  Future versions of Android may catch
 more (or fewer) operations, so you should never leave StrictMode
 enabled in applications distributed on Google Play.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/os/StrictMode.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 9" />
  </Docs>
  <Members>
    <Member MemberName="AllowThreadDiskReads">
      <MemberSignature Language="C#" Value="public static Android.OS.StrictMode.ThreadPolicy AllowThreadDiskReads ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.OS.StrictMode/ThreadPolicy AllowThreadDiskReads() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("allowThreadDiskReads", "()Landroid/os/StrictMode$ThreadPolicy;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.StrictMode+ThreadPolicy</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>A convenience wrapper that takes the current
 <c><see cref="!:NoType:android/os/StrictMode$ThreadPolicy;Href=../../../reference/android/os/StrictMode.ThreadPolicy.html" /></c> from <c><see cref="M:Android.OS.StrictMode.GetThreadPolicy" /></c>, modifies it
 to permit disk reads, and sets the new policy
 with <c><see cref="M:Android.OS.StrictMode.SetThreadPolicy(.ThreadPolicy)" /></c>, returning the old policy so you
 can restore it at the end of a block.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">A convenience wrapper that takes the current
 <c><see cref="!:NoType:android/os/StrictMode$ThreadPolicy;Href=../../../reference/android/os/StrictMode.ThreadPolicy.html" /></c> from <c><see cref="M:Android.OS.StrictMode.GetThreadPolicy" /></c>, modifies it
 to permit disk reads, and sets the new policy
 with <c><see cref="M:Android.OS.StrictMode.SetThreadPolicy(.ThreadPolicy)" /></c>, returning the old policy so you
 can restore it at the end of a block.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/os/StrictMode.html#allowThreadDiskReads()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="AllowThreadDiskWrites">
      <MemberSignature Language="C#" Value="public static Android.OS.StrictMode.ThreadPolicy AllowThreadDiskWrites ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.OS.StrictMode/ThreadPolicy AllowThreadDiskWrites() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("allowThreadDiskWrites", "()Landroid/os/StrictMode$ThreadPolicy;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.StrictMode+ThreadPolicy</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>A convenience wrapper that takes the current
 <c><see cref="!:NoType:android/os/StrictMode$ThreadPolicy;Href=../../../reference/android/os/StrictMode.ThreadPolicy.html" /></c> from <c><see cref="M:Android.OS.StrictMode.GetThreadPolicy" /></c>, modifies it
 to permit both disk reads &amp; writes, and sets the new policy
 with <c><see cref="M:Android.OS.StrictMode.SetThreadPolicy(.ThreadPolicy)" /></c>, returning the old policy so you
 can restore it at the end of a block.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">A convenience wrapper that takes the current
 <c><see cref="!:NoType:android/os/StrictMode$ThreadPolicy;Href=../../../reference/android/os/StrictMode.ThreadPolicy.html" /></c> from <c><see cref="M:Android.OS.StrictMode.GetThreadPolicy" /></c>, modifies it
 to permit both disk reads &amp; writes, and sets the new policy
 with <c><see cref="M:Android.OS.StrictMode.SetThreadPolicy(.ThreadPolicy)" /></c>, returning the old policy so you
 can restore it at the end of a block.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/os/StrictMode.html#allowThreadDiskWrites()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="EnableDefaults">
      <MemberSignature Language="C#" Value="public static void EnableDefaults ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableDefaults() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("enableDefaults", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enable the recommended StrictMode defaults, with violations just being logged.</summary>
        <remarks><para tool="javadoc-to-mdoc">Enable the recommended StrictMode defaults, with violations just being logged.

 </para><para tool="javadoc-to-mdoc">This catches disk and network access on the main thread, as
 well as leaked SQLite cursors and unclosed resources.  This is
 simply a wrapper around <c><see cref="M:Android.OS.StrictMode.SetVmPolicy(.VmPolicy)" /></c> and <c><see cref="M:Android.OS.StrictMode.SetThreadPolicy(.ThreadPolicy)" /></c>.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/os/StrictMode.html#enableDefaults()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetThreadPolicy">
      <MemberSignature Language="C#" Value="public static Android.OS.StrictMode.ThreadPolicy GetThreadPolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.OS.StrictMode/ThreadPolicy GetThreadPolicy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getThreadPolicy", "()Landroid/os/StrictMode$ThreadPolicy;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.StrictMode+ThreadPolicy</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the current thread's policy.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns the current thread's policy.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/os/StrictMode.html#getThreadPolicy()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetVmPolicy">
      <MemberSignature Language="C#" Value="public static Android.OS.StrictMode.VmPolicy GetVmPolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.OS.StrictMode/VmPolicy GetVmPolicy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getVmPolicy", "()Landroid/os/StrictMode$VmPolicy;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.StrictMode+VmPolicy</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the current VM policy.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Gets the current VM policy.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/os/StrictMode.html#getVmPolicy()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="NoteSlowCall">
      <MemberSignature Language="C#" Value="public static void NoteSlowCall (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void NoteSlowCall(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("noteSlowCall", "(Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">a short string for the exception stack trace that's
             built if when this fires.
</param>
        <summary>For code to note that it's slow.</summary>
        <remarks><para tool="javadoc-to-mdoc">For code to note that it's slow.  This is a no-op unless the
 current thread's <c><see cref="!:NoType:android/os/StrictMode$ThreadPolicy;Href=../../../reference/android/os/StrictMode.ThreadPolicy.html" /></c> has
 <c><see cref="!:NoType:android/os/StrictMode$ThreadPolicy$Builder;Href=../../../reference/android/os/StrictMode.ThreadPolicy.Builder.html#detectCustomSlowCalls()" /></c>
 enabled.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/os/StrictMode.html#noteSlowCall(java.lang.String)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetThreadPolicy">
      <MemberSignature Language="C#" Value="public static void SetThreadPolicy (Android.OS.StrictMode.ThreadPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetThreadPolicy(class Android.OS.StrictMode/ThreadPolicy policy) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setThreadPolicy", "(Landroid/os/StrictMode$ThreadPolicy;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="Android.OS.StrictMode+ThreadPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">the policy to put into place
</param>
        <summary>Sets the policy for what actions on the current thread should
 be detected, as well as the penalty if such actions occur.</summary>
        <remarks><para tool="javadoc-to-mdoc">Sets the policy for what actions on the current thread should
 be detected, as well as the penalty if such actions occur.

 </para><para tool="javadoc-to-mdoc">Internally this sets a thread-local variable which is
 propagated across cross-process IPC calls, meaning you can
 catch violations when a system service or another process
 accesses the disk or network on your behalf.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/os/StrictMode.html#setThreadPolicy(android.os.StrictMode.ThreadPolicy)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="SetVmPolicy">
      <MemberSignature Language="C#" Value="public static void SetVmPolicy (Android.OS.StrictMode.VmPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetVmPolicy(class Android.OS.StrictMode/VmPolicy policy) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVmPolicy", "(Landroid/os/StrictMode$VmPolicy;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="Android.OS.StrictMode+VmPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">the policy to put into place
</param>
        <summary>Sets the policy for what actions in the VM process (on any
 thread) should be detected, as well as the penalty if such
 actions occur.</summary>
        <remarks><para tool="javadoc-to-mdoc">Sets the policy for what actions in the VM process (on any
 thread) should be detected, as well as the penalty if such
 actions occur.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/os/StrictMode.html#setVmPolicy(android.os.StrictMode.VmPolicy)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
