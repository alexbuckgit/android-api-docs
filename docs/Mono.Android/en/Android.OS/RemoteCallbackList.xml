<Type Name="RemoteCallbackList" FullName="Android.OS.RemoteCallbackList">
  <TypeSignature Language="C#" Value="public class RemoteCallbackList : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RemoteCallbackList extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/os/RemoteCallbackList", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Takes care of the grunt work of maintaining a list of remote interfaces,
 typically for the use of performing callbacks from a
 <c><see cref="T:Android.App.Service" /></c> to its clients.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Takes care of the grunt work of maintaining a list of remote interfaces,
 typically for the use of performing callbacks from a
 <c><see cref="T:Android.App.Service" /></c> to its clients.  In particular, this:

 <list type="bullet"><item><term> Keeps track of a set of registered <c><see cref="T:Android.OS.IInterface" /></c> callbacks,
 taking care to identify them through their underlying unique <c><see cref="T:Android.OS.BinderConsts" /></c>
 (by calling <c><see cref="M:Android.OS.IInterface.AsBinder" /></c>.
 </term></item><item><term> Attaches a <c><see cref="T:Android.OS.IBinderDeathRecipient" /></c> to
 each registered interface, so that it can be cleaned out of the list if its
 process goes away.
 </term></item><item><term> Performs locking of the underlying list of interfaces to deal with
 multithreaded incoming calls, and a thread-safe way to iterate over a
 snapshot of the list without holding its lock.
 </term></item></list></para>
      <para tool="javadoc-to-mdoc">To use this class, simply create a single instance along with your
 service, and call its <c><see cref="!:Android.OS.RemoteCallbackList.register(E)" /></c> and <c><see cref="!:Android.OS.RemoteCallbackList.unregister(E)" /></c> methods
 as client register and unregister with your service.  To call back on to
 the registered clients, use <c><see cref="M:Android.OS.RemoteCallbackList.BeginBroadcast" /></c>,
 <c><see cref="M:Android.OS.RemoteCallbackList.GetBroadcastItem(System.Int32)" /></c>, and <c><see cref="M:Android.OS.RemoteCallbackList.FinishBroadcast" /></c>.

 </para>
      <para tool="javadoc-to-mdoc">If a registered callback's process goes away, this class will take
 care of automatically removing it from the list.  If you want to do
 additional work in this situation, you can create a subclass that
 implements the <c><see cref="!:Android.OS.RemoteCallbackList.onCallbackDied(E)" /></c> method.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/os/RemoteCallbackList.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RemoteCallbackList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary></summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/RemoteCallbackList.html#RemoteCallbackList()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RemoteCallbackList (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginBroadcast">
      <MemberSignature Language="C#" Value="public virtual int BeginBroadcast ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 BeginBroadcast() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("beginBroadcast", "()I", "GetBeginBroadcastHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Prepare to start making calls to the currently registered callbacks.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Prepare to start making calls to the currently registered callbacks.
 This creates a copy of the callback list, which you can retrieve items
 from using <c><see cref="M:Android.OS.RemoteCallbackList.GetBroadcastItem(System.Int32)" /></c>.  Note that only one broadcast can
 be active at a time, so you must be sure to always call this from the
 same thread (usually by scheduling with <c><see cref="T:Android.OS.Handler" /></c>) or
 do your own synchronization.  You must call <c><see cref="M:Android.OS.RemoteCallbackList.FinishBroadcast" /></c>
 when done.

 </para>
          <para tool="javadoc-to-mdoc">A typical loop delivering a broadcast looks like this:

 <example><code lang="java">
 int i = callbacks.beginBroadcast();
 while (i &gt; 0) {
     i--;
     try {
         callbacks.getBroadcastItem(i).somethingHappened();
     } catch (RemoteException e) {
         // The RemoteCallbackList will take care of removing
         // the dead object for us.
     }
 }
 callbacks.finishBroadcast();</code></example></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/RemoteCallbackList.html#beginBroadcast()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.RemoteCallbackList.GetBroadcastItem(System.Int32)" />
        <altmember cref="M:Android.OS.RemoteCallbackList.FinishBroadcast" />
      </Docs>
    </Member>
    <Member MemberName="FinishBroadcast">
      <MemberSignature Language="C#" Value="public virtual void FinishBroadcast ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishBroadcast() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("finishBroadcast", "()V", "GetFinishBroadcastHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clean up the state of a broadcast previously initiated by calling
 <c><see cref="M:Android.OS.RemoteCallbackList.BeginBroadcast" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Clean up the state of a broadcast previously initiated by calling
 <c><see cref="M:Android.OS.RemoteCallbackList.BeginBroadcast" /></c>.  This must always be called when you are done
 with a broadcast.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/RemoteCallbackList.html#finishBroadcast()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.RemoteCallbackList.BeginBroadcast" />
      </Docs>
    </Member>
    <Member MemberName="GetBroadcastCookie">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object GetBroadcastCookie (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object GetBroadcastCookie(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getBroadcastCookie", "(I)Ljava/lang/Object;", "GetGetBroadcastCookie_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>Retrieve the cookie associated with the item
 returned by <c><see cref="M:Android.OS.RemoteCallbackList.GetBroadcastItem(System.Int32)" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve the cookie associated with the item
 returned by <c><see cref="M:Android.OS.RemoteCallbackList.GetBroadcastItem(System.Int32)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/RemoteCallbackList.html#getBroadcastCookie(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
        <altmember cref="M:Android.OS.RemoteCallbackList.GetBroadcastItem(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBroadcastItem">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object GetBroadcastItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object GetBroadcastItem(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getBroadcastItem", "(I)Landroid/os/IInterface;", "GetGetBroadcastItem_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Which of the registered callbacks you would like to
 retrieve.  Ranges from 0 to 1-<c><see cref="M:Android.OS.RemoteCallbackList.BeginBroadcast" /></c>.</param>
        <summary>Retrieve an item in the active broadcast that was previously started
 with <c><see cref="M:Android.OS.RemoteCallbackList.BeginBroadcast" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve an item in the active broadcast that was previously started
 with <c><see cref="M:Android.OS.RemoteCallbackList.BeginBroadcast" /></c>.  This can <i>only</i> be called after
 the broadcast is started, and its data is no longer valid after
 calling <c><see cref="M:Android.OS.RemoteCallbackList.FinishBroadcast" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Note that it is possible for the process of one of the returned
 callbacks to go away before you call it, so you will need to catch
 <c><see cref="T:Android.OS.RemoteException" /></c> when calling on to the returned object.
 The callback list itself, however, will take care of unregistering
 these objects once it detects that it is no longer valid, so you can
 handle such an exception by simply ignoring it.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/RemoteCallbackList.html#getBroadcastItem(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.RemoteCallbackList.BeginBroadcast" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public virtual void Kill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Kill() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("kill", "()V", "GetKillHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disable this callback list.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Disable this callback list.  All registered callbacks are unregistered,
 and the list is disabled so that future calls to <c><see cref="!:Android.OS.RemoteCallbackList.register(E)" /></c> will
 fail.  This should be used when a Service is stopping, to prevent clients
 from registering callbacks after it is stopped.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/RemoteCallbackList.html#kill()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCallbackDied">
      <MemberSignature Language="C#" Value="public virtual void OnCallbackDied (Java.Lang.Object callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCallbackDied(class Java.Lang.Object callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCallbackDied", "(Landroid/os/IInterface;)V", "GetOnCallbackDied_Landroid_os_IInterface_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCallbackDied">
      <MemberSignature Language="C#" Value="public virtual void OnCallbackDied (Java.Lang.Object callback, Java.Lang.Object cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCallbackDied(class Java.Lang.Object callback, class Java.Lang.Object cookie) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCallbackDied", "(Landroid/os/IInterface;Ljava/lang/Object;)V", "GetOnCallbackDied_Landroid_os_IInterface_Ljava_lang_Object_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Java.Lang.Object" />
        <Parameter Name="cookie" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <param name="cookie">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public virtual bool Register (Java.Lang.Object callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Register(class Java.Lang.Object callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("register", "(Landroid/os/IInterface;)Z", "GetRegister_Landroid_os_IInterface_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public virtual bool Register (Java.Lang.Object callback, Java.Lang.Object cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Register(class Java.Lang.Object callback, class Java.Lang.Object cookie) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("register", "(Landroid/os/IInterface;Ljava/lang/Object;)Z", "GetRegister_Landroid_os_IInterface_Ljava_lang_Object_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Java.Lang.Object" />
        <Parameter Name="cookie" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <param name="cookie">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisteredCallbackCount">
      <MemberSignature Language="C#" Value="public virtual int RegisteredCallbackCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RegisteredCallbackCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRegisteredCallbackCount", "()I", "GetGetRegisteredCallbackCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of registered callbacks.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the number of registered callbacks. Note that the number of registered
 callbacks may differ from the value returned by <c><see cref="M:Android.OS.RemoteCallbackList.BeginBroadcast" /></c> since
 the former returns the number of callbacks registered at the time of the call
 and the second the number of callback to which the broadcast will be delivered.
 </para>
          <para tool="javadoc-to-mdoc">
 This function is useful to decide whether to schedule a broadcast if this
 requires doing some work which otherwise would not be performed.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/RemoteCallbackList.html#getRegisteredCallbackCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public virtual bool Unregister (Java.Lang.Object callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Unregister(class Java.Lang.Object callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregister", "(Landroid/os/IInterface;)Z", "GetUnregister_Landroid_os_IInterface_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
