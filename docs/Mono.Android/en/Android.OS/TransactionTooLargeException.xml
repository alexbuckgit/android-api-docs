<Type Name="TransactionTooLargeException" FullName="Android.OS.TransactionTooLargeException">
  <TypeSignature Language="C#" Value="public class TransactionTooLargeException : Android.OS.RemoteException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TransactionTooLargeException extends Android.OS.RemoteException" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.OS.RemoteException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/os/TransactionTooLargeException", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="15">
    <summary>The Binder transaction failed because it was too large.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">The Binder transaction failed because it was too large.
 </para>
      <para tool="javadoc-to-mdoc">
 During a remote procedure call, the arguments and the return value of the call
 are transferred as <c><see cref="T:Android.OS.Parcel" /></c> objects stored in the Binder transaction buffer.
 If the arguments or the return value are too large to fit in the transaction buffer,
 then the call will fail and <c><see cref="T:Android.OS.TransactionTooLargeException" /></c> will be thrown.
 </para>
      <para tool="javadoc-to-mdoc">
 The Binder transaction buffer has a limited fixed size, currently 1Mb, which
 is shared by all transactions in progress for the process.  Consequently this
 exception can be thrown when there are many transactions in progress even when
 most of the individual transactions are of moderate size.
 </para>
      <para tool="javadoc-to-mdoc">
 There are two possible outcomes when a remote procedure call throws
 <c><see cref="T:Android.OS.TransactionTooLargeException" /></c>.  Either the client was unable to send
 its request to the service (most likely if the arguments were too large to fit in
 the transaction buffer), or the service was unable to send its response back
 to the client (most likely if the return value was too large to fit
 in the transaction buffer).  It is not possible to tell which of these outcomes
 actually occurred.  The client should assume that a partial failure occurred.
 </para>
      <para tool="javadoc-to-mdoc">
 The key to avoiding <c><see cref="T:Android.OS.TransactionTooLargeException" /></c> is to keep all
 transactions relatively small.  Try to minimize the amount of memory needed to create
 a <c><see cref="T:Android.OS.Parcel" /></c> for the arguments and the return value of the remote procedure call.
 Avoid transferring huge arrays of strings or large bitmaps.
 If possible, try to break up big requests into smaller pieces.
 </para>
      <para tool="javadoc-to-mdoc">
 If you are implementing a service, it may help to impose size or complexity
 contraints on the queries that clients can perform.  For example, if the result set
 could become large, then don't allow the client to request more than a few records
 at a time.  Alternately, instead of returning all of the available data all at once,
 return the essential information first and make the client ask for additional information
 later as needed.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/os/TransactionTooLargeException.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 15" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionTooLargeException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/TransactionTooLargeException.html#TransactionTooLargeException()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 15" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TransactionTooLargeException (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T}(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
