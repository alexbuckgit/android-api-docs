<Type Name="Environment" FullName="Android.OS.Environment">
  <TypeSignature Language="C#" Value="public class Environment : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Environment extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/os/Environment", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Provides access to environment variables.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Provides access to environment variables.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/os/Environment.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Environment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#Environment()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Environment (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T}(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataDirectory">
      <MemberSignature Language="C#" Value="public static Java.IO.File DataDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.IO.File DataDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDataDirectory", "()Ljava/io/File;", "GetGetDataDirectoryHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the user data directory.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the user data directory.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#getDataDirectory()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DirectoryAlarms">
      <MemberSignature Language="C#" Value="public static string DirectoryAlarms { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DirectoryAlarms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DIRECTORY_ALARMS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Standard directory in which to place any audio files that should be
 in the list of alarms that the user can select (not as regular
 music).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Standard directory in which to place any audio files that should be
 in the list of alarms that the user can select (not as regular
 music).
 This may be combined with <c><see cref="P:Android.OS.Environment.DirectoryMusic" /></c>,
 <c><see cref="P:Android.OS.Environment.DirectoryPodcasts" /></c>, <c><see cref="P:Android.OS.Environment.DirectoryNotifications" /></c>,
 and <c><see cref="P:Android.OS.Environment.DirectoryRingtones" /></c> as a series
 of directories to categories a particular audio file as more than one
 type.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#DIRECTORY_ALARMS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="DirectoryDcim">
      <MemberSignature Language="C#" Value="public static string DirectoryDcim { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DirectoryDcim" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DIRECTORY_DCIM")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The traditional location for pictures and videos when mounting the
 device as a camera.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">The traditional location for pictures and videos when mounting the
 device as a camera.  Note that this is primarily a convention for the
 top-level public directory, as this convention makes no sense elsewhere.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#DIRECTORY_DCIM" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="DirectoryDocuments">
      <MemberSignature Language="C#" Value="public static string DirectoryDocuments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DirectoryDocuments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DIRECTORY_DOCUMENTS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Standard directory in which to place documents that have been created by
 the user.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Standard directory in which to place documents that have been created by
 the user.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#DIRECTORY_DOCUMENTS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectoryDownloads">
      <MemberSignature Language="C#" Value="public static string DirectoryDownloads { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DirectoryDownloads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DIRECTORY_DOWNLOADS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Standard directory in which to place files that have been downloaded by
 the user.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Standard directory in which to place files that have been downloaded by
 the user.  Note that this is primarily a convention for the top-level
 public directory, you are free to download files anywhere in your own
 private directories.  Also note that though the constant here is
 named DIRECTORY_DOWNLOADS (plural), the actual file name is non-plural for
 backwards compatibility reasons.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#DIRECTORY_DOWNLOADS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="DirectoryMovies">
      <MemberSignature Language="C#" Value="public static string DirectoryMovies { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DirectoryMovies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DIRECTORY_MOVIES")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Standard directory in which to place movies that are available to
 the user.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Standard directory in which to place movies that are available to
 the user.  Note that this is primarily a convention for the top-level
 public directory, as the media scanner will find and collect movies
 in any directory.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#DIRECTORY_MOVIES" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="DirectoryMusic">
      <MemberSignature Language="C#" Value="public static string DirectoryMusic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DirectoryMusic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DIRECTORY_MUSIC")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Standard directory in which to place any audio files that should be
 in the regular list of music for the user.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Standard directory in which to place any audio files that should be
 in the regular list of music for the user.
 This may be combined with
 <c><see cref="P:Android.OS.Environment.DirectoryPodcasts" /></c>, <c><see cref="P:Android.OS.Environment.DirectoryNotifications" /></c>,
 <c><see cref="P:Android.OS.Environment.DirectoryAlarms" /></c>, and <c><see cref="P:Android.OS.Environment.DirectoryRingtones" /></c> as a series
 of directories to categories a particular audio file as more than one
 type.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#DIRECTORY_MUSIC" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="DirectoryNotifications">
      <MemberSignature Language="C#" Value="public static string DirectoryNotifications { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DirectoryNotifications" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DIRECTORY_NOTIFICATIONS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Standard directory in which to place any audio files that should be
 in the list of notifications that the user can select (not as regular
 music).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Standard directory in which to place any audio files that should be
 in the list of notifications that the user can select (not as regular
 music).
 This may be combined with <c><see cref="P:Android.OS.Environment.DirectoryMusic" /></c>,
 <c><see cref="P:Android.OS.Environment.DirectoryPodcasts" /></c>,
 <c><see cref="P:Android.OS.Environment.DirectoryAlarms" /></c>, and <c><see cref="P:Android.OS.Environment.DirectoryRingtones" /></c> as a series
 of directories to categories a particular audio file as more than one
 type.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#DIRECTORY_NOTIFICATIONS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="DirectoryPictures">
      <MemberSignature Language="C#" Value="public static string DirectoryPictures { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DirectoryPictures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DIRECTORY_PICTURES")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Standard directory in which to place pictures that are available to
 the user.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Standard directory in which to place pictures that are available to
 the user.  Note that this is primarily a convention for the top-level
 public directory, as the media scanner will find and collect pictures
 in any directory.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#DIRECTORY_PICTURES" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="DirectoryPodcasts">
      <MemberSignature Language="C#" Value="public static string DirectoryPodcasts { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DirectoryPodcasts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DIRECTORY_PODCASTS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Standard directory in which to place any audio files that should be
 in the list of podcasts that the user can select (not as regular
 music).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Standard directory in which to place any audio files that should be
 in the list of podcasts that the user can select (not as regular
 music).
 This may be combined with <c><see cref="P:Android.OS.Environment.DirectoryMusic" /></c>,
 <c><see cref="P:Android.OS.Environment.DirectoryNotifications" /></c>,
 <c><see cref="P:Android.OS.Environment.DirectoryAlarms" /></c>, and <c><see cref="P:Android.OS.Environment.DirectoryRingtones" /></c> as a series
 of directories to categories a particular audio file as more than one
 type.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#DIRECTORY_PODCASTS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="DirectoryRingtones">
      <MemberSignature Language="C#" Value="public static string DirectoryRingtones { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DirectoryRingtones" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("DIRECTORY_RINGTONES")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Standard directory in which to place any audio files that should be
 in the list of ringtones that the user can select (not as regular
 music).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Standard directory in which to place any audio files that should be
 in the list of ringtones that the user can select (not as regular
 music).
 This may be combined with <c><see cref="P:Android.OS.Environment.DirectoryMusic" /></c>,
 <c><see cref="P:Android.OS.Environment.DirectoryPodcasts" /></c>, <c><see cref="P:Android.OS.Environment.DirectoryNotifications" /></c>, and
 <c><see cref="P:Android.OS.Environment.DirectoryAlarms" /></c> as a series
 of directories to categories a particular audio file as more than one
 type.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#DIRECTORY_RINGTONES" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="DownloadCacheDirectory">
      <MemberSignature Language="C#" Value="public static Java.IO.File DownloadCacheDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.IO.File DownloadCacheDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDownloadCacheDirectory", "()Ljava/io/File;", "GetGetDownloadCacheDirectoryHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the download/cache content directory.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the download/cache content directory.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#getDownloadCacheDirectory()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ExternalStorageDirectory">
      <MemberSignature Language="C#" Value="public static Java.IO.File ExternalStorageDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.IO.File ExternalStorageDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getExternalStorageDirectory", "()Ljava/io/File;", "GetGetExternalStorageDirectoryHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the primary external storage directory.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the primary external storage directory. This directory may not
 currently be accessible if it has been mounted by the user on their
 computer, has been removed from the device, or some other problem has
 happened. You can determine its current state with
 <c><see cref="P:Android.OS.Environment.ExternalStorageState" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note: don't be confused by the word "external" here. This directory
 can better be thought as media/shared storage. It is a filesystem that
 can hold a relatively large amount of data and that is shared across all
 applications (does not enforce permissions). Traditionally this is an SD
 card, but it may also be implemented as built-in storage in a device that
 is distinct from the protected internal storage and can be mounted as a
 filesystem on a computer.</i>
          </para>
          <para tool="javadoc-to-mdoc">
 On devices with multiple users (as described by <c><see cref="T:Android.OS.UserManager" /></c>),
 each user has their own isolated external storage. Applications only have
 access to the external storage for the user they're running as.
 </para>
          <para tool="javadoc-to-mdoc">
 In devices with multiple "external" storage directories, this directory
 represents the "primary" external storage that the user will interact
 with. Access to secondary storage is available through
 </para>
          <para tool="javadoc-to-mdoc">
 Applications should not directly use this top-level directory, in order
 to avoid polluting the user's root namespace. Any files that are private
 to the application should be placed in a directory returned by
 <c><see cref="M:Android.Content.Context.GetExternalFilesDir(System.String)" /></c>, which the system will take care of deleting
 if the application is uninstalled. Other shared files should be placed in
 one of the directories returned by
 <c><see cref="M:Android.OS.Environment.GetExternalStoragePublicDirectory(System.String)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Writing to this path requires the
 <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE" /></c> permission,
 and starting in read access requires the
 <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE" /></c> permission,
 which is automatically granted if you hold the write permission.
 </para>
          <para tool="javadoc-to-mdoc">
 Starting in <c><see cref="F:Android.OS.Build.VERSION_CODES.KitKat" /></c>, if your
 application only needs to store internal data, consider using
 <c><see cref="M:Android.Content.Context.GetExternalFilesDir(System.String)" /></c> or
 <c><see cref="P:Android.Content.Context.ExternalCacheDir" /></c>, which require no permissions to
 read or write.
 </para>
          <para tool="javadoc-to-mdoc">
 This path may change between platform versions, so applications should
 only persist relative paths.
 </para>
          <para tool="javadoc-to-mdoc">
 Here is an example of typical code to monitor the state of external
 storage:
 </para>
          <para tool="javadoc-to-mdoc">
            <example>
              <code lang="java">BroadcastReceiver mExternalStorageReceiver;
boolean mExternalStorageAvailable = false;
boolean mExternalStorageWriteable = false;

void updateExternalStorageState() {
    String state = Environment.getExternalStorageState();
    if (Environment.MEDIA_MOUNTED.equals(state)) {
        mExternalStorageAvailable = mExternalStorageWriteable = true;
    } else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
        mExternalStorageAvailable = true;
        mExternalStorageWriteable = false;
    } else {
        mExternalStorageAvailable = mExternalStorageWriteable = false;
    }
    handleExternalStorageState(mExternalStorageAvailable,
            mExternalStorageWriteable);
}

void startWatchingExternalStorage() {
    mExternalStorageReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            Log.i("test", "Storage: " + intent.getData());
            updateExternalStorageState();
        }
    };
    IntentFilter filter = new IntentFilter();
    filter.addAction(Intent.ACTION_MEDIA_MOUNTED);
    filter.addAction(Intent.ACTION_MEDIA_REMOVED);
    registerReceiver(mExternalStorageReceiver, filter);
    updateExternalStorageState();
}

void stopWatchingExternalStorage() {
    unregisterReceiver(mExternalStorageReceiver);
}</code>
            </example>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#getExternalStorageDirectory()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.OS.Environment.ExternalStorageState" />
        <altmember cref="P:Android.OS.Environment.IsExternalStorageRemovable" />
      </Docs>
    </Member>
    <Member MemberName="ExternalStorageState">
      <MemberSignature Language="C#" Value="public static string ExternalStorageState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ExternalStorageState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getExternalStorageState", "()Ljava/lang/String;", "GetGetExternalStorageStateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current state of the primary "external" storage device.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the current state of the primary "external" storage device.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#getExternalStorageState()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="P:Android.OS.Environment.ExternalStorageDirectory" />
      </Docs>
    </Member>
    <Member MemberName="GetExternalStoragePublicDirectory">
      <MemberSignature Language="C#" Value="public static Java.IO.File GetExternalStoragePublicDirectory (string type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.IO.File GetExternalStoragePublicDirectory(string type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getExternalStoragePublicDirectory", "(Ljava/lang/String;)Ljava/io/File;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of storage directory to return.  Should be one of
 <c><see cref="P:Android.OS.Environment.DirectoryMusic" /></c>, <c><see cref="P:Android.OS.Environment.DirectoryPodcasts" /></c>,
 <c><see cref="P:Android.OS.Environment.DirectoryRingtones" /></c>, <c><see cref="P:Android.OS.Environment.DirectoryAlarms" /></c>,
 <c><see cref="P:Android.OS.Environment.DirectoryNotifications" /></c>, <c><see cref="P:Android.OS.Environment.DirectoryPictures" /></c>,
 <c><see cref="P:Android.OS.Environment.DirectoryMovies" /></c>, <c><see cref="P:Android.OS.Environment.DirectoryDownloads" /></c>, or
 <c><see cref="P:Android.OS.Environment.DirectoryDcim" /></c>.  May not be null.</param>
        <summary>Get a top-level public external storage directory for placing files of
 a particular type.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get a top-level public external storage directory for placing files of
 a particular type.  This is where the user will typically place and
 manage their own files, so you should be careful about what you put here
 to ensure you don't erase their files or get in the way of their own
 organization.
 
 <example><code lang="java">void createExternalStoragePublicPicture() {
    // Create a path where we will place our picture in the user's
    // public pictures directory.  Note that you should be careful about
    // what you place here, since the user often manages these files.  For
    // pictures and other media owned by the application, consider
    // Context.getExternalMediaDir().
    File path = Environment.getExternalStoragePublicDirectory(
            Environment.DIRECTORY_PICTURES);
    File file = new File(path, "DemoPicture.jpg");

    try {
        // Make sure the Pictures directory exists.
        path.mkdirs();

        // Very simple code to copy a picture from the application's
        // resource into the external file.  Note that this code does
        // no error checking, and assumes the picture is small (does not
        // try to copy it in chunks).  Note that if external storage is
        // not currently mounted this will silently fail.
        InputStream is = getResources().openRawResource(R.drawable.balloons);
        OutputStream os = new FileOutputStream(file);
        byte[] data = new byte[is.available()];
        is.read(data);
        os.write(data);
        is.close();
        os.close();

        // Tell the media scanner about the new file so that it is
        // immediately available to the user.
        MediaScannerConnection.scanFile(this,
                new String[] { file.toString() }, null,
                new MediaScannerConnection.OnScanCompletedListener() {
            public void onScanCompleted(String path, Uri uri) {
                Log.i("ExternalStorage", "Scanned " + path + ":");
                Log.i("ExternalStorage", "-&gt; uri=" + uri);
            }
        });
    } catch (IOException e) {
        // Unable to create file, likely because external storage is
        // not currently mounted.
        Log.w("ExternalStorage", "Error writing " + file, e);
    }
}

void deleteExternalStoragePublicPicture() {
    // Create a path where we will place our picture in the user's
    // public pictures directory and delete the file.  If external
    // storage is not currently mounted this will fail.
    File path = Environment.getExternalStoragePublicDirectory(
            Environment.DIRECTORY_PICTURES);
    File file = new File(path, "DemoPicture.jpg");
    file.delete();
}

boolean hasExternalStoragePublicPicture() {
    // Create a path where we will place our picture in the user's
    // public pictures directory and check if the file exists.  If
    // external storage is not currently mounted this will think the
    // picture doesn't exist.
    File path = Environment.getExternalStoragePublicDirectory(
            Environment.DIRECTORY_PICTURES);
    File file = new File(path, "DemoPicture.jpg");
    return file.exists();
}</code></example></para>
          <para tool="javadoc-to-mdoc">On devices with multiple users (as described by <c><see cref="T:Android.OS.UserManager" /></c>),
 each user has their own isolated external storage. Applications only
 have access to the external storage for the user they're running as.</para>
          <para tool="javadoc-to-mdoc">Here is an example of typical code to manipulate a picture on
 the public external storage:</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#getExternalStoragePublicDirectory(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="GetExternalStorageState">
      <MemberSignature Language="C#" Value="public static string GetExternalStorageState (Java.IO.File path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetExternalStorageState(class Java.IO.File path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getExternalStorageState", "(Ljava/io/File;)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.IO.File" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>Returns the current state of the storage device that provides the given
 path.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the current state of the storage device that provides the given
 path.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#getExternalStorageState(java.io.File)" target="_blank">[Android Documentation]</a>
              <since version="Added in API level 21" />
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStorageState">
      <MemberSignature Language="C#" Value="public static string GetStorageState (Java.IO.File path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetStorageState(class Java.IO.File path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getStorageState", "(Ljava/io/File;)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.IO.File" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#getStorageState(java.io.File)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsExternalStorageEmulated">
      <MemberSignature Language="C#" Value="public static bool InvokeIsExternalStorageEmulated (Java.IO.File path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool InvokeIsExternalStorageEmulated(class Java.IO.File path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isExternalStorageEmulated", "(Ljava/io/File;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.IO.File" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>Returns whether the storage device that provides the given path is
 emulated.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the storage device that provides the given path is
 emulated. If true, data stored on this device will be stored on a portion
 of the internal storage system.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#isExternalStorageEmulated(java.io.File)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the path is not a valid storage
             device.
</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsExternalStorageRemovable">
      <MemberSignature Language="C#" Value="public static bool InvokeIsExternalStorageRemovable (Java.IO.File path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool InvokeIsExternalStorageRemovable(class Java.IO.File path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isExternalStorageRemovable", "(Ljava/io/File;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.IO.File" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>Returns whether the storage device that provides the given path is
 removable.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the storage device that provides the given path is
 removable.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#isExternalStorageRemovable(java.io.File)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the path is not a valid storage
             device.
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsExternalStorageEmulated">
      <MemberSignature Language="C#" Value="public static bool IsExternalStorageEmulated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsExternalStorageEmulated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isExternalStorageEmulated", "()Z", "GetIsExternalStorageEmulatedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the primary "external" storage device is emulated.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the primary "external" storage device is emulated. If
 true, data stored on this device will be stored on a portion of the
 internal storage system.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#isExternalStorageEmulated()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
        <altmember cref="M:Android.App.Admin.DevicePolicyManager.SetStorageEncryption(Android.Content.ComponentName, System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsExternalStorageRemovable">
      <MemberSignature Language="C#" Value="public static bool IsExternalStorageRemovable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsExternalStorageRemovable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isExternalStorageRemovable", "()Z", "GetIsExternalStorageRemovableHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the primary "external" storage device is removable.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether the primary "external" storage device is removable.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#isExternalStorageRemovable()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="MediaBadRemoval">
      <MemberSignature Language="C#" Value="public const string MediaBadRemoval;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MediaBadRemoval" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEDIA_BAD_REMOVAL")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Storage state if the media was removed before it was unmounted.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Storage state if the media was removed before it was unmounted.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#MEDIA_BAD_REMOVAL" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.Environment.GetExternalStorageState(Java.IO.File)" />
      </Docs>
    </Member>
    <Member MemberName="MediaChecking">
      <MemberSignature Language="C#" Value="public const string MediaChecking;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MediaChecking" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEDIA_CHECKING")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Storage state if the media is present and being disk-checked.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Storage state if the media is present and being disk-checked.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#MEDIA_CHECKING" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.OS.Environment.GetExternalStorageState(Java.IO.File)" />
      </Docs>
    </Member>
    <Member MemberName="MediaMounted">
      <MemberSignature Language="C#" Value="public const string MediaMounted;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MediaMounted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEDIA_MOUNTED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Storage state if the media is present and mounted at its mount point with
 read/write access.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Storage state if the media is present and mounted at its mount point with
 read/write access.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#MEDIA_MOUNTED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.Environment.GetExternalStorageState(Java.IO.File)" />
      </Docs>
    </Member>
    <Member MemberName="MediaMountedReadOnly">
      <MemberSignature Language="C#" Value="public const string MediaMountedReadOnly;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MediaMountedReadOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEDIA_MOUNTED_READ_ONLY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Storage state if the media is present and mounted at its mount point with
 read-only access.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Storage state if the media is present and mounted at its mount point with
 read-only access.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#MEDIA_MOUNTED_READ_ONLY" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.Environment.GetExternalStorageState(Java.IO.File)" />
      </Docs>
    </Member>
    <Member MemberName="MediaNofs">
      <MemberSignature Language="C#" Value="public const string MediaNofs;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MediaNofs" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEDIA_NOFS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Storage state if the media is present but is blank or is using an
 unsupported filesystem.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Storage state if the media is present but is blank or is using an
 unsupported filesystem.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#MEDIA_NOFS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <altmember cref="M:Android.OS.Environment.GetExternalStorageState(Java.IO.File)" />
      </Docs>
    </Member>
    <Member MemberName="MediaRemoved">
      <MemberSignature Language="C#" Value="public const string MediaRemoved;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MediaRemoved" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEDIA_REMOVED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Storage state if the media is not present.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Storage state if the media is not present.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#MEDIA_REMOVED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.Environment.GetExternalStorageState(Java.IO.File)" />
      </Docs>
    </Member>
    <Member MemberName="MediaShared">
      <MemberSignature Language="C#" Value="public const string MediaShared;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MediaShared" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEDIA_SHARED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Storage state if the media is present not mounted, and shared via USB
 mass storage.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Storage state if the media is present not mounted, and shared via USB
 mass storage.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#MEDIA_SHARED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.Environment.GetExternalStorageState(Java.IO.File)" />
      </Docs>
    </Member>
    <Member MemberName="MediaUnknown">
      <MemberSignature Language="C#" Value="public const string MediaUnknown;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MediaUnknown" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEDIA_UNKNOWN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Unknown storage state, such as when a path isn't backed by known storage
 media.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Unknown storage state, such as when a path isn't backed by known storage
 media.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#MEDIA_UNKNOWN" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.OS.Environment.GetExternalStorageState(Java.IO.File)" />
      </Docs>
    </Member>
    <Member MemberName="MediaUnmountable">
      <MemberSignature Language="C#" Value="public const string MediaUnmountable;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MediaUnmountable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEDIA_UNMOUNTABLE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Storage state if the media is present but cannot be mounted.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Storage state if the media is present but cannot be mounted. Typically
 this happens if the file system on the media is corrupted.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#MEDIA_UNMOUNTABLE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.Environment.GetExternalStorageState(Java.IO.File)" />
      </Docs>
    </Member>
    <Member MemberName="MediaUnmounted">
      <MemberSignature Language="C#" Value="public const string MediaUnmounted;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MediaUnmounted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEDIA_UNMOUNTED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Storage state if the media is present but not mounted.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Storage state if the media is present but not mounted.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#MEDIA_UNMOUNTED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.Environment.GetExternalStorageState(Java.IO.File)" />
      </Docs>
    </Member>
    <Member MemberName="RootDirectory">
      <MemberSignature Language="C#" Value="public static Java.IO.File RootDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.IO.File RootDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRootDirectory", "()Ljava/io/File;", "GetGetRootDirectoryHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.IO.File</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return root of the "system" partition holding the core Android OS.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return root of the "system" partition holding the core Android OS.
 Always present and mounted read-only.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Environment.html#getRootDirectory()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>