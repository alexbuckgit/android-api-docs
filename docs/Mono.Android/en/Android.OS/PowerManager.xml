<Type Name="PowerManager" FullName="Android.OS.PowerManager">
  <TypeSignature Language="C#" Value="public class PowerManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PowerManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/os/PowerManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>This class gives you control of the power state of the device.</summary>
    <remarks />
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PowerManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ActionPowerSaveModeChanged">
      <MemberSignature Language="C#" Value="public const string ActionPowerSaveModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionPowerSaveModeChanged" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_POWER_SAVE_MODE_CHANGED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Intent that is broadcast when the state of <c><see cref="P:Android.OS.PowerManager.IsPowerSaveMode" /></c> changes.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static Android.OS.PowerManager FromContext (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.OS.PowerManager FromContext(class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.OS.PowerManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GoToSleep">
      <MemberSignature Language="C#" Value="public virtual void GoToSleep (long time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GoToSleep(int64 time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("goToSleep", "(J)V", "GetGoToSleep_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="time">The time when the request to go to sleep was issued, in the
 <c><see cref="M:Android.OS.SystemClock.UptimeMillis" /></c> time base.  This timestamp is used to correctly
 order the go to sleep request with other power management functions.  It should be set
 to the timestamp of the input event that caused the request to go to sleep.</param>
        <summary>Forces the device to go to sleep.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.PowerManager.UserActivity(System.Int64, System.Boolean)" />
        <altmember cref="M:Android.OS.PowerManager.WakeUp(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="IsInteractive">
      <MemberSignature Language="C#" Value="public virtual bool IsInteractive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInteractive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isInteractive", "()Z", "GetIsInteractiveHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the device is in an interactive state.</summary>
        <value>To be added.</value>
        <remarks />
        <altmember cref="F:Android.Content.Intent.ActionScreenOn" />
        <altmember cref="F:Android.Content.Intent.ActionScreenOff" />
      </Docs>
      <since version="Added in API level 20" />
    </Member>
    <Member MemberName="IsPowerSaveMode">
      <MemberSignature Language="C#" Value="public virtual bool IsPowerSaveMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPowerSaveMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isPowerSaveMode", "()Z", "GetIsPowerSaveModeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the device is currently in power save mode.</summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsScreenOn">
      <MemberSignature Language="C#" Value="public virtual bool IsScreenOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsScreenOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isScreenOn", "()Z", "GetIsScreenOnHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the device is in an interactive state.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 7" />
      </Docs>
    </Member>
    <Member MemberName="IsWakeLockLevelSupported">
      <MemberSignature Language="C#" Value="public virtual bool IsWakeLockLevelSupported (int level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsWakeLockLevelSupported(int32 level) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isWakeLockLevelSupported", "(I)Z", "GetIsWakeLockLevelSupported_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="level">The wake lock level to check.</param>
        <summary>Returns true if the specified wake lock level is supported.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="NewWakeLock">
      <MemberSignature Language="C#" Value="public virtual Android.OS.PowerManager.WakeLock NewWakeLock (Android.OS.WakeLockFlags levelAndFlags, string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.PowerManager/WakeLock NewWakeLock(valuetype Android.OS.WakeLockFlags levelAndFlags, string tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newWakeLock", "(ILjava/lang/String;)Landroid/os/PowerManager$WakeLock;", "GetNewWakeLock_ILjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.PowerManager+WakeLock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="Android.OS.WakeLockFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="levelAndFlags">Combination of wake lock level and flag values defining
 the requested behavior of the WakeLock.</param>
        <param name="tag">Your class name (or other tag) for debugging purposes.</param>
        <summary>Creates a new wake lock with the specified level and flags.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Reboot">
      <MemberSignature Language="C#" Value="public virtual void Reboot (string reason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reboot(string reason) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reboot", "(Ljava/lang/String;)V", "GetReboot_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reason">code to pass to the kernel (e.g., "recovery") to
               request special boot modes, or null.
</param>
        <summary>Reboot the device.</summary>
        <remarks />
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UserActivity">
      <MemberSignature Language="C#" Value="public virtual void UserActivity (long when, bool noChangeLights);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UserActivity(int64 when, bool noChangeLights) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("userActivity", "(JZ)V", "GetUserActivity_JZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.Int64" />
        <Parameter Name="noChangeLights" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="when">The time of the user activity, in the <c><see cref="M:Android.OS.SystemClock.UptimeMillis" /></c>
 time base.  This timestamp is used to correctly order the user activity request with
 other power management functions.  It should be set
 to the timestamp of the input event that caused the user activity.</param>
        <param name="noChangeLights">If true, does not cause the keyboard backlight to turn on
 because of this event.  This is set when the power key is pressed.
 We want the device to stay on while the button is down, but we're about
 to turn off the screen so we don't want the keyboard backlight to turn on again.
 Otherwise the lights flash on and then off and it looks weird.</param>
        <summary>Notifies the power manager that user activity happened.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.PowerManager.WakeUp(System.Int64)" />
        <altmember cref="M:Android.OS.PowerManager.GoToSleep(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="WakeUp">
      <MemberSignature Language="C#" Value="public virtual void WakeUp (long time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WakeUp(int64 time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("wakeUp", "(J)V", "GetWakeUp_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="time">The time when the request to wake up was issued, in the
 <c><see cref="M:Android.OS.SystemClock.UptimeMillis" /></c> time base.  This timestamp is used to correctly
 order the wake up request with other power management functions.  It should be set
 to the timestamp of the input event that caused the request to wake up.</param>
        <summary>Forces the device to wake up from sleep.</summary>
        <remarks />
        <since version="Added in API level 17" />
        <altmember cref="M:Android.OS.PowerManager.UserActivity(System.Int64, System.Boolean)" />
        <altmember cref="M:Android.OS.PowerManager.GoToSleep(System.Int64)" />
      </Docs>
    </Member>
  </Members>
</Type>
