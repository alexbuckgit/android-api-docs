<Type Name="StrictMode+VmPolicy+Builder" FullName="Android.OS.StrictMode+VmPolicy+Builder">
  <TypeSignature Language="C#" Value="public sealed class StrictMode.VmPolicy.Builder : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit StrictMode/VmPolicy/Builder extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/os/StrictMode$VmPolicy$Builder", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Creates <c><see cref="T:Android.OS.StrictMode+VmPolicy" /></c> instances.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Creates <c><see cref="T:Android.OS.StrictMode+VmPolicy" /></c> instances.  Methods whose names start
 with <c>detect</c> specify what problems we should look
 for.  Methods whose names start with <c>penalty</c> specify what
 we should do when we detect a problem.

 </para>
      <para tool="javadoc-to-mdoc">You can call as many <c>detect</c> and <c>penalty</c>
 methods as you like. Currently order is insignificant: all
 penalties apply to all detected problems.

 </para>
      <para tool="javadoc-to-mdoc">For example, detect everything and log anything that's found:
 <example><code lang="java">
 StrictMode.VmPolicy policy = new StrictMode.VmPolicy.Builder()
     .detectAll()
     .penaltyLog()
     .build();
 StrictMode.setVmPolicy(policy);
 </code></example></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 9" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Builder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#StrictMode.VmPolicy.Builder()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Builder (Android.OS.StrictMode.VmPolicy base);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.OS.StrictMode/VmPolicy base) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/os/StrictMode$VmPolicy;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="base" Type="Android.OS.StrictMode+VmPolicy" />
      </Parameters>
      <Docs>
        <param name="base">To be added.</param>
        <summary>Build upon an existing VmPolicy.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Build upon an existing VmPolicy.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#StrictMode.VmPolicy.Builder(android.os.StrictMode.VmPolicy)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Build">
      <MemberSignature Language="C#" Value="public Android.OS.StrictMode.VmPolicy Build ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.OS.StrictMode/VmPolicy Build() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("build", "()Landroid/os/StrictMode$VmPolicy;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.StrictMode+VmPolicy</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Construct the VmPolicy instance.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Construct the VmPolicy instance.

 </para>
          <para tool="javadoc-to-mdoc">Note: if no penalties are enabled before calling
 <c>build</c>, <c><see cref="M:Android.OS.StrictMode.VmPolicy.Builder.PenaltyLog" /></c> is implicitly
 set.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#build()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="DetectActivityLeaks">
      <MemberSignature Language="C#" Value="public Android.OS.StrictMode.VmPolicy.Builder DetectActivityLeaks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.OS.StrictMode/VmPolicy/Builder DetectActivityLeaks() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("detectActivityLeaks", "()Landroid/os/StrictMode$VmPolicy$Builder;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.StrictMode+VmPolicy+Builder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Detect leaks of <c><see cref="T:Android.App.Activity" /></c> subclasses.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Detect leaks of <c><see cref="T:Android.App.Activity" /></c> subclasses.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectActivityLeaks()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="DetectAll">
      <MemberSignature Language="C#" Value="public Android.OS.StrictMode.VmPolicy.Builder DetectAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.OS.StrictMode/VmPolicy/Builder DetectAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("detectAll", "()Landroid/os/StrictMode$VmPolicy$Builder;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.StrictMode+VmPolicy+Builder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Detect everything that's potentially suspect.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Detect everything that's potentially suspect.

 </para>
          <para tool="javadoc-to-mdoc">In the Honeycomb release this includes leaks of
 SQLite cursors, Activities, and other closable objects
 but will likely expand in future releases.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectAll()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="DetectFileUriExposure">
      <MemberSignature Language="C#" Value="public Android.OS.StrictMode.VmPolicy.Builder DetectFileUriExposure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.OS.StrictMode/VmPolicy/Builder DetectFileUriExposure() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("detectFileUriExposure", "()Landroid/os/StrictMode$VmPolicy$Builder;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.StrictMode+VmPolicy+Builder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Detect when a <c>file://</c><c><see cref="T:Android.Net.Uri" /></c> is exposed beyond this
 app.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Detect when a <c>file://</c><c><see cref="T:Android.Net.Uri" /></c> is exposed beyond this
 app. The receiving app may not have access to the sent path.
 Instead, when sharing files between apps, <c>content://</c>
 should be used with permission grants.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectFileUriExposure()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="DetectLeakedClosableObjects">
      <MemberSignature Language="C#" Value="public Android.OS.StrictMode.VmPolicy.Builder DetectLeakedClosableObjects ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.OS.StrictMode/VmPolicy/Builder DetectLeakedClosableObjects() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("detectLeakedClosableObjects", "()Landroid/os/StrictMode$VmPolicy$Builder;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.StrictMode+VmPolicy+Builder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Detect when an <c><see cref="T:Java.IO.ICloseable" /></c> or other
 object with a explict termination method is finalized
 without having been closed.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Detect when an <c><see cref="T:Java.IO.ICloseable" /></c> or other
 object with a explict termination method is finalized
 without having been closed.

 </para>
          <para tool="javadoc-to-mdoc">You always want to explicitly close such objects to
 avoid unnecessary resources leaks.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectLeakedClosableObjects()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="DetectLeakedRegistrationObjects">
      <MemberSignature Language="C#" Value="public Android.OS.StrictMode.VmPolicy.Builder DetectLeakedRegistrationObjects ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.OS.StrictMode/VmPolicy/Builder DetectLeakedRegistrationObjects() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("detectLeakedRegistrationObjects", "()Landroid/os/StrictMode$VmPolicy$Builder;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.StrictMode+VmPolicy+Builder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Detect when a <c><see cref="T:Android.Content.BroadcastReceiver" /></c> or
 <c><see cref="T:Android.Content.IServiceConnection" /></c> is leaked during <c><see cref="T:Android.Content.Context" /></c>
 teardown.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Detect when a <c><see cref="T:Android.Content.BroadcastReceiver" /></c> or
 <c><see cref="T:Android.Content.IServiceConnection" /></c> is leaked during <c><see cref="T:Android.Content.Context" /></c>
 teardown.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectLeakedRegistrationObjects()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="DetectLeakedSqlLiteObjects">
      <MemberSignature Language="C#" Value="public Android.OS.StrictMode.VmPolicy.Builder DetectLeakedSqlLiteObjects ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.OS.StrictMode/VmPolicy/Builder DetectLeakedSqlLiteObjects() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("detectLeakedSqlLiteObjects", "()Landroid/os/StrictMode$VmPolicy$Builder;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.StrictMode+VmPolicy+Builder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Detect when an
 <c><see cref="T:Android.Database.Sqlite.SQLiteCursor" /></c> or other
 SQLite object is finalized without having been closed.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Detect when an
 <c><see cref="T:Android.Database.Sqlite.SQLiteCursor" /></c> or other
 SQLite object is finalized without having been closed.

 </para>
          <para tool="javadoc-to-mdoc">You always want to explicitly close your SQLite
 cursors to avoid unnecessary database contention and
 temporary memory leaks.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectLeakedSqlLiteObjects()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="PenaltyDeath">
      <MemberSignature Language="C#" Value="public Android.OS.StrictMode.VmPolicy.Builder PenaltyDeath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.OS.StrictMode/VmPolicy/Builder PenaltyDeath() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("penaltyDeath", "()Landroid/os/StrictMode$VmPolicy$Builder;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.StrictMode+VmPolicy+Builder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crashes the whole process on violation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Crashes the whole process on violation.  This penalty runs at
 the end of all enabled penalties so yo you'll still get
 your logging or other violations before the process dies.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#penaltyDeath()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="PenaltyDropBox">
      <MemberSignature Language="C#" Value="public Android.OS.StrictMode.VmPolicy.Builder PenaltyDropBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.OS.StrictMode/VmPolicy/Builder PenaltyDropBox() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("penaltyDropBox", "()Landroid/os/StrictMode$VmPolicy$Builder;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.StrictMode+VmPolicy+Builder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enable detected violations log a stacktrace and timing data
 to the <c><see cref="T:Android.OS.DropBoxManager" /></c> on policy
 violation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Enable detected violations log a stacktrace and timing data
 to the <c><see cref="T:Android.OS.DropBoxManager" /></c> on policy
 violation.  Intended mostly for platform integrators doing
 beta user field data collection.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#penaltyDropBox()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="PenaltyLog">
      <MemberSignature Language="C#" Value="public Android.OS.StrictMode.VmPolicy.Builder PenaltyLog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.OS.StrictMode/VmPolicy/Builder PenaltyLog() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("penaltyLog", "()Landroid/os/StrictMode$VmPolicy$Builder;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.StrictMode+VmPolicy+Builder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Log detected violations to the system log.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Log detected violations to the system log.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#penaltyLog()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="SetClassInstanceLimit">
      <MemberSignature Language="C#" Value="public Android.OS.StrictMode.VmPolicy.Builder SetClassInstanceLimit (Java.Lang.Class klass, int instanceLimit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.OS.StrictMode/VmPolicy/Builder SetClassInstanceLimit(class Java.Lang.Class klass, int32 instanceLimit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setClassInstanceLimit", "(Ljava/lang/Class;I)Landroid/os/StrictMode$VmPolicy$Builder;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.StrictMode+VmPolicy+Builder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="klass" Type="Java.Lang.Class" />
        <Parameter Name="instanceLimit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="klass">To be added.</param>
        <param name="instanceLimit">To be added.</param>
        <summary>Set an upper bound on how many instances of a class can be in memory
 at once.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Set an upper bound on how many instances of a class can be in memory
 at once.  Helps to prevent object leaks.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#setClassInstanceLimit(java.lang.Class, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
