<Type Name="Looper" FullName="Android.OS.Looper">
  <TypeSignature Language="C#" Value="public class Looper : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Looper extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/os/Looper", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Class used to run a message loop for a thread.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Class used to run a message loop for a thread.  Threads by default do
 not have a message loop associated with them; to create one, call
 <c><see cref="M:Android.OS.Looper.Prepare" /></c> in the thread that is to run the loop, and then
 <c><see cref="M:Android.OS.Looper.Loop" /></c> to have it process messages until the loop is stopped.
 
 </para>
      <para tool="javadoc-to-mdoc">Most interaction with a message loop is through the
 <c><see cref="T:Android.OS.Handler" /></c> class.
 
 </para>
      <para tool="javadoc-to-mdoc">This is a typical example of the implementation of a Looper thread,
 using the separation of <c><see cref="M:Android.OS.Looper.Prepare" /></c> and <c><see cref="M:Android.OS.Looper.Loop" /></c> to create an
 initial Handler to communicate with the Looper.

 <example><code lang="java">
  class LooperThread extends Thread {
      public Handler mHandler;

      public void run() {
          Looper.prepare();

          mHandler = new Handler() {
              public void handleMessage(Message msg) {
                  // process incoming messages here
              }
          };

          Looper.loop();
      }
  }</code></example></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/os/Looper.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Looper (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dump">
      <MemberSignature Language="C#" Value="public virtual void Dump (Android.Util.IPrinter pw, string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dump(class Android.Util.IPrinter pw, string prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dump", "(Landroid/util/Printer;Ljava/lang/String;)V", "GetDump_Landroid_util_Printer_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pw" Type="Android.Util.IPrinter" />
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pw">To be added.</param>
        <param name="prefix">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Looper.html#dump(android.util.Printer, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static void Loop ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Loop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("loop", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Run the message queue in this thread.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Run the message queue in this thread. Be sure to call
 <c><see cref="M:Android.OS.Looper.Quit" /></c> to end the loop.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Looper.html#loop()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MainLooper">
      <MemberSignature Language="C#" Value="public static Android.OS.Looper MainLooper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.OS.Looper MainLooper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMainLooper", "()Landroid/os/Looper;", "GetGetMainLooperHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.Looper</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the application's main looper, which lives in the main thread of the application.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the application's main looper, which lives in the main thread of the application.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Looper.html#getMainLooper()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MyLooper">
      <MemberSignature Language="C#" Value="public static Android.OS.Looper MyLooper ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.OS.Looper MyLooper() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("myLooper", "()Landroid/os/Looper;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.Looper</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Return the Looper object associated with the current thread.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the Looper object associated with the current thread.  Returns
 null if the calling thread is not associated with a Looper.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Looper.html#myLooper()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MyQueue">
      <MemberSignature Language="C#" Value="public static Android.OS.MessageQueue MyQueue ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.OS.MessageQueue MyQueue() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("myQueue", "()Landroid/os/MessageQueue;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.MessageQueue</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Return the <c><see cref="T:Android.OS.MessageQueue" /></c> object associated with the current
 thread.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the <c><see cref="T:Android.OS.MessageQueue" /></c> object associated with the current
 thread.  This must be called from a thread running a Looper, or a
 NullPointerException will be thrown.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Looper.html#myQueue()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public static void Prepare ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Prepare() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("prepare", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialize the current thread as a looper.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Initialize the current thread as a looper.
 This gives you a chance to create handlers that then reference
 this looper, before actually starting the loop. Be sure to call
 <c><see cref="M:Android.OS.Looper.Loop" /></c> after calling this method, and end it by calling
 <c><see cref="M:Android.OS.Looper.Quit" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Looper.html#prepare()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PrepareMainLooper">
      <MemberSignature Language="C#" Value="public static void PrepareMainLooper ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PrepareMainLooper() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("prepareMainLooper", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialize the current thread as a looper, marking it as an
 application's main looper.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Initialize the current thread as a looper, marking it as an
 application's main looper. The main looper for your application
 is created by the Android environment, so you should never need
 to call this function yourself.  See also: <c><see cref="M:Android.OS.Looper.Prepare" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Looper.html#prepareMainLooper()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Quit">
      <MemberSignature Language="C#" Value="public virtual void Quit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Quit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("quit", "()V", "GetQuitHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quits the looper.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Quits the looper.
 </para>
          <para tool="javadoc-to-mdoc">
 Causes the <c><see cref="M:Android.OS.Looper.Loop" /></c> method to terminate without processing any
 more messages in the message queue.
 </para>
          <para tool="javadoc-to-mdoc">
 Any attempt to post messages to the queue after the looper is asked to quit will fail.
 For example, the <c><see cref="M:Android.OS.Handler.SendMessage(Android.OS.Message)" /></c> method will return false.
 </para>
          <para tool="javadoc-to-mdoc">
 Using this method may be unsafe because some messages may not be delivered
 before the looper terminates.  Consider using <c><see cref="M:Android.OS.Looper.QuitSafely" /></c> instead to ensure
 that all pending work is completed in an orderly manner.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Looper.html#quit()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.OS.Looper.QuitSafely" />
      </Docs>
    </Member>
    <Member MemberName="QuitSafely">
      <MemberSignature Language="C#" Value="public virtual void QuitSafely ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void QuitSafely() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("quitSafely", "()V", "GetQuitSafelyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quits the looper safely.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Quits the looper safely.
 </para>
          <para tool="javadoc-to-mdoc">
 Causes the <c><see cref="M:Android.OS.Looper.Loop" /></c> method to terminate as soon as all remaining messages
 in the message queue that are already due to be delivered have been handled.
 However pending delayed messages with due times in the future will not be
 delivered before the loop terminates.
 </para>
          <para tool="javadoc-to-mdoc">
 Any attempt to post messages to the queue after the looper is asked to quit will fail.
 For example, the <c><see cref="M:Android.OS.Handler.SendMessage(Android.OS.Message)" /></c> method will return false.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Looper.html#quitSafely()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="SetMessageLogging">
      <MemberSignature Language="C#" Value="public virtual void SetMessageLogging (Android.Util.IPrinter printer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMessageLogging(class Android.Util.IPrinter printer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMessageLogging", "(Landroid/util/Printer;)V", "GetSetMessageLogging_Landroid_util_Printer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printer" Type="Android.Util.IPrinter" />
      </Parameters>
      <Docs>
        <param name="printer">A Printer object that will receive log messages, or
 null to disable message logging.
</param>
        <summary>Control logging of messages as they are processed by this Looper.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Control logging of messages as they are processed by this Looper.  If
 enabled, a log message will be written to <format type="text/html"><var>printer</var></format> 
 at the beginning and ending of each message dispatch, identifying the
 target Handler and message contents.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Looper.html#setMessageLogging(android.util.Printer)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Thread Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getThread", "()Ljava/lang/Thread;", "GetGetThreadHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the Thread associated with this Looper.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the Thread associated with this Looper.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/os/Looper.html#getThread()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
