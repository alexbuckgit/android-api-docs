<Type Name="MemoryHandler" FullName="Java.Util.Logging.MemoryHandler">
  <TypeSignature Language="C#" Value="public class MemoryHandler : Java.Util.Logging.Handler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MemoryHandler extends Java.Util.Logging.Handler" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Util.Logging.Handler</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/logging/MemoryHandler", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <c>Handler</c> put the description of log events into a cycled memory
 buffer.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A <c>Handler</c> put the description of log events into a cycled memory
 buffer.
 </para>
      <para tool="javadoc-to-mdoc">
 Mostly this <c>MemoryHandler</c> just puts the given <c>LogRecord</c> into
 the internal buffer and doesn't perform any formatting or any other process.
 When the buffer is full, the earliest buffered records will be discarded.
 </para>
      <para tool="javadoc-to-mdoc">
 Every <c>MemoryHandler</c> has a target handler, and push action can be
 triggered so that all buffered records will be output to the target handler
 and normally the latter will publish the records. After the push action, the
 buffer will be cleared.
 </para>
      <para tool="javadoc-to-mdoc">
 The push method can be called directly, but will also be called automatically
 if a new <c>LogRecord</c> is added that has a level greater than or
 equal to than the value defined for the property
 java.util.logging.MemoryHandler.push.
 </para>
      <para tool="javadoc-to-mdoc">
        <c>MemoryHandler</c> will read following <c>LogManager</c> properties for
 initialization, if given properties are not defined or has invalid values,
 default value will be used.
 <list type="bullet"><item><term>java.util.logging.MemoryHandler.filter specifies the <c>Filter</c>
 class name, defaults to no <c>Filter</c>.</term></item><item><term>java.util.logging.MemoryHandler.level specifies the level for this
 <c>Handler</c>, defaults to <c>Level.ALL</c>.</term></item><item><term>java.util.logging.MemoryHandler.push specifies the push level, defaults
 to level.SEVERE.</term></item><item><term>java.util.logging.MemoryHandler.size specifies the buffer size in number
 of <c>LogRecord</c>, defaults to 1000.</term></item><item><term>java.util.logging.MemoryHandler.target specifies the class of the target
 <c>Handler</c>, no default value, which means this property must be
 specified either by property setting or by constructor.</term></item></list></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/logging/MemoryHandler.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, construct and init a <c>MemoryHandler</c> using
 <c>LogManager</c> properties or default values.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Default constructor, construct and init a <c>MemoryHandler</c> using
 <c>LogManager</c> properties or default values.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/MemoryHandler.html#MemoryHandler()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.RuntimeException">if property value are invalid and no default value could be
             used.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MemoryHandler (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryHandler (Java.Util.Logging.Handler target, int size, Java.Util.Logging.Level pushLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Util.Logging.Handler target, int32 size, class Java.Util.Logging.Level pushLevel) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/util/logging/Handler;ILjava/util/logging/Level;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="Java.Util.Logging.Handler" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="pushLevel" Type="Java.Util.Logging.Level" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="size">To be added.</param>
        <param name="pushLevel">To be added.</param>
        <summary>Construct and init a <c>MemoryHandler</c> using given target, size and
 push level, other properties using <c>LogManager</c> properties or
 default values.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Construct and init a <c>MemoryHandler</c> using given target, size and
 push level, other properties using <c>LogManager</c> properties or
 default values.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/MemoryHandler.html#MemoryHandler(java.util.logging.Handler, int, java.util.logging.Level)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>size &lt;= 0</c></exception>
        <exception cref="T:Java.Lang.RuntimeException">if property value are invalid and no default value could be
             used.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "GetCloseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Close this handler and target handler, free all associated resources.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Close this handler and target handler, free all associated resources.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/MemoryHandler.html#close()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("flush", "()V", "GetFlushHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Call target handler to flush any buffered output.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Call target handler to flush any buffered output. Note that this doesn't
 cause this <c>MemoryHandler</c> to push.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/MemoryHandler.html#flush()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public override void Publish (Java.Util.Logging.LogRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Publish(class Java.Util.Logging.LogRecord record) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("publish", "(Ljava/util/logging/LogRecord;)V", "GetPublish_Ljava_util_logging_LogRecord_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Java.Util.Logging.LogRecord" />
      </Parameters>
      <Docs>
        <param name="record">the log record
</param>
        <summary>Put a given <c>LogRecord</c> into internal buffer.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Put a given <c>LogRecord</c> into internal buffer. If given record is
 not loggable, just return. Otherwise it is stored in the buffer.
 Furthermore if the record's level is not less than the push level, the
 push action is triggered to output all the buffered records to the target
 handler, and the target handler will publish them.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/MemoryHandler.html#publish(java.util.logging.LogRecord)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public virtual void Push ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Push() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("push", "()V", "GetPushHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Triggers a push action to output all buffered records to the target handler,
 and the target handler will publish them.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Triggers a push action to output all buffered records to the target handler,
 and the target handler will publish them. Then the buffer is cleared.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/MemoryHandler.html#push()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PushLevel">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Logging.Level PushLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.Logging.Level PushLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPushLevel", "()Ljava/util/logging/Level;", "GetGetPushLevelHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setPushLevel", "(Ljava/util/logging/Level;)V", "GetSetPushLevel_Ljava_util_logging_Level_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Logging.Level</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the push level.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/java/util/logging/MemoryHandler.html#getPushLevel()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Return the push level.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/java/util/logging/MemoryHandler.html#setPushLevel(java.util.logging.Level)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Set the push level. The push level is used to check the push action
 triggering. When a new <c>LogRecord</c> is put into the internal
 buffer and its level is not less than the push level, the push action
 will be triggered. Note that set new push level won't trigger push action.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
