<Type Name="SocketHandler" FullName="Java.Util.Logging.SocketHandler">
  <TypeSignature Language="C#" Value="public class SocketHandler : Java.Util.Logging.StreamHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SocketHandler extends Java.Util.Logging.StreamHandler" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Util.Logging.StreamHandler</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/logging/SocketHandler", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A handler that writes log messages to a socket connection.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A handler that writes log messages to a socket connection.
 </para>
      <para tool="javadoc-to-mdoc">
 This handler reads the following properties from the log manager to
 initialize itself:
 <list type="bullet"><item><term>java.util.logging.ConsoleHandler.level specifies the logging level,
 defaults to <c>Level.ALL</c> if this property is not found or has an invalid
 value.
 </term></item><item><term>java.util.logging.SocketHandler.filter specifies the name of the filter
 class to be associated with this handler, defaults to <c>null</c> if this
 property is not found or has an invalid value.
 </term></item><item><term>java.util.logging.SocketHandler.formatter specifies the name of the
 formatter class to be associated with this handler, defaults to
 <c>java.util.logging.XMLFormatter</c> if this property is not found or has
 an invalid value.
 </term></item><item><term>java.util.logging.SocketHandler.encoding specifies the encoding this
 handler will use to encode log messages, defaults to <c>null</c> if this
 property is not found or has an invalid value.
 </term></item><item><term>java.util.logging.SocketHandler.host specifies the name of the host that
 this handler should connect to. There's no default value for this property.
 </term></item><item><term>java.util.logging.SocketHandler.encoding specifies the port number that
 this handler should connect to. There's no default value for this property.
 </term></item></list></para>
      <para tool="javadoc-to-mdoc">
 This handler buffers the outgoing messages, but flushes each time a log
 record has been published.
 </para>
      <para tool="javadoc-to-mdoc">
 This class is not thread-safe.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/logging/SocketHandler.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SocketHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Constructs a <c>SocketHandler</c> object using the properties read by
 the log manager, including the host name and port number.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a <c>SocketHandler</c> object using the properties read by
 the log manager, including the host name and port number. Default
 formatting uses the XMLFormatter class and level is set to ALL.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/SocketHandler.html#SocketHandler()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if failed to connect to the specified host and port.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the host name or port number is illegal.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SocketHandler (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SocketHandler (string host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string host, int32 port) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host">To be added.</param>
        <param name="port">To be added.</param>
        <summary>Constructs a <c>SocketHandler</c> object using the specified host name
 and port number together with other properties read by the log manager.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a <c>SocketHandler</c> object using the specified host name
 and port number together with other properties read by the log manager.
 Default formatting uses the XMLFormatter class and level is set to ALL.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/SocketHandler.html#SocketHandler(java.lang.String, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if failed to connect to the specified host and port.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the host name or port number is illegal.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>