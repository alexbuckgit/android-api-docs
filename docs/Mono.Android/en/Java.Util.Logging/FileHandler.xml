<Type Name="FileHandler" FullName="Java.Util.Logging.FileHandler">
  <TypeSignature Language="C#" Value="public class FileHandler : Java.Util.Logging.StreamHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileHandler extends Java.Util.Logging.StreamHandler" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Util.Logging.StreamHandler</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/logging/FileHandler", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A <c>FileHandler</c> writes logging records into a specified file or a
 rotating set of files.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A <c>FileHandler</c> writes logging records into a specified file or a
 rotating set of files.
 </para>
      <para tool="javadoc-to-mdoc">
 When a set of files is used and a given amount of data has been written to
 one file, then this file is closed and another file is opened. The name of
 these files are generated by given name pattern, see below for details.
 When the files have all been filled the Handler returns to the first and goes
 through the set again.
 </para>
      <para tool="javadoc-to-mdoc">
 By default, the I/O buffering mechanism is enabled, but when each log record
 is complete, it is flushed out.
 </para>
      <para tool="javadoc-to-mdoc">
        <c>XMLFormatter</c> is the default formatter for <c>FileHandler</c>.
 </para>
      <para tool="javadoc-to-mdoc">
        <c>FileHandler</c> reads the following <c>LogManager</c> properties for
 initialization; if a property is not defined or has an invalid value, a
 default value is used.
 <list type="bullet"><item><term>java.util.logging.FileHandler.append specifies whether this
 <c>FileHandler</c> should append onto existing files, defaults to
 <c>false</c>.</term></item><item><term>java.util.logging.FileHandler.count specifies how many output files to
 rotate, defaults to 1.</term></item><item><term>java.util.logging.FileHandler.filter specifies the <c>Filter</c> class
 name, defaults to no <c>Filter</c>.</term></item><item><term>java.util.logging.FileHandler.formatter specifies the <c>Formatter</c>
 class, defaults to <c>java.util.logging.XMLFormatter</c>.</term></item><item><term>java.util.logging.FileHandler.encoding specifies the character set
 encoding name, defaults to the default platform encoding.</term></item><item><term>java.util.logging.FileHandler.level specifies the level for this
 <c>Handler</c>, defaults to <c>Level.ALL</c>.</term></item><item><term>java.util.logging.FileHandler.limit specifies the maximum number of
 bytes to write to any one file, defaults to zero, which means no limit.</term></item><item><term>java.util.logging.FileHandler.pattern specifies name pattern for the
 output files. See below for details. Defaults to "%h/java%u.log".</term></item></list></para>
      <para tool="javadoc-to-mdoc">
 Name pattern is a string that may include some special substrings, which will
 be replaced to generate output files:
 <list type="bullet"><item><term>"/" represents the local pathname separator</term></item><item><term>"%g" represents the generation number to distinguish rotated logs</term></item><item><term>"%h" represents the home directory of the current user, which is
 specified by "user.home" system property</term></item><item><term>"%t" represents the system's temporary directory</term></item><item><term>"%u" represents a unique number to resolve conflicts</term></item><item><term>"%%" represents the percent sign character '%'</term></item></list></para>
      <para tool="javadoc-to-mdoc">
 Normally, the generation numbers are not larger than the given file count and
 follow the sequence 0, 1, 2.... If the file count is larger than one, but the
 generation field("%g") has not been specified in the pattern, then the
 generation number after a dot will be added to the end of the file name.
 </para>
      <para tool="javadoc-to-mdoc">
 The "%u" unique field is used to avoid conflicts and is set to 0 at first. If
 one <c>FileHandler</c> tries to open the filename which is currently in use
 by another process, it will repeatedly increment the unique number field and
 try again. If the "%u" component has not been included in the file name
 pattern and some contention on a file does occur, then a unique numerical
 value will be added to the end of the filename in question immediately to the
 right of a dot. The generation of unique IDs for avoiding conflicts is only
 guaranteed to work reliably when using a local disk file system.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/logging/FileHandler.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Construct a <c>FileHandler</c> using <c>LogManager</c> properties or
 their default value.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Construct a <c>FileHandler</c> using <c>LogManager</c> properties or
 their default value.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/FileHandler.html#FileHandler()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if any I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileHandler (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">To be added.</param>
        <summary>Constructs a new <c>FileHandler</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>FileHandler</c>. The given name pattern is used as
 output filename, the file limit is set to zero (no limit), the file count
 is set to one; the remaining configuration is done using
 <c>LogManager</c> properties or their default values. This handler
 writes to only one file with no size limit.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/FileHandler.html#FileHandler(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if any I/O error occurs.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the pattern is empty.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the pattern is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FileHandler (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileHandler (string pattern, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, bool append) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;Z)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">To be added.</param>
        <param name="append">To be added.</param>
        <summary>Construct a new <c>FileHandler</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Construct a new <c>FileHandler</c>. The given name pattern is used as
 output filename, the file limit is set to zero (no limit), the file count
 is initialized to one and the value of <c>append</c> becomes the new
 instance's append mode. The remaining configuration is done using
 <c>LogManager</c> properties. This handler writes to only one file
 with no size limit.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/FileHandler.html#FileHandler(java.lang.String, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if any I/O error occurs.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>pattern</c> is empty.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if <c>pattern</c> is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileHandler (string pattern, int limit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, int32 limit, int32 count) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;II)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="limit" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pattern">To be added.</param>
        <param name="limit">To be added.</param>
        <param name="count">To be added.</param>
        <summary>Construct a new <c>FileHandler</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Construct a new <c>FileHandler</c>. The given name pattern is used as
 output filename, the maximum file size is set to <c>limit</c> and the
 file count is initialized to <c>count</c>. The remaining configuration
 is done using <c>LogManager</c> properties. This handler is configured
 to write to a rotating set of count files, when the limit of bytes has
 been written to one output file, another file will be opened instead.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/FileHandler.html#FileHandler(java.lang.String, int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if any I/O error occurs.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>pattern</c> is empty, <c>limit </c> or
             <c>count </c>.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if <c>pattern</c> is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileHandler (string pattern, int limit, int count, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, int32 limit, int32 count, bool append) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;IIZ)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="limit" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">To be added.</param>
        <param name="limit">To be added.</param>
        <param name="count">To be added.</param>
        <param name="append">To be added.</param>
        <summary>Construct a new <c>FileHandler</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Construct a new <c>FileHandler</c>. The given name pattern is used as
 output filename, the maximum file size is set to <c>limit</c>, the file
 count is initialized to <c>count</c> and the append mode is set to
 <c>append</c>. The remaining configuration is done using
 <c>LogManager</c> properties. This handler is configured to write to a
 rotating set of count files, when the limit of bytes has been written to
 one output file, another file will be opened instead.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/FileHandler.html#FileHandler(java.lang.String, int, int, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if any I/O error occurs.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>pattern</c> is empty, <c>limit </c> or
             <c>count </c>.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if <c>pattern</c> is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>