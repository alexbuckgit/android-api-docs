<Type Name="LogManager" FullName="Java.Util.Logging.LogManager">
  <TypeSignature Language="C#" Value="public class LogManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LogManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/logging/LogManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>
      <c>LogManager</c> is used to maintain configuration properties of the
 logging framework, and to manage a hierarchical namespace of all named
 <c>Logger</c> objects.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">
        <c>LogManager</c> is used to maintain configuration properties of the
 logging framework, and to manage a hierarchical namespace of all named
 <c>Logger</c> objects.
 </para>
      <para tool="javadoc-to-mdoc">
 There is only one global <c>LogManager</c> instance in the
 application, which can be get by calling static method
 <c><see cref="M:Java.Util.Logging.LogManager.GetLogManager" /></c>. This instance is created and
 initialized during class initialization and cannot be changed.
 </para>
      <para tool="javadoc-to-mdoc">
 The <c>LogManager</c> class can be specified by
 java.util.logging.manager system property, if the property is unavailable or
 invalid, the default class <c><see cref="T:Java.Util.Logging.LogManager" /></c> will
 be used.
 </para>
      <para tool="javadoc-to-mdoc">
 On initialization, <c>LogManager</c> reads its configuration from a
 properties file, which by default is the "lib/logging.properties" in the JRE
 directory.
 </para>
      <para tool="javadoc-to-mdoc">
 However, two optional system properties can be used to customize the initial
 configuration process of <c>LogManager</c>.
 <list type="bullet"><item><term>"java.util.logging.config.class"</term></item><item><term>"java.util.logging.config.file"</term></item></list></para>
      <para tool="javadoc-to-mdoc">
 These two properties can be set in three ways, by the Preferences API, by the
 "java" command line property definitions, or by system property definitions
 passed to JNI_CreateJavaVM.
 </para>
      <para tool="javadoc-to-mdoc">
 The "java.util.logging.config.class" should specifies a class name. If it is
 set, this given class will be loaded and instantiated during
 <c>LogManager</c> initialization, so that this object's default
 constructor can read the initial configuration and define properties for
 <c>LogManager</c>.
 </para>
      <para tool="javadoc-to-mdoc">
 If "java.util.logging.config.class" property is not set, or it is invalid, or
 some exception is thrown during the instantiation, then the
 "java.util.logging.config.file" system property can be used to specify a
 properties file. The <c>LogManager</c> will read initial
 configuration from this file.
 </para>
      <para tool="javadoc-to-mdoc">
 If neither of these properties is defined, or some exception is thrown
 during these two properties using, the <c>LogManager</c> will read
 its initial configuration from default properties file, as described above.
 </para>
      <para tool="javadoc-to-mdoc">
 The global logging properties may include:
 <list type="bullet"><item><term>"handlers". This property's values should be a list of class names for
 handler classes separated by whitespace, these classes must be subclasses of
 <c>Handler</c> and each must have a default constructor, these
 classes will be loaded, instantiated and registered as handlers on the root
 <c>Logger</c> (the <c>Logger</c> named ""). These
 <c>Handler</c>s maybe initialized lazily.</term></item><item><term>"config". The property defines a list of class names separated by
 whitespace. Each class must have a default constructor, in which it can
 update the logging configuration, such as levels, handlers, or filters for
 some logger, etc. These classes will be loaded and instantiated during
 <c>LogManager</c> configuration</term></item></list></para>
      <para tool="javadoc-to-mdoc">
 This class, together with any handler and configuration classes associated
 with it, <format type="text/html"><b>must</b></format> be loaded from the system classpath when
 <c>LogManager</c> configuration occurs.
 </para>
      <para tool="javadoc-to-mdoc">
 Besides global properties, the properties for loggers and Handlers can be
 specified in the property files. The names of these properties will start
 with the complete dot separated names for the handlers or loggers.
 </para>
      <para tool="javadoc-to-mdoc">
 In the <c>LogManager</c>'s hierarchical namespace,
 <c>Loggers</c> are organized based on their dot separated names. For
 example, "x.y.z" is child of "x.y".
 </para>
      <para tool="javadoc-to-mdoc">
 Levels for <c>Loggers</c> can be defined by properties whose name end
 with ".level". Thus "alogger.level" defines a level for the logger named as
 "alogger" and for all its children in the naming hierarchy. Log levels
 properties are read and applied in the same order as they are specified in
 the property file. The root logger's level can be defined by the property
 named as ".level".
 </para>
      <para tool="javadoc-to-mdoc">
 This class is thread safe. It is an error to synchronize on a
 <c>LogManager</c> while synchronized on a <c>Logger</c>.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/logging/LogManager.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LogManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Default constructor. This is not public because there should be only one
 <c>LogManager</c> instance, which can be get by
 <c>LogManager.getLogManager()</c>. This is protected so that
 application can subclass the object.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/LogManager.html#LogManager()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LogManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogger">
      <MemberSignature Language="C#" Value="public virtual bool AddLogger (Java.Util.Logging.Logger logger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AddLogger(class Java.Util.Logging.Logger logger) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addLogger", "(Ljava/util/logging/Logger;)Z", "GetAddLogger_Ljava_util_logging_Logger_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logger" Type="Java.Util.Logging.Logger" />
      </Parameters>
      <Docs>
        <param name="logger">the logger to be added.</param>
        <summary>Add a given logger into the hierarchical namespace.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Add a given logger into the hierarchical namespace. The
 <c>Logger.addLogger()</c> factory methods call this method to add newly
 created Logger. This returns false if a logger with the given name has
 existed in the namespace
 </para>
          <para tool="javadoc-to-mdoc">
 Note that the <c>LogManager</c> may only retain weak references to
 registered loggers. In order to prevent <c>Logger</c> objects from being
 unexpectedly garbage collected it is necessary for <format type="text/html"><i>applications</i></format>
 to maintain references to them.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/LogManager.html#addLogger(java.util.logging.Logger)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AddPropertyChangeListener">
      <MemberSignature Language="C#" Value="public virtual void AddPropertyChangeListener (Java.Beans.IPropertyChangeListener l);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddPropertyChangeListener(class Java.Beans.IPropertyChangeListener l) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addPropertyChangeListener", "(Ljava/beans/PropertyChangeListener;)V", "GetAddPropertyChangeListener_Ljava_beans_PropertyChangeListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="Java.Beans.IPropertyChangeListener" />
      </Parameters>
      <Docs>
        <param name="l">the <c>PropertyChangeListener</c> to be added.
</param>
        <summary>Add a <c>PropertyChangeListener</c>, which will be invoked when
 the properties are reread.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Add a <c>PropertyChangeListener</c>, which will be invoked when
 the properties are reread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/LogManager.html#addPropertyChangeListener(java.beans.PropertyChangeListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual void CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CheckAccess() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("checkAccess", "()V", "GetCheckAccessHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Does nothing.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Does nothing.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/LogManager.html#checkAccess()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetLogger">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Logging.Logger GetLogger (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Logging.Logger GetLogger(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getLogger", "(Ljava/lang/String;)Ljava/util/logging/Logger;", "GetGetLogger_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Logging.Logger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">name of logger</param>
        <summary>Get the logger with the given name.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the logger with the given name.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/LogManager.html#getLogger(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetLogManager">
      <MemberSignature Language="C#" Value="public static Java.Util.Logging.LogManager GetLogManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Logging.LogManager GetLogManager() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getLogManager", "()Ljava/util/logging/LogManager;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Logging.LogManager</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get the global <c>LogManager</c> instance.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the global <c>LogManager</c> instance.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/LogManager.html#getLogManager()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public virtual string GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetProperty(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getProperty", "(Ljava/lang/String;)Ljava/lang/String;", "GetGetProperty_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">the name of property</param>
        <summary>Get the value of property with given name.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the value of property with given name.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/LogManager.html#getProperty(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LoggerNames">
      <MemberSignature Language="C#" Value="public virtual Java.Util.IEnumeration LoggerNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.IEnumeration LoggerNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLoggerNames", "()Ljava/util/Enumeration;", "GetGetLoggerNamesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.IEnumeration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get a <c>Enumeration</c> of all registered logger names.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get a <c>Enumeration</c> of all registered logger names.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/LogManager.html#getLoggerNames()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LoggingMXBean">
      <MemberSignature Language="C#" Value="public static Java.Util.Logging.ILoggingMXBean LoggingMXBean { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Util.Logging.ILoggingMXBean LoggingMXBean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLoggingMXBean", "()Ljava/util/logging/LoggingMXBean;", "GetGetLoggingMXBeanHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Logging.ILoggingMXBean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary tool="true">Get the <c>LoggingMXBean</c> instance.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the <c>LoggingMXBean</c> instance. this implementation always throws
 an UnsupportedOperationException.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/LogManager.html#getLoggingMXBean()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="LoggingMxbeanName">
      <MemberSignature Language="C#" Value="public const string LoggingMxbeanName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string LoggingMxbeanName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LOGGING_MXBEAN_NAME")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <c>String</c> value of the <c><see cref="T:Java.Util.Logging.ILoggingMXBean" /></c>'s ObjectName.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The <c>String</c> value of the <c><see cref="T:Java.Util.Logging.ILoggingMXBean" /></c>'s ObjectName.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/LogManager.html#LOGGING_MXBEAN_NAME" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ReadConfiguration">
      <MemberSignature Language="C#" Value="public virtual void ReadConfiguration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadConfiguration() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("readConfiguration", "()V", "GetReadConfigurationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Re-initialize the properties and configuration from the given
 <c>InputStream</c>
 
 Notice : No <c>PropertyChangeEvent</c> are fired.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Re-initialize the properties and configuration. The initialization
 process is same as the <c>LogManager</c> instantiation.
 </para>
          <para tool="javadoc-to-mdoc">
 Notice : No <c>PropertyChangeEvent</c> are fired.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/LogManager.html#readConfiguration()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if any IO related problems happened.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadConfiguration">
      <MemberSignature Language="C#" Value="public virtual void ReadConfiguration (System.IO.Stream ins);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadConfiguration(class System.IO.Stream ins) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("readConfiguration", "(Ljava/io/InputStream;)V", "GetReadConfiguration_Ljava_io_InputStream_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ins" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="ins">the input stream</param>
        <summary>Re-initialize the properties and configuration from the given
 <c>InputStream</c></summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Re-initialize the properties and configuration from the given
 <c>InputStream</c></para>
          <para tool="javadoc-to-mdoc">
 Notice : No <c>PropertyChangeEvent</c> are fired.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/LogManager.html#readConfiguration(java.io.InputStream)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if any IO related problems happened.
</exception>
      </Docs>
    </Member>
    <Member MemberName="RemovePropertyChangeListener">
      <MemberSignature Language="C#" Value="public virtual void RemovePropertyChangeListener (Java.Beans.IPropertyChangeListener l);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemovePropertyChangeListener(class Java.Beans.IPropertyChangeListener l) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removePropertyChangeListener", "(Ljava/beans/PropertyChangeListener;)V", "GetRemovePropertyChangeListener_Ljava_beans_PropertyChangeListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="Java.Beans.IPropertyChangeListener" />
      </Parameters>
      <Docs>
        <param name="l">the <c>PropertyChangeListener</c> to be removed.
</param>
        <summary>Remove a <c>PropertyChangeListener</c>, do nothing if the given
 listener is not found.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Remove a <c>PropertyChangeListener</c>, do nothing if the given
 listener is not found.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/LogManager.html#removePropertyChangeListener(java.beans.PropertyChangeListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reset", "()V", "GetResetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reset configuration.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Reset configuration.

 </para>
          <para tool="javadoc-to-mdoc">All handlers are closed and removed from any named loggers. All loggers'
 level is set to null, except the root logger's level is set to
 <c>Level.INFO</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/logging/LogManager.html#reset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>