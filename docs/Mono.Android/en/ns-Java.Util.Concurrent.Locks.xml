<Namespace Name="Java.Util.Concurrent.Locks">
  <Docs>
    <summary>The <c><see cref="T:Java.Util.Concurrent.Locks.ILock" /></c> interface supports
 locking disciplines that differ in semantics (reentrant, fair, etc),
 and that can be used in non-block-structured contexts including
 hand-over-hand and lock reordering algorithms.</summary>
    <remarks>
    Interfaces and classes providing a framework for locking and waiting
 for conditions that is distinct from built-in synchronization and
 monitors.  The framework permits much greater flexibility in the use of
 locks and conditions, at the expense of more awkward syntax.

 <para tool="javadoc-to-mdoc">The <c><see cref="T:Java.Util.Concurrent.Locks.ILock" /></c> interface supports
 locking disciplines that differ in semantics (reentrant, fair, etc),
 and that can be used in non-block-structured contexts including
 hand-over-hand and lock reordering algorithms.  The main implementation
 is <c><see cref="T:Java.Util.Concurrent.Locks.ReentrantLock" /></c>.

 </para><para tool="javadoc-to-mdoc">The <c><see cref="T:Java.Util.Concurrent.Locks.IReadWriteLock" /></c> interface
 similarly defines locks that may be shared among readers but are
 exclusive to writers.  Only a single implementation, <c><see cref="T:Java.Util.Concurrent.Locks.ReentrantReadWriteLock" /></c>, is provided, since
 it covers most standard usage contexts.  But programmers may create
 their own implementations to cover nonstandard requirements.

 </para><para tool="javadoc-to-mdoc">The <c><see cref="T:Java.Util.Concurrent.Locks.ICondition" /></c> interface
 describes condition variables that may be associated with Locks.
 These are similar in usage to the implicit monitors accessed using
 <c>Object.wait</c>, but offer extended capabilities.
 In particular, multiple <c>Condition</c> objects may be associated
 with a single <c>Lock</c>.  To avoid compatibility issues, the
 names of <c>Condition</c> methods are different from the
 corresponding <c>Object</c> versions.

 </para><para tool="javadoc-to-mdoc">The <c><see cref="T:Java.Util.Concurrent.Locks.AbstractQueuedSynchronizer" /></c>
 class serves as a useful superclass for defining locks and other
 synchronizers that rely on queuing blocked threads.  The <c><see cref="T:Java.Util.Concurrent.Locks.AbstractQueuedLongSynchronizer" /></c> class
 provides the same functionality but extends support to 64 bits of
 synchronization state.  Both extend class <c><see cref="T:Java.Util.Concurrent.Locks.AbstractOwnableSynchronizer" /></c>, a simple
 class that helps record the thread currently holding exclusive
 synchronization.  The <c><see cref="T:Java.Util.Concurrent.Locks.LockSupport" /></c>
 class provides lower-level blocking and unblocking support that is
 useful for those developers implementing their own customized lock
 classes.
  </para></remarks>
  </Docs>
</Namespace>
