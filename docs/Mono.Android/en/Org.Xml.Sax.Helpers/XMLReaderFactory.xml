<Type Name="XMLReaderFactory" FullName="Org.Xml.Sax.Helpers.XMLReaderFactory">
  <TypeSignature Language="C#" Value="public sealed class XMLReaderFactory : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XMLReaderFactory extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("org/xml/sax/helpers/XMLReaderFactory", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Factory for creating an XML reader.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Factory for creating an XML reader.

 <format type="text/html"><blockquote><i>This module, both source code and documentation, is in the
 Public Domain, and comes with <i>NO WARRANTY</i>.</i>
 See 
 for further information.
 </blockquote></format><example><code lang="java">
 try {
   XMLReader myReader = XMLReaderFactory.createXMLReader();
 } catch (SAXException e) {
   System.err.println(e.getMessage());
 }
 </code></example></para>
      <para tool="javadoc-to-mdoc">This class contains static methods for creating an XML reader
 from an explicit class name, or based on runtime defaults:</para>
      <para tool="javadoc-to-mdoc">
        <i>Note to Distributions bundled with parsers:</i>
 You should modify the implementation of the no-arguments
 <i>createXMLReader</i> to handle cases where the external
 configuration mechanisms aren't set up.  That method should do its
 best to return a parser when one is in the class path, even when
 nothing bound its class name to <c>org.xml.sax.driver</c> so
 those configuration mechanisms would see it.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/org/xml/sax/helpers/XMLReaderFactory.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="CreateXMLReader">
      <MemberSignature Language="C#" Value="public static Org.Xml.Sax.IXMLReader CreateXMLReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Org.Xml.Sax.IXMLReader CreateXMLReader() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createXMLReader", "()Lorg/xml/sax/XMLReader;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.Xml.Sax.IXMLReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Attempt to create an XML reader from a class name.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempt to create an XMLReader from system defaults.
 In environments which can support it, the name of the XMLReader
 class is determined by trying each these options in order, and
 using the first one which succeeds:<list type="bullet"><item><term>If the system property <c>org.xml.sax.driver</c>
 has a value, that is used as an XMLReader class name. </term></item><item><term>The JAR "Services API" is used to look for a class name
 in the <i>META-INF/services/org.xml.sax.driver</i> file in
 jarfiles available to the runtime.</term></item><item><term> SAX parser distributions are strongly encouraged to provide
 a default XMLReader class name that will take effect only when
 previous options (on this list) are not successful.</term></item><item><term>Finally, if <c><see cref="M:Org.Xml.Sax.Helpers.ParserFactory.MakeParser" /></c> can
 return a system default SAX1 parser, that parser is wrapped in
 a <c><see cref="T:Org.Xml.Sax.Helpers.ParserAdapter" /></c>.  (This is a migration aid for SAX1
 environments, where the <c>org.xml.sax.parser</c> system
 property will often be usable.) </term></item></list></para>
          <para tool="javadoc-to-mdoc"> In environments such as small embedded systems, which can not
 support that flexibility, other mechanisms to determine the default
 may be used. </para>
          <para tool="javadoc-to-mdoc">Note that many Java environments allow system properties to be
 initialized on a command line.  This means that <i>in most cases</i>
 setting a good value for that property ensures that calls to this
 method will succeed, except when security policies intervene.
 This will also maximize application portability to older SAX
 environments, with less robust implementations of this method.
 </para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/XMLReaderFactory.html#createXMLReader()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">If no default XMLReader class
            can be identified and instantiated.</exception>
        <altmember cref="M:Org.Xml.Sax.Helpers.XMLReaderFactory.CreateXMLReader(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateXMLReader">
      <MemberSignature Language="C#" Value="public static Org.Xml.Sax.IXMLReader CreateXMLReader (string className);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Org.Xml.Sax.IXMLReader CreateXMLReader(string className) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createXMLReader", "(Ljava/lang/String;)Lorg/xml/sax/XMLReader;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.Xml.Sax.IXMLReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="className">the name of the class that should be instantiated.

 <para tool="javadoc-to-mdoc">Note that this method will not be usable in environments where
 the caller (perhaps an applet) is not permitted to load classes
 dynamically.</para></param>
        <summary>Attempt to create an XML reader from a class name.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempt to create an XML reader from a class name.

 </para>
          <para tool="javadoc-to-mdoc">Given a class name, this method attempts to load
 and instantiate the class as an XML reader.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/helpers/XMLReaderFactory.html#createXMLReader(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">If the class cannot be
            loaded, instantiated, and cast to XMLReader.</exception>
        <altmember cref="M:Org.Xml.Sax.Helpers.XMLReaderFactory.CreateXMLReader" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>