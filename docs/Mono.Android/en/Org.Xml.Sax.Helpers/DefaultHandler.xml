<Type Name="DefaultHandler" FullName="Org.Xml.Sax.Helpers.DefaultHandler">
  <TypeSignature Language="C#" Value="public class DefaultHandler : Java.Lang.Object, IDisposable, Org.Xml.Sax.IContentHandler, Org.Xml.Sax.IDTDHandler, Org.Xml.Sax.IEntityResolver, Org.Xml.Sax.IErrorHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultHandler extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Org.Xml.Sax.IContentHandler, class Org.Xml.Sax.IDTDHandler, class Org.Xml.Sax.IEntityResolver, class Org.Xml.Sax.IErrorHandler, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Org.Xml.Sax.IContentHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Org.Xml.Sax.IDTDHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Org.Xml.Sax.IEntityResolver</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Org.Xml.Sax.IErrorHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("org/xml/sax/helpers/DefaultHandler", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Default base class for SAX2 event handlers.</summary>
    <remarks />
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DefaultHandler (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Characters">
      <MemberSignature Language="C#" Value="public virtual void Characters (char[] ch, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Characters(char[] ch, int32 start, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("characters", "([CII)V", "GetCharacters_arrayCIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ch">The characters.</param>
        <param name="start">The start position in the character array.</param>
        <param name="length">The number of characters to use from the
               character array.</param>
        <summary>Receive notification of character data inside an element.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.Characters(System.Char[], System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="EndDocument">
      <MemberSignature Language="C#" Value="public virtual void EndDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndDocument() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("endDocument", "()V", "GetEndDocumentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Receive notification of the end of the document.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.EndDocument" />
      </Docs>
    </Member>
    <Member MemberName="EndElement">
      <MemberSignature Language="C#" Value="public virtual void EndElement (string uri, string localName, string qName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndElement(string uri, string localName, string qName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("endElement", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "GetEndElement_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="qName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The Namespace URI, or the empty string if the
        element has no Namespace URI or if Namespace
        processing is not being performed.</param>
        <param name="localName">The local name (without prefix), or the
        empty string if Namespace processing is not being
        performed.</param>
        <param name="qName">The qualified name (with prefix), or the
        empty string if qualified names are not available.</param>
        <summary>Receive notification of the end of an element.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.EndElement(System.String, System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndPrefixMapping">
      <MemberSignature Language="C#" Value="public virtual void EndPrefixMapping (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndPrefixMapping(string prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("endPrefixMapping", "(Ljava/lang/String;)V", "GetEndPrefixMapping_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The Namespace prefix being declared.</param>
        <summary>Receive notification of the end of a Namespace mapping.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.EndPrefixMapping(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public virtual void Error (Org.Xml.Sax.SAXParseException e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Error(class Org.Xml.Sax.SAXParseException e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("error", "(Lorg/xml/sax/SAXParseException;)V", "GetError_Lorg_xml_sax_SAXParseException_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Org.Xml.Sax.SAXParseException" />
      </Parameters>
      <Docs>
        <param name="e">The warning information encoded as an exception.</param>
        <summary>Receive notification of a recoverable parser error.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IErrorHandler.Warning(Org.Xml.Sax.SAXParseException)" />
        <altmember cref="T:Org.Xml.Sax.SAXParseException" />
      </Docs>
    </Member>
    <Member MemberName="FatalError">
      <MemberSignature Language="C#" Value="public virtual void FatalError (Org.Xml.Sax.SAXParseException e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FatalError(class Org.Xml.Sax.SAXParseException e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("fatalError", "(Lorg/xml/sax/SAXParseException;)V", "GetFatalError_Lorg_xml_sax_SAXParseException_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Org.Xml.Sax.SAXParseException" />
      </Parameters>
      <Docs>
        <param name="e">The error information encoded as an exception.</param>
        <summary>Report a fatal XML parsing error.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IErrorHandler.FatalError(Org.Xml.Sax.SAXParseException)" />
        <altmember cref="T:Org.Xml.Sax.SAXParseException" />
      </Docs>
    </Member>
    <Member MemberName="IgnorableWhitespace">
      <MemberSignature Language="C#" Value="public virtual void IgnorableWhitespace (char[] ch, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void IgnorableWhitespace(char[] ch, int32 start, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ignorableWhitespace", "([CII)V", "GetIgnorableWhitespace_arrayCIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ch">The whitespace characters.</param>
        <param name="start">The start position in the character array.</param>
        <param name="length">The number of characters to use from the
               character array.</param>
        <summary>Receive notification of ignorable whitespace in element content.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.IgnorableWhitespace(System.Char[], System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="NotationDecl">
      <MemberSignature Language="C#" Value="public virtual void NotationDecl (string name, string publicId, string systemId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotationDecl(string name, string publicId, string systemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("notationDecl", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "GetNotationDecl_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="publicId" Type="System.String" />
        <Parameter Name="systemId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The notation name.</param>
        <param name="publicId">The notation public identifier, or null if not
                 available.</param>
        <param name="systemId">The notation system identifier.</param>
        <summary>Receive notification of a notation declaration.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IDTDHandler.NotationDecl(System.String, System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessingInstruction">
      <MemberSignature Language="C#" Value="public virtual void ProcessingInstruction (string target, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessingInstruction(string target, string data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("processingInstruction", "(Ljava/lang/String;Ljava/lang/String;)V", "GetProcessingInstruction_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">The processing instruction target.</param>
        <param name="data">The processing instruction data, or null if
             none is supplied.</param>
        <summary>Receive notification of a processing instruction.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.ProcessingInstruction(System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="C#" Value="public virtual Org.Xml.Sax.InputSource ResolveEntity (string publicId, string systemId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Org.Xml.Sax.InputSource ResolveEntity(string publicId, string systemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("resolveEntity", "(Ljava/lang/String;Ljava/lang/String;)Lorg/xml/sax/InputSource;", "GetResolveEntity_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.Xml.Sax.InputSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publicId" Type="System.String" />
        <Parameter Name="systemId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="publicId">The public identifer, or null if none is
                 available.</param>
        <param name="systemId">The system identifier provided in the XML
                 document.</param>
        <summary>Resolve an external entity.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">If there is an error setting
            up the new input source.</exception>
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IEntityResolver.ResolveEntity(System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetDocumentLocator">
      <MemberSignature Language="C#" Value="public virtual void SetDocumentLocator (Org.Xml.Sax.ILocator locator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDocumentLocator(class Org.Xml.Sax.ILocator locator) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDocumentLocator", "(Lorg/xml/sax/Locator;)V", "GetSetDocumentLocator_Lorg_xml_sax_Locator_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locator" Type="Org.Xml.Sax.ILocator" />
      </Parameters>
      <Docs>
        <param name="locator">A locator for all SAX document events.</param>
        <summary>Receive a Locator object for document events.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Org.Xml.Sax.IContentHandler.SetDocumentLocator(Org.Xml.Sax.ILocator)" />
        <altmember cref="T:Org.Xml.Sax.ILocator" />
      </Docs>
    </Member>
    <Member MemberName="SkippedEntity">
      <MemberSignature Language="C#" Value="public virtual void SkippedEntity (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SkippedEntity(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("skippedEntity", "(Ljava/lang/String;)V", "GetSkippedEntity_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the skipped entity.</param>
        <summary>Receive notification of a skipped entity.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.ProcessingInstruction(System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StartDocument">
      <MemberSignature Language="C#" Value="public virtual void StartDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartDocument() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startDocument", "()V", "GetStartDocumentHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Receive notification of the beginning of the document.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.StartDocument" />
      </Docs>
    </Member>
    <Member MemberName="StartElement">
      <MemberSignature Language="C#" Value="public virtual void StartElement (string uri, string localName, string qName, Org.Xml.Sax.IAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartElement(string uri, string localName, string qName, class Org.Xml.Sax.IAttributes attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startElement", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/xml/sax/Attributes;)V", "GetStartElement_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Lorg_xml_sax_Attributes_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="qName" Type="System.String" />
        <Parameter Name="attributes" Type="Org.Xml.Sax.IAttributes" />
      </Parameters>
      <Docs>
        <param name="uri">The Namespace URI, or the empty string if the
        element has no Namespace URI or if Namespace
        processing is not being performed.</param>
        <param name="localName">The local name (without prefix), or the
        empty string if Namespace processing is not being
        performed.</param>
        <param name="qName">The qualified name (with prefix), or the
        empty string if qualified names are not available.</param>
        <param name="attributes">The attributes attached to the element.  If
        there are no attributes, it shall be an empty
        Attributes object.</param>
        <summary>Receive notification of the start of an element.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.StartElement(System.String, System.String, System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StartPrefixMapping">
      <MemberSignature Language="C#" Value="public virtual void StartPrefixMapping (string prefix, string uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartPrefixMapping(string prefix, string uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startPrefixMapping", "(Ljava/lang/String;Ljava/lang/String;)V", "GetStartPrefixMapping_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The Namespace prefix being declared.</param>
        <param name="uri">The Namespace URI mapped to the prefix.</param>
        <summary>Receive notification of the start of a Namespace mapping.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IContentHandler.StartPrefixMapping(System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UnparsedEntityDecl">
      <MemberSignature Language="C#" Value="public virtual void UnparsedEntityDecl (string name, string publicId, string systemId, string notationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnparsedEntityDecl(string name, string publicId, string systemId, string notationName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unparsedEntityDecl", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "GetUnparsedEntityDecl_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="publicId" Type="System.String" />
        <Parameter Name="systemId" Type="System.String" />
        <Parameter Name="notationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The entity name.</param>
        <param name="publicId">The entity public identifier, or null if not
                 available.</param>
        <param name="systemId">The entity system identifier.</param>
        <param name="notationName">The name of the associated notation.</param>
        <summary>Receive notification of an unparsed entity declaration.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IDTDHandler.UnparsedEntityDecl(System.String, System.String, System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Warning">
      <MemberSignature Language="C#" Value="public virtual void Warning (Org.Xml.Sax.SAXParseException e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Warning(class Org.Xml.Sax.SAXParseException e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("warning", "(Lorg/xml/sax/SAXParseException;)V", "GetWarning_Lorg_xml_sax_SAXParseException_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Org.Xml.Sax.SAXParseException" />
      </Parameters>
      <Docs>
        <param name="e">The warning information encoded as an exception.</param>
        <summary>Receive notification of a parser warning.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IErrorHandler.Warning(Org.Xml.Sax.SAXParseException)" />
        <altmember cref="T:Org.Xml.Sax.SAXParseException" />
      </Docs>
    </Member>
  </Members>
</Type>
