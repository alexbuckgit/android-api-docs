<Type Name="StreamConfigurationMap" FullName="Android.Hardware.Camera2.Params.StreamConfigurationMap">
  <TypeSignature Language="C#" Value="public sealed class StreamConfigurationMap : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StreamConfigurationMap extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/hardware/camera2/params/StreamConfigurationMap", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>Immutable class to store the available stream
 <c><see cref="P:Android.Hardware.Camera2.CameraCharacteristics.ScalerStreamConfigurationMap" /></c> to set up
 <c><see cref="T:Android.Views.Surface" /></c> for creating a
 <c><see cref="T:Android.Hardware.Camera2.CameraCaptureSession" /></c> with
 <c><see cref="M:Android.Hardware.Camera2.CameraDevice.CreateCaptureSession" /></c>.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Immutable class to store the available stream
 <c><see cref="P:Android.Hardware.Camera2.CameraCharacteristics.ScalerStreamConfigurationMap" /></c> to set up
 <c><see cref="T:Android.Views.Surface" /></c> for creating a
 <c><see cref="T:Android.Hardware.Camera2.CameraCaptureSession" /></c> with
 <c><see cref="M:Android.Hardware.Camera2.CameraDevice.CreateCaptureSession" /></c>.
 <!-- TODO: link to input stream configuration  --><sample external-id="F62853C2D2E8A181346FA8C9F108D8F1" /></para>
      <para tool="javadoc-to-mdoc">This is the authoritative list for all <!-- input/  -->output formats (and sizes respectively
 for that format) that are supported by a camera device.</para>
      <para tool="javadoc-to-mdoc">This also contains the minimum frame durations and stall durations for each format/size
 combination that can be used to calculate effective frame rate when submitting multiple captures.
 </para>
      <para tool="javadoc-to-mdoc">An instance of this object is available from <c><see cref="T:Android.Hardware.Camera2.CameraCharacteristics" /></c> using
 the <c><see cref="P:Android.Hardware.Camera2.CameraCharacteristics.ScalerStreamConfigurationMap" /></c> key and the
 <c><see cref="!:Android.Hardware.Camera2.CameraCharacteristics.get(android.hardware.camera2.CameraCharacteristics.Key&lt;T&gt;)" /></c> method.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="P:Android.Hardware.Camera2.CameraCharacteristics.ScalerStreamConfigurationMap" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="M:Android.Hardware.Camera2.CameraDevice.CreateCaptureSession" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/hardware/camera2/params/StreamConfigurationMap.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetHighSpeedVideoFpsRanges">
      <MemberSignature Language="C#" Value="public Android.Util.Range[] GetHighSpeedVideoFpsRanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Util.Range[] GetHighSpeedVideoFpsRanges() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getHighSpeedVideoFpsRanges", "()[Landroid/util/Range;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Range[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get a list of supported high speed video recording FPS ranges.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get a list of supported high speed video recording FPS ranges.

 </para>
          <para tool="javadoc-to-mdoc"> When HIGH_SPEED_VIDEO is supported in
 <c><see cref="P:Android.Hardware.Camera2.CameraCharacteristics.ControlAvailableSceneModes" /></c>, this
 method will list the supported high speed video FPS range configurations. Application can
 then use <c><see cref="!:Android.Hardware.Camera2.Params.StreamConfigurationMap.getHighSpeedVideoSizesFor(android.util.Range&lt;java.lang.Integer&gt;)" /></c> to query available sizes for one of returned
 FPS range.</para>
          <para tool="javadoc-to-mdoc"> To enable high speed video recording, application must set
 <c><see cref="P:Android.Hardware.Camera2.CaptureRequest.ControlSceneMode" /></c> to
 <c><see cref="!:Android.Hardware.Camera2.CameraMetadata.CONTROL_SCENE_MODE_HIGH_SPEED_VIDEO" /></c> in capture
 requests and select the video size from <c><see cref="!:Android.Hardware.Camera2.Params.StreamConfigurationMap.getHighSpeedVideoSizesFor(android.util.Range&lt;java.lang.Integer&gt;)" /></c> and
 <c><see cref="P:Android.Hardware.Camera2.CaptureRequest.ControlAeTargetFpsRange" /></c> from
 this method to configure the recording and preview streams and setup the recording requests.
 For example, if the application intends to do high speed recording, it can select one FPS
 range reported by this method, query the video sizes corresponding to this FPS range  by
 <c><see cref="!:Android.Hardware.Camera2.Params.StreamConfigurationMap.getHighSpeedVideoSizesFor(android.util.Range&lt;java.lang.Integer&gt;)" /></c> and select one of reported sizes to configure output
 streams. Note that for the use case of multiple output streams, application must select one
 unique size from <c><see cref="!:Android.Hardware.Camera2.Params.StreamConfigurationMap.getHighSpeedVideoSizesFor(android.util.Range&lt;java.lang.Integer&gt;)" /></c>, and use it for all output streams.
 Otherwise a request error might occur when attempting to enable
 <c><see cref="!:Android.Hardware.Camera2.CameraMetadata.CONTROL_SCENE_MODE_HIGH_SPEED_VIDEO" /></c>.
 Once the stream is configured, application can set the FPS range in the recording requests.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/params/StreamConfigurationMap.html#getHighSpeedVideoFpsRanges()" target="_blank">[Android Documentation]</a>
              <since version="Added in API level 21" />
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHighSpeedVideoFpsRangesFor">
      <MemberSignature Language="C#" Value="public Android.Util.Range[] GetHighSpeedVideoFpsRangesFor (Android.Util.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Util.Range[] GetHighSpeedVideoFpsRangesFor(class Android.Util.Size size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getHighSpeedVideoFpsRangesFor", "(Landroid/util/Size;)[Landroid/util/Range;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Range[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="Android.Util.Size" />
      </Parameters>
      <Docs>
        <param name="size">one of the sizes returned by <c><see cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetHighSpeedVideoSizes" /></c></param>
        <summary>Get the frame per second ranges (fpsMin, fpsMax) for input high speed video size.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the frame per second ranges (fpsMin, fpsMax) for input high speed video size.

 </para>
          <para tool="javadoc-to-mdoc"> See <c><see cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetHighSpeedVideoSizes" /></c> for how to enable high speed recording.</para>
          <para tool="javadoc-to-mdoc"> For normal video recording use case, where some application will NOT set
 <c><see cref="P:Android.Hardware.Camera2.CaptureRequest.ControlSceneMode" /></c> to
 <c><see cref="!:Android.Hardware.Camera2.CameraMetadata.CONTROL_SCENE_MODE_HIGH_SPEED_VIDEO" /></c> in capture
 requests, the <c><see cref="P:Android.Hardware.Camera2.CaptureRequest.ControlAeTargetFpsRange" /></c> reported in
 this method must not be used to setup capture requests, or it will cause request error.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/params/StreamConfigurationMap.html#getHighSpeedVideoFpsRangesFor(android.util.Size)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if input size does not exist in the return value of
         getHighSpeedVideoSizes</exception>
        <altmember cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetHighSpeedVideoSizes" />
      </Docs>
    </Member>
    <Member MemberName="GetHighSpeedVideoSizes">
      <MemberSignature Language="C#" Value="public Android.Util.Size[] GetHighSpeedVideoSizes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Util.Size[] GetHighSpeedVideoSizes() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getHighSpeedVideoSizes", "()[Landroid/util/Size;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Size[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get a list of supported high speed video recording sizes.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get a list of supported high speed video recording sizes.

 </para>
          <para tool="javadoc-to-mdoc"> When HIGH_SPEED_VIDEO is supported in
 <c><see cref="P:Android.Hardware.Camera2.CameraCharacteristics.ControlAvailableSceneModes" /></c>, this
 method will list the supported high speed video size configurations. All the sizes listed
 will be a subset of the sizes reported by <c><see cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetOutputSizes(System.Int32)" /></c> for processed non-stalling
 formats (typically ImageFormat#YUV_420_888, ImageFormat#NV21, ImageFormat#YV12)</para>
          <para tool="javadoc-to-mdoc"> To enable high speed video recording, application must set
 <c><see cref="P:Android.Hardware.Camera2.CaptureRequest.ControlSceneMode" /></c> to
 <c><see cref="!:Android.Hardware.Camera2.CameraMetadata.CONTROL_SCENE_MODE_HIGH_SPEED_VIDEO" /></c> in capture
 requests and select the video size from this method and
 <c><see cref="P:Android.Hardware.Camera2.CaptureRequest.ControlAeTargetFpsRange" /></c> from
 <c><see cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetHighSpeedVideoFpsRangesFor(Android.Util.Size)" /></c> to configure the recording and preview streams and
 setup the recording requests. For example, if the application intends to do high speed
 recording, it can select the maximum size reported by this method to configure output
 streams. Note that for the use case of multiple output streams, application must select one
 unique size from this method to use. Otherwise a request error might occur. Once the size is
 selected, application can get the supported FPS ranges by
 <c><see cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetHighSpeedVideoFpsRangesFor(Android.Util.Size)" /></c>, and use these FPS ranges to setup the recording
 requests.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/params/StreamConfigurationMap.html#getHighSpeedVideoSizes()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetHighSpeedVideoFpsRangesFor(Android.Util.Size)" />
      </Docs>
    </Member>
    <Member MemberName="GetHighSpeedVideoSizesFor">
      <MemberSignature Language="C#" Value="public Android.Util.Size[] GetHighSpeedVideoSizesFor (Android.Util.Range fpsRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Util.Size[] GetHighSpeedVideoSizesFor(class Android.Util.Range fpsRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getHighSpeedVideoSizesFor", "(Landroid/util/Range;)[Landroid/util/Size;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Size[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fpsRange" Type="Android.Util.Range" />
      </Parameters>
      <Docs>
        <param name="fpsRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormats">
      <MemberSignature Language="C#" Value="public int[] GetOutputFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32[] GetOutputFormats() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputFormats", "()[I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get the image <c>format</c> output formats in this stream configuration.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the image <c>format</c> output formats in this stream configuration.

 </para>
          <para tool="javadoc-to-mdoc">All image formats returned by this function will be defined in either <c><see cref="T:Android.Graphics.ImageFormat" /></c>
 or in <c><see cref="T:Android.Graphics.PixelFormat" /></c> (and there is no possibility of collision).</para>
          <para tool="javadoc-to-mdoc">Formats listed in this array are guaranteed to return true if queried with
 <c><see cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.IsOutputSupportedFor(System.Int32)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/params/StreamConfigurationMap.html#getOutputFormats()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="T:Android.Graphics.ImageFormat" />
        <altmember cref="T:Android.Graphics.PixelFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetOutputMinFrameDuration">
      <MemberSignature Language="C#" Value="public long GetOutputMinFrameDuration (Java.Lang.Class klass, Android.Util.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetOutputMinFrameDuration(class Java.Lang.Class klass, class Android.Util.Size size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputMinFrameDuration", "(Ljava/lang/Class;Landroid/util/Size;)J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="klass" Type="Java.Lang.Class" />
        <Parameter Name="size" Type="Android.Util.Size" />
      </Parameters>
      <Docs>
        <param name="klass">To be added.</param>
        <param name="size">To be added.</param>
        <summary tool="true">Get the minimum <see cref="P:Android.Hardware.Camera2.CaptureRequest.SensorFrameDuration" />
 for the format/size combination (in nanoseconds).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputMinFrameDuration">
      <MemberSignature Language="C#" Value="public long GetOutputMinFrameDuration (int format, Android.Util.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetOutputMinFrameDuration(int32 format, class Android.Util.Size size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputMinFrameDuration", "(ILandroid/util/Size;)J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Int32" />
        <Parameter Name="size" Type="Android.Util.Size" />
      </Parameters>
      <Docs>
        <param name="format">an image format from <c><see cref="T:Android.Graphics.ImageFormat" /></c> or <c><see cref="T:Android.Graphics.PixelFormat" /></c></param>
        <param name="size">an output-compatible size</param>
        <summary>Get the minimum <c><see cref="P:Android.Hardware.Camera2.CaptureRequest.SensorFrameDuration" /></c>
 for the format/size combination (in nanoseconds).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the minimum <c><see cref="P:Android.Hardware.Camera2.CaptureRequest.SensorFrameDuration" /></c>
 for the format/size combination (in nanoseconds).

 <!--
 TODO: uncomment after adding input stream support
 <p>The minimum frame duration of a stream (of a particular format, size) is the same
 regardless of whether the stream is input or output.</p>
  --></para>
          <para tool="javadoc-to-mdoc">
            <c>format</c> should be one of the ones returned by <c><see cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetOutputFormats" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <c>size</c> should be one of the ones returned by
 <c><see cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetOutputSizes(System.Int32)" /></c>.</para>
          <para tool="javadoc-to-mdoc">This should correspond to the frame duration when only that stream is active, with all
 processing (typically in <c>android.*.mode</c>) set to either <c>OFF</c> or <c>FAST</c>.
 </para>
          <para tool="javadoc-to-mdoc">When multiple streams are used in a request, the minimum frame duration will be
 <c>max(individual stream min durations)</c>.</para>
          <para tool="javadoc-to-mdoc">For devices that do not support manual sensor control
 (<c><see cref="!:Android.Hardware.Camera2.CameraMetadata.REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR" /></c>),
 this function may return 0.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/params/StreamConfigurationMap.html#getOutputMinFrameDuration(int, android.util.Size)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>format</c> or <c>size</c> was not supported</exception>
        <exception cref="T:Java.Lang.NullPointerException">if <c>size</c> was <c>null</c></exception>
        <altmember cref="P:Android.Hardware.Camera2.CaptureRequest.SensorFrameDuration" />
        <altmember cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetOutputStallDuration(System.Int32, Android.Util.Size)" />
        <altmember cref="T:Android.Graphics.ImageFormat" />
        <altmember cref="T:Android.Graphics.PixelFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetOutputSizes">
      <MemberSignature Language="C#" Value="public Android.Util.Size[] GetOutputSizes (Java.Lang.Class klass);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Util.Size[] GetOutputSizes(class Java.Lang.Class klass) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputSizes", "(Ljava/lang/Class;)[Landroid/util/Size;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Size[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="klass" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="klass">To be added.</param>
        <summary tool="true">Get a list of sizes compatible with the requested image <c>format</c>.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputSizes">
      <MemberSignature Language="C#" Value="public Android.Util.Size[] GetOutputSizes (int format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Util.Size[] GetOutputSizes(int32 format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputSizes", "(I)[Landroid/util/Size;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Util.Size[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="format">an image format from <c><see cref="T:Android.Graphics.ImageFormat" /></c> or <c><see cref="T:Android.Graphics.PixelFormat" /></c></param>
        <summary>Get a list of sizes compatible with the requested image <c>format</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get a list of sizes compatible with the requested image <c>format</c>.

 </para>
          <para tool="javadoc-to-mdoc">The <c>format</c> should be a supported format (one of the formats returned by
 <c><see cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetOutputFormats" /></c>).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/params/StreamConfigurationMap.html#getOutputSizes(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="T:Android.Graphics.ImageFormat" />
        <altmember cref="T:Android.Graphics.PixelFormat" />
        <altmember cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetOutputFormats" />
      </Docs>
    </Member>
    <Member MemberName="GetOutputStallDuration">
      <MemberSignature Language="C#" Value="public long GetOutputStallDuration (Java.Lang.Class klass, Android.Util.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetOutputStallDuration(class Java.Lang.Class klass, class Android.Util.Size size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputStallDuration", "(Ljava/lang/Class;Landroid/util/Size;)J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="klass" Type="Java.Lang.Class" />
        <Parameter Name="size" Type="Android.Util.Size" />
      </Parameters>
      <Docs>
        <param name="klass">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputStallDuration">
      <MemberSignature Language="C#" Value="public long GetOutputStallDuration (int format, Android.Util.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetOutputStallDuration(int32 format, class Android.Util.Size size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputStallDuration", "(ILandroid/util/Size;)J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Int32" />
        <Parameter Name="size" Type="Android.Util.Size" />
      </Parameters>
      <Docs>
        <param name="format">an image format from <c><see cref="T:Android.Graphics.ImageFormat" /></c> or <c><see cref="T:Android.Graphics.PixelFormat" /></c></param>
        <param name="size">an output-compatible size</param>
        <summary>Get the stall duration for the format/size combination (in nanoseconds).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the stall duration for the format/size combination (in nanoseconds).

 </para>
          <para tool="javadoc-to-mdoc">
            <c>format</c> should be one of the ones returned by <c><see cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetOutputFormats" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <c>size</c> should be one of the ones returned by
 <c><see cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetOutputSizes(System.Int32)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
 A stall duration is how much extra time would get added to the normal minimum frame duration
 for a repeating request that has streams with non-zero stall.

 </para>
          <para tool="javadoc-to-mdoc">For example, consider JPEG captures which have the following characteristics:

 <list type="bullet"><item><term>JPEG streams act like processed YUV streams in requests for which they are not included;
 in requests in which they are directly referenced, they act as JPEG streams.
 This is because supporting a JPEG stream requires the underlying YUV data to always be ready
 for use by a JPEG encoder, but the encoder will only be used (and impact frame duration) on
 requests that actually reference a JPEG stream.
 </term></item><item><term>The JPEG processor can run concurrently to the rest of the camera pipeline, but cannot
 process more than 1 capture at a time.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">In other words, using a repeating YUV request would result in a steady frame rate
 (let's say it's 30 FPS). If a single JPEG request is submitted periodically,
 the frame rate will stay at 30 FPS (as long as we wait for the previous JPEG to return each
 time). If we try to submit a repeating YUV + JPEG request, then the frame rate will drop from
 30 FPS.</para>
          <para tool="javadoc-to-mdoc">In general, submitting a new request with a non-0 stall time stream will <i>not</i> cause a
 frame rate drop unless there are still outstanding buffers for that stream from previous
 requests.</para>
          <para tool="javadoc-to-mdoc">Submitting a repeating request with streams (call this <c>S</c>) is the same as setting
 the minimum frame duration from the normal minimum frame duration corresponding to <c>S</c>,
 added with the maximum stall duration for <c>S</c>.</para>
          <para tool="javadoc-to-mdoc">If interleaving requests with and without a stall duration, a request will stall by the
 maximum of the remaining times for each can-stall stream with outstanding buffers.</para>
          <para tool="javadoc-to-mdoc">This means that a stalling request will not have an exposure start until the stall has
 completed.</para>
          <para tool="javadoc-to-mdoc">This should correspond to the stall duration when only that stream is active, with all
 processing (typically in <c>android.*.mode</c>) set to <c>FAST</c> or <c>OFF</c>.
 Setting any of the processing modes to <c>HIGH_QUALITY</c> effectively results in an
 indeterminate stall duration for all streams in a request (the regular stall calculation
 rules are ignored).</para>
          <para tool="javadoc-to-mdoc">The following formats may always have a stall duration:
 <list type="bullet"><item><term><c><see cref="F:Android.Graphics.ImageFormat.Jpeg" /></c></term></item><item><term><c><see cref="F:Android.Graphics.ImageFormat.RawSensor" /></c></term></item></list></para>
          <para tool="javadoc-to-mdoc">The following formats will never have a stall duration:
 <list type="bullet"><item><term><c><see cref="F:Android.Graphics.ImageFormat.Yuv420888" /></c></term></item><item><term><c><see cref="!:Android.Hardware.Camera2.Params.StreamConfigurationMap.isOutputSupportedFor(java.lang.Class&lt;T&gt;)" /></c></term></item></list></para>
          <para tool="javadoc-to-mdoc">
 All other formats may or may not have an allowed stall duration on a per-capability basis;
 refer to <c><see cref="P:Android.Hardware.Camera2.CameraCharacteristics.RequestAvailableCapabilities" /></c> for more details.</para>
          <para tool="javadoc-to-mdoc">See <c><see cref="P:Android.Hardware.Camera2.CaptureRequest.SensorFrameDuration" /></c>
 for more information about calculating the max frame rate (absent stalls).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/params/StreamConfigurationMap.html#getOutputStallDuration(int, android.util.Size)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>format</c> or <c>size</c> was not supported</exception>
        <exception cref="T:Java.Lang.NullPointerException">if <c>size</c> was <c>null</c></exception>
        <altmember cref="P:Android.Hardware.Camera2.CaptureRequest.SensorFrameDuration" />
        <altmember cref="T:Android.Graphics.ImageFormat" />
        <altmember cref="T:Android.Graphics.PixelFormat" />
      </Docs>
    </Member>
    <Member MemberName="IsOutputSupportedFor">
      <MemberSignature Language="C#" Value="public bool IsOutputSupportedFor (Android.Views.Surface surface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOutputSupportedFor(class Android.Views.Surface surface) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isOutputSupportedFor", "(Landroid/view/Surface;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surface" Type="Android.Views.Surface" />
      </Parameters>
      <Docs>
        <param name="surface">a non-<c>null</c><c><see cref="T:Android.Views.Surface" /></c> object reference</param>
        <summary>Determine whether or not the <c>surface</c> in its current state is suitable to be included
 in a <c><see cref="M:Android.Hardware.Camera2.CameraDevice.CreateCaptureSession" /></c> as an output.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Determine whether or not the <c>surface</c> in its current state is suitable to be included
 in a <c><see cref="M:Android.Hardware.Camera2.CameraDevice.CreateCaptureSession" /></c> as an output.

 </para>
          <para tool="javadoc-to-mdoc">Not all surfaces are usable with the <c><see cref="T:Android.Hardware.Camera2.CameraDevice" /></c>, and not all configurations
 of that <c>surface</c> are compatible. Some classes that provide the <c>surface</c> are
 compatible with the <c><see cref="T:Android.Hardware.Camera2.CameraDevice" /></c> in general
 (see <c><see cref="!:Android.Hardware.Camera2.Params.StreamConfigurationMap.isOutputSupportedFor(java.lang.Class&lt;T&gt;)" /></c>, but it is the caller's responsibility to put the
 <c>surface</c> into a state that will be compatible with the <c><see cref="T:Android.Hardware.Camera2.CameraDevice" /></c>.</para>
          <para tool="javadoc-to-mdoc">Reasons for a <c>surface</c> being specifically incompatible might be:
 <list type="bullet"><item><term>Using a format that's not listed by <c><see cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetOutputFormats" /></c></term></item><item><term>Using a format/size combination that's not listed by <c><see cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetOutputSizes(System.Int32)" /></c></term></item><item><term>The <c>surface</c> itself is not in a state where it can service a new producer.</term></item></list>

 This is not an exhaustive list; see the particular class's documentation for further
 possible reasons of incompatibility.</para>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/params/StreamConfigurationMap.html#isOutputSupportedFor(android.view.Surface)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.NullPointerException">if <c>surface</c> was <c>null</c></exception>
      </Docs>
    </Member>
    <Member MemberName="IsOutputSupportedFor">
      <MemberSignature Language="C#" Value="public static bool IsOutputSupportedFor (Java.Lang.Class klass);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsOutputSupportedFor(class Java.Lang.Class klass) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isOutputSupportedFor", "(Ljava/lang/Class;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="klass" Type="Java.Lang.Class" />
      </Parameters>
      <Docs>
        <param name="klass">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutputSupportedFor">
      <MemberSignature Language="C#" Value="public bool IsOutputSupportedFor (int format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOutputSupportedFor(int32 format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isOutputSupportedFor", "(I)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="format">an image format from either <c><see cref="T:Android.Graphics.ImageFormat" /></c> or <c><see cref="T:Android.Graphics.PixelFormat" /></c></param>
        <summary>Determine whether or not output surfaces with a particular user-defined format can be passed
 <c><see cref="M:Android.Hardware.Camera2.CameraDevice.CreateCaptureSession" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Determine whether or not output surfaces with a particular user-defined format can be passed
 <c><see cref="M:Android.Hardware.Camera2.CameraDevice.CreateCaptureSession" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">This method determines that the output <c>format</c> is supported by the camera device;
 each output <c>surface</c> target may or may not itself support that <c>format</c>.
 Refer to the class which provides the surface for additional documentation.</para>
          <para tool="javadoc-to-mdoc">Formats for which this returns <c>true</c> are guaranteed to exist in the result
 returned by <c><see cref="M:Android.Hardware.Camera2.Params.StreamConfigurationMap.GetOutputSizes(System.Int32)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/camera2/params/StreamConfigurationMap.html#isOutputSupportedFor(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the image format was not a defined named constant
          from either <c><see cref="T:Android.Graphics.ImageFormat" /></c> or <c><see cref="T:Android.Graphics.PixelFormat" /></c></exception>
        <altmember cref="T:Android.Graphics.ImageFormat" />
        <altmember cref="T:Android.Graphics.PixelFormat" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>