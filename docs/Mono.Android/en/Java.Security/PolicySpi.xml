<Type Name="PolicySpi" FullName="Java.Security.PolicySpi">
  <TypeSignature Language="C#" Value="public abstract class PolicySpi : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PolicySpi extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/security/PolicySpi", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the Service Provider Interface (SPI) for java.security.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Represents the Service Provider Interface (SPI) for java.security.Policy
 class.

 </para>
      <para tool="javadoc-to-mdoc">If there is any class that wants to provide a Policy implementation, all
 abstract methods in this SPI should be implemented.

 </para>
      <para tool="javadoc-to-mdoc">The detailed implementations should offer a public constructor, in which a
 Policy.Paramters implementation acts as an input parameter.If the
 Policy.Paramters input cannot by understood by the constructor, an
 IllegalArgumentException will be thrown.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/security/PolicySpi.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 9" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PolicySpi ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/security/PolicySpi.html#PolicySpi()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PolicySpi (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EngineGetPermissions">
      <MemberSignature Language="C#" Value="protected virtual Java.Security.PermissionCollection EngineGetPermissions (Java.Security.CodeSource codesource);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Java.Security.PermissionCollection EngineGetPermissions(class Java.Security.CodeSource codesource) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("engineGetPermissions", "(Ljava/security/CodeSource;)Ljava/security/PermissionCollection;", "GetEngineGetPermissions_Ljava_security_CodeSource_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Security.PermissionCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codesource" Type="Java.Security.CodeSource" />
      </Parameters>
      <Docs>
        <param name="codesource">-
            the CodeSource to which the returned PermissionCollection has
            been granted.</param>
        <summary tool="true">Answers a PermissionCollection object containing the set of permissions
 granted to the specified ProtectionDomain.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Answers a PermissionCollection object containing the set of permissions
 granted to the specified CodeSource.

 The default implementation of this method returns
 Policy.UNSUPPORTED_EMPTY_COLLECTION object. This method can be overridden
 if the policy implementation can return a set of permissions granted to a
 CodeSource.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/security/PolicySpi.html#engineGetPermissions(java.security.CodeSource)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="EngineGetPermissions">
      <MemberSignature Language="C#" Value="protected virtual Java.Security.PermissionCollection EngineGetPermissions (Java.Security.ProtectionDomain domain);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Java.Security.PermissionCollection EngineGetPermissions(class Java.Security.ProtectionDomain domain) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("engineGetPermissions", "(Ljava/security/ProtectionDomain;)Ljava/security/PermissionCollection;", "GetEngineGetPermissions_Ljava_security_ProtectionDomain_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Security.PermissionCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="Java.Security.ProtectionDomain" />
      </Parameters>
      <Docs>
        <param name="domain">-
            the ProtectionDomain to which the returned
            PermissionCollection has been granted.</param>
        <summary>Answers a PermissionCollection object containing the set of permissions
 granted to the specified ProtectionDomain.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Answers a PermissionCollection object containing the set of permissions
 granted to the specified ProtectionDomain.

 The default implementation of this method returns
 Policy.UNSUPPORTED_EMPTY_COLLECTION object. This method can be overridden
 if the policy implementation can return a set of permissions granted to a
 ProtectionDomain.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/security/PolicySpi.html#engineGetPermissions(java.security.ProtectionDomain)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="EngineImplies">
      <MemberSignature Language="C#" Value="protected abstract bool EngineImplies (Java.Security.ProtectionDomain domain, Java.Security.Permission permission);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool EngineImplies(class Java.Security.ProtectionDomain domain, class Java.Security.Permission permission) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("engineImplies", "(Ljava/security/ProtectionDomain;Ljava/security/Permission;)Z", "GetEngineImplies_Ljava_security_ProtectionDomain_Ljava_security_Permission_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="Java.Security.ProtectionDomain" />
        <Parameter Name="permission" Type="Java.Security.Permission" />
      </Parameters>
      <Docs>
        <param name="domain">-
            the domain to check.</param>
        <param name="permission">-
            check whether this permission is granted to the specified
            domain.</param>
        <summary>Answers if the policy has granted a Permission to a
 ProtectionDomain.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Answers if the policy has granted a Permission to a
 ProtectionDomain.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/security/PolicySpi.html#engineImplies(java.security.ProtectionDomain, java.security.Permission)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="EngineRefresh">
      <MemberSignature Language="C#" Value="protected virtual void EngineRefresh ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void EngineRefresh() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("engineRefresh", "()V", "GetEngineRefreshHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Refreshes/reloads the policy configuration.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Refreshes/reloads the policy configuration. The behavior of this method
 depends on the implementation. For example, calling refresh on a
 file-based policy will cause the file to be re-read.

 The default implementation of this method does nothing. This method
 should be overridden if a refresh operation is supported by the policy
 implementation.

</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/security/PolicySpi.html#engineRefresh()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>