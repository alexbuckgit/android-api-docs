<Type Name="MediaSessionManager" FullName="Android.Media.Session.MediaSessionManager">
  <TypeSignature Language="C#" Value="public sealed class MediaSessionManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MediaSessionManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/session/MediaSessionManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>Provides support for interacting with <c><see cref="T:Android.Media.Session.MediaSession" /></c>
 that applications have published to express their ongoing media playback
 state.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Provides support for interacting with <c><see cref="T:Android.Media.Session.MediaSession" /></c>
 that applications have published to express their ongoing media playback
 state.
 </para>
      <para tool="javadoc-to-mdoc">
 Use <c>Context.getSystemService(Context.MEDIA_SESSION_SERVICE)</c> to
 get an instance of this class.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Android.Media.Session.MediaSession" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="T:Android.Media.Session.MediaController" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/media/session/MediaSessionManager.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddOnActiveSessionsChangedListener">
      <MemberSignature Language="C#" Value="public void AddOnActiveSessionsChangedListener (Android.Media.Session.MediaSessionManager.IOnActiveSessionsChangedListener sessionListener, Android.Content.ComponentName notificationListener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnActiveSessionsChangedListener(class Android.Media.Session.MediaSessionManager/IOnActiveSessionsChangedListener sessionListener, class Android.Content.ComponentName notificationListener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addOnActiveSessionsChangedListener", "(Landroid/media/session/MediaSessionManager$OnActiveSessionsChangedListener;Landroid/content/ComponentName;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionListener" Type="Android.Media.Session.MediaSessionManager+IOnActiveSessionsChangedListener" />
        <Parameter Name="notificationListener" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="sessionListener">The listener to add.</param>
        <param name="notificationListener">The enabled notification listener component.
            May be null.
</param>
        <summary>Add a listener to be notified when the list of active sessions
 changes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Add a listener to be notified when the list of active sessions
 changes.This requires the
 android.Manifest.permission.MEDIA_CONTENT_CONTROL permission be held by
 the calling app. You may also retrieve this list if your app is an
 enabled notification listener using the
 <c><see cref="T:Android.Service.Notification.NotificationListenerService" /></c> APIs, in which case you must pass the
 <c><see cref="T:Android.Content.ComponentName" /></c> of your enabled listener. Updates will be posted to
 the thread that registered the listener.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSessionManager.html#addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener, android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOnActiveSessionsChangedListener">
      <MemberSignature Language="C#" Value="public void AddOnActiveSessionsChangedListener (Android.Media.Session.MediaSessionManager.IOnActiveSessionsChangedListener sessionListener, Android.Content.ComponentName notificationListener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnActiveSessionsChangedListener(class Android.Media.Session.MediaSessionManager/IOnActiveSessionsChangedListener sessionListener, class Android.Content.ComponentName notificationListener, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addOnActiveSessionsChangedListener", "(Landroid/media/session/MediaSessionManager$OnActiveSessionsChangedListener;Landroid/content/ComponentName;Landroid/os/Handler;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionListener" Type="Android.Media.Session.MediaSessionManager+IOnActiveSessionsChangedListener" />
        <Parameter Name="notificationListener" Type="Android.Content.ComponentName" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="sessionListener">The listener to add.</param>
        <param name="notificationListener">The enabled notification listener component.
            May be null.</param>
        <param name="handler">The handler to post events to.
</param>
        <summary>Add a listener to be notified when the list of active sessions
 changes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Add a listener to be notified when the list of active sessions
 changes.This requires the
 android.Manifest.permission.MEDIA_CONTENT_CONTROL permission be held by
 the calling app. You may also retrieve this list if your app is an
 enabled notification listener using the
 <c><see cref="T:Android.Service.Notification.NotificationListenerService" /></c> APIs, in which case you must pass the
 <c><see cref="T:Android.Content.ComponentName" /></c> of your enabled listener. Updates will be posted to
 the handler specified or to the caller's thread if the handler is null.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSessionManager.html#addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener, android.content.ComponentName, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActiveSessions">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Android.Media.Session.MediaController&gt; GetActiveSessions (Android.Content.ComponentName notificationListener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IList`1&lt;class Android.Media.Session.MediaController&gt; GetActiveSessions(class Android.Content.ComponentName notificationListener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getActiveSessions", "(Landroid/content/ComponentName;)Ljava/util/List;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.Media.Session.MediaController&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notificationListener" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="notificationListener">The enabled notification listener component.
            May be null.</param>
        <summary>Get a list of controllers for all ongoing sessions.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get a list of controllers for all ongoing sessions. The controllers will
 be provided in priority order with the most important controller at index
 0.
 </para>
          <para tool="javadoc-to-mdoc">
 This requires the android.Manifest.permission.MEDIA_CONTENT_CONTROL
 permission be held by the calling app. You may also retrieve this list if
 your app is an enabled notification listener using the
 <c><see cref="T:Android.Service.Notification.NotificationListenerService" /></c> APIs, in which case you must pass the
 <c><see cref="T:Android.Content.ComponentName" /></c> of your enabled listener.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSessionManager.html#getActiveSessions(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
              <since version="Added in API level 21" />
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOnActiveSessionsChangedListener">
      <MemberSignature Language="C#" Value="public void RemoveOnActiveSessionsChangedListener (Android.Media.Session.MediaSessionManager.IOnActiveSessionsChangedListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOnActiveSessionsChangedListener(class Android.Media.Session.MediaSessionManager/IOnActiveSessionsChangedListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeOnActiveSessionsChangedListener", "(Landroid/media/session/MediaSessionManager$OnActiveSessionsChangedListener;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.Session.MediaSessionManager+IOnActiveSessionsChangedListener" />
      </Parameters>
      <Docs>
        <param name="listener">The listener to remove.
</param>
        <summary>Stop receiving active sessions updates on the specified listener.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Stop receiving active sessions updates on the specified listener.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSessionManager.html#removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>