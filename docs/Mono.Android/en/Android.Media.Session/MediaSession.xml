<Type Name="MediaSession" FullName="Android.Media.Session.MediaSession">
  <TypeSignature Language="C#" Value="public sealed class MediaSession : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MediaSession extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/session/MediaSession", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>Allows interaction with media controllers, volume keys, media buttons, and
 transport controls.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Allows interaction with media controllers, volume keys, media buttons, and
 transport controls.
 </para>
      <para tool="javadoc-to-mdoc">
 A MediaSession should be created when an app wants to publish media playback
 information or handle media keys. In general an app only needs one session
 for all playback, though multiple sessions can be created to provide finer
 grain controls of media.
 </para>
      <para tool="javadoc-to-mdoc">
 Once a session is created the owner of the session may pass its
 <c><see cref="P:Android.Media.Session.MediaSession.SessionToken" /></c> to other processes to allow them to
 create a <c><see cref="T:Android.Media.Session.MediaController" /></c> to interact with the session.
 </para>
      <para tool="javadoc-to-mdoc">
 To receive commands, media keys, and other events a <c><see cref="!:NoType:android/media/session/MediaSession$Callback;Href=../../../../reference/android/media/session/MediaSession.Callback.html" /></c> must be
 set with <c><see cref="M:Android.Media.Session.MediaSession.SetCallback(.Callback)" /></c> and <c><see cref="P:Android.Media.Session.MediaSession.Active" /></c> must be called.
 </para>
      <para tool="javadoc-to-mdoc">
 When an app is finished performing playback it must call <c><see cref="M:Android.Media.Session.MediaSession.Release" /></c>
 to clean up the session and notify any controllers.
 </para>
      <para tool="javadoc-to-mdoc">
 MediaSession objects are thread safe.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/media/session/MediaSession.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MediaSession (Android.Content.Context context, string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context, string tag) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="tag">To be added.</param>
        <summary>Creates a new session.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new session. The session will automatically be registered with
 the system but will not be published until <c><see cref="P:Android.Media.Session.MediaSession.Active" /></c> is called. You must call <c><see cref="M:Android.Media.Session.MediaSession.Release" /></c> when
 finished with the session.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#MediaSession(android.content.Context, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="public bool Active { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isActive", "()Z", "GetIsActiveHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setActive", "(Z)V", "GetSetActive_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the current active state of this session.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b> <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#isActive()" target="_blank">[Android Documentation]</a><br /></format>Get the current active state of this session.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b> <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#setActive(boolean)" target="_blank">[Android Documentation]</a><br /></format>Set if this session is currently active and ready to receive commands. If
 set to false your session's controller may not be discoverable. You must
 set the session to active before it can start receiving media button
 events or transport commands.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Controller">
      <MemberSignature Language="C#" Value="public Android.Media.Session.MediaController Controller { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.Session.MediaController Controller" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getController", "()Landroid/media/session/MediaController;", "GetGetControllerHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Session.MediaController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get a controller for this session.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get a controller for this session. This is a convenience method to avoid
 having to cache your own controller in process.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#getController()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlagHandlesMediaButtons">
      <MemberSignature Language="C#" Value="public const Android.Media.Session.MediaSessionFlags FlagHandlesMediaButtons = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.Session.MediaSessionFlags FlagHandlesMediaButtons = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_HANDLES_MEDIA_BUTTONS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.Session.MediaSessionFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Session.MediaSessionFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Set this flag on the session to indicate that it can handle media button
 events.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set this flag on the session to indicate that it can handle media button
 events.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#FLAG_HANDLES_MEDIA_BUTTONS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlagHandlesTransportControls">
      <MemberSignature Language="C#" Value="public const Android.Media.Session.MediaSessionFlags FlagHandlesTransportControls = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.Session.MediaSessionFlags FlagHandlesTransportControls = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_HANDLES_TRANSPORT_CONTROLS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.Session.MediaSessionFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Session.MediaSessionFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Set this flag on the session to indicate that it handles transport
 control commands through its <c><see cref="!:NoType:android/media/session/MediaSession$Callback;Href=../../../../reference/android/media/session/MediaSession.Callback.html" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set this flag on the session to indicate that it handles transport
 control commands through its <c><see cref="!:NoType:android/media/session/MediaSession$Callback;Href=../../../../reference/android/media/session/MediaSession.Callback.html" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#FLAG_HANDLES_TRANSPORT_CONTROLS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This must be called when an app has finished performing playback.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This must be called when an app has finished performing playback. If
 playback is expected to start again shortly the session can be left open,
 but it must be released if your activity or service is being destroyed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#release()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendSessionEvent">
      <MemberSignature Language="C#" Value="public void SendSessionEvent (string e, Android.OS.Bundle extras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendSessionEvent(string e, class Android.OS.Bundle extras) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendSessionEvent", "(Ljava/lang/String;Landroid/os/Bundle;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.String" />
        <Parameter Name="extras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="e">The name of the event to send</param>
        <param name="extras">Any extras included with the event
</param>
        <summary>Send a proprietary event to all MediaControllers listening to this
 Session.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Send a proprietary event to all MediaControllers listening to this
 Session. It's up to the Controller/Session owner to determine the meaning
 of any events.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#sendSessionEvent(java.lang.String, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionToken">
      <MemberSignature Language="C#" Value="public Android.Media.Session.MediaSession.Token SessionToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.Session.MediaSession/Token SessionToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSessionToken", "()Landroid/media/session/MediaSession$Token;", "GetGetSessionTokenHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Session.MediaSession+Token</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve a token object that can be used by apps to create a
 <c><see cref="T:Android.Media.Session.MediaController" /></c> for interacting with this session.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Retrieve a token object that can be used by apps to create a
 <c><see cref="T:Android.Media.Session.MediaController" /></c> for interacting with this session. The owner of
 the session is responsible for deciding how to distribute these tokens.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#getSessionToken()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCallback">
      <MemberSignature Language="C#" Value="public void SetCallback (Android.Media.Session.MediaSession.Callback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCallback(class Android.Media.Session.MediaSession/Callback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setCallback", "(Landroid/media/session/MediaSession$Callback;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Media.Session.MediaSession+Callback" />
      </Parameters>
      <Docs>
        <param name="callback">The callback object
</param>
        <summary>Set the callback to receive updates for the MediaSession.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the callback to receive updates for the MediaSession. This includes
 media button events and transport controls. The caller's thread will be
 used to post updates.
 </para>
          <para tool="javadoc-to-mdoc">
 Set the callback to null to stop receiving updates.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#setCallback(android.media.session.MediaSession.Callback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCallback">
      <MemberSignature Language="C#" Value="public void SetCallback (Android.Media.Session.MediaSession.Callback callback, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCallback(class Android.Media.Session.MediaSession/Callback callback, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setCallback", "(Landroid/media/session/MediaSession$Callback;Landroid/os/Handler;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Media.Session.MediaSession+Callback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="callback">The callback to receive updates on.</param>
        <param name="handler">The handler that events should be posted on.
</param>
        <summary>Set the callback to receive updates for the MediaSession.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the callback to receive updates for the MediaSession. This includes
 media button events and transport controls.
 </para>
          <para tool="javadoc-to-mdoc">
 Set the callback to null to stop receiving updates.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#setCallback(android.media.session.MediaSession.Callback, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExtras">
      <MemberSignature Language="C#" Value="public void SetExtras (Android.OS.Bundle extras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExtras(class Android.OS.Bundle extras) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setExtras", "(Landroid/os/Bundle;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="extras">The extras associated with the <c><see cref="T:Android.Media.Session.MediaSession" /></c>.
</param>
        <summary>Set some extras that can be associated with the <c><see cref="T:Android.Media.Session.MediaSession" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set some extras that can be associated with the <c><see cref="T:Android.Media.Session.MediaSession" /></c>. No assumptions should
 be made as to how a <c><see cref="T:Android.Media.Session.MediaController" /></c> will handle these extras.
 Keys should be fully qualified (e.g. com.example.MY_EXTRA) to avoid conflicts.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#setExtras(android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFlags">
      <MemberSignature Language="C#" Value="public void SetFlags (Android.Media.Session.MediaSessionFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFlags(valuetype Android.Media.Session.MediaSessionFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setFlags", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="Android.Media.Session.MediaSessionFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="flags">The flags to set for this session.
</param>
        <summary>Set any flags for the session.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set any flags for the session.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#setFlags(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMediaButtonReceiver">
      <MemberSignature Language="C#" Value="public void SetMediaButtonReceiver (Android.App.PendingIntent mbr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMediaButtonReceiver(class Android.App.PendingIntent mbr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMediaButtonReceiver", "(Landroid/app/PendingIntent;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mbr" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="mbr">The <c><see cref="T:Android.App.PendingIntent" /></c> to send the media button event to.
</param>
        <summary>Set a pending intent for your media button receiver to allow restarting
 playback after the session has been stopped.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set a pending intent for your media button receiver to allow restarting
 playback after the session has been stopped. If your app is started in
 this way an <c><see cref="F:Android.Content.Intent.ActionMediaButton" /></c> intent will be sent via
 the pending intent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#setMediaButtonReceiver(android.app.PendingIntent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMetadata">
      <MemberSignature Language="C#" Value="public void SetMetadata (Android.Media.MediaMetadata metadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMetadata(class Android.Media.MediaMetadata metadata) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMetadata", "(Landroid/media/MediaMetadata;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="Android.Media.MediaMetadata" />
      </Parameters>
      <Docs>
        <param name="metadata">The new metadata
</param>
        <summary>Update the current metadata.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Update the current metadata. New metadata can be created using
 <c><see cref="!:NoType:android/media/MediaMetadata$Builder;Href=../../../../reference/android/media/MediaMetadata.Builder.html" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#setMetadata(android.media.MediaMetadata)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPlaybackState">
      <MemberSignature Language="C#" Value="public void SetPlaybackState (Android.Media.Session.PlaybackState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPlaybackState(class Android.Media.Session.PlaybackState state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPlaybackState", "(Landroid/media/session/PlaybackState;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="Android.Media.Session.PlaybackState" />
      </Parameters>
      <Docs>
        <param name="state">The current state of playback
</param>
        <summary>Update the current playback state.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Update the current playback state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#setPlaybackState(android.media.session.PlaybackState)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPlaybackToLocal">
      <MemberSignature Language="C#" Value="public void SetPlaybackToLocal (Android.Media.AudioAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPlaybackToLocal(class Android.Media.AudioAttributes attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPlaybackToLocal", "(Landroid/media/AudioAttributes;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="Android.Media.AudioAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">The <c><see cref="T:Android.Media.AudioAttributes" /></c> for this session's audio.
</param>
        <summary>Set the attributes for this session's audio.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the attributes for this session's audio. This will affect the
 system's volume handling for this session. If
 <c><see cref="M:Android.Media.Session.MediaSession.SetPlaybackToRemote(Android.Media.VolumeProvider)" /></c> was previously called it will stop receiving
 volume commands and the system will begin sending volume changes to the
 appropriate stream.
 </para>
          <para tool="javadoc-to-mdoc">
 By default sessions use attributes for media.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#setPlaybackToLocal(android.media.AudioAttributes)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPlaybackToRemote">
      <MemberSignature Language="C#" Value="public void SetPlaybackToRemote (Android.Media.VolumeProvider volumeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPlaybackToRemote(class Android.Media.VolumeProvider volumeProvider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPlaybackToRemote", "(Landroid/media/VolumeProvider;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="volumeProvider" Type="Android.Media.VolumeProvider" />
      </Parameters>
      <Docs>
        <param name="volumeProvider">The provider that will handle volume changes. May
            not be null.
</param>
        <summary>Configure this session to use remote volume handling.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Configure this session to use remote volume handling. This must be called
 to receive volume button events, otherwise the system will adjust the
 appropriate stream volume for this session. If
 <c><see cref="M:Android.Media.Session.MediaSession.SetPlaybackToLocal(Android.Media.AudioAttributes)" /></c> was previously called the system will stop
 handling volume changes for this session and pass them to the volume
 provider instead.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#setPlaybackToRemote(android.media.VolumeProvider)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetQueue">
      <MemberSignature Language="C#" Value="public void SetQueue (System.Collections.Generic.IList&lt;Android.Media.Session.MediaSession.QueueItem&gt; queue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetQueue(class System.Collections.Generic.IList`1&lt;class Android.Media.Session.MediaSession/QueueItem&gt; queue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setQueue", "(Ljava/util/List;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queue" Type="System.Collections.Generic.IList&lt;Android.Media.Session.MediaSession+QueueItem&gt;" />
      </Parameters>
      <Docs>
        <param name="queue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetQueueTitle">
      <MemberSignature Language="C#" Value="public void SetQueueTitle (Java.Lang.ICharSequence title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetQueueTitle(class Java.Lang.ICharSequence title) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setQueueTitle", "(Ljava/lang/CharSequence;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="Java.Lang.ICharSequence" />
      </Parameters>
      <Docs>
        <param name="title">The title of the play queue.
</param>
        <summary>Set the title of the play queue.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set the title of the play queue. The UI should display this title along
 with the play queue itself.
 e.g. "Play Queue", "Now Playing", or an album name.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#setQueueTitle(java.lang.CharSequence)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetQueueTitle">
      <MemberSignature Language="C#" Value="public void SetQueueTitle (string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetQueueTitle(string title) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="title">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSessionActivity">
      <MemberSignature Language="C#" Value="public void SetSessionActivity (Android.App.PendingIntent pi);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSessionActivity(class Android.App.PendingIntent pi) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setSessionActivity", "(Landroid/app/PendingIntent;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pi" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="pi">The intent to launch to show UI for this Session.
</param>
        <summary>Set an intent for launching UI for this Session.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set an intent for launching UI for this Session. This can be used as a
 quick link to an ongoing media screen. The intent should be for an
 activity that may be started using <c><see cref="!:Android.App.Activity.startActivity(android.content.Intent)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/session/MediaSession.html#setSessionActivity(android.app.PendingIntent)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
