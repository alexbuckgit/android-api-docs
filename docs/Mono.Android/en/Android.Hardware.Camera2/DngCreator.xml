<Type Name="DngCreator" FullName="Android.Hardware.Camera2.DngCreator">
  <TypeSignature Language="C#" Value="public sealed class DngCreator : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DngCreator extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/hardware/camera2/DngCreator", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The <c><see cref="T:Android.Hardware.Camera2.DngCreator" /></c> class provides functions to write raw pixel data as a DNG file.</summary>
    <remarks><para tool="javadoc-to-mdoc">The <c><see cref="T:Android.Hardware.Camera2.DngCreator" /></c> class provides functions to write raw pixel data as a DNG file.

 </para><para tool="javadoc-to-mdoc">
 This class is designed to be used with the <c><see cref="F:Android.Graphics.ImageFormat.RawSensor" /></c>
 buffers available from <c><see cref="T:Android.Hardware.Camera2.CameraDevice" /></c>, or with Bayer-type raw
 pixel data that is otherwise generated by an application.  The DNG metadata tags will be
 generated from a <c><see cref="T:Android.Hardware.Camera2.CaptureResult" /></c> object or set directly.
 </para><para tool="javadoc-to-mdoc">
 The DNG file format is a cross-platform file format that is used to store pixel data from
 camera sensors with minimal pre-processing applied.  DNG files allow for pixel data to be
 defined in a user-defined colorspace, and have associated metadata that allow for this
 pixel data to be converted to the standard CIE XYZ colorspace during post-processing.
 </para><para tool="javadoc-to-mdoc">
 For more information on the DNG file format and associated metadata, please refer to the
 .
 </para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/hardware/camera2/DngCreator.html" target="_blank">[Android Documentation]</a></format></para></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DngCreator (Android.Hardware.Camera2.CameraCharacteristics characteristics, Android.Hardware.Camera2.CaptureResult metadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Hardware.Camera2.CameraCharacteristics characteristics, class Android.Hardware.Camera2.CaptureResult metadata) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/hardware/camera2/CameraCharacteristics;Landroid/hardware/camera2/CaptureResult;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="characteristics" Type="Android.Hardware.Camera2.CameraCharacteristics" />
        <Parameter Name="metadata" Type="Android.Hardware.Camera2.CaptureResult" />
      </Parameters>
      <Docs>
        <param name="characteristics">To be added.</param>
        <param name="metadata">To be added.</param>
        <summary>Create a new DNG object.</summary>
        <remarks><para tool="javadoc-to-mdoc">Create a new DNG object.

 </para><para tool="javadoc-to-mdoc">
 It is not necessary to call any set methods to write a well-formatted DNG file.
 </para><para tool="javadoc-to-mdoc">
 DNG metadata tags will be generated from the corresponding parameters in the
 <c><see cref="T:Android.Hardware.Camera2.CaptureResult" /></c> object.
 </para><para tool="javadoc-to-mdoc">
 For best quality DNG files, it is strongly recommended that lens shading map output is
 enabled if supported. See <c><see cref="P:Android.Hardware.Camera2.CaptureRequest.StatisticsLensShadingMapMode" /></c>.
 </para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/hardware/camera2/DngCreator.html#DngCreator(android.hardware.camera2.CameraCharacteristics, android.hardware.camera2.CaptureResult)" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the object and release any system resources it holds.</summary>
        <remarks><para tool="javadoc-to-mdoc">Closes the object and release any system resources it holds.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/hardware/camera2/DngCreator.html#close()" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxThumbnailDimension">
      <MemberSignature Language="C#" Value="public const int MaxThumbnailDimension = 256;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxThumbnailDimension = (256)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MAX_THUMBNAIL_DIMENSION")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary>Max width or height dimension for thumbnails.</summary>
        <remarks><para tool="javadoc-to-mdoc">Max width or height dimension for thumbnails.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/hardware/camera2/DngCreator.html#MAX_THUMBNAIL_DIMENSION" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDescription">
      <MemberSignature Language="C#" Value="public Android.Hardware.Camera2.DngCreator SetDescription (string description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Hardware.Camera2.DngCreator SetDescription(string description) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDescription", "(Ljava/lang/String;)Landroid/hardware/camera2/DngCreator;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Camera2.DngCreator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="description">the user description string.</param>
        <summary>Set the user description string to write.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Set the user description string to write.

 </para><para tool="javadoc-to-mdoc">
 This is equivalent to setting the TIFF "ImageDescription" tag <c>(0x010E)</c>.
 </para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/hardware/camera2/DngCreator.html#setDescription(java.lang.String)" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocation">
      <MemberSignature Language="C#" Value="public Android.Hardware.Camera2.DngCreator SetLocation (Android.Locations.Location location);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Hardware.Camera2.DngCreator SetLocation(class Android.Locations.Location location) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setLocation", "(Landroid/location/Location;)Landroid/hardware/camera2/DngCreator;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Camera2.DngCreator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Android.Locations.Location" />
      </Parameters>
      <Docs>
        <param name="location">an <c><see cref="T:Android.Locations.Location" /></c> object to set.</param>
        <summary>Set image location metadata.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Set image location metadata.

 </para><para tool="javadoc-to-mdoc">
 The given location object must contain at least a valid time, latitude, and longitude
 (equivalent to the values returned by <c><see cref="P:Android.Locations.Location.Time" /></c>,
 <c><see cref="P:Android.Locations.Location.Latitude" /></c>, and
 <c><see cref="P:Android.Locations.Location.Longitude" /></c> methods).
 </para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/hardware/camera2/DngCreator.html#setLocation(android.location.Location)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given location object doesn't
          contain enough information to set location metadata.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetOrientation">
      <MemberSignature Language="C#" Value="public Android.Hardware.Camera2.DngCreator SetOrientation (Android.Media.Orientation orientation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Hardware.Camera2.DngCreator SetOrientation(valuetype Android.Media.Orientation orientation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOrientation", "(I)Landroid/hardware/camera2/DngCreator;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Camera2.DngCreator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orientation" Type="Android.Media.Orientation">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="orientation">the orientation value to set, one of:
                    <list type="bullet"><item><term><c><see cref="!:Android.Media.ExifInterface.ORIENTATION_NORMAL" /></c></term></item><item><term><c><see cref="!:Android.Media.ExifInterface.ORIENTATION_FLIP_HORIZONTAL" /></c></term></item><item><term><c><see cref="!:Android.Media.ExifInterface.ORIENTATION_ROTATE_180" /></c></term></item><item><term><c><see cref="!:Android.Media.ExifInterface.ORIENTATION_FLIP_VERTICAL" /></c></term></item><item><term><c><see cref="!:Android.Media.ExifInterface.ORIENTATION_TRANSPOSE" /></c></term></item><item><term><c><see cref="!:Android.Media.ExifInterface.ORIENTATION_ROTATE_90" /></c></term></item><item><term><c><see cref="!:Android.Media.ExifInterface.ORIENTATION_TRANSVERSE" /></c></term></item><item><term><c><see cref="!:Android.Media.ExifInterface.ORIENTATION_ROTATE_270" /></c></term></item></list></param>
        <summary>Set the orientation value to write.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Set the orientation value to write.

 </para><para tool="javadoc-to-mdoc">
 This will be written as the TIFF "Orientation" tag <c>(0x0112)</c>.
 Calling this will override any prior settings for this tag.
 </para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/hardware/camera2/DngCreator.html#setOrientation(int)" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetThumbnail">
      <MemberSignature Language="C#" Value="public Android.Hardware.Camera2.DngCreator SetThumbnail (Android.Graphics.Bitmap pixels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Hardware.Camera2.DngCreator SetThumbnail(class Android.Graphics.Bitmap pixels) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setThumbnail", "(Landroid/graphics/Bitmap;)Landroid/hardware/camera2/DngCreator;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Camera2.DngCreator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixels" Type="Android.Graphics.Bitmap" />
      </Parameters>
      <Docs>
        <param name="pixels">a <c><see cref="T:Android.Graphics.Bitmap" /></c> of pixel data.</param>
        <summary>Set the thumbnail image.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Set the thumbnail image.

 </para><para tool="javadoc-to-mdoc">
 Pixel data will be converted to a Baseline TIFF RGB image, with 8 bits per color channel.
 The alpha channel will be discarded.  Thumbnail images with a dimension larger than
 <c><see cref="F:Android.Hardware.Camera2.DngCreator.MaxThumbnailDimension" /></c> will be rejected.
 </para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/hardware/camera2/DngCreator.html#setThumbnail(android.graphics.Bitmap)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given thumbnail image has a dimension
      larger than <c><see cref="F:Android.Hardware.Camera2.DngCreator.MaxThumbnailDimension" /></c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetThumbnail">
      <MemberSignature Language="C#" Value="public Android.Hardware.Camera2.DngCreator SetThumbnail (Android.Media.Image pixels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Hardware.Camera2.DngCreator SetThumbnail(class Android.Media.Image pixels) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setThumbnail", "(Landroid/media/Image;)Landroid/hardware/camera2/DngCreator;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Camera2.DngCreator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixels" Type="Android.Media.Image" />
      </Parameters>
      <Docs>
        <param name="pixels">an <c><see cref="T:Android.Media.Image" /></c> object with the format
               <c><see cref="F:Android.Graphics.ImageFormat.Yuv420888" /></c>.</param>
        <summary>Set the thumbnail image.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Set the thumbnail image.

 </para><para tool="javadoc-to-mdoc">
 Pixel data is interpreted as a <c><see cref="F:Android.Graphics.ImageFormat.Yuv420888" /></c> image.
 Thumbnail images with a dimension larger than <c><see cref="F:Android.Hardware.Camera2.DngCreator.MaxThumbnailDimension" /></c> will be
 rejected.
 </para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/hardware/camera2/DngCreator.html#setThumbnail(android.media.Image)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given thumbnail image has a dimension
      larger than <c><see cref="F:Android.Hardware.Camera2.DngCreator.MaxThumbnailDimension" /></c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteByteBuffer">
      <MemberSignature Language="C#" Value="public void WriteByteBuffer (System.IO.Stream dngOutput, Android.Util.Size size, Java.Nio.ByteBuffer pixels, long offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteByteBuffer(class System.IO.Stream dngOutput, class Android.Util.Size size, class Java.Nio.ByteBuffer pixels, int64 offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("writeByteBuffer", "(Ljava/io/OutputStream;Landroid/util/Size;Ljava/nio/ByteBuffer;J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dngOutput" Type="System.IO.Stream" />
        <Parameter Name="size" Type="Android.Util.Size" />
        <Parameter Name="pixels" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="offset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dngOutput">an <c><see cref="T:Java.IO.OutputStream" /></c> to write the DNG file to.</param>
        <param name="size">the <c><see cref="T:Android.Util.Size" /></c> of the image to write, in pixels.</param>
        <param name="pixels">an <c><see cref="T:Java.Nio.ByteBuffer" /></c> of pixel data to write.</param>
        <param name="offset">the offset of the raw image in bytes.  This indicates how many bytes will
               be skipped in the input before any pixel data is read.</param>
        <summary>Write the <c><see cref="F:Android.Graphics.ImageFormat.RawSensor" /></c> pixel data to a DNG file with
 the currently configured metadata.</summary>
        <remarks><para tool="javadoc-to-mdoc">Write the <c><see cref="F:Android.Graphics.ImageFormat.RawSensor" /></c> pixel data to a DNG file with
 the currently configured metadata.

 </para><para tool="javadoc-to-mdoc">
 Raw pixel data must have 16 bits per pixel, and the input must contain at least
 <c>offset + 2 * width * height)</c> bytes.  The width and height of
 the input are taken from the width and height set in the <c><see cref="T:Android.Hardware.Camera2.DngCreator" /></c> metadata tags,
 and will typically be equal to the width and height of
 <c><see cref="P:Android.Hardware.Camera2.CameraCharacteristics.SensorInfoActiveArraySize" /></c>.
 The pixel layout in the input is determined from the reported color filter arrangement (CFA)
 set in <c><see cref="P:Android.Hardware.Camera2.CameraCharacteristics.SensorInfoColorFilterArrangement" /></c>.  If insufficient
 metadata is available to write a well-formatted DNG file, an
 <c><see cref="T:Java.Lang.IllegalStateException" /></c> will be thrown.
 </para><para tool="javadoc-to-mdoc">
 Any mark or limit set on this <c><see cref="T:Java.Nio.ByteBuffer" /></c> is ignored, and will be cleared by this
 method.
 </para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/hardware/camera2/DngCreator.html#writeByteBuffer(java.io.OutputStream, android.util.Size, java.nio.ByteBuffer, long)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <exception cref="T:Java.IO.IOException">if an error was encountered in the input or output stream.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if not enough metadata information has been
          set to write a well-formatted DNG file.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteImage">
      <MemberSignature Language="C#" Value="public void WriteImage (System.IO.Stream dngOutput, Android.Media.Image pixels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteImage(class System.IO.Stream dngOutput, class Android.Media.Image pixels) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("writeImage", "(Ljava/io/OutputStream;Landroid/media/Image;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dngOutput" Type="System.IO.Stream" />
        <Parameter Name="pixels" Type="Android.Media.Image" />
      </Parameters>
      <Docs>
        <param name="dngOutput">an <c><see cref="T:Java.IO.OutputStream" /></c> to write the DNG file to.</param>
        <param name="pixels">an <c><see cref="T:Android.Media.Image" /></c> to write.</param>
        <summary>Write the pixel data to a DNG file with the currently configured metadata.</summary>
        <remarks><para tool="javadoc-to-mdoc">Write the pixel data to a DNG file with the currently configured metadata.

 </para><para tool="javadoc-to-mdoc">
 For this method to succeed, the <c><see cref="T:Android.Media.Image" /></c> input must contain
 <c><see cref="F:Android.Graphics.ImageFormat.RawSensor" /></c> pixel data, otherwise an
 <c><see cref="T:Java.Lang.IllegalArgumentException" /></c> will be thrown.
 </para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/hardware/camera2/DngCreator.html#writeImage(java.io.OutputStream, android.media.Image)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <exception cref="T:Java.IO.IOException">if an error was encountered in the output stream.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if an image with an unsupported format was used.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if not enough metadata information has been
          set to write a well-formatted DNG file.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteInputStream">
      <MemberSignature Language="C#" Value="public void WriteInputStream (System.IO.Stream dngOutput, Android.Util.Size size, System.IO.Stream pixels, long offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteInputStream(class System.IO.Stream dngOutput, class Android.Util.Size size, class System.IO.Stream pixels, int64 offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("writeInputStream", "(Ljava/io/OutputStream;Landroid/util/Size;Ljava/io/InputStream;J)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dngOutput" Type="System.IO.Stream" />
        <Parameter Name="size" Type="Android.Util.Size" />
        <Parameter Name="pixels" Type="System.IO.Stream" />
        <Parameter Name="offset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dngOutput">an <c><see cref="T:Java.IO.OutputStream" /></c> to write the DNG file to.</param>
        <param name="size">the <c><see cref="T:Android.Util.Size" /></c> of the image to write, in pixels.</param>
        <param name="pixels">an <c><see cref="T:Java.IO.InputStream" /></c> of pixel data to write.</param>
        <param name="offset">the offset of the raw image in bytes.  This indicates how many bytes will
               be skipped in the input before any pixel data is read.</param>
        <summary>Write the <c><see cref="F:Android.Graphics.ImageFormat.RawSensor" /></c> pixel data to a DNG file with
 the currently configured metadata.</summary>
        <remarks><para tool="javadoc-to-mdoc">Write the <c><see cref="F:Android.Graphics.ImageFormat.RawSensor" /></c> pixel data to a DNG file with
 the currently configured metadata.

 </para><para tool="javadoc-to-mdoc">
 Raw pixel data must have 16 bits per pixel, and the input must contain at least
 <c>offset + 2 * width * height)</c> bytes.  The width and height of
 the input are taken from the width and height set in the <c><see cref="T:Android.Hardware.Camera2.DngCreator" /></c> metadata tags,
 and will typically be equal to the width and height of
 <c><see cref="P:Android.Hardware.Camera2.CameraCharacteristics.SensorInfoActiveArraySize" /></c>.
 The pixel layout in the input is determined from the reported color filter arrangement (CFA)
 set in <c><see cref="P:Android.Hardware.Camera2.CameraCharacteristics.SensorInfoColorFilterArrangement" /></c>.  If insufficient
 metadata is available to write a well-formatted DNG file, an
 <c><see cref="T:Java.Lang.IllegalStateException" /></c> will be thrown.
 </para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/hardware/camera2/DngCreator.html#writeInputStream(java.io.OutputStream, android.util.Size, java.io.InputStream, long)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <exception cref="T:Java.IO.IOException">if an error was encountered in the input or output stream.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if not enough metadata information has been
          set to write a well-formatted DNG file.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the size passed in does not match the
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
