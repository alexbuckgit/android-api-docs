<Type Name="ConsumerIrManager" FullName="Android.Hardware.ConsumerIrManager">
  <TypeSignature Language="C#" Value="public sealed class ConsumerIrManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ConsumerIrManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/hardware/ConsumerIrManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="19">
    <summary>Class that operates consumer infrared on the device.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Class that operates consumer infrared on the device.

 </para>
      <para tool="javadoc-to-mdoc">
 To obtain an instance of the system infrared transmitter, call
 <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" /></c> with
 <c><see cref="F:Android.Content.Context.ConsumerIrService" /></c> as the argument.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/hardware/ConsumerIrManager.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetCarrierFrequencies">
      <MemberSignature Language="C#" Value="public Android.Hardware.ConsumerIrManager.CarrierFrequencyRange[] GetCarrierFrequencies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Hardware.ConsumerIrManager/CarrierFrequencyRange[] GetCarrierFrequencies() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCarrierFrequencies", "()[Landroid/hardware/ConsumerIrManager$CarrierFrequencyRange;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.ConsumerIrManager+CarrierFrequencyRange[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Query the infrared transmitter's supported carrier frequencies</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Query the infrared transmitter's supported carrier frequencies</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/ConsumerIrManager.html#getCarrierFrequencies()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIrEmitter">
      <MemberSignature Language="C#" Value="public bool HasIrEmitter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasIrEmitter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("hasIrEmitter", "()Z", "GetHasIrEmitterHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Check whether the device has an infrared emitter.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Check whether the device has an infrared emitter.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/ConsumerIrManager.html#hasIrEmitter()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transmit">
      <MemberSignature Language="C#" Value="public void Transmit (int carrierFrequency, int[] pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transmit(int32 carrierFrequency, int32[] pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("transmit", "(I[I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="carrierFrequency" Type="System.Int32" />
        <Parameter Name="pattern" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="carrierFrequency">The IR carrier frequency in Hertz.</param>
        <param name="pattern">The alternating on/off pattern in microseconds to transmit.
</param>
        <summary>Transmit an infrared pattern
 </summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Transmit an infrared pattern
 </para>
          <para tool="javadoc-to-mdoc">
 This method is synchronous; when it returns the pattern has
 been transmitted. Only patterns shorter than 2 seconds will
 be transmitted.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/hardware/ConsumerIrManager.html#transmit(int, int[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransmitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task TransmitAsync (int carrierFrequency, int[] pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task TransmitAsync(int32 carrierFrequency, int32[] pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="carrierFrequency" Type="System.Int32" />
        <Parameter Name="pattern" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="carrierFrequency">To be added.</param>
        <param name="pattern">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
