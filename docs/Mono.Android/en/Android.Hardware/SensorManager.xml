<Type Name="SensorManager" FullName="Android.Hardware.SensorManager">
  <TypeSignature Language="C#" Value="public abstract class SensorManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SensorManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/hardware/SensorManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary tool="true">
      <example>
        <code lang="java">
 public class SensorActivity extends Activity, implements SensorEventListener {
     private final SensorManager mSensorManager;
     private final Sensor mAccelerometer;

     public SensorActivity() {
         mSensorManager = (SensorManager)getSystemService(SENSOR_SERVICE);
         mAccelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
     }

     protected void onResume() {
         super.onResume();
         mSensorManager.registerListener(this, mAccelerometer, SensorManager.SENSOR_DELAY_NORMAL);
     }

     protected void onPause() {
         super.onPause();
         mSensorManager.unregisterListener(this);
     }

     public void onAccuracyChanged(Sensor sensor, int accuracy) {
     }

     public void onSensorChanged(SensorEvent event) {
     }
 }
 </code>
      </example>
    </summary>
    <remarks />
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SensorManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CancelTriggerSensor">
      <MemberSignature Language="C#" Value="public virtual bool CancelTriggerSensor (Android.Hardware.TriggerEventListener listener, Android.Hardware.Sensor sensor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CancelTriggerSensor(class Android.Hardware.TriggerEventListener listener, class Android.Hardware.Sensor sensor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("cancelTriggerSensor", "(Landroid/hardware/TriggerEventListener;Landroid/hardware/Sensor;)Z", "GetCancelTriggerSensor_Landroid_hardware_TriggerEventListener_Landroid_hardware_Sensor_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.TriggerEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
      </Parameters>
      <Docs>
        <param name="listener">The listener on which the
        <c><see cref="M:Android.Hardware.TriggerEventListener.OnTrigger(Android.Hardware.TriggerEvent)" /></c>
        is delivered.It should be the same as the one used
        in <c><see cref="M:Android.Hardware.SensorManager.RequestTriggerSensor(Android.Hardware.TriggerEventListener, Android.Hardware.Sensor)" /></c></param>
        <param name="sensor">The sensor for which the trigger request should be canceled.
        If null, it cancels receiving trigger for all sensors associated
        with the listener.</param>
        <summary>Cancels receiving trigger events for a trigger sensor.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalArgumentException">when sensor is a trigger sensor.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public virtual bool Flush (Android.Hardware.ISensorEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Flush(class Android.Hardware.ISensorEventListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("flush", "(Landroid/hardware/SensorEventListener;)Z", "GetFlush_Landroid_hardware_SensorEventListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">A <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> object
        which was previously used in a registerListener call.</param>
        <summary tool="true">Flushes the FIFO of all the sensors registered for this listener.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.Lang.IllegalArgumentException">when listener is null.
</exception>
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
      </Docs>
      <since version="Added in API level 19" />
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static Android.Hardware.SensorManager FromContext (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Hardware.SensorManager FromContext(class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Hardware.SensorManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetAltitude">
      <MemberSignature Language="C#" Value="public static float GetAltitude (float p0, float p);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 GetAltitude(float32 p0, float32 p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getAltitude", "(FF)F", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="System.Single" />
        <Parameter Name="p" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="p0">pressure at sea level</param>
        <param name="p">atmospheric pressure</param>
        <summary>Computes the Altitude in meters from the atmospheric pressure and the
 pressure at sea level.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetAngleChange">
      <MemberSignature Language="C#" Value="public static void GetAngleChange (float[] angleChange, float[] R, float[] prevR);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetAngleChange(float32[] angleChange, float32[] R, float32[] prevR) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getAngleChange", "([F[F[F)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angleChange" Type="System.Single[]" />
        <Parameter Name="R" Type="System.Single[]" />
        <Parameter Name="prevR" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="angleChange">an an array of floats (z, x, and y) in which the angle change
        (in radians) is stored
</param>
        <param name="R">current rotation matrix</param>
        <param name="prevR">previous rotation matrix</param>
        <summary>Helper function to compute the angle change between two rotation matrices.</summary>
        <remarks />
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultSensor">
      <MemberSignature Language="C#" Value="public virtual Android.Hardware.Sensor GetDefaultSensor (Android.Hardware.SensorType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Hardware.Sensor GetDefaultSensor(valuetype Android.Hardware.SensorType type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDefaultSensor", "(I)Landroid/hardware/Sensor;", "GetGetDefaultSensor_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Sensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.Hardware.SensorType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">of sensors requested</param>
        <summary tool="true">Use this method to get the default sensor for a given type.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
        <altmember cref="M:Android.Hardware.SensorManager.GetSensorList(Android.Hardware.SensorType)" />
        <altmember cref="T:Android.Hardware.Sensor" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultSensor">
      <MemberSignature Language="C#" Value="public virtual Android.Hardware.Sensor GetDefaultSensor (Android.Hardware.SensorType type, bool wakeUp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Hardware.Sensor GetDefaultSensor(valuetype Android.Hardware.SensorType type, bool wakeUp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDefaultSensor", "(IZ)Landroid/hardware/Sensor;", "GetGetDefaultSensor_IZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Sensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.Hardware.SensorType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="wakeUp" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">type of sensor requested</param>
        <param name="wakeUp">flag to indicate whether the Sensor is a wake-up or non wake-up sensor.</param>
        <summary>Return a Sensor with the given type and wakeUp properties.</summary>
        <returns>To be added.</returns>
        <remarks />
        <altmember cref="P:Android.Hardware.Sensor.IsWakeUpSensor" />
      </Docs>
    </Member>
    <Member MemberName="GetInclination">
      <MemberSignature Language="C#" Value="public static float GetInclination (float[] I);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 GetInclination(float32[] I) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInclination", "([F)F", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="I" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="I">inclination matrix see <c><see cref="M:Android.Hardware.SensorManager.GetRotationMatrix(System.Single[], System.Single[], System.Single[], System.Single[])" /></c>.</param>
        <summary>Computes the geomagnetic inclination angle in radians from the
 inclination matrix <format type="text/html"><b>I</b></format> returned by <c><see cref="M:Android.Hardware.SensorManager.GetRotationMatrix(System.Single[], System.Single[], System.Single[], System.Single[])" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
        <altmember cref="M:Android.Hardware.SensorManager.GetRotationMatrix(System.Single[], System.Single[], System.Single[], System.Single[])" />
        <altmember cref="M:Android.Hardware.SensorManager.GetOrientation(System.Single[], System.Single[])" />
        <altmember cref="T:Android.Hardware.GeomagneticField" />
      </Docs>
    </Member>
    <Member MemberName="GetOrientation">
      <MemberSignature Language="C#" Value="public static float[] GetOrientation (float[] R, float[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32[] GetOrientation(float32[] R, float32[] values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOrientation", "([F[F)[F", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="R" Type="System.Single[]" />
        <Parameter Name="values" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="R">rotation matrix see <c><see cref="M:Android.Hardware.SensorManager.GetRotationMatrix(System.Single[], System.Single[], System.Single[], System.Single[])" /></c>.</param>
        <param name="values">an array of 3 floats to hold the result.</param>
        <summary>Computes the device's orientation based on the rotation matrix.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
        <altmember cref="M:Android.Hardware.SensorManager.GetRotationMatrix(System.Single[], System.Single[], System.Single[], System.Single[])" />
        <altmember cref="T:Android.Hardware.GeomagneticField" />
      </Docs>
    </Member>
    <Member MemberName="GetQuaternionFromVector">
      <MemberSignature Language="C#" Value="public static void GetQuaternionFromVector (float[] Q, float[] rv);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetQuaternionFromVector(float32[] Q, float32[] rv) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getQuaternionFromVector", "([F[F)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Q" Type="System.Single[]" />
        <Parameter Name="rv" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="Q">an array of floats in which to store the computed quaternion
</param>
        <param name="rv">the rotation vector to convert</param>
        <summary>Helper function to convert a rotation vector to a normalized quaternion.</summary>
        <remarks />
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetRotationMatrix">
      <MemberSignature Language="C#" Value="public static bool GetRotationMatrix (float[] R, float[] I, float[] gravity, float[] geomagnetic);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetRotationMatrix(float32[] R, float32[] I, float32[] gravity, float32[] geomagnetic) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getRotationMatrix", "([F[F[F[F)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="R" Type="System.Single[]" />
        <Parameter Name="I" Type="System.Single[]" />
        <Parameter Name="gravity" Type="System.Single[]" />
        <Parameter Name="geomagnetic" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="R">is an array of 9 floats holding the rotation matrix <format type="text/html"><b>R</b></format> when
        this function returns. R can be null.
        <para tool="javadoc-to-mdoc" /></param>
        <param name="I">is an array of 9 floats holding the rotation matrix <format type="text/html"><b>I</b></format> when
        this function returns. I can be null.
        <para tool="javadoc-to-mdoc" /></param>
        <param name="gravity">is an array of 3 floats containing the gravity vector expressed in
        the device's coordinate. You can simply use the
        <c><see cref="P:Android.Hardware.SensorEvent.Values" /></c> returned by a
        <c><see cref="T:Android.Hardware.SensorEvent" /></c> of a
        <c><see cref="T:Android.Hardware.Sensor" /></c> of type
        <c><see cref="!:Android.Hardware.Sensor.TYPE_ACCELEROMETER" /></c>.
        <para tool="javadoc-to-mdoc" /></param>
        <param name="geomagnetic">is an array of 3 floats containing the geomagnetic vector
        expressed in the device's coordinate. You can simply use the
        <c><see cref="P:Android.Hardware.SensorEvent.Values" /></c> returned by a
        <c><see cref="T:Android.Hardware.SensorEvent" /></c> of a
        <c><see cref="T:Android.Hardware.Sensor" /></c> of type
        <c><see cref="!:Android.Hardware.Sensor.TYPE_MAGNETIC_FIELD" /></c>.</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
        <altmember cref="M:Android.Hardware.SensorManager.GetInclination(System.Single[])" />
        <altmember cref="M:Android.Hardware.SensorManager.GetOrientation(System.Single[], System.Single[])" />
        <altmember cref="M:Android.Hardware.SensorManager.RemapCoordinateSystem(System.Single[], Android.Hardware.Axis, Android.Hardware.Axis, Android.Hardware.Axis)" />
      </Docs>
    </Member>
    <Member MemberName="GetRotationMatrixFromVector">
      <MemberSignature Language="C#" Value="public static void GetRotationMatrixFromVector (float[] R, float[] rotationVector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetRotationMatrixFromVector(float32[] R, float32[] rotationVector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getRotationMatrixFromVector", "([F[F)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="R" Type="System.Single[]" />
        <Parameter Name="rotationVector" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="R">an array of floats in which to store the rotation matrix
</param>
        <param name="rotationVector">the rotation vector to convert</param>
        <summary>Helper function to convert a rotation vector to a rotation matrix.</summary>
        <remarks />
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetSensorList">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.Hardware.Sensor&gt; GetSensorList (Android.Hardware.SensorType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class Android.Hardware.Sensor&gt; GetSensorList(valuetype Android.Hardware.SensorType type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getSensorList", "(I)Ljava/util/List;", "GetGetSensorList_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.Hardware.Sensor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Android.Hardware.SensorType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">of sensors requested</param>
        <summary>Use this method to get the list of available sensors of a certain type.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
        <altmember cref="M:Android.Hardware.SensorManager.GetDefaultSensor(Android.Hardware.SensorType)" />
        <altmember cref="T:Android.Hardware.Sensor" />
      </Docs>
    </Member>
    <Member MemberName="GravityDeathStarI">
      <MemberSignature Language="C#" Value="public const float GravityDeathStarI = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityDeathStarI = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_DEATH_STAR_I")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Gravity (estimate) on the first Death Star in Empire units (m/s^2) </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityEarth">
      <MemberSignature Language="C#" Value="public const float GravityEarth = 9.80665;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityEarth = (9.80665)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_EARTH")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>9.80665</MemberValue>
      <Docs>
        <summary>Earth's gravity in SI units (m/s^2) </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityJupiter">
      <MemberSignature Language="C#" Value="public const float GravityJupiter = 23.12;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityJupiter = (23.12)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_JUPITER")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>23.12</MemberValue>
      <Docs>
        <summary>Jupiter's gravity in SI units (m/s^2) </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityMars">
      <MemberSignature Language="C#" Value="public const float GravityMars = 3.71;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityMars = (3.71)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_MARS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>3.71</MemberValue>
      <Docs>
        <summary>Mars' gravity in SI units (m/s^2) </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityMercury">
      <MemberSignature Language="C#" Value="public const float GravityMercury = 3.7;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityMercury = (3.7)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_MERCURY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>3.7</MemberValue>
      <Docs>
        <summary>Mercury's gravity in SI units (m/s^2) </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityMoon">
      <MemberSignature Language="C#" Value="public const float GravityMoon = 1.6;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityMoon = (1.6)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_MOON")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>1.6</MemberValue>
      <Docs>
        <summary>The Moon's gravity in SI units (m/s^2) </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityNeptune">
      <MemberSignature Language="C#" Value="public const float GravityNeptune = 11;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityNeptune = (11)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_NEPTUNE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>11</MemberValue>
      <Docs>
        <summary>Neptune's gravity in SI units (m/s^2) </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityPluto">
      <MemberSignature Language="C#" Value="public const float GravityPluto = 0.6;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityPluto = (0.6)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_PLUTO")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>0.6</MemberValue>
      <Docs>
        <summary>Pluto's gravity in SI units (m/s^2) </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravitySaturn">
      <MemberSignature Language="C#" Value="public const float GravitySaturn = 8.96;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravitySaturn = (8.96)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_SATURN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>8.96</MemberValue>
      <Docs>
        <summary>Saturn's gravity in SI units (m/s^2) </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravitySun">
      <MemberSignature Language="C#" Value="public const float GravitySun = 275;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravitySun = (275)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_SUN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>275</MemberValue>
      <Docs>
        <summary>Sun's gravity in SI units (m/s^2) </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityTheIsland">
      <MemberSignature Language="C#" Value="public const float GravityTheIsland = 4.815162;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityTheIsland = (4.815162)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_THE_ISLAND")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>4.815162</MemberValue>
      <Docs>
        <summary>Gravity on the island </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityUranus">
      <MemberSignature Language="C#" Value="public const float GravityUranus = 8.69;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityUranus = (8.69)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_URANUS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>8.69</MemberValue>
      <Docs>
        <summary>Uranus' gravity in SI units (m/s^2) </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GravityVenus">
      <MemberSignature Language="C#" Value="public const float GravityVenus = 8.87;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 GravityVenus = (8.87)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("GRAVITY_VENUS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>8.87</MemberValue>
      <Docs>
        <summary>Venus' gravity in SI units (m/s^2) </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LightCloudy">
      <MemberSignature Language="C#" Value="public const float LightCloudy = 100;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 LightCloudy = (100)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LIGHT_CLOUDY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>100</MemberValue>
      <Docs>
        <summary>luminance under a cloudy sky in lux </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LightFullmoon">
      <MemberSignature Language="C#" Value="public const float LightFullmoon = 0.25;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 LightFullmoon = (0.25)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LIGHT_FULLMOON")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>0.25</MemberValue>
      <Docs>
        <summary>luminance at night with full moon in lux </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LightNoMoon">
      <MemberSignature Language="C#" Value="public const float LightNoMoon = 0.001;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 LightNoMoon = (0.001)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LIGHT_NO_MOON")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>0.001</MemberValue>
      <Docs>
        <summary>luminance at night with no moon in lux</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LightOvercast">
      <MemberSignature Language="C#" Value="public const float LightOvercast = 10000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 LightOvercast = (10000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LIGHT_OVERCAST")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>10000</MemberValue>
      <Docs>
        <summary>luminance under an overcast sky in lux </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LightShade">
      <MemberSignature Language="C#" Value="public const float LightShade = 20000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 LightShade = (20000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LIGHT_SHADE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>20000</MemberValue>
      <Docs>
        <summary>luminance in shade in lux </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LightSunlight">
      <MemberSignature Language="C#" Value="public const float LightSunlight = 110000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 LightSunlight = (110000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LIGHT_SUNLIGHT")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>110000</MemberValue>
      <Docs>
        <summary>luminance of sunlight in lux </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LightSunlightMax">
      <MemberSignature Language="C#" Value="public const float LightSunlightMax = 120000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 LightSunlightMax = (120000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LIGHT_SUNLIGHT_MAX")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>120000</MemberValue>
      <Docs>
        <summary>Maximum luminance of sunlight in lux </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LightSunrise">
      <MemberSignature Language="C#" Value="public const float LightSunrise = 400;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 LightSunrise = (400)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("LIGHT_SUNRISE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>400</MemberValue>
      <Docs>
        <summary>luminance at sunrise in lux </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MagneticFieldEarthMax">
      <MemberSignature Language="C#" Value="public const float MagneticFieldEarthMax = 60;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 MagneticFieldEarthMax = (60)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MAGNETIC_FIELD_EARTH_MAX")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>60</MemberValue>
      <Docs>
        <summary>Maximum magnetic field on Earth's surface </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="MagneticFieldEarthMin">
      <MemberSignature Language="C#" Value="public const float MagneticFieldEarthMin = 30;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 MagneticFieldEarthMin = (30)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MAGNETIC_FIELD_EARTH_MIN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>30</MemberValue>
      <Docs>
        <summary>Minimum magnetic field on Earth's surface </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PressureStandardAtmosphere">
      <MemberSignature Language="C#" Value="public const float PressureStandardAtmosphere = 1013.25;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 PressureStandardAtmosphere = (1013.25)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PRESSURE_STANDARD_ATMOSPHERE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>1013.25</MemberValue>
      <Docs>
        <summary>Standard atmosphere, or average sea-level pressure in hPa (millibar) </summary>
        <remarks />
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual bool RegisterListener (Android.Hardware.ISensorListener listener, int sensors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterListener(class Android.Hardware.ISensorListener listener, int32 sensors) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(Landroid/hardware/SensorListener;I)Z", "GetRegisterListener_Landroid_hardware_SensorListener_IHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorListener" />
        <Parameter Name="sensors" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="listener">sensor listener object</param>
        <param name="sensors">a bit masks of the sensors to register to</param>
        <summary tool="true">Registers a listener for given sensors.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual bool RegisterListener (Android.Hardware.ISensorEventListener listener, Android.Hardware.Sensor sensor, Android.Hardware.SensorDelay rateUs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterListener(class Android.Hardware.ISensorEventListener listener, class Android.Hardware.Sensor sensor, valuetype Android.Hardware.SensorDelay rateUs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;I)Z", "GetRegisterListener_Landroid_hardware_SensorEventListener_Landroid_hardware_Sensor_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
        <Parameter Name="rate" Type="Android.Hardware.SensorDelay">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="listener">A <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> object.</param>
        <param name="sensor">The <c><see cref="T:Android.Hardware.Sensor" /></c> to register to.</param>
        <param name="rateUs">The rate <c><see cref="T:Android.Hardware.SensorEvent" /></c> are
        delivered at. This is only a hint to the system. Events may be
        received faster or slower than the specified rate. Usually events
        are received faster. The value must be one of
        <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_NORMAL" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_UI" /></c>,
        <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_GAME" /></c>, or <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_FASTEST" /></c>
        or, the desired delay between events in microseconds.
        Specifying the delay in microseconds only works from Android
        2.3 (API level 9) onwards. For earlier releases, you must use
        one of the <c>SENSOR_DELAY_*</c> constants.</param>
        <param name="rate">The rate <c><see cref="T:Android.Hardware.SensorEvent" /></c> are
        delivered at. This is only a hint to the system. Events may be
        received faster or slower than the specified rate. Usually events
        are received faster. The value must be one of
        <c><see cref="F:Android.Hardware.SensorDelay.Normal" /></c>, <c><see cref="F:Android.Hardware.SensorDelay.Ui" /></c>,
        <c><see cref="F:Android.Hardware.SensorDelay.Game" /></c>, or <c><see cref="F:Android.Hardware.SensorDelay.Fastest" /></c>
        or, the desired delay between events in microseconds.
        Specifying the delay in microseconds only works from Android
        2.3 (API level 9) onwards. For earlier releases, you must use
        one of the <c>SENSOR_DELAY_*</c> constants.</param>
        <summary>Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor at the given sampling frequency.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalArgumentException">when sensor is null or a trigger sensor
</exception>
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
        <altmember cref="M:Android.Hardware.SensorManager.UnregisterListener(Android.Hardware.ISensorEventListener)" />
        <altmember cref="M:Android.Hardware.SensorManager.UnregisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual bool RegisterListener (Android.Hardware.ISensorListener listener, int sensors, Android.Hardware.SensorDelay rate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterListener(class Android.Hardware.ISensorListener listener, int32 sensors, valuetype Android.Hardware.SensorDelay rate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(Landroid/hardware/SensorListener;II)Z", "GetRegisterListener_Landroid_hardware_SensorListener_IIHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorListener" />
        <Parameter Name="sensors" Type="System.Int32" />
        <Parameter Name="rate" Type="Android.Hardware.SensorDelay">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="listener">sensor listener object</param>
        <param name="sensors">a bit masks of the sensors to register to</param>
        <param name="rate">rate of events. This is only a hint to the system. events may be
        received faster or slower than the specified rate. Usually events
        are received faster. The value must be one of
        <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_NORMAL" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_UI" /></c>,
        <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_GAME" /></c>, or <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_FASTEST" /></c>.</param>
        <summary>Registers a SensorListener for given sensors.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual bool RegisterListener (Android.Hardware.ISensorEventListener listener, Android.Hardware.Sensor sensor, Android.Hardware.SensorDelay rateUs, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterListener(class Android.Hardware.ISensorEventListener listener, class Android.Hardware.Sensor sensor, valuetype Android.Hardware.SensorDelay rateUs, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;ILandroid/os/Handler;)Z", "GetRegisterListener_Landroid_hardware_SensorEventListener_Landroid_hardware_Sensor_ILandroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
        <Parameter Name="rate" Type="Android.Hardware.SensorDelay">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">A <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> object.</param>
        <param name="sensor">The <c><see cref="T:Android.Hardware.Sensor" /></c> to register to.</param>
        <param name="rateUs">The rate <c><see cref="T:Android.Hardware.SensorEvent" /></c> are
        delivered at. This is only a hint to the system. Events may be
        received faster or slower than the specified rate. Usually events
        are received faster. The value must be one of
        <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_NORMAL" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_UI" /></c>,
        <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_GAME" /></c>, or <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_FASTEST" /></c>.
        or, the desired delay between events in microseconds.
        Specifying the delay in microseconds only works from Android
        2.3 (API level 9) onwards. For earlier releases, you must use
        one of the <c>SENSOR_DELAY_*</c> constants.</param>
        <param name="handler">The <c><see cref="T:Android.OS.Handler" /></c> the <c><see cref="T:Android.Hardware.SensorEvent" /></c> will be delivered to.</param>
        <param name="rate">The rate <c><see cref="T:Android.Hardware.SensorEvent" /></c> are
        delivered at. This is only a hint to the system. Events may be
        received faster or slower than the specified rate. Usually events
        are received faster. The value must be one of
        <c><see cref="F:Android.Hardware.SensorDelay.Normal" /></c>, <c><see cref="F:Android.Hardware.SensorDelay.Ui" /></c>,
        <c><see cref="F:Android.Hardware.SensorDelay.Game" /></c>, or <c><see cref="F:Android.Hardware.SensorDelay.Fastest" /></c>.
        or, the desired delay between events in microseconds.
        Specifying the delay in microseconds only works from Android
        2.3 (API level 9) onwards. For earlier releases, you must use
        one of the <c>SENSOR_DELAY_*</c> constants.</param>
        <summary>Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalArgumentException">when sensor is null or a trigger sensor
</exception>
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
        <altmember cref="M:Android.Hardware.SensorManager.UnregisterListener(Android.Hardware.ISensorEventListener)" />
        <altmember cref="M:Android.Hardware.SensorManager.UnregisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual bool RegisterListener (Android.Hardware.ISensorEventListener listener, Android.Hardware.Sensor sensor, Android.Hardware.SensorDelay rateUs, int maxBatchReportLatencyUs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterListener(class Android.Hardware.ISensorEventListener listener, class Android.Hardware.Sensor sensor, valuetype Android.Hardware.SensorDelay rateUs, int32 maxBatchReportLatencyUs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;II)Z", "GetRegisterListener_Landroid_hardware_SensorEventListener_Landroid_hardware_Sensor_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
        <Parameter Name="rateUs" Type="Android.Hardware.SensorDelay">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maxBatchReportLatencyUs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="listener">A <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> object
            that will receive the sensor events. If the application is interested in receiving
            flush complete notifications, it should register with
            <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> instead.</param>
        <param name="sensor">The <c><see cref="T:Android.Hardware.Sensor" /></c> to register to.</param>
        <param name="rateUs">The desired delay between two consecutive events in microseconds. This is only
            a hint to the system. Events may be received faster or slower than the specified
            rate. Usually events are received faster. Can be one of
            <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_NORMAL" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_UI" /></c>,
            <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_GAME" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_FASTEST" /></c> or the delay in
            microseconds.</param>
        <param name="maxBatchReportLatencyUs">An event in the batch can be delayed by at most
            maxBatchReportLatency microseconds. More events can be batched if this value is
            large. If this is set to zero, batch mode is disabled and events are delivered in
            continuous mode as soon as they are available which is equivalent to calling
            <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor)" /></c>.</param>
        <summary>Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor at the given sampling frequency and the given maximum reporting latency.</summary>
        <returns>To be added.</returns>
        <remarks />
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
        <altmember cref="M:Android.Hardware.SensorManager.UnregisterListener(Android.Hardware.ISensorEventListener)" />
        <altmember cref="M:Android.Hardware.SensorManager.Flush(Android.Hardware.ISensorEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual bool RegisterListener (Android.Hardware.ISensorEventListener listener, Android.Hardware.Sensor sensor, int rateUs, int maxBatchReportLatencyUs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterListener(class Android.Hardware.ISensorEventListener listener, class Android.Hardware.Sensor sensor, int32 rateUs, int32 maxBatchReportLatencyUs) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;II)Z", "GetRegisterListener_Landroid_hardware_SensorEventListener_Landroid_hardware_Sensor_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
        <Parameter Name="rateUs" Type="System.Int32" />
        <Parameter Name="maxBatchReportLatencyUs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="listener">A <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> object
            that will receive the sensor events. If the application is interested in receiving
            flush complete notifications, it should register with
            <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> instead.</param>
        <param name="sensor">The <c><see cref="T:Android.Hardware.Sensor" /></c> to register to.</param>
        <param name="rateUs">The desired delay between two consecutive events in microseconds. This is only
            a hint to the system. Events may be received faster or slower than the specified
            rate. Usually events are received faster. Can be one of
            <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_NORMAL" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_UI" /></c>,
            <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_GAME" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_FASTEST" /></c> or the delay in
            microseconds.</param>
        <param name="maxBatchReportLatencyUs">An event in the batch can be delayed by at most
            maxBatchReportLatency microseconds. More events can be batched if this value is
            large. If this is set to zero, batch mode is disabled and events are delivered in
            continuous mode as soon as they are available which is equivalent to calling
            <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor)" /></c>.</param>
        <summary>Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor at the given sampling frequency and the given maximum reporting latency.</summary>
        <returns>To be added.</returns>
        <remarks />
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
        <altmember cref="M:Android.Hardware.SensorManager.UnregisterListener(Android.Hardware.ISensorEventListener)" />
        <altmember cref="M:Android.Hardware.SensorManager.Flush(Android.Hardware.ISensorEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual bool RegisterListener (Android.Hardware.ISensorEventListener listener, Android.Hardware.Sensor sensor, Android.Hardware.SensorDelay rateUs, int maxBatchReportLatencyUs, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterListener(class Android.Hardware.ISensorEventListener listener, class Android.Hardware.Sensor sensor, valuetype Android.Hardware.SensorDelay rateUs, int32 maxBatchReportLatencyUs, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;IILandroid/os/Handler;)Z", "GetRegisterListener_Landroid_hardware_SensorEventListener_Landroid_hardware_Sensor_IILandroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
        <Parameter Name="rateUs" Type="Android.Hardware.SensorDelay">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="maxBatchReportLatencyUs" Type="System.Int32" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">A <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> object
            that will receive the sensor events. If the application is interested in receiving
            flush complete notifications, it should register with
            <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> instead.</param>
        <param name="sensor">The <c><see cref="T:Android.Hardware.Sensor" /></c> to register to.</param>
        <param name="rateUs">The desired delay between two consecutive events in microseconds. This is only
            a hint to the system. Events may be received faster or slower than the specified
            rate. Usually events are received faster. Can be one of
            <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_NORMAL" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_UI" /></c>,
            <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_GAME" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_FASTEST" /></c> or the delay in
            microseconds.</param>
        <param name="maxBatchReportLatencyUs">An event in the batch can be delayed by at most
            maxBatchReportLatency microseconds. More events can be batched if this value is
            large. If this is set to zero, batch mode is disabled and events are delivered in
            continuous mode as soon as they are available which is equivalent to calling
            <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor)" /></c>.</param>
        <param name="handler">The <c><see cref="T:Android.OS.Handler" /></c> the <c><see cref="T:Android.Hardware.SensorEvent" /></c> will be delivered to.</param>
        <summary>Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor at the given sampling frequency and the given maximum reporting latency.</summary>
        <returns>To be added.</returns>
        <remarks />
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual bool RegisterListener (Android.Hardware.ISensorEventListener listener, Android.Hardware.Sensor sensor, int rateUs, int maxBatchReportLatencyUs, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterListener(class Android.Hardware.ISensorEventListener listener, class Android.Hardware.Sensor sensor, int32 rateUs, int32 maxBatchReportLatencyUs, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;IILandroid/os/Handler;)Z", "GetRegisterListener_Landroid_hardware_SensorEventListener_Landroid_hardware_Sensor_IILandroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
        <Parameter Name="rateUs" Type="System.Int32" />
        <Parameter Name="maxBatchReportLatencyUs" Type="System.Int32" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">A <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> object
            that will receive the sensor events. If the application is interested in receiving
            flush complete notifications, it should register with
            <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> instead.</param>
        <param name="sensor">The <c><see cref="T:Android.Hardware.Sensor" /></c> to register to.</param>
        <param name="rateUs">The desired delay between two consecutive events in microseconds. This is only
            a hint to the system. Events may be received faster or slower than the specified
            rate. Usually events are received faster. Can be one of
            <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_NORMAL" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_UI" /></c>,
            <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_GAME" /></c>, <c><see cref="!:Android.Hardware.SensorManager.SENSOR_DELAY_FASTEST" /></c> or the delay in
            microseconds.</param>
        <param name="maxBatchReportLatencyUs">An event in the batch can be delayed by at most
            maxBatchReportLatency microseconds. More events can be batched if this value is
            large. If this is set to zero, batch mode is disabled and events are delivered in
            continuous mode as soon as they are available which is equivalent to calling
            <c><see cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor)" /></c>.</param>
        <param name="handler">The <c><see cref="T:Android.OS.Handler" /></c> the <c><see cref="T:Android.Hardware.SensorEvent" /></c> will be delivered to.</param>
        <summary>Registers a <c><see cref="T:Android.Hardware.ISensorEventListener" /></c> for the given
 sensor at the given sampling frequency and the given maximum reporting latency.</summary>
        <returns>To be added.</returns>
        <remarks />
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
      </Docs>
    </Member>
    <Member MemberName="RemapCoordinateSystem">
      <MemberSignature Language="C#" Value="public static bool RemapCoordinateSystem (float[] inR, Android.Hardware.Axis X, Android.Hardware.Axis Y, float[] outR);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RemapCoordinateSystem(float32[] inR, valuetype Android.Hardware.Axis X, valuetype Android.Hardware.Axis Y, float32[] outR) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("remapCoordinateSystem", "([FII[F)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inR" Type="System.Single[]" />
        <Parameter Name="X" Type="Android.Hardware.Axis">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="Y" Type="Android.Hardware.Axis">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="outR" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="inR">the rotation matrix to be transformed. Usually it is the matrix
        returned by <c><see cref="M:Android.Hardware.SensorManager.GetRotationMatrix(System.Single[], System.Single[], System.Single[], System.Single[])" /></c>.</param>
        <param name="X">defines the axis of the new cooridinate system that coincide with the X axis of the
        original coordinate system.</param>
        <param name="Y">defines the axis of the new cooridinate system that coincide with the Y axis of the
        original coordinate system.</param>
        <param name="outR">the transformed rotation matrix. inR and outR should not be the same
        array.</param>
        <summary>
        </summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
        <altmember cref="M:Android.Hardware.SensorManager.GetRotationMatrix(System.Single[], System.Single[], System.Single[], System.Single[])" />
      </Docs>
    </Member>
    <Member MemberName="RequestTriggerSensor">
      <MemberSignature Language="C#" Value="public virtual bool RequestTriggerSensor (Android.Hardware.TriggerEventListener listener, Android.Hardware.Sensor sensor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestTriggerSensor(class Android.Hardware.TriggerEventListener listener, class Android.Hardware.Sensor sensor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestTriggerSensor", "(Landroid/hardware/TriggerEventListener;Landroid/hardware/Sensor;)Z", "GetRequestTriggerSensor_Landroid_hardware_TriggerEventListener_Landroid_hardware_Sensor_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.TriggerEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
      </Parameters>
      <Docs>
        <param name="listener">The listener on which the
        <c><see cref="M:Android.Hardware.TriggerEventListener.OnTrigger(Android.Hardware.TriggerEvent)" /></c> will be delivered.</param>
        <param name="sensor">The sensor to be enabled.</param>
        <summary>Requests receiving trigger events for a trigger sensor.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalArgumentException">when sensor is null or not a trigger sensor.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Sensors">
      <MemberSignature Language="C#" Value="public virtual int Sensors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Sensors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSensors", "()I", "GetGetSensorsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StandardGravity">
      <MemberSignature Language="C#" Value="public const float StandardGravity = 9.80665;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 StandardGravity = (9.80665)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("STANDARD_GRAVITY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>9.80665</MemberValue>
      <Docs>
        <summary>Standard gravity (g) on Earth.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UnregisterListener">
      <MemberSignature Language="C#" Value="public virtual void UnregisterListener (Android.Hardware.ISensorEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterListener(class Android.Hardware.ISensorEventListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterListener", "(Landroid/hardware/SensorEventListener;)V", "GetUnregisterListener_Landroid_hardware_SensorEventListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">a SensorListener object</param>
        <summary tool="true">Unregisters a listener for all sensors.</summary>
        <remarks />
        <since version="Added in API level 3" />
        <altmember cref="M:Android.Hardware.SensorManager.UnregisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor)" />
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterListener">
      <MemberSignature Language="C#" Value="public virtual void UnregisterListener (Android.Hardware.ISensorListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterListener(class Android.Hardware.ISensorListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterListener", "(Landroid/hardware/SensorListener;)V", "GetUnregisterListener_Landroid_hardware_SensorListener_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorListener" />
      </Parameters>
      <Docs>
        <param name="listener">a SensorListener object
</param>
        <summary>Unregisters a listener for all sensors.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterListener">
      <MemberSignature Language="C#" Value="public virtual void UnregisterListener (Android.Hardware.ISensorEventListener listener, Android.Hardware.Sensor sensor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterListener(class Android.Hardware.ISensorEventListener listener, class Android.Hardware.Sensor sensor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;)V", "GetUnregisterListener_Landroid_hardware_SensorEventListener_Landroid_hardware_Sensor_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorEventListener" />
        <Parameter Name="sensor" Type="Android.Hardware.Sensor" />
      </Parameters>
      <Docs>
        <param name="listener">a SensorEventListener object</param>
        <param name="sensor">the sensor to unregister from</param>
        <summary>Unregisters a listener for the sensors with which it is registered.</summary>
        <remarks />
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalArgumentException">when sensor is a trigger sensor.
</exception>
        <altmember cref="M:Android.Hardware.SensorManager.UnregisterListener(Android.Hardware.ISensorEventListener)" />
        <altmember cref="M:Android.Hardware.SensorManager.RegisterListener(Android.Hardware.ISensorEventListener, Android.Hardware.Sensor, Android.Hardware.Sensor)" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterListener">
      <MemberSignature Language="C#" Value="public virtual void UnregisterListener (Android.Hardware.ISensorListener listener, int sensors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterListener(class Android.Hardware.ISensorListener listener, int32 sensors) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterListener", "(Landroid/hardware/SensorListener;I)V", "GetUnregisterListener_Landroid_hardware_SensorListener_IHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Hardware.ISensorListener" />
        <Parameter Name="sensors" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="listener">a SensorListener object</param>
        <param name="sensors">a bit masks of the sensors to unregister from
</param>
        <summary>Unregisters a listener for the sensors with which it is registered.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
