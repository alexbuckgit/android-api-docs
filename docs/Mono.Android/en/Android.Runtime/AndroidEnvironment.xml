<Type Name="AndroidEnvironment" FullName="Android.Runtime.AndroidEnvironment">
  <TypeSignature Language="C#" Value="public static class AndroidEnvironment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AndroidEnvironment extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      Provides a way to manipulate the Android operating environment.
    </summary>
    <remarks />
  </Docs>
  <Members>
    <Member MemberName="AndroidLogAppName">
      <MemberSignature Language="C#" Value="public const string AndroidLogAppName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string AndroidLogAppName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          A <see cref="T:System.String" /> containing the 
          <paramref name="appname" /> used by
          <see cref="M:Android.Runtime.AndroidEnvironment.FailFast(System.String)" />.
        </summary>
        <remarks>
          <para>
            The
            <see cref="M:Android.Runtime.AndroidEnvironment.FailFast(System.String)" />
            method calls
            <see cref="M:Android.Runtime.Logger.Log(Android.Runtime.LogLevel,System.String,System.String)" />,
            using <c>AndroidLogAppName</c> for the <paramref name="appname" />
            parameter value.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FailFast">
      <MemberSignature Language="C#" Value="public static void FailFast (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FailFast(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          A <see cref="T:System.String" /> containing the message to write to
          the Android log before forceably exiting the process.
        </param>
        <summary>
          Writes <paramref name="message" /> to the Android log and exits the
          process.
        </summary>
        <remarks>
          <block subset="none" type="behaviors">
            This method is equivalent to calling 
            <see cref="M:Android.Runtime.Logger.Log(Android.Runtime.LogLevel,System.String,System.String)" />
            as <c>Logger.Log(<see cref="T:Android.Runtime.LogLevel.Fatal" />, 
            <see cref="F:Android.Runtime.AndroidEnvironment.AndroidLogAppName" />,
            <paramref name="message" />)</c> followed by
            <see cref="M:System.Environment.Exit(System.Int32)" />.
          </block>
          <block subset="none" type="note">
            Use this method instead of 
            <see cref="M:System.Environment.FailFast(System.String)" /> as
            this will write messages to the Android log file.
            Additionally, as of Mono 2.6, <c>Environment.FailFast</c> throws a
            <see cref="T:System.NotImplementedException" />, and thus won't
            actually exit the process.
          </block>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseThrowable">
      <MemberSignature Language="C#" Value="public static void RaiseThrowable (Java.Lang.Throwable throwable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RaiseThrowable(class Java.Lang.Throwable throwable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throwable" Type="Java.Lang.Throwable" />
      </Parameters>
      <Docs>
        <param name="throwable">
          A <see cref="T:Java.Lang.Throwable" /> to raise in the Android
          execution environment.
        </param>
        <summary>
          Registers <paramref name="throwable" /> as the exception to raise
          when control returns to the Android execution environment.
        </summary>
        <remarks>
          <block subset="none" type="note">
            DO NOT CALL MORE THAN ONCE before control is returned to Android.
            Calling more than once will result in aborting the process.
          </block>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="throwable" /> is <see langword="null" />.
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionRaiser">
      <MemberSignature Language="C#" Value="public static event EventHandler&lt;Android.Runtime.RaiseThrowableEventArgs&gt; UnhandledExceptionRaiser;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Runtime.RaiseThrowableEventArgs&gt; UnhandledExceptionRaiser" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Runtime.RaiseThrowableEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          Occurs when translating a managed exception into an Android throwable.
        </summary>
        <remarks>
          <para>
            When Android calls into managed code and the managed code throws
            an <see cref="T:System.Exception" />, the exception needs to be
            caught at the Android/managed boundary and handled appropriately.
            For example, the exception could be ignored entirely, or the
            exception could be translated into a 
            <see cref="T:Java.Lang.Throwable" /> instance and raised within 
            Android by using
            <see cref="M:Android.Runtime.AndroidEnvironment.RaiseThrowable(Java.Lang.Throwable)" />.
          </para>
          <para>
            If an event handler chooses to handle this event, it should set the 
            <see cref="P:Android.Runtime.RaiseThrowableEventArgs.Handled" />
            property to <see langword="true" />.
          </para>
          <block subset="none" type="note">
            You cannot rely on the 
            <see cref="E:System.AppDomain.UnhandledException" /> event
            as managed exceptions are never unhandled in MonoDroid; they are 
            always intercepted at the Android/managed boundary within a 
            <c>catch(<see cref="T:System.Exception" />)</c> block.
          </block>
          <block subset="none" type="behaviors">
            The <c>UnhandledExceptionRaiser</c> event is raised when an
            unhandled exception is caught at the Android/managed boundary.  
            All registered event handlers will be invoked in order of
            registration until one of them sets
            <see cref="P:Android.Runtime.RaiseThrowableEventArgs.Handled" />
            to <see langword="true" />.  If there are no registered handlers
            or none of them set 
            <see cref="P:Android.Runtime.RaiseThrowableEventArgs.Handled" />
            to <see langword="true" />, then 
            <see cref="M:Java.Lang.Throwable.FromException(System.Exception)" /> 
            is used to translate the exception instance into a closest-matching 
            <see cref="T:Java.Lang.Throwable" /> instance, and then
            <see cref="M:Android.Runtime.AndroidEnvironment.RaiseThrowable(Java.Lang.Throwable)" />
            is invoked.
          </block>
          <block subset="none" type="usage">
            Subscribers to the <c>UnhandledExceptionRaiser</c> event must
            ensure that 
            <see cref="M:Android.Runtime.AndroidEnvironment.RaiseThrowable(Java.Lang.Throwable)" />
            is not invoked more than once as part of a managed-to-Android
            transition, and should thus set 
            <see cref="P:Android.Runtime.RaiseThrowableEventArgs.Handled" />
            to <see langword="true" /> if they do so.
          </block>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
