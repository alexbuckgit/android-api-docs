<Type Name="Extensions" FullName="Android.Runtime.Extensions">
  <TypeSignature Language="C#" Value="public static class Extensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Extensions extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      Provides a set of helpful extension methods.
    </summary>
    <remarks />
  </Docs>
  <Members>
    <Member MemberName="JavaCast&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult JavaCast&lt;TResult&gt; (this Android.Runtime.IJavaObject instance) where TResult : class, Android.Runtime.IJavaObject;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult JavaCast&lt;class (class Android.Runtime.IJavaObject) TResult&gt;(class Android.Runtime.IJavaObject instance) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="instance" Type="Android.Runtime.IJavaObject" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          The type to convert <paramref name="instance" /> to.  
          <typeparamref name="TResult" /> must implement the
          <see cref="T:Android.Runtime.IJavaObject" /> interface.
        </typeparam>
        <param name="instance">
          An <see cref="T:Android.Runtime.IJavaObject" /> instance to convert
          to a <typeparamref name="TResult" /> instance.
        </param>
        <summary>
          Performs an Android runtime-checked type conversion.
        </summary>
        <returns>
          A <typeparamref name="TResult" /> representation for 
          <paramref name="instance" />.
        </returns>
        <remarks>
          <block subset="none" type="note">
            This is a hack, but a currently necessary one.
          </block>
          <para>
            Most of the <see cref="N:Android" /> types are staticly generated
            wrappers over a description of the underlying Android types. This
            intermediate description does not expose implementation details,
            which sometimes must be relied upon.
          </para>
          <para>
            For example, consider the
            <see cref="P:Javax.Microedition.Khronos.Egl.EGLContext.EGL" /> 
            property, which returns an instance of the 
            <see cref="T:Javax.Microedition.Khronos.Egl.IEGL" />
            interface.  This interface is useless, containing no members to
            invoke or use.  The developer is instead expected to convert this
            instance to an interface which contains actual operations, such as
            the <see cref="T:Javax.Microedition.Khronos.Egl.IEGL10" /> interface.
            Unfortunately, the MonoDroid-generated wrappers do not know this,
            nor can they (the <c>EGL10</c> implementation may be removed in a
            future Android version).  The result is that if developers attempt
            to cast within managed code, the result will be a
            <see cref="T:System.InvalidCastException" />:
          </para>
          <code lang="C#">EGL10 egl10 = (EGL10) EGLContext.EGL; // throws</code>
          <para>
            The <c>JavaCast()</c> method allows performing such type conversions
            while bypassing the managed type system and instead relying upon
            the Android runtime system to perform the type checking.  This
            allows:
          </para>
          <code lang="C#">EGL10 egl10 = EGLContext.EGL.JavaCast&lt;EGL10&gt;(); // good</code>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <para>
            The JNI class for <typeparamref name="TResult" /> cannot be found.
          </para>
          <para>-or-</para>
          <para>
            The proxy class for <typeparamref name="TResult" /> is
            <c>abstract</c>, and the non-<c>abstract</c> Proxy can't be found.
          </para>
        </exception>
        <exception cref="T:System.InvalidCastException">
          The Anrdroid object instance <c><paramref name="instance" />.Handle</c>
          cannot be converted to the Android type corresponding to 
          <typeparamref name="TResult" />.
        </exception>
        <exception cref="T:System.NotSupportedException">
          An unknown error occurred.
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>
