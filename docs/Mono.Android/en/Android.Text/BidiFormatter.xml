<Type Name="BidiFormatter" FullName="Android.Text.BidiFormatter">
  <TypeSignature Language="C#" Value="public sealed class BidiFormatter : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BidiFormatter extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/text/BidiFormatter", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="18">
    <summary>Utility class for formatting text for display in a potentially opposite-directionality context
 without garbling.</summary>
    <remarks />
    <since version="Added in API level 18" />
  </Docs>
  <Members>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static Android.Text.BidiFormatter GetInstance (Java.Util.Locale locale);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Text.BidiFormatter GetInstance(class Java.Util.Locale locale) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInstance", "(Ljava/util/Locale;)Landroid/text/BidiFormatter;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Text.BidiFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="locale">The context locale.
</param>
        <summary tool="true">Factory for creating an instance of BidiFormatter given the context locale.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static Android.Text.BidiFormatter GetInstance (bool rtlContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Text.BidiFormatter GetInstance(bool rtlContext) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInstance", "(Z)Landroid/text/BidiFormatter;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Text.BidiFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rtlContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rtlContext">Whether the context directionality is RTL.
</param>
        <summary>Factory for creating an instance of BidiFormatter given the context directionality.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="public static Android.Text.BidiFormatter Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Text.BidiFormatter Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getInstance", "()Landroid/text/BidiFormatter;", "GetGetInstanceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Text.BidiFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Factory for creating an instance of BidiFormatter for the default locale directionality.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="IsRtl">
      <MemberSignature Language="C#" Value="public bool IsRtl (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsRtl(string str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isRtl", "(Ljava/lang/String;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">String whose directionality is to be estimated.</param>
        <summary>Estimates the directionality of a string using the default text direction heuristic.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="IsRtlContext">
      <MemberSignature Language="C#" Value="public bool IsRtlContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRtlContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isRtlContext", "()Z", "GetIsRtlContextHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="StereoReset">
      <MemberSignature Language="C#" Value="public bool StereoReset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StereoReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getStereoReset", "()Z", "GetGetStereoResetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UnicodeWrap">
      <MemberSignature Language="C#" Value="public string UnicodeWrap (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UnicodeWrap(string str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unicodeWrap", "(Ljava/lang/String;)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">The input string.</param>
        <summary tool="true">Operates like <c><see cref="M:Android.Text.BidiFormatter.UnicodeWrap(System.String, Android.Text.ITextDirectionHeuristic, Android.Text.ITextDirectionHeuristic)" /></c>, but uses the
 formatter's default direction estimation algorithm and assumes <c>isolate</c> is true.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="UnicodeWrap">
      <MemberSignature Language="C#" Value="public string UnicodeWrap (string str, Android.Text.ITextDirectionHeuristic heuristic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UnicodeWrap(string str, class Android.Text.ITextDirectionHeuristic heuristic) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unicodeWrap", "(Ljava/lang/String;Landroid/text/TextDirectionHeuristic;)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="heuristic" Type="Android.Text.ITextDirectionHeuristic" />
      </Parameters>
      <Docs>
        <param name="str">The input string.</param>
        <param name="heuristic">The algorithm to be used to estimate the string's overall direction.
        See <c><see cref="T:Android.Text.TextDirectionHeuristics" /></c> for pre-defined heuristics.</param>
        <summary>Operates like <c><see cref="M:Android.Text.BidiFormatter.UnicodeWrap(System.String, Android.Text.ITextDirectionHeuristic, Android.Text.ITextDirectionHeuristic)" /></c>, but assumes
 <c>isolate</c> is true.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="UnicodeWrap">
      <MemberSignature Language="C#" Value="public string UnicodeWrap (string str, bool isolate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UnicodeWrap(string str, bool isolate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unicodeWrap", "(Ljava/lang/String;Z)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="isolate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="str">The input string.</param>
        <param name="isolate">Whether to directionally isolate the string to prevent it from garbling the
     content around it</param>
        <summary>Operates like <c><see cref="M:Android.Text.BidiFormatter.UnicodeWrap(System.String, Android.Text.ITextDirectionHeuristic, Android.Text.ITextDirectionHeuristic)" /></c>, but uses the
 formatter's default direction estimation algorithm.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="UnicodeWrap">
      <MemberSignature Language="C#" Value="public string UnicodeWrap (string str, Android.Text.ITextDirectionHeuristic heuristic, bool isolate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UnicodeWrap(string str, class Android.Text.ITextDirectionHeuristic heuristic, bool isolate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unicodeWrap", "(Ljava/lang/String;Landroid/text/TextDirectionHeuristic;Z)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="heuristic" Type="Android.Text.ITextDirectionHeuristic" />
        <Parameter Name="isolate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="str">The input string.</param>
        <param name="heuristic">The algorithm to be used to estimate the string's overall direction.
        See <c><see cref="T:Android.Text.TextDirectionHeuristics" /></c> for pre-defined heuristics.</param>
        <param name="isolate">Whether to directionally isolate the string to prevent it from garbling the
     content around it</param>
        <summary>Formats a string of given directionality for use in plain-text output of the context
 directionality, so an opposite-directionality string is neither garbled nor garbles its
 surroundings.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 18" />
      </Docs>
    </Member>
  </Members>
</Type>
