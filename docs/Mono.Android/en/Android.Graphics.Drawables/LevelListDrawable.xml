<Type Name="LevelListDrawable" FullName="Android.Graphics.Drawables.LevelListDrawable">
  <TypeSignature Language="C#" Value="public class LevelListDrawable : Android.Graphics.Drawables.DrawableContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LevelListDrawable extends Android.Graphics.Drawables.DrawableContainer" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Graphics.Drawables.DrawableContainer</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/graphics/drawable/LevelListDrawable", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A resource that manages a number of alternate Drawables, each assigned a maximum numerical value.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A resource that manages a number of alternate Drawables, each assigned a maximum numerical value.
 Setting the level value of the object with <c><see cref="M:Android.Graphics.Drawables.Drawable.SetLevel(System.Int32)" /></c> will load the image with the next
 greater or equal value assigned to its max attribute.
 A good example use of
 a LevelListDrawable would be a battery level indicator icon, with different images to indicate the current
 battery level.
 <example><code lang="xml">
 &lt;level-list xmlns:android="http://schemas.android.com/apk/res/android"&gt;
  &lt;item android:maxLevel="0" android:drawable="@drawable/ic_wifi_signal_1" /&gt;
  &lt;item android:maxLevel="1" android:drawable="@drawable/ic_wifi_signal_2" /&gt;
  &lt;item android:maxLevel="2" android:drawable="@drawable/ic_wifi_signal_3" /&gt;
  &lt;item android:maxLevel="3" android:drawable="@drawable/ic_wifi_signal_4" /&gt;
 &lt;/level-list&gt;
</code></example></para>
      <para tool="javadoc-to-mdoc">
 It can be defined in an XML file with the <c>&lt;level-list&gt;</c> element.
 Each Drawable level is defined in a nested <c>&lt;item&gt;</c>. For example:
 </para>
      <para tool="javadoc-to-mdoc">With this XML saved into the res/drawable/ folder of the project, it can be referenced as
 the drawable for an <c><see cref="T:Android.Widget.ImageView" /></c>. The default image is the first in the list.
 It can then be changed to one of the other levels with
 <c><see cref="M:Android.Widget.ImageView.SetImageLevel(System.Int32)" /></c>. For more
 information, see the guide to <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/resources/drawable-resource.html">Drawable Resources</a></format>.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/graphics/drawable/LevelListDrawable.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LevelListDrawable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/drawable/LevelListDrawable.html#LevelListDrawable()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LevelListDrawable (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLevel">
      <MemberSignature Language="C#" Value="public virtual void AddLevel (int low, int high, Android.Graphics.Drawables.Drawable drawable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLevel(int32 low, int32 high, class Android.Graphics.Drawables.Drawable drawable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addLevel", "(IILandroid/graphics/drawable/Drawable;)V", "GetAddLevel_IILandroid_graphics_drawable_Drawable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="low" Type="System.Int32" />
        <Parameter Name="high" Type="System.Int32" />
        <Parameter Name="drawable" Type="Android.Graphics.Drawables.Drawable" />
      </Parameters>
      <Docs>
        <param name="low">To be added.</param>
        <param name="high">To be added.</param>
        <param name="drawable">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/drawable/LevelListDrawable.html#addLevel(int, int, android.graphics.drawable.Drawable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>