<Type Name="AnimatedStateListDrawable" FullName="Android.Graphics.Drawables.AnimatedStateListDrawable">
  <TypeSignature Language="C#" Value="public class AnimatedStateListDrawable : Android.Graphics.Drawables.StateListDrawable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AnimatedStateListDrawable extends Android.Graphics.Drawables.StateListDrawable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Graphics.Drawables.StateListDrawable</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/graphics/drawable/AnimatedStateListDrawable", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>Drawable containing a set of Drawable keyframes where the currently displayed
 keyframe is chosen based on the current state set.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Drawable containing a set of Drawable keyframes where the currently displayed
 keyframe is chosen based on the current state set. Animations between
 keyframes may optionally be defined using transition elements.
 </para>
      <para tool="javadoc-to-mdoc">
 This drawable can be defined in an XML file with the <c>
 &lt;animated-selector&gt;</c> element. Each keyframe Drawable is defined in a
 nested <c>&lt;item&gt;</c> element. Transitions are defined in a nested
 <c>&lt;transition&gt;</c> element.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/graphics/drawable/AnimatedStateListDrawable.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AnimatedStateListDrawable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Constructs a new animated state list drawable with default values.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/drawable/AnimatedStateListDrawable.html#AnimatedStateListDrawable()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AnimatedStateListDrawable (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddState">
      <MemberSignature Language="C#" Value="public virtual void AddState (int[] stateSet, Android.Graphics.Drawables.Drawable drawable, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddState(int32[] stateSet, class Android.Graphics.Drawables.Drawable drawable, int32 id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addState", "([ILandroid/graphics/drawable/Drawable;I)V", "GetAddState_arrayILandroid_graphics_drawable_Drawable_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSet" Type="System.Int32[]" />
        <Parameter Name="drawable" Type="Android.Graphics.Drawables.Drawable" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="stateSet">An array of resource IDs to associate with the keyframe</param>
        <param name="drawable">The drawable to show when in the specified state, may not be null</param>
        <param name="id">The unique identifier for the keyframe
</param>
        <summary>Add a new drawable to the set of keyframes.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Add a new drawable to the set of keyframes.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/drawable/AnimatedStateListDrawable.html#addState(int[], android.graphics.drawable.Drawable, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTransition">
      <MemberSignature Language="C#" Value="public virtual void AddTransition (int fromId, int toId, Java.Lang.Object transition, bool reversible);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTransition(int32 fromId, int32 toId, class Java.Lang.Object transition, bool reversible) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addTransition", "(IILandroid/graphics/drawable/Drawable;Z)V", "GetAddTransition_IILandroid_graphics_drawable_Drawable_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromId" Type="System.Int32" />
        <Parameter Name="toId" Type="System.Int32" />
        <Parameter Name="transition" Type="Java.Lang.Object" />
        <Parameter Name="reversible" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fromId">Unique identifier of the starting keyframe.</param>
        <param name="toId">Unique identifier of the ending keyframe.</param>
        <param name="transition">An <see cref="T:Android.Graphics.Drawables.IAnimatable" /> drawable to use as a transition, may not be null.</param>
        <param name="reversible">Whether the transition can be reversed.</param>
        <summary>Adds a new transition between keyframes.</summary>
        <remarks>Adds a new transition between keyframes.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>