<Type Name="TransitionDrawable" FullName="Android.Graphics.Drawables.TransitionDrawable">
  <TypeSignature Language="C#" Value="public class TransitionDrawable : Android.Graphics.Drawables.LayerDrawable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TransitionDrawable extends Android.Graphics.Drawables.LayerDrawable implements class Android.Graphics.Drawables.Drawable/ICallback, class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Graphics.Drawables.LayerDrawable</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/graphics/drawable/TransitionDrawable", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An extension of LayerDrawables that is intended to cross-fade between
 the first and second layer.</summary>
    <remarks><para tool="javadoc-to-mdoc">An extension of LayerDrawables that is intended to cross-fade between
 the first and second layer. To start the transition, call <c><see cref="M:Android.Graphics.Drawables.TransitionDrawable.StartTransition(System.Int32)" /></c>. To
 display just the first layer, call <c><see cref="M:Android.Graphics.Drawables.TransitionDrawable.ResetTransition" /></c>.
 </para><para tool="javadoc-to-mdoc">
 It can be defined in an XML file with the <c>&lt;transition&gt;</c> element.
 Each Drawable in the transition is defined in a nested <c>&lt;item&gt;</c>. For more
 information, see the guide to <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/resources/drawable-resource.html">Drawable Resources</a></format>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/graphics/drawable/TransitionDrawable.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransitionDrawable (Android.Graphics.Drawables.Drawable[] layers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Graphics.Drawables.Drawable[] layers) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "([Landroid/graphics/drawable/Drawable;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="layers" Type="Android.Graphics.Drawables.Drawable[]" />
      </Parameters>
      <Docs>
        <param name="layers">To be added.</param>
        <summary>Create a new transition drawable with the specified list of layers.</summary>
        <remarks><para tool="javadoc-to-mdoc">Create a new transition drawable with the specified list of layers. At least
 2 layers are required for this drawable to work properly.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/graphics/drawable/TransitionDrawable.html#TransitionDrawable(android.graphics.drawable.Drawable[])" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TransitionDrawable (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossFadeEnabled">
      <MemberSignature Language="C#" Value="public virtual bool CrossFadeEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CrossFadeEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isCrossFadeEnabled", "()Z", "GetIsCrossFadeEnabledHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setCrossFadeEnabled", "(Z)V", "GetSetCrossFadeEnabled_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the cross fade is enabled for this transition.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/android/graphics/drawable/TransitionDrawable.html#isCrossFadeEnabled()" target="_blank">[Android Documentation]</a><br /></format>Indicates whether the cross fade is enabled for this transition.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/android/graphics/drawable/TransitionDrawable.html#setCrossFadeEnabled(boolean)" target="_blank">[Android Documentation]</a><br /></format>Enables or disables the cross fade of the drawables. When cross fade
 is disabled, the first drawable is always drawn opaque. With cross
 fade enabled, the first drawable is drawn with the opposite alpha of
 the second drawable. Cross fade is disabled by default.</para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ResetTransition">
      <MemberSignature Language="C#" Value="public virtual void ResetTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetTransition() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("resetTransition", "()V", "GetResetTransitionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Show only the first layer.</summary>
        <remarks><para tool="javadoc-to-mdoc">Show only the first layer.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/graphics/drawable/TransitionDrawable.html#resetTransition()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ReverseTransition">
      <MemberSignature Language="C#" Value="public virtual void ReverseTransition (int duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReverseTransition(int32 duration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reverseTransition", "(I)V", "GetReverseTransition_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="duration">The duration to use if no transition is running.
</param>
        <summary>Reverses the transition, picking up where the transition currently is.</summary>
        <remarks><para tool="javadoc-to-mdoc">Reverses the transition, picking up where the transition currently is.
 If the transition is not currently running, this will start the transition
 with the specified duration. If the transition is already running, the last
 known duration will be used.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/graphics/drawable/TransitionDrawable.html#reverseTransition(int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StartTransition">
      <MemberSignature Language="C#" Value="public virtual void StartTransition (int durationMillis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartTransition(int32 durationMillis) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startTransition", "(I)V", "GetStartTransition_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="durationMillis" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="durationMillis">The length of the transition in milliseconds
</param>
        <summary>Begin the second layer on top of the first layer.</summary>
        <remarks><para tool="javadoc-to-mdoc">Begin the second layer on top of the first layer.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/graphics/drawable/TransitionDrawable.html#startTransition(int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
