<Type Name="SelectorProvider" FullName="Java.Nio.Channels.Spi.SelectorProvider">
  <TypeSignature Language="C#" Value="public abstract class SelectorProvider : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SelectorProvider extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/nio/channels/spi/SelectorProvider", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>
      <c>SelectorProvider</c> is an abstract base class that declares methods for
 providing instances of <c><see cref="T:Java.Nio.Channels.DatagramChannel" /></c>, <c><see cref="T:Java.Nio.Channels.Pipe" /></c>,
 <c><see cref="T:Java.Nio.Channels.Selector" /></c> , <c><see cref="T:Java.Nio.Channels.ServerSocketChannel" /></c>, and
 <c><see cref="T:Java.Nio.Channels.SocketChannel" /></c>.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">
        <c>SelectorProvider</c> is an abstract base class that declares methods for
 providing instances of <c><see cref="T:Java.Nio.Channels.DatagramChannel" /></c>, <c><see cref="T:Java.Nio.Channels.Pipe" /></c>,
 <c><see cref="T:Java.Nio.Channels.Selector" /></c> , <c><see cref="T:Java.Nio.Channels.ServerSocketChannel" /></c>, and
 <c><see cref="T:Java.Nio.Channels.SocketChannel" /></c>. All the methods of this class are thread-safe.

 </para>
      <para tool="javadoc-to-mdoc">A provider instance can be retrieved through a system property or the
 configuration file in a jar file; if no provider is available that way then
 the system default provider is returned.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/nio/channels/spi/SelectorProvider.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SelectorProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Constructs a new <c>SelectorProvider</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>SelectorProvider</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/spi/SelectorProvider.html#SelectorProvider()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SelectorProvider (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritedChannel">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.Channels.IChannel InheritedChannel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.IChannel InheritedChannel() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inheritedChannel", "()Ljava/nio/channels/Channel;", "GetInheritedChannelHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.IChannel</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the channel inherited from the process that created this VM.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the channel inherited from the process that created this VM.
 On Android, this method always returns null because stdin and stdout are
 never connected to a socket.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/spi/SelectorProvider.html#inheritedChannel()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenDatagramChannel">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.DatagramChannel OpenDatagramChannel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.DatagramChannel OpenDatagramChannel() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openDatagramChannel", "()Ljava/nio/channels/DatagramChannel;", "GetOpenDatagramChannelHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.DatagramChannel</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new open <c>DatagramChannel</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new open <c>DatagramChannel</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/spi/SelectorProvider.html#openDatagramChannel()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenPipe">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.Pipe OpenPipe ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.Pipe OpenPipe() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openPipe", "()Ljava/nio/channels/Pipe;", "GetOpenPipeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.Pipe</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new <c>Pipe</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new <c>Pipe</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/spi/SelectorProvider.html#openPipe()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenSelector">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.Spi.AbstractSelector OpenSelector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.Spi.AbstractSelector OpenSelector() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openSelector", "()Ljava/nio/channels/spi/AbstractSelector;", "GetOpenSelectorHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.Spi.AbstractSelector</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new selector.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new selector.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/spi/SelectorProvider.html#openSelector()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenServerSocketChannel">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.ServerSocketChannel OpenServerSocketChannel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.ServerSocketChannel OpenServerSocketChannel() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openServerSocketChannel", "()Ljava/nio/channels/ServerSocketChannel;", "GetOpenServerSocketChannelHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.ServerSocketChannel</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new open <c>ServerSocketChannel</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new open <c>ServerSocketChannel</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/spi/SelectorProvider.html#openServerSocketChannel()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenSocketChannel">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.SocketChannel OpenSocketChannel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.SocketChannel OpenSocketChannel() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openSocketChannel", "()Ljava/nio/channels/SocketChannel;", "GetOpenSocketChannelHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.SocketChannel</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Create a new open <c>SocketChannel</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new open <c>SocketChannel</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/spi/SelectorProvider.html#openSocketChannel()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static Java.Nio.Channels.Spi.SelectorProvider Provider ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.Channels.Spi.SelectorProvider Provider() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("provider", "()Ljava/nio/channels/spi/SelectorProvider;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.Spi.SelectorProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a provider instance by executing the following steps when called for
 the first time:
 <list type="bullet"><item><term> if the system property "java.nio.channels.spi.SelectorProvider" is
 set, the value of this property is the class name of the provider
 returned; </term></item><item><term>if there is a provider-configuration file named
 "java.nio.channels.spi.SelectorProvider" in META-INF/services of a jar
 file valid in the system class loader, the first class name is the
 provider's class name; </term></item><item><term> otherwise, a system default provider will be returned.</term></item></list></summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets a provider instance by executing the following steps when called for
 the first time:
 <list type="bullet"><item><term> if the system property "java.nio.channels.spi.SelectorProvider" is
 set, the value of this property is the class name of the provider
 returned; </term></item><item><term>if there is a provider-configuration file named
 "java.nio.channels.spi.SelectorProvider" in META-INF/services of a jar
 file valid in the system class loader, the first class name is the
 provider's class name; </term></item><item><term> otherwise, a system default provider will be returned.</term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/spi/SelectorProvider.html#provider()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>