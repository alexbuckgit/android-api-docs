<Type Name="DatagramChannel" FullName="Java.Nio.Channels.DatagramChannel">
  <TypeSignature Language="C#" Value="public abstract class DatagramChannel : Java.Nio.Channels.Spi.AbstractSelectableChannel, IDisposable, Java.Nio.Channels.IByteChannel, Java.Nio.Channels.IGatheringByteChannel, Java.Nio.Channels.IScatteringByteChannel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DatagramChannel extends Java.Nio.Channels.Spi.AbstractSelectableChannel implements class Android.Runtime.IJavaObject, class Java.IO.ICloseable, class Java.Nio.Channels.IByteChannel, class Java.Nio.Channels.IChannel, class Java.Nio.Channels.IGatheringByteChannel, class Java.Nio.Channels.IReadableByteChannel, class Java.Nio.Channels.IScatteringByteChannel, class Java.Nio.Channels.IWritableByteChannel, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Nio.Channels.Spi.AbstractSelectableChannel</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IGatheringByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IScatteringByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/nio/channels/DatagramChannel", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A <c>DatagramChannel</c> is a selectable channel that represents a partial
 abstraction of a datagram socket.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A <c>DatagramChannel</c> is a selectable channel that represents a partial
 abstraction of a datagram socket. The <c>socket</c> method of this class can
 return the related <c>DatagramSocket</c> instance, which can handle the
 socket.
 </para>
      <para tool="javadoc-to-mdoc">
 A datagram channel is open but not connected when created with the
 <c>open()</c> method. After it is connected, it will keep the connected
 status until it is disconnected or closed. The benefit of a connected channel
 is the reduced effort of security checks during send and receive. When
 invoking <c>read</c> or <c>write</c>, a connected channel is required.
 </para>
      <para tool="javadoc-to-mdoc">
 Datagram channels are thread-safe; only one thread can read or write at the
 same time.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/nio/channels/DatagramChannel.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DatagramChannel (Java.Nio.Channels.Spi.SelectorProvider selectorProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Java.Nio.Channels.Spi.SelectorProvider selectorProvider) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/nio/channels/spi/SelectorProvider;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="selectorProvider" Type="Java.Nio.Channels.Spi.SelectorProvider" />
      </Parameters>
      <Docs>
        <param name="selectorProvider">To be added.</param>
        <summary>Constructs a new <c>DatagramChannel</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>DatagramChannel</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/DatagramChannel.html#DatagramChannel(java.nio.channels.spi.SelectorProvider)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DatagramChannel (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.DatagramChannel Bind (Java.Net.SocketAddress p0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.DatagramChannel Bind(class Java.Net.SocketAddress p0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("bind", "(Ljava/net/SocketAddress;)Ljava/nio/channels/DatagramChannel;", "GetBind_Ljava_net_SocketAddress_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.DatagramChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="p0">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.DatagramChannel Connect (Java.Net.SocketAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.DatagramChannel Connect(class Java.Net.SocketAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("connect", "(Ljava/net/SocketAddress;)Ljava/nio/channels/DatagramChannel;", "GetConnect_Ljava_net_SocketAddress_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.DatagramChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="address">the address to be connected to.</param>
        <summary>Connects the socket of this channel to a remote address, which is the
 only communication peer for getting and sending datagrams after being
 connected.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Connects the socket of this channel to a remote address, which is the
 only communication peer for getting and sending datagrams after being
 connected.
 </para>
          <para tool="javadoc-to-mdoc">
 This method can be called at any time without affecting the read and
 write operations being processed at the time the method is called. The
 connection status does not change until the channel is disconnected or
 closed.
 </para>
          <para tool="javadoc-to-mdoc">
 This method executes the same security checks as the connect method of
 the <c><see cref="T:Java.Net.DatagramSocket" /></c> class.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/DatagramChannel.html#connect(java.net.SocketAddress)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">if some other I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Java.Nio.Channels.DatagramChannel&gt; ConnectAsync (Java.Net.SocketAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Java.Nio.Channels.DatagramChannel&gt; ConnectAsync(class Java.Net.SocketAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Java.Nio.Channels.DatagramChannel&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="address">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Disconnect">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.DatagramChannel Disconnect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.DatagramChannel Disconnect() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("disconnect", "()Ljava/nio/channels/DatagramChannel;", "GetDisconnectHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.DatagramChannel</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disconnects the socket of this channel, which has been connected before
 in order to send and receive datagrams.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Disconnects the socket of this channel, which has been connected before
 in order to send and receive datagrams.
 </para>
          <para tool="javadoc-to-mdoc">
 This method can be called at any time without affecting the read and
 write operations being underway. It does not have any effect if the
 socket is not connected or the channel is closed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/DatagramChannel.html#disconnect()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsConnected">
      <MemberSignature Language="C#" Value="public abstract bool IsConnected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConnected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isConnected", "()Z", "GetIsConnectedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this channel's socket is connected or not.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns whether this channel's socket is connected or not.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/DatagramChannel.html#isConnected()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static Java.Nio.Channels.DatagramChannel Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.Channels.DatagramChannel Open() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("open", "()Ljava/nio/channels/DatagramChannel;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.DatagramChannel</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an opened and not-connected datagram channel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates an opened and not-connected datagram channel.
 </para>
          <para tool="javadoc-to-mdoc">
 This channel is created by calling the <c>openDatagramChannel</c>
 method of the default <c><see cref="T:Java.Nio.Channels.Spi.SelectorProvider" /></c> instance.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/DatagramChannel.html#open()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if some I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract int Read (Java.Nio.ByteBuffer target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(class Java.Nio.ByteBuffer target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("read", "(Ljava/nio/ByteBuffer;)I", "GetRead_Ljava_nio_ByteBuffer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="target">the byte buffer to store the received datagram.</param>
        <summary>Reads a datagram from this channel into the byte buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Reads a datagram from this channel into the byte buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The precondition for calling this method is that the channel is connected
 and the incoming datagram is from the connected address. If the buffer is
 not big enough to store the datagram, the part of the datagram that does
 not fit in the buffer is discarded. Otherwise, this method has the same
 behavior as the <c>read</c> method in the <c><see cref="T:Java.Nio.Channels.IReadableByteChannel" /></c>
 interface.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/DatagramChannel.html#read(java.nio.ByteBuffer)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if the channel is not connected yet.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
        <altmember cref="M:Java.Nio.Channels.IReadableByteChannel.Read(Java.Nio.ByteBuffer)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public long Read (Java.Nio.ByteBuffer[] targets);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Read(class Java.Nio.ByteBuffer[] targets) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("read", "([Ljava/nio/ByteBuffer;)J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targets" Type="Java.Nio.ByteBuffer[]" />
      </Parameters>
      <Docs>
        <param name="targets">the byte buffers to store the received datagram.</param>
        <summary>Reads a datagram from this channel into an array of byte buffers.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Reads a datagram from this channel into an array of byte buffers.
 </para>
          <para tool="javadoc-to-mdoc">
 The precondition for calling this method is that the channel is connected
 and the incoming datagram is from the connected address. If the buffers
 do not have enough remaining space to store the datagram, the part of the
 datagram that does not fit in the buffers is discarded. Otherwise, this
 method has the same behavior as the <c>read</c> method in the
 <c><see cref="T:Java.Nio.Channels.IScatteringByteChannel" /></c> interface.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/DatagramChannel.html#read(java.nio.ByteBuffer[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if the channel is not connected yet.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
        <altmember cref="M:Java.Nio.Channels.IScatteringByteChannel.Read(Java.Nio.ByteBuffer[])" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract long Read (Java.Nio.ByteBuffer[] targets, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Read(class Java.Nio.ByteBuffer[] targets, int32 offset, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("read", "([Ljava/nio/ByteBuffer;II)J", "GetRead_arrayLjava_nio_ByteBuffer_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targets" Type="Java.Nio.ByteBuffer[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="targets">the byte buffers to store the received datagram.</param>
        <param name="offset">a non-negative offset in the array of buffers, pointing to the
            starting buffer to store the bytes transferred, must not be
            bigger than <c>targets.length</c>.</param>
        <param name="length">a non-negative length to indicate the maximum number of
            buffers to be filled, must not be bigger than
            <c>targets.length - offset</c>.</param>
        <summary>Reads a datagram from this channel into an array of byte buffers.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Reads a datagram from this channel into an array of byte buffers.
 </para>
          <para tool="javadoc-to-mdoc">
 The precondition for calling this method is that the channel is connected
 and the incoming datagram is from the connected address. If the buffers
 do not have enough remaining space to store the datagram, the part of the
 datagram that does not fit in the buffers is discarded. Otherwise, this
 method has the same behavior as the <c>read</c> method in the
 <c><see cref="T:Java.Nio.Channels.IScatteringByteChannel" /></c> interface.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/DatagramChannel.html#read(java.nio.ByteBuffer[], int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if the channel is not connected yet.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
        <altmember cref="M:Java.Nio.Channels.IScatteringByteChannel.Read(Java.Nio.ByteBuffer[], System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public abstract Java.Net.SocketAddress Receive (Java.Nio.ByteBuffer target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Net.SocketAddress Receive(class Java.Nio.ByteBuffer target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("receive", "(Ljava/nio/ByteBuffer;)Ljava/net/SocketAddress;", "GetReceive_Ljava_nio_ByteBuffer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.SocketAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="target">the byte buffer to store the received datagram.</param>
        <summary>Gets a datagram from this channel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets a datagram from this channel.
 </para>
          <para tool="javadoc-to-mdoc">
 This method transfers a datagram from the channel into the target byte
 buffer. If this channel is in blocking mode, it waits for the datagram
 and returns its address when it is available. If this channel is in
 non-blocking mode and no datagram is available, it returns <c>null</c>
 immediately. The transfer starts at the current position of the buffer,
 and if there is not enough space remaining in the buffer to store the
 datagram then the part of the datagram that does not fit is discarded.
 </para>
          <para tool="javadoc-to-mdoc">
 This method can be called at any time and it will block if there is
 another thread that has started a read operation on the channel.
 </para>
          <para tool="javadoc-to-mdoc">
 This method executes the same security checks as the receive method of
 the <c><see cref="T:Java.Net.DatagramSocket" /></c> class.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/DatagramChannel.html#receive(java.nio.ByteBuffer)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Java.Net.SocketAddress&gt; ReceiveAsync (Java.Nio.ByteBuffer target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Java.Net.SocketAddress&gt; ReceiveAsync(class Java.Nio.ByteBuffer target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Java.Net.SocketAddress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteAddress">
      <MemberSignature Language="C#" Value="public abstract Java.Net.SocketAddress RemoteAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Net.SocketAddress RemoteAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRemoteAddress", "()Ljava/net/SocketAddress;", "GetGetRemoteAddressHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.SocketAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public abstract int Send (Java.Nio.ByteBuffer source, Java.Net.SocketAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Send(class Java.Nio.ByteBuffer source, class Java.Net.SocketAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("send", "(Ljava/nio/ByteBuffer;Ljava/net/SocketAddress;)I", "GetSend_Ljava_nio_ByteBuffer_Ljava_net_SocketAddress_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="address" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="source">the byte buffer with the datagram to be sent.</param>
        <param name="address">the destination address for the datagram.</param>
        <summary>Sends a datagram through this channel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sends a datagram through this channel. The datagram consists of the
 remaining bytes in <c>source</c>.
 </para>
          <para tool="javadoc-to-mdoc">
 If this channel is in blocking mode then the datagram is sent as soon as
 there is enough space in the underlying output buffer. If this channel is
 in non-blocking mode then the datagram is only sent if there is enough
 space in the underlying output buffer at that moment. The transfer action
 is just like a regular write operation.
 </para>
          <para tool="javadoc-to-mdoc">
 This method can be called at any time and it will block if another thread
 has started a send operation on this channel.
 </para>
          <para tool="javadoc-to-mdoc">
 This method executes the same security checks as the send method of the
 <c><see cref="T:Java.Net.DatagramSocket" /></c> class.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/DatagramChannel.html#send(java.nio.ByteBuffer, java.net.SocketAddress)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (Java.Nio.ByteBuffer source, Java.Net.SocketAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(class Java.Nio.ByteBuffer source, class Java.Net.SocketAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="address" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="address">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Socket">
      <MemberSignature Language="C#" Value="public abstract Java.Net.DatagramSocket Socket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Net.DatagramSocket Socket() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("socket", "()Ljava/net/DatagramSocket;", "GetSocketHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.DatagramSocket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the related datagram socket of this channel, which does not
 define additional public methods to those defined by
 <c><see cref="T:Java.Net.DatagramSocket" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the related datagram socket of this channel, which does not
 define additional public methods to those defined by
 <c><see cref="T:Java.Net.DatagramSocket" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/DatagramChannel.html#socket()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidOps">
      <MemberSignature Language="C#" Value="public override sealed Java.Nio.Channels.Operations ValidOps ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Java.Nio.Channels.Operations ValidOps() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("validOps", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.Operations</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the valid operations of this channel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the valid operations of this channel. Datagram channels support read
 and write operations, so this method returns (
 <c>SelectionKey.OP_READ</c> | <c>SelectionKey.OP_WRITE</c> ).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/DatagramChannel.html#validOps()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Nio.Channels.SelectableChannel.ValidOps" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract int Write (Java.Nio.ByteBuffer source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(class Java.Nio.ByteBuffer source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;)I", "GetWrite_Ljava_nio_ByteBuffer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="source">the byte buffer as the source of the datagram.</param>
        <summary>Writes a datagram from the byte buffer to this channel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes a datagram from the byte buffer to this channel.
 </para>
          <para tool="javadoc-to-mdoc">
 The precondition of calling this method is that the channel is connected
 and the datagram is sent to the connected address. Otherwise, this method
 has the same behavior as the <c>write</c> method in the
 <c><see cref="T:Java.Nio.Channels.IWritableByteChannel" /></c> interface.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/DatagramChannel.html#write(java.nio.ByteBuffer)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if the channel is not connected yet.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
        <altmember cref="M:Java.Nio.Channels.IWritableByteChannel.Write(Java.Nio.ByteBuffer)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public long Write (Java.Nio.ByteBuffer[] sources);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Write(class Java.Nio.ByteBuffer[] sources) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "([Ljava/nio/ByteBuffer;)J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sources" Type="Java.Nio.ByteBuffer[]" />
      </Parameters>
      <Docs>
        <param name="sources">the byte buffers as the source of the datagram.</param>
        <summary>Writes a datagram from the byte buffers to this channel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes a datagram from the byte buffers to this channel.
 </para>
          <para tool="javadoc-to-mdoc">
 The precondition of calling this method is that the channel is connected
 and the datagram is sent to the connected address. Otherwise, this method
 has the same behavior as the write method in the
 <c><see cref="T:Java.Nio.Channels.IGatheringByteChannel" /></c> interface.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/DatagramChannel.html#write(java.nio.ByteBuffer[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if the channel is not connected yet.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
        <altmember cref="M:Java.Nio.Channels.IGatheringByteChannel.Write(Java.Nio.ByteBuffer[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract long Write (Java.Nio.ByteBuffer[] sources, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Write(class Java.Nio.ByteBuffer[] sources, int32 offset, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "([Ljava/nio/ByteBuffer;II)J", "GetWrite_arrayLjava_nio_ByteBuffer_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sources" Type="Java.Nio.ByteBuffer[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sources">the byte buffers as the source of the datagram.</param>
        <param name="offset">a non-negative offset in the array of buffers, pointing to the
            starting buffer to be retrieved, must be no larger than
            <c>sources.length</c>.</param>
        <param name="length">a non-negative length to indicate the maximum number of
            buffers to be submitted, must be no bigger than
            <c>sources.length - offset</c>.</param>
        <summary>Writes a datagram from the byte buffers to this channel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes a datagram from the byte buffers to this channel.
 </para>
          <para tool="javadoc-to-mdoc">
 The precondition of calling this method is that the channel is connected
 and the datagram is sent to the connected address. Otherwise, this method
 has the same behavior as the <c>write</c> method in the
 <c><see cref="T:Java.Nio.Channels.IGatheringByteChannel" /></c> interface.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/DatagramChannel.html#write(java.nio.ByteBuffer[], int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if the channel is not connected yet.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
        <altmember cref="M:Java.Nio.Channels.IGatheringByteChannel.Write(Java.Nio.ByteBuffer[], System.Int32, System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>