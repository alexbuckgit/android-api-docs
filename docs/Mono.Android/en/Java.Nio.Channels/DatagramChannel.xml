<Type Name="DatagramChannel" FullName="Java.Nio.Channels.DatagramChannel">
  <TypeSignature Language="C#" Value="public abstract class DatagramChannel : Java.Nio.Channels.Spi.AbstractSelectableChannel, IDisposable, Java.Nio.Channels.IByteChannel, Java.Nio.Channels.IGatheringByteChannel, Java.Nio.Channels.IScatteringByteChannel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DatagramChannel extends Java.Nio.Channels.Spi.AbstractSelectableChannel implements class Android.Runtime.IJavaObject, class Java.IO.ICloseable, class Java.Nio.Channels.IByteChannel, class Java.Nio.Channels.IChannel, class Java.Nio.Channels.IGatheringByteChannel, class Java.Nio.Channels.IReadableByteChannel, class Java.Nio.Channels.IScatteringByteChannel, class Java.Nio.Channels.IWritableByteChannel, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Nio.Channels.Spi.AbstractSelectableChannel</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IGatheringByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IScatteringByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/nio/channels/DatagramChannel", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A <c>DatagramChannel</c> is a selectable channel that represents a partial
 abstraction of a datagram socket.</summary>
    <remarks />
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DatagramChannel (Java.Nio.Channels.Spi.SelectorProvider selectorProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Java.Nio.Channels.Spi.SelectorProvider selectorProvider) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/nio/channels/spi/SelectorProvider;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="selectorProvider" Type="Java.Nio.Channels.Spi.SelectorProvider" />
      </Parameters>
      <Docs>
        <param name="selectorProvider">To be added.</param>
        <summary>Constructs a new <c>DatagramChannel</c>.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DatagramChannel (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.DatagramChannel Bind (Java.Net.SocketAddress p0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.DatagramChannel Bind(class Java.Net.SocketAddress p0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("bind", "(Ljava/net/SocketAddress;)Ljava/nio/channels/DatagramChannel;", "GetBind_Ljava_net_SocketAddress_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.DatagramChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="p0">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.DatagramChannel Connect (Java.Net.SocketAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.DatagramChannel Connect(class Java.Net.SocketAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("connect", "(Ljava/net/SocketAddress;)Ljava/nio/channels/DatagramChannel;", "GetConnect_Ljava_net_SocketAddress_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.DatagramChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="address">the address to be connected to.</param>
        <summary>Connects the socket of this channel to a remote address, which is the
 only communication peer for getting and sending datagrams after being
 connected.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">if some other I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Java.Nio.Channels.DatagramChannel&gt; ConnectAsync (Java.Net.SocketAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Java.Nio.Channels.DatagramChannel&gt; ConnectAsync(class Java.Net.SocketAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Java.Nio.Channels.DatagramChannel&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="address">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Disconnect">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.DatagramChannel Disconnect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.DatagramChannel Disconnect() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("disconnect", "()Ljava/nio/channels/DatagramChannel;", "GetDisconnectHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.DatagramChannel</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disconnects the socket of this channel, which has been connected before
 in order to send and receive datagrams.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsConnected">
      <MemberSignature Language="C#" Value="public abstract bool IsConnected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConnected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isConnected", "()Z", "GetIsConnectedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether this channel's socket is connected or not.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static Java.Nio.Channels.DatagramChannel Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.Channels.DatagramChannel Open() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("open", "()Ljava/nio/channels/DatagramChannel;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.DatagramChannel</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an opened and not-connected datagram channel.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if some I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract int Read (Java.Nio.ByteBuffer target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(class Java.Nio.ByteBuffer target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("read", "(Ljava/nio/ByteBuffer;)I", "GetRead_Ljava_nio_ByteBuffer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="target">the byte buffer to store the received datagram.</param>
        <summary>Reads a datagram from this channel into the byte buffer.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if the channel is not connected yet.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
        <altmember cref="M:Java.Nio.Channels.IReadableByteChannel.Read(Java.Nio.ByteBuffer)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public long Read (Java.Nio.ByteBuffer[] targets);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Read(class Java.Nio.ByteBuffer[] targets) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("read", "([Ljava/nio/ByteBuffer;)J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targets" Type="Java.Nio.ByteBuffer[]" />
      </Parameters>
      <Docs>
        <param name="targets">the byte buffers to store the received datagram.</param>
        <summary>Reads a datagram from this channel into an array of byte buffers.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if the channel is not connected yet.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
        <altmember cref="M:Java.Nio.Channels.IScatteringByteChannel.Read(Java.Nio.ByteBuffer[])" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract long Read (Java.Nio.ByteBuffer[] targets, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Read(class Java.Nio.ByteBuffer[] targets, int32 offset, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("read", "([Ljava/nio/ByteBuffer;II)J", "GetRead_arrayLjava_nio_ByteBuffer_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targets" Type="Java.Nio.ByteBuffer[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="targets">the byte buffers to store the received datagram.</param>
        <param name="offset">a non-negative offset in the array of buffers, pointing to the
            starting buffer to store the bytes transferred, must not be
            bigger than <c>targets.length</c>.</param>
        <param name="length">a non-negative length to indicate the maximum number of
            buffers to be filled, must not be bigger than
            <c>targets.length - offset</c>.</param>
        <summary>Reads a datagram from this channel into an array of byte buffers.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if the channel is not connected yet.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
        <altmember cref="M:Java.Nio.Channels.IScatteringByteChannel.Read(Java.Nio.ByteBuffer[], System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public abstract Java.Net.SocketAddress Receive (Java.Nio.ByteBuffer target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Net.SocketAddress Receive(class Java.Nio.ByteBuffer target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("receive", "(Ljava/nio/ByteBuffer;)Ljava/net/SocketAddress;", "GetReceive_Ljava_nio_ByteBuffer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.SocketAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="target">the byte buffer to store the received datagram.</param>
        <summary>Gets a datagram from this channel.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Java.Net.SocketAddress&gt; ReceiveAsync (Java.Nio.ByteBuffer target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Java.Net.SocketAddress&gt; ReceiveAsync(class Java.Nio.ByteBuffer target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Java.Net.SocketAddress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoteAddress">
      <MemberSignature Language="C#" Value="public abstract Java.Net.SocketAddress RemoteAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Net.SocketAddress RemoteAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRemoteAddress", "()Ljava/net/SocketAddress;", "GetGetRemoteAddressHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.SocketAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public abstract int Send (Java.Nio.ByteBuffer source, Java.Net.SocketAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Send(class Java.Nio.ByteBuffer source, class Java.Net.SocketAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("send", "(Ljava/nio/ByteBuffer;Ljava/net/SocketAddress;)I", "GetSend_Ljava_nio_ByteBuffer_Ljava_net_SocketAddress_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="address" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="source">the byte buffer with the datagram to be sent.</param>
        <param name="address">the destination address for the datagram.</param>
        <summary>Sends a datagram through this channel.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (Java.Nio.ByteBuffer source, Java.Net.SocketAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(class Java.Nio.ByteBuffer source, class Java.Net.SocketAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="address" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="address">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Socket">
      <MemberSignature Language="C#" Value="public abstract Java.Net.DatagramSocket Socket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Net.DatagramSocket Socket() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("socket", "()Ljava/net/DatagramSocket;", "GetSocketHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.DatagramSocket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the related datagram socket of this channel, which does not
 define additional public methods to those defined by
 <c><see cref="T:Java.Net.DatagramSocket" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ValidOps">
      <MemberSignature Language="C#" Value="public override sealed Java.Nio.Channels.Operations ValidOps ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Java.Nio.Channels.Operations ValidOps() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("validOps", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.Operations</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the valid operations of this channel.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Nio.Channels.SelectableChannel.ValidOps" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract int Write (Java.Nio.ByteBuffer source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(class Java.Nio.ByteBuffer source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;)I", "GetWrite_Ljava_nio_ByteBuffer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="source">the byte buffer as the source of the datagram.</param>
        <summary>Writes a datagram from the byte buffer to this channel.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if the channel is not connected yet.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
        <altmember cref="M:Java.Nio.Channels.IWritableByteChannel.Write(Java.Nio.ByteBuffer)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public long Write (Java.Nio.ByteBuffer[] sources);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Write(class Java.Nio.ByteBuffer[] sources) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "([Ljava/nio/ByteBuffer;)J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sources" Type="Java.Nio.ByteBuffer[]" />
      </Parameters>
      <Docs>
        <param name="sources">the byte buffers as the source of the datagram.</param>
        <summary>Writes a datagram from the byte buffers to this channel.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if the channel is not connected yet.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
        <altmember cref="M:Java.Nio.Channels.IGatheringByteChannel.Write(Java.Nio.ByteBuffer[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract long Write (Java.Nio.ByteBuffer[] sources, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Write(class Java.Nio.ByteBuffer[] sources, int32 offset, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "([Ljava/nio/ByteBuffer;II)J", "GetWrite_arrayLjava_nio_ByteBuffer_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sources" Type="Java.Nio.ByteBuffer[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sources">the byte buffers as the source of the datagram.</param>
        <param name="offset">a non-negative offset in the array of buffers, pointing to the
            starting buffer to be retrieved, must be no larger than
            <c>sources.length</c>.</param>
        <param name="length">a non-negative length to indicate the maximum number of
            buffers to be submitted, must be no bigger than
            <c>sources.length - offset</c>.</param>
        <summary>Writes a datagram from the byte buffers to this channel.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if the channel is not connected yet.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if the channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while the
             operation is in progress. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.IO.IOException">some other I/O error occurs.
</exception>
        <altmember cref="M:Java.Nio.Channels.IGatheringByteChannel.Write(Java.Nio.ByteBuffer[], System.Int32, System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>
