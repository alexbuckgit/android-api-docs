<Type Name="SocketChannel" FullName="Java.Nio.Channels.SocketChannel">
  <TypeSignature Language="C#" Value="public abstract class SocketChannel : Java.Nio.Channels.Spi.AbstractSelectableChannel, IDisposable, Java.Nio.Channels.IByteChannel, Java.Nio.Channels.IGatheringByteChannel, Java.Nio.Channels.IScatteringByteChannel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SocketChannel extends Java.Nio.Channels.Spi.AbstractSelectableChannel implements class Android.Runtime.IJavaObject, class Java.IO.ICloseable, class Java.Nio.Channels.IByteChannel, class Java.Nio.Channels.IChannel, class Java.Nio.Channels.IGatheringByteChannel, class Java.Nio.Channels.IReadableByteChannel, class Java.Nio.Channels.IScatteringByteChannel, class Java.Nio.Channels.IWritableByteChannel, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Nio.Channels.Spi.AbstractSelectableChannel</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IGatheringByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IScatteringByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/nio/channels/SocketChannel", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <c>SocketChannel</c> is a selectable channel that provides a partial
 abstraction of stream connecting socket.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A <c>SocketChannel</c> is a selectable channel that provides a partial
 abstraction of stream connecting socket.

 The <c><see cref="M:Java.Nio.Channels.SocketChannel.Socket" /></c> method returns a <c><see cref="T:Java.Net.Socket" /></c> instance which
 allows a wider range of socket operations than <c>SocketChannel</c> itself.

 </para>
      <para tool="javadoc-to-mdoc">A socket channel is open but not connected when created by <c><see cref="M:Java.Nio.Channels.SocketChannel.Open" /></c>.
 After connecting it by calling <c><see cref="M:Java.Nio.Channels.SocketChannel.Connect(Java.Net.SocketAddress)" /></c>, it will remain
 connected until closed.

 </para>
      <para tool="javadoc-to-mdoc">If the connection is non-blocking then
 <c><see cref="M:Java.Nio.Channels.SocketChannel.Connect(Java.Net.SocketAddress)" /></c> is used to initiate the connection, followed
 by a call of <c><see cref="M:Java.Nio.Channels.SocketChannel.FinishConnect" /></c> to perform the final steps of
 connecting. <c><see cref="P:Java.Nio.Channels.SocketChannel.IsConnectionPending" /></c> to tests whether we're still
 trying to connect; <c><see cref="P:Java.Nio.Channels.SocketChannel.IsConnected" /></c> tests whether the socket connect
 completed successfully. Note that realistic code should use a <c><see cref="T:Java.Nio.Channels.Selector" /></c>
 instead of polling. Note also that <c><see cref="T:Java.Net.Socket" /></c> can connect with a
 timeout, which is the most common use for a non-blocking connect.

 </para>
      <para tool="javadoc-to-mdoc">The input and output sides of a channel can be shut down independently and
 asynchronously without closing the channel. The <c><see cref="M:Java.Net.Socket.ShutdownInput" /></c> method
 on the socket returned by <c><see cref="M:Java.Nio.Channels.SocketChannel.Socket" /></c>
 is used for the input side of a channel and subsequent read operations return
 -1, which means end of stream. If another thread is blocked in a read
 operation when the shutdown occurs, the read will end without effect and
 return end of stream. Likewise the <c><see cref="M:Java.Net.Socket.ShutdownOutput" /></c> method is used for the
 output side of the channel; subsequent write operations throw a
 <c><see cref="T:Java.Nio.Channels.ClosedChannelException" /></c>. If the output is shut down and another thread
 is blocked in a write operation, an <c><see cref="T:Java.Nio.Channels.AsynchronousCloseException" /></c> will
 be thrown to the pending thread.

 </para>
      <para tool="javadoc-to-mdoc">Socket channels are thread-safe, no more than one thread can read or write at
 any given time. The <c><see cref="M:Java.Nio.Channels.SocketChannel.Connect(Java.Net.SocketAddress)" /></c> and <c><see cref="M:Java.Nio.Channels.SocketChannel.FinishConnect" /></c> methods are synchronized against each other; when they are
 processing, calls to <c><see cref="M:Java.Nio.Channels.SocketChannel.Read(Java.Nio.ByteBuffer)" /></c> and <c><see cref="M:Java.Nio.Channels.SocketChannel.Write(Java.Nio.ByteBuffer)" /></c> will block.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/nio/channels/SocketChannel.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SocketChannel (Java.Nio.Channels.Spi.SelectorProvider selectorProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Java.Nio.Channels.Spi.SelectorProvider selectorProvider) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/nio/channels/spi/SelectorProvider;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="selectorProvider" Type="Java.Nio.Channels.Spi.SelectorProvider" />
      </Parameters>
      <Docs>
        <param name="selectorProvider">To be added.</param>
        <summary>Constructs a new <c>SocketChannel</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>SocketChannel</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/SocketChannel.html#SocketChannel(java.nio.channels.spi.SelectorProvider)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SocketChannel (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.SocketChannel Bind (Java.Net.SocketAddress p0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.SocketChannel Bind(class Java.Net.SocketAddress p0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("bind", "(Ljava/net/SocketAddress;)Ljava/nio/channels/SocketChannel;", "GetBind_Ljava_net_SocketAddress_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.SocketChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="p0">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public abstract bool Connect (Java.Net.SocketAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Connect(class Java.Net.SocketAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("connect", "(Ljava/net/SocketAddress;)Z", "GetConnect_Ljava_net_SocketAddress_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="address">the address to connect with.</param>
        <summary>Connects this channel's socket with a remote address.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Connects this channel's socket with a remote address.
 </para>
          <para tool="javadoc-to-mdoc">
 If this channel is blocking, this method will suspend until connecting is
 finished or an I/O exception occurs. If the channel is non-blocking,
 this method will return <c>true</c> if the connection is finished at
 once or return <c>false</c> when the connection must be finished later
 by calling <c>finishConnect()</c>.
 </para>
          <para tool="javadoc-to-mdoc">
 This method can be called at any moment and can block other read and
 write operations while connecting. It executes the same security checks
 as the connect method of the <c>Socket</c> class.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/SocketChannel.html#connect(java.net.SocketAddress)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AlreadyConnectedException">if the channel is already connected.</exception>
        <exception cref="T:Java.Nio.Channels.ConnectionPendingException">a non-blocking connecting operation is already executing on
             this channel.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread while this method
             is executing.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The calling thread will have the
             interrupt state set and this channel will be closed.</exception>
        <exception cref="T:Java.Nio.Channels.UnresolvedAddressException">if the address is not resolved.</exception>
        <exception cref="T:Java.Nio.Channels.UnsupportedAddressTypeException">if the address type is not supported.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; ConnectAsync (Java.Net.SocketAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; ConnectAsync(class Java.Net.SocketAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="address">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishConnect">
      <MemberSignature Language="C#" Value="public abstract bool FinishConnect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FinishConnect() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("finishConnect", "()Z", "GetFinishConnectHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Completes the connection process initiated by a call of <c>connect(SocketAddress)</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Completes the connection process initiated by a call of <c>connect(SocketAddress)</c>.
 </para>
          <para tool="javadoc-to-mdoc">
 This method returns <c>true</c> if the connection is finished already
 and returns <c>false</c> if the channel is non-blocking and the
 connection is not finished yet.
 </para>
          <para tool="javadoc-to-mdoc">
 If this channel is in blocking mode, this method will suspend and return
 <c>true</c> when the connection is finished. It closes this channel and
 throws an exception if the connection fails.
 </para>
          <para tool="javadoc-to-mdoc">
 This method can be called at any moment and it can block other <c>read</c> and <c>write</c> operations while connecting.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/SocketChannel.html#finishConnect()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NoConnectionPendingException">if the channel is not connected and the connection process
             has not been initiated.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread while this method
             is executing.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The calling thread has the
             interrupt state set, and this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="FinishConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; FinishConnectAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; FinishConnectAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConnected">
      <MemberSignature Language="C#" Value="public abstract bool IsConnected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConnected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isConnected", "()Z", "GetIsConnectedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this channel's socket is connected.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates whether this channel's socket is connected.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/SocketChannel.html#isConnected()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsConnectionPending">
      <MemberSignature Language="C#" Value="public abstract bool IsConnectionPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConnectionPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isConnectionPending", "()Z", "GetIsConnectionPendingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this channel's socket is still trying to connect.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Indicates whether this channel's socket is still trying to connect.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/SocketChannel.html#isConnectionPending()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static Java.Nio.Channels.SocketChannel Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.Channels.SocketChannel Open() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("open", "()Ljava/nio/channels/SocketChannel;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.SocketChannel</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an open and unconnected socket channel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates an open and unconnected socket channel.
 </para>
          <para tool="javadoc-to-mdoc">
 This channel is created by calling <c>openSocketChannel()</c> of the
 default <c><see cref="T:Java.Nio.Channels.Spi.SelectorProvider" /></c> instance.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/SocketChannel.html#open()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static Java.Nio.Channels.SocketChannel Open (Java.Net.SocketAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.Channels.SocketChannel Open(class Java.Net.SocketAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("open", "(Ljava/net/SocketAddress;)Ljava/nio/channels/SocketChannel;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.SocketChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="address">the socket address to be connected to.</param>
        <summary>Creates a socket channel and connects it to a socket address.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a socket channel and connects it to a socket address.
 </para>
          <para tool="javadoc-to-mdoc">
 This method performs a call to <c>open()</c> followed by a call to
 <c>connect(SocketAddress)</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/SocketChannel.html#open(java.net.SocketAddress)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread while this method
             is executing.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is executing. The calling thread will have the
             interrupt state set and the channel will be closed.</exception>
        <exception cref="T:Java.Nio.Channels.UnresolvedAddressException">if the address is not resolved.</exception>
        <exception cref="T:Java.Nio.Channels.UnsupportedAddressTypeException">if the address type is not supported.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract int Read (Java.Nio.ByteBuffer target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(class Java.Nio.ByteBuffer target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("read", "(Ljava/nio/ByteBuffer;)I", "GetRead_Ljava_nio_ByteBuffer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="target">the byte buffer to receive the bytes.</param>
        <summary>Reads bytes from this socket channel into the given buffer.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Reads bytes from this socket channel into the given buffer.
 </para>
          <para tool="javadoc-to-mdoc">
 The maximum number of bytes that will be read is the remaining number of
 bytes in the buffer when the method is invoked. The bytes will be copied
 into the buffer starting at the buffer's current position.
 </para>
          <para tool="javadoc-to-mdoc">
 The call may block if other threads are also attempting to read from this
 channel.
 </para>
          <para tool="javadoc-to-mdoc">
 Upon completion, the buffer's position is set to the end of the bytes
 that have been read. The buffer's limit is not changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/SocketChannel.html#read(java.nio.ByteBuffer)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if another thread closes the channel during the read.</exception>
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if this channel is not yet connected.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.</exception>
        <altmember cref="M:Java.Nio.Channels.IReadableByteChannel.Read(Java.Nio.ByteBuffer)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public long Read (Java.Nio.ByteBuffer[] targets);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Read(class Java.Nio.ByteBuffer[] targets) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("read", "([Ljava/nio/ByteBuffer;)J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targets" Type="Java.Nio.ByteBuffer[]" />
      </Parameters>
      <Docs>
        <param name="targets">the array of byte buffers into which the bytes will be copied.</param>
        <summary>Reads bytes from this socket channel and stores them in the specified
 array of buffers.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Reads bytes from this socket channel and stores them in the specified
 array of buffers. This method attempts to read as many bytes as can be
 stored in the buffer array from this channel and returns the number of
 bytes actually read.
 </para>
          <para tool="javadoc-to-mdoc">
 If a read operation is in progress, subsequent threads will block until
 the read is completed and will then contend for the ability to read.
 </para>
          <para tool="javadoc-to-mdoc">
 Calling this method is equivalent to calling <c>read(targets, 0,
 targets.length);</c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/SocketChannel.html#read(java.nio.ByteBuffer[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread during this read
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.</exception>
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if this channel is not yet connected.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract long Read (Java.Nio.ByteBuffer[] targets, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Read(class Java.Nio.ByteBuffer[] targets, int32 offset, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("read", "([Ljava/nio/ByteBuffer;II)J", "GetRead_arrayLjava_nio_ByteBuffer_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targets" Type="Java.Nio.ByteBuffer[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="targets">the array of byte buffers into which the bytes will be copied.</param>
        <param name="offset">the index of the first buffer to store bytes in.</param>
        <param name="length">the maximum number of buffers to store bytes in.</param>
        <summary>Reads bytes from this socket channel into a subset of the given buffers.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Reads bytes from this socket channel into a subset of the given buffers.
 This method attempts to read all <c>remaining()</c> bytes from <c>length</c> byte buffers, in order, starting at <c>targets[offset]</c>. The
 number of bytes actually read is returned.
 </para>
          <para tool="javadoc-to-mdoc">
 If a read operation is in progress, subsequent threads will block until
 the read is completed and will then contend for the ability to read.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/SocketChannel.html#read(java.nio.ByteBuffer[], int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread during this read
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>offset </c> or <c>length </c>, or if <c>offset + length</c> is greater than the size of <c>targets</c>.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.</exception>
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if this channel is not yet connected.</exception>
        <altmember cref="M:Java.Nio.Channels.IScatteringByteChannel.Read(Java.Nio.ByteBuffer[], System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoteAddress">
      <MemberSignature Language="C#" Value="public abstract Java.Net.SocketAddress RemoteAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Net.SocketAddress RemoteAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRemoteAddress", "()Ljava/net/SocketAddress;", "GetGetRemoteAddressHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.SocketAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownInput">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.SocketChannel ShutdownInput ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.SocketChannel ShutdownInput() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("shutdownInput", "()Ljava/nio/channels/SocketChannel;", "GetShutdownInputHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.SocketChannel</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownOutput">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.SocketChannel ShutdownOutput ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.SocketChannel ShutdownOutput() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("shutdownOutput", "()Ljava/nio/channels/SocketChannel;", "GetShutdownOutputHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.SocketChannel</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Socket">
      <MemberSignature Language="C#" Value="public abstract Java.Net.Socket Socket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Net.Socket Socket() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("socket", "()Ljava/net/Socket;", "GetSocketHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the socket assigned to this channel, which does not declare any public
 methods that are not declared in <c>Socket</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the socket assigned to this channel, which does not declare any public
 methods that are not declared in <c>Socket</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/SocketChannel.html#socket()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidOps">
      <MemberSignature Language="C#" Value="public override sealed Java.Nio.Channels.Operations ValidOps ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Java.Nio.Channels.Operations ValidOps() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("validOps", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.Operations</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the valid operations of this channel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the valid operations of this channel. Socket channels support
 connect, read and write operation, so this method returns
 <c>SelectionKey.OP_CONNECT | SelectionKey.OP_READ | SelectionKey.OP_WRITE</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/SocketChannel.html#validOps()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Nio.Channels.SelectableChannel.ValidOps" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract int Write (Java.Nio.ByteBuffer source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(class Java.Nio.ByteBuffer source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;)I", "GetWrite_Ljava_nio_ByteBuffer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="source">the byte buffer containing the bytes to be written.</param>
        <summary>Writes bytes from the given byte buffer to this socket channel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes bytes from the given byte buffer to this socket channel. The
 maximum number of bytes that are written is the remaining number of bytes
 in the buffer when this method is invoked. The bytes are taken from the
 buffer starting at the buffer's position.
 </para>
          <para tool="javadoc-to-mdoc">
 The call may block if other threads are also attempting to write to the
 same channel.
 </para>
          <para tool="javadoc-to-mdoc">
 Upon completion, the buffer's position is updated to the end of the bytes
 that have been written. The buffer's limit is not changed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/SocketChannel.html#write(java.nio.ByteBuffer)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if another thread closes the channel during the write.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel was already closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.</exception>
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if this channel is not connected yet.</exception>
        <altmember cref="M:Java.Nio.Channels.IWritableByteChannel.Write(Java.Nio.ByteBuffer)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public long Write (Java.Nio.ByteBuffer[] sources);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Write(class Java.Nio.ByteBuffer[] sources) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "([Ljava/nio/ByteBuffer;)J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sources" Type="Java.Nio.ByteBuffer[]" />
      </Parameters>
      <Docs>
        <param name="sources">the buffers containing bytes to write.</param>
        <summary>Writes bytes from all the given byte buffers to this socket channel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes bytes from all the given byte buffers to this socket channel.
 </para>
          <para tool="javadoc-to-mdoc">
 Calling this method is equivalent to calling <c>write(sources, 0,
 sources.length);</c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/SocketChannel.html#write(java.nio.ByteBuffer[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread during this write
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.</exception>
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if this channel is not yet connected.</exception>
        <altmember cref="M:Java.Nio.Channels.IGatheringByteChannel.Write(Java.Nio.ByteBuffer[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract long Write (Java.Nio.ByteBuffer[] sources, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Write(class Java.Nio.ByteBuffer[] sources, int32 offset, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "([Ljava/nio/ByteBuffer;II)J", "GetWrite_arrayLjava_nio_ByteBuffer_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sources" Type="Java.Nio.ByteBuffer[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sources">the array of byte buffers that is the source for bytes written
            to this channel.</param>
        <param name="offset">the index of the first buffer in <c>buffers </c>to get bytes
            from.</param>
        <param name="length">the number of buffers to get bytes from.</param>
        <summary>Attempts to write a subset of the given bytes from the buffers to this
 socket channel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to write a subset of the given bytes from the buffers to this
 socket channel. This method attempts to write all <c>remaining()</c>
 bytes from <c>length</c> byte buffers, in order, starting at <c>sources[offset]</c>. The number of bytes actually written is returned.
 </para>
          <para tool="javadoc-to-mdoc">
 If a write operation is in progress, subsequent threads will block until
 the write is completed and then contend for the ability to write.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/SocketChannel.html#write(java.nio.ByteBuffer[], int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread during this write
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>offset </c> or <c>length </c>, or if <c>offset + length</c> is greater than the size of <c>sources</c>.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.</exception>
        <exception cref="T:Java.Nio.Channels.NotYetConnectedException">if this channel is not yet connected.</exception>
        <altmember cref="M:Java.Nio.Channels.IGatheringByteChannel.Write(Java.Nio.ByteBuffer[], System.Int32, System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>
