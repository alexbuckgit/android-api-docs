<Type Name="FileChannel" FullName="Java.Nio.Channels.FileChannel">
  <TypeSignature Language="C#" Value="public abstract class FileChannel : Java.Nio.Channels.Spi.AbstractInterruptibleChannel, IDisposable, Java.Nio.Channels.IGatheringByteChannel, Java.Nio.Channels.IScatteringByteChannel, Java.Nio.Channels.ISeekableByteChannel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit FileChannel extends Java.Nio.Channels.Spi.AbstractInterruptibleChannel implements class Android.Runtime.IJavaObject, class Java.IO.ICloseable, class Java.Nio.Channels.IByteChannel, class Java.Nio.Channels.IChannel, class Java.Nio.Channels.IGatheringByteChannel, class Java.Nio.Channels.IReadableByteChannel, class Java.Nio.Channels.IScatteringByteChannel, class Java.Nio.Channels.ISeekableByteChannel, class Java.Nio.Channels.IWritableByteChannel, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Java.Nio.Channels.FileChannel" />
  <TypeSignature Language="F#" Value="type FileChannel = class&#xA;    inherit AbstractInterruptibleChannel&#xA;    interface IByteChannel&#xA;    interface IReadableByteChannel&#xA;    interface IChannel&#xA;    interface ICloseable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IWritableByteChannel&#xA;    interface IGatheringByteChannel&#xA;    interface IScatteringByteChannel&#xA;    interface ISeekableByteChannel" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Nio.Channels.Spi.AbstractInterruptibleChannel</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.IO.ICloseable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IGatheringByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IReadableByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IScatteringByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.ISeekableByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IWritableByteChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/nio/channels/FileChannel", ApiSince=1, DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>An abstract channel type for interaction with a platform file.</summary>
    <remarks />
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FileChannel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Protected default constructor.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FileChannel (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Java.Nio.Channels.FileChannel : nativeint * Android.Runtime.JniHandleOwnership -&gt; Java.Nio.Channels.FileChannel" Usage="new Java.Nio.Channels.FileChannel (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Force">
      <MemberSignature Language="C#" Value="public abstract void Force (bool metaData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Force(bool metaData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Force(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Force : bool -&gt; unit" Usage="fileChannel.Force metaData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("force", "(Z)V", "GetForce_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metaData" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="metaData">To be added.</param>
        <summary>Requests that all updates to this channel are committed to the storage
 device.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is already closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ForceAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ForceAsync (bool metaData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ForceAsync(bool metaData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.ForceAsync(System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.ForceAsync : bool -&gt; System.Threading.Tasks.Task" Usage="fileChannel.ForceAsync metaData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metaData" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="metaData">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Java.Nio.Channels.ISeekableByteChannel.Position">
      <MemberSignature Language="C#" Value="Java.Nio.Channels.ISeekableByteChannel ISeekableByteChannel.Position (long newPosition);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Java.Nio.Channels.ISeekableByteChannel Java.Nio.Channels.ISeekableByteChannel.Position(int64 newPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Java#Nio#Channels#ISeekableByteChannel#Position(System.Int64)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.ISeekableByteChannel.Position(System.Int64)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.ISeekableByteChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newPosition" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="newPosition">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Java.Nio.Channels.ISeekableByteChannel.Truncate">
      <MemberSignature Language="C#" Value="Java.Nio.Channels.ISeekableByteChannel ISeekableByteChannel.Truncate (long size);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Java.Nio.Channels.ISeekableByteChannel Java.Nio.Channels.ISeekableByteChannel.Truncate(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Java#Nio#Channels#ISeekableByteChannel#Truncate(System.Int64)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.ISeekableByteChannel.Truncate(System.Int64)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.ISeekableByteChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.FileChannel.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Java.Nio.Channels.FileChannel.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public Java.Nio.Channels.FileLock Lock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.Channels.FileLock Lock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Lock" />
      <MemberSignature Language="F#" Value="member this.Lock : unit -&gt; Java.Nio.Channels.FileLock" Usage="fileChannel.Lock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("lock", "()Ljava/nio/channels/FileLock;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileLock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtains an exclusive lock on this file.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">the file channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">this channel was not opened for writing.</exception>
        <exception cref="T:Java.Nio.Channels.OverlappingFileLockException">either a lock is already held that overlaps this lock
             request, or another thread is waiting to acquire a lock that
             will overlap with this request.</exception>
        <exception cref="T:Java.Nio.Channels.FileLockInterruptionException">the calling thread was interrupted while waiting to acquire
             the lock.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">the channel was closed while the calling thread was waiting
             to acquire the lock.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs while obtaining the requested
             lock.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.FileLock Lock (long position, long size, bool shared);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.FileLock Lock(int64 position, int64 size, bool shared) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Lock(System.Int64,System.Int64,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Lock : int64 * int64 * bool -&gt; Java.Nio.Channels.FileLock" Usage="fileChannel.Lock (position, size, shared)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("lock", "(JJZ)Ljava/nio/channels/FileLock;", "GetLock_JJZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileLock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="size" Type="System.Int64" />
        <Parameter Name="shared" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">the starting position for the locked region.</param>
        <param name="size">the length of the locked region in bytes.</param>
        <param name="shared">a flag indicating whether an attempt should be made to acquire
            a shared lock.</param>
        <summary>Obtains a lock on a specified region of the file.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>position</c> or <c>size</c> is negative.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.OverlappingFileLockException">if the requested region overlaps an existing lock or pending
             lock request.</exception>
        <exception cref="T:Java.Nio.Channels.NonReadableChannelException">if the channel is not opened in read-mode but shared is true.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if the channel is not opened in write mode but shared is
             false.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread while this method
             is executing.</exception>
        <exception cref="T:Java.Nio.Channels.FileLockInterruptionException">if the thread is interrupted while in the state of waiting on
             the desired file lock.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Map">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.MappedByteBuffer Map (Java.Nio.Channels.FileChannel.MapMode mode, long position, long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.MappedByteBuffer Map(class Java.Nio.Channels.FileChannel/MapMode mode, int64 position, int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Map(Java.Nio.Channels.FileChannel.MapMode,System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Map : Java.Nio.Channels.FileChannel.MapMode * int64 * int64 -&gt; Java.Nio.MappedByteBuffer" Usage="fileChannel.Map (mode, position, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("map", "(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;", "GetMap_Ljava_nio_channels_FileChannel_MapMode_JJHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.MappedByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Java.Nio.Channels.FileChannel+MapMode" />
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="mode">one of the three mapping modes.</param>
        <param name="position">the starting position of the file.</param>
        <param name="size">the size of the region to map into memory.</param>
        <summary>Maps the file into memory.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NonReadableChannelException">if the FileChannel is not opened for reading but the given
             mode is "READ_ONLY".</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if the FileChannel is not opened for writing but the given
             mode is not "READ_ONLY".</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given parameters of position and size are not correct.
             Both must be non negative. <c>size</c> also must not be
             bigger than max integer.</exception>
        <exception cref="T:Java.IO.IOException">if any I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static Java.Nio.Channels.FileChannel Open (Java.Nio.FileNio.IPath path, params Java.Nio.FileNio.IOpenOption[] options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.Channels.FileChannel Open(class Java.Nio.FileNio.IPath path, class Java.Nio.FileNio.IOpenOption[] options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Open(Java.Nio.FileNio.IPath,Java.Nio.FileNio.IOpenOption[])" />
      <MemberSignature Language="F#" Value="static member Open : Java.Nio.FileNio.IPath * Java.Nio.FileNio.IOpenOption[] -&gt; Java.Nio.Channels.FileChannel" Usage="Java.Nio.Channels.FileChannel.Open (path, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("open", "(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;", "", ApiSince=26)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="Java.Nio.FileNio.IOpenOption[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static Java.Nio.Channels.FileChannel Open (Java.Nio.FileNio.IPath path, System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.IOpenOption&gt; options, params Java.Nio.FileNio.Attributes.IFileAttribute[] attrs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.Channels.FileChannel Open(class Java.Nio.FileNio.IPath path, class System.Collections.Generic.ICollection`1&lt;class Java.Nio.FileNio.IOpenOption&gt; options, class Java.Nio.FileNio.Attributes.IFileAttribute[] attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Open(Java.Nio.FileNio.IPath,System.Collections.Generic.ICollection{Java.Nio.FileNio.IOpenOption},Java.Nio.FileNio.Attributes.IFileAttribute[])" />
      <MemberSignature Language="F#" Value="static member Open : Java.Nio.FileNio.IPath * System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.IOpenOption&gt; * Java.Nio.FileNio.Attributes.IFileAttribute[] -&gt; Java.Nio.Channels.FileChannel" Usage="Java.Nio.Channels.FileChannel.Open (path, options, attrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("open", "(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/FileChannel;", "", ApiSince=26)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="Java.Nio.FileNio.IPath" />
        <Parameter Name="options" Type="System.Collections.Generic.ICollection&lt;Java.Nio.FileNio.IOpenOption&gt;" />
        <Parameter Name="attrs" Type="Java.Nio.FileNio.Attributes.IFileAttribute[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="options">To be added.</param>
        <param name="attrs">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public abstract long Position ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Position() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Position" />
      <MemberSignature Language="F#" Value="abstract member Position : unit -&gt; int64" Usage="fileChannel.Position " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.ISeekableByteChannel.Position</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("position", "()J", "GetPositionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the current position as a positive integer number of bytes from
 the start of the file.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.FileChannel Position (long newPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.FileChannel Position(int64 newPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Position(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Position : int64 -&gt; Java.Nio.Channels.FileChannel" Usage="fileChannel.Position newPosition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("position", "(J)Ljava/nio/channels/FileChannel;", "GetPosition_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newPosition" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="newPosition">the new file position, in bytes.</param>
        <summary>Sets the file position pointer to a new value.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the new position is negative.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract int Read (Java.Nio.ByteBuffer dst);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(class Java.Nio.ByteBuffer dst) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Read(Java.Nio.ByteBuffer)" />
      <MemberSignature Language="F#" Value="abstract member Read : Java.Nio.ByteBuffer -&gt; int" Usage="fileChannel.Read dst" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IReadableByteChannel.Read(Java.Nio.ByteBuffer)</InterfaceMember>
        <InterfaceMember>M:Java.Nio.Channels.ISeekableByteChannel.Read(Java.Nio.ByteBuffer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("read", "(Ljava/nio/ByteBuffer;)I", "GetRead_Ljava_nio_ByteBuffer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="dst">To be added.</param>
        <summary>Reads bytes from this file channel into the given buffer.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if another thread closes the channel during the read.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread during the
             read.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs, details are in the message.</exception>
        <exception cref="T:Java.Nio.Channels.NonReadableChannelException">if the channel has not been opened in a mode that permits
             reading.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public long Read (Java.Nio.ByteBuffer[] dsts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Read(class Java.Nio.ByteBuffer[] dsts) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Read(Java.Nio.ByteBuffer[])" />
      <MemberSignature Language="F#" Value="abstract member Read : Java.Nio.ByteBuffer[] -&gt; int64&#xA;override this.Read : Java.Nio.ByteBuffer[] -&gt; int64" Usage="fileChannel.Read dsts" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IScatteringByteChannel.Read(Java.Nio.ByteBuffer[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("read", "([Ljava/nio/ByteBuffer;)J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dsts" Type="Java.Nio.ByteBuffer[]" />
      </Parameters>
      <Docs>
        <param name="dsts">To be added.</param>
        <summary>Reads bytes from this file channel and stores them in the specified array
 of buffers.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread during this read
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if the thread is interrupted by another thread during this
             read operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs; details are in the message.</exception>
        <exception cref="T:Java.Nio.Channels.NonReadableChannelException">if the channel has not been opened in a mode that permits
             reading.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract int Read (Java.Nio.ByteBuffer dst, long position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(class Java.Nio.ByteBuffer dst, int64 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Read(Java.Nio.ByteBuffer,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Read : Java.Nio.ByteBuffer * int64 -&gt; int" Usage="fileChannel.Read (dst, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("read", "(Ljava/nio/ByteBuffer;J)I", "GetRead_Ljava_nio_ByteBuffer_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dst">To be added.</param>
        <param name="position">the (non-negative) position at which to read the bytes.</param>
        <summary>Reads bytes from this file channel into the given buffer starting from
 the specified file position.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread while this method
             is executing.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The calling thread will have the
             interrupt state set, and the channel will be closed.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>position</c> is less than 0.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.</exception>
        <exception cref="T:Java.Nio.Channels.NonReadableChannelException">if the channel has not been opened in a mode that permits
             reading.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract long Read (Java.Nio.ByteBuffer[] dsts, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Read(class Java.Nio.ByteBuffer[] dsts, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Read(Java.Nio.ByteBuffer[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Read : Java.Nio.ByteBuffer[] * int * int -&gt; int64" Usage="fileChannel.Read (dsts, offset, length)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IScatteringByteChannel.Read(Java.Nio.ByteBuffer[],System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("read", "([Ljava/nio/ByteBuffer;II)J", "GetRead_arrayLjava_nio_ByteBuffer_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dsts" Type="Java.Nio.ByteBuffer[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dsts">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="length">To be added.</param>
        <summary>Reads bytes from this file channel into a subset of the given buffers.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread during this read
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if the thread is interrupted by another thread during this
             read operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>start </c> or <c>number </c>, or if
             <c>start + number</c> is greater than the size of
             <c>buffers</c>.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs; details are in the message.</exception>
        <exception cref="T:Java.Nio.Channels.NonReadableChannelException">if the channel has not been opened in a mode that permits
             reading.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync (Java.Nio.ByteBuffer dst);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(class Java.Nio.ByteBuffer dst) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.ReadAsync(Java.Nio.ByteBuffer)" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : Java.Nio.ByteBuffer -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="fileChannel.ReadAsync dst" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="dst">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; ReadAsync (Java.Nio.ByteBuffer[] dsts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; ReadAsync(class Java.Nio.ByteBuffer[] dsts) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.ReadAsync(Java.Nio.ByteBuffer[])" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : Java.Nio.ByteBuffer[] -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="fileChannel.ReadAsync dsts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dsts" Type="Java.Nio.ByteBuffer[]" />
      </Parameters>
      <Docs>
        <param name="dsts">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync (Java.Nio.ByteBuffer dst, long position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(class Java.Nio.ByteBuffer dst, int64 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.ReadAsync(Java.Nio.ByteBuffer,System.Int64)" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : Java.Nio.ByteBuffer * int64 -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="fileChannel.ReadAsync (dst, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dst" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dst">To be added.</param>
        <param name="position">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; ReadAsync (Java.Nio.ByteBuffer[] dsts, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; ReadAsync(class Java.Nio.ByteBuffer[] dsts, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.ReadAsync(Java.Nio.ByteBuffer[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : Java.Nio.ByteBuffer[] * int * int -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="fileChannel.ReadAsync (dsts, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dsts" Type="Java.Nio.ByteBuffer[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dsts">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public abstract long Size ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Size() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Size" />
      <MemberSignature Language="F#" Value="abstract member Size : unit -&gt; int64" Usage="fileChannel.Size " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.ISeekableByteChannel.Size</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("size", "()J", "GetSizeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the size of the file underlying this channel in bytes.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while getting the size of the file.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.FileChannel.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Java.Nio.Channels.FileChannel.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Java.Nio.Channels.FileChannel.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Java.Nio.Channels.FileChannel.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="TransferFrom">
      <MemberSignature Language="C#" Value="public abstract long TransferFrom (Java.Nio.Channels.IReadableByteChannel src, long position, long count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 TransferFrom(class Java.Nio.Channels.IReadableByteChannel src, int64 position, int64 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.TransferFrom(Java.Nio.Channels.IReadableByteChannel,System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member TransferFrom : Java.Nio.Channels.IReadableByteChannel * int64 * int64 -&gt; int64" Usage="fileChannel.TransferFrom (src, position, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("transferFrom", "(Ljava/nio/channels/ReadableByteChannel;JJ)J", "GetTransferFrom_Ljava_nio_channels_ReadableByteChannel_JJHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.Channels.IReadableByteChannel" />
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="count" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="src">the source channel to read bytes from.</param>
        <param name="position">the non-negative start position.</param>
        <param name="count">the non-negative number of bytes to transfer.</param>
        <summary>Reads up to <c>count</c> bytes from <c>src</c> and stores them in this
 channel's file starting at <c>position</c>.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the parameters are invalid.</exception>
        <exception cref="T:Java.Nio.Channels.NonReadableChannelException">if the source channel is not readable.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if this channel is not writable.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if either channel has already been closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if either channel is closed by other threads during this
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if the thread is interrupted during this operation.</exception>
        <exception cref="T:Java.IO.IOException">if any I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="TransferFromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; TransferFromAsync (Java.Nio.Channels.IReadableByteChannel src, long position, long count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; TransferFromAsync(class Java.Nio.Channels.IReadableByteChannel src, int64 position, int64 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.TransferFromAsync(Java.Nio.Channels.IReadableByteChannel,System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="member this.TransferFromAsync : Java.Nio.Channels.IReadableByteChannel * int64 * int64 -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="fileChannel.TransferFromAsync (src, position, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.Channels.IReadableByteChannel" />
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="count" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <param name="position">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="TransferTo">
      <MemberSignature Language="C#" Value="public abstract long TransferTo (long position, long count, Java.Nio.Channels.IWritableByteChannel target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 TransferTo(int64 position, int64 count, class Java.Nio.Channels.IWritableByteChannel target) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.TransferTo(System.Int64,System.Int64,Java.Nio.Channels.IWritableByteChannel)" />
      <MemberSignature Language="F#" Value="abstract member TransferTo : int64 * int64 * Java.Nio.Channels.IWritableByteChannel -&gt; int64" Usage="fileChannel.TransferTo (position, count, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("transferTo", "(JJLjava/nio/channels/WritableByteChannel;)J", "GetTransferTo_JJLjava_nio_channels_WritableByteChannel_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="count" Type="System.Int64" />
        <Parameter Name="target" Type="Java.Nio.Channels.IWritableByteChannel" />
      </Parameters>
      <Docs>
        <param name="position">the non-negative position to begin.</param>
        <param name="count">the non-negative number of bytes to transfer.</param>
        <param name="target">the target channel to write to.</param>
        <summary>Reads up to <c>count</c> bytes from this channel's file starting at
 <c>position</c> and writes them to <c>target</c>.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the parameters are invalid.</exception>
        <exception cref="T:Java.Nio.Channels.NonReadableChannelException">if this channel is not readable.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if the target channel is not writable.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if either channel has already been closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if either channel is closed by other threads during this
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if the thread is interrupted during this operation.</exception>
        <exception cref="T:Java.IO.IOException">if any I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="TransferToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; TransferToAsync (long position, long count, Java.Nio.Channels.IWritableByteChannel target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; TransferToAsync(int64 position, int64 count, class Java.Nio.Channels.IWritableByteChannel target) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.TransferToAsync(System.Int64,System.Int64,Java.Nio.Channels.IWritableByteChannel)" />
      <MemberSignature Language="F#" Value="member this.TransferToAsync : int64 * int64 * Java.Nio.Channels.IWritableByteChannel -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="fileChannel.TransferToAsync (position, count, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="count" Type="System.Int64" />
        <Parameter Name="target" Type="Java.Nio.Channels.IWritableByteChannel" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="count">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.FileChannel Truncate (long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.FileChannel Truncate(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Truncate(System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Truncate : int64 -&gt; Java.Nio.Channels.FileChannel" Usage="fileChannel.Truncate size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("truncate", "(J)Ljava/nio/channels/FileChannel;", "GetTruncate_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">the maximum size of the underlying file.</param>
        <summary>Truncates the file underlying this channel to a given size.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the requested size is negative.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if the channel cannot be written to.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.</exception>
      </Docs>
    </Member>
    <Member MemberName="TruncateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Java.Nio.Channels.FileChannel&gt; TruncateAsync (long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Java.Nio.Channels.FileChannel&gt; TruncateAsync(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.TruncateAsync(System.Int64)" />
      <MemberSignature Language="F#" Value="member this.TruncateAsync : int64 -&gt; System.Threading.Tasks.Task&lt;Java.Nio.Channels.FileChannel&gt;" Usage="fileChannel.TruncateAsync size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Java.Nio.Channels.FileChannel&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="C#" Value="public Java.Nio.Channels.FileLock TryLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.Channels.FileLock TryLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.TryLock" />
      <MemberSignature Language="F#" Value="member this.TryLock : unit -&gt; Java.Nio.Channels.FileLock" Usage="fileChannel.TryLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryLock", "()Ljava/nio/channels/FileLock;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileLock</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to acquire an exclusive lock on this file without blocking.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the file channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.OverlappingFileLockException">if a lock already exists that overlaps this lock request or
             another thread is waiting to acquire a lock that will overlap
             with this request.</exception>
        <exception cref="T:Java.IO.IOException">if any I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.FileLock TryLock (long position, long size, bool shared);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.FileLock TryLock(int64 position, int64 size, bool shared) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.TryLock(System.Int64,System.Int64,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member TryLock : int64 * int64 * bool -&gt; Java.Nio.Channels.FileLock" Usage="fileChannel.TryLock (position, size, shared)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryLock", "(JJZ)Ljava/nio/channels/FileLock;", "GetTryLock_JJZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileLock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="size" Type="System.Int64" />
        <Parameter Name="shared" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">the starting position.</param>
        <param name="size">the size of file to lock.</param>
        <param name="shared">true if the lock is shared.</param>
        <summary>Attempts to acquire an exclusive lock on this file without blocking.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if any parameters are invalid.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the file channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.OverlappingFileLockException">if a lock is already held that overlaps this lock request or
             another thread is waiting to acquire a lock that will overlap
             with this request.</exception>
        <exception cref="T:Java.IO.IOException">if any I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract int Write (Java.Nio.ByteBuffer src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(class Java.Nio.ByteBuffer src) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Write(Java.Nio.ByteBuffer)" />
      <MemberSignature Language="F#" Value="abstract member Write : Java.Nio.ByteBuffer -&gt; int" Usage="fileChannel.Write src" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IWritableByteChannel.Write(Java.Nio.ByteBuffer)</InterfaceMember>
        <InterfaceMember>M:Java.Nio.Channels.ISeekableByteChannel.Write(Java.Nio.ByteBuffer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;)I", "GetWrite_Ljava_nio_ByteBuffer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="src">the byte buffer containing the bytes to be written.</param>
        <summary>Writes bytes from the given byte buffer to this file channel.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if the channel was not opened for writing.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel was already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if another thread closes the channel during the write.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs, details are in the message.</exception>
        <altmember cref="M:Java.Nio.Channels.IWritableByteChannel.Write(Java.Nio.ByteBuffer)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public long Write (Java.Nio.ByteBuffer[] srcs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Write(class Java.Nio.ByteBuffer[] srcs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Write(Java.Nio.ByteBuffer[])" />
      <MemberSignature Language="F#" Value="abstract member Write : Java.Nio.ByteBuffer[] -&gt; int64&#xA;override this.Write : Java.Nio.ByteBuffer[] -&gt; int64" Usage="fileChannel.Write srcs" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IGatheringByteChannel.Write(Java.Nio.ByteBuffer[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "([Ljava/nio/ByteBuffer;)J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcs" Type="Java.Nio.ByteBuffer[]" />
      </Parameters>
      <Docs>
        <param name="srcs">To be added.</param>
        <summary>Writes bytes from all the given byte buffers to this file channel.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread during this write
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs; details are in the message.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if this channel was not opened for writing.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract int Write (Java.Nio.ByteBuffer src, long position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(class Java.Nio.ByteBuffer src, int64 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Write(Java.Nio.ByteBuffer,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member Write : Java.Nio.ByteBuffer * int64 -&gt; int" Usage="fileChannel.Write (src, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;J)I", "GetWrite_Ljava_nio_ByteBuffer_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <param name="position">the (non-negative) position at which to write the bytes.</param>
        <summary>Writes bytes from the given buffer to this file channel starting at the
 given file position.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>position</c> is less than 0.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if the channel was not opened in write-mode.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread while this method
             is executing.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract long Write (Java.Nio.ByteBuffer[] srcs, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Write(class Java.Nio.ByteBuffer[] srcs, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.Write(Java.Nio.ByteBuffer[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member Write : Java.Nio.ByteBuffer[] * int * int -&gt; int64" Usage="fileChannel.Write (srcs, offset, length)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Java.Nio.Channels.IGatheringByteChannel.Write(Java.Nio.ByteBuffer[],System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "([Ljava/nio/ByteBuffer;II)J", "GetWrite_arrayLjava_nio_ByteBuffer_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcs" Type="Java.Nio.ByteBuffer[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="srcs">To be added.</param>
        <param name="offset">the index of the first buffer in <c>buffers </c>to get bytes
            from.</param>
        <param name="length">the number of buffers to get bytes from.</param>
        <summary>Attempts to write a subset of the given bytes from the buffers to this
 file channel.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread during this write
             operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">if <c>offset </c> or <c>length </c>, or if
             <c>offset + length</c> is greater than the size of
             <c>buffers</c>.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs; details are in the message.</exception>
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if this channel was not opened for writing.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteAsync (Java.Nio.ByteBuffer src);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteAsync(class Java.Nio.ByteBuffer src) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.WriteAsync(Java.Nio.ByteBuffer)" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : Java.Nio.ByteBuffer -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="fileChannel.WriteAsync src" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; WriteAsync (Java.Nio.ByteBuffer[] srcs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; WriteAsync(class Java.Nio.ByteBuffer[] srcs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.WriteAsync(Java.Nio.ByteBuffer[])" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : Java.Nio.ByteBuffer[] -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="fileChannel.WriteAsync srcs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcs" Type="Java.Nio.ByteBuffer[]" />
      </Parameters>
      <Docs>
        <param name="srcs">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; WriteAsync (Java.Nio.ByteBuffer src, long position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; WriteAsync(class Java.Nio.ByteBuffer src, int64 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.WriteAsync(Java.Nio.ByteBuffer,System.Int64)" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : Java.Nio.ByteBuffer * int64 -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="fileChannel.WriteAsync (src, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="Java.Nio.ByteBuffer" />
        <Parameter Name="position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <param name="position">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; WriteAsync (Java.Nio.ByteBuffer[] srcs, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; WriteAsync(class Java.Nio.ByteBuffer[] srcs, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Java.Nio.Channels.FileChannel.WriteAsync(Java.Nio.ByteBuffer[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : Java.Nio.ByteBuffer[] * int * int -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="fileChannel.WriteAsync (srcs, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcs" Type="Java.Nio.ByteBuffer[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="srcs">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
  </Members>
</Type>
