<Type Name="FileLock" FullName="Java.Nio.Channels.FileLock">
  <TypeSignature Language="C#" Value="public abstract class FileLock : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit FileLock extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/nio/channels/FileLock", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <c>FileLock</c> represents a locked region of a file.</summary>
    <remarks><para tool="javadoc-to-mdoc">A <c>FileLock</c> represents a locked region of a file.
 </para><para tool="javadoc-to-mdoc">
 Locks have certain properties that enable collaborating processes to avoid
 the lost update problem or reading inconsistent data. Logically, a file lock
 can be <i>exclusive</i> or <i>shared</i>. Multiple processes can hold
 shared locks on the same region of a file, but only a single process can hold
 an exclusive lock on a given region of a file and no other process can
 simultaneously hold a shared lock overlapping the exclusive lock. An
 application can determine whether a <c>FileLock</c> is shared or exclusive
 via the <c>isShared()</c> method.
 </para><para tool="javadoc-to-mdoc">
 Locks held by a particular process cannot overlap one another. Applications
 can determine whether a proposed lock will overlap by using the <c>overlaps(long, long)</c>) method. Locks held in other processes may overlap
 locks held in this process. Locks are shared amongst all threads in the
 acquiring process, and are therefore unsuitable for intra-process
 synchronization.
 </para><para tool="javadoc-to-mdoc">
 Once a lock is acquired, it is immutable in all its state except <c>isValid()</c>. The lock will initially be valid, but may be rendered invalid by
 explicit removal of the lock, using <c>release()</c>, or implicitly by
 closing the channel or exiting the process (terminating the VM).
 <format type="text/html"><h3>Platform dependencies</h3></format></para><para tool="javadoc-to-mdoc">
 Locks are intended to be true platform operating system file locks, and
 therefore locks held by the VM will be visible to other
 operating system processes.
 </para><para tool="javadoc-to-mdoc">
 The characteristics of the underlying operating system locks will show
 through in the Java implementation. For example, some platforms' locks are
 'mandatory' -- meaning the operating system enforces the locks on processes
 that attempt to access locked regions of files; whereas other platforms'
 locks are only 'advisory' -- meaning that processes are required to
 collaborate to ensure locks are acquired and there is a potential for
 processes to not play well. To be on the safe side, it is best to assume that
 the platform is adopting advisory locks and always acquire shared locks when
 reading a region of a file.
 </para><para tool="javadoc-to-mdoc">
 On some platforms, the presence of a lock will prevent the file from being
 memory-mapped. On some platforms, closing a channel on a given file handle
 will release all the locks held on that file -- even if there are other
 channels open on the same file; their locks will also be released. The safe
 option here is to ensure that you only acquire locks on a single channel for
 a particular file and that becomes the synchronization point.
 </para><para tool="javadoc-to-mdoc">
 Further care should be exercised when locking files maintained on network
 file systems, since they often have further limitations.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/nio/channels/FileLock.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FileLock (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FileLock (Java.Nio.Channels.FileChannel channel, long position, long size, bool shared);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Java.Nio.Channels.FileChannel channel, int64 position, int64 size, bool shared) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/nio/channels/FileChannel;JJZ)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="channel" Type="Java.Nio.Channels.FileChannel" />
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="size" Type="System.Int64" />
        <Parameter Name="shared" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="channel">To be added.</param>
        <param name="position">To be added.</param>
        <param name="size">To be added.</param>
        <param name="shared">To be added.</param>
        <summary>Constructs a new file lock instance for a given channel.</summary>
        <remarks><para tool="javadoc-to-mdoc">Constructs a new file lock instance for a given channel. The constructor
 enforces the starting position, length and sharing mode of the lock.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/nio/channels/FileLock.html#FileLock(java.nio.channels.FileChannel, long, long, boolean)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="AcquiredBy">
      <MemberSignature Language="C#" Value="public virtual Java.Nio.Channels.IChannel AcquiredBy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.IChannel AcquiredBy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquiredBy", "()Ljava/nio/channels/Channel;", "GetAcquiredByHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.IChannel</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Channel">
      <MemberSignature Language="C#" Value="public Java.Nio.Channels.FileChannel Channel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.Channels.FileChannel Channel() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("channel", "()Ljava/nio/channels/FileChannel;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.FileChannel</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the lock's <c><see cref="T:Java.Nio.Channels.FileChannel" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns the lock's <c><see cref="T:Java.Nio.Channels.FileChannel" /></c>.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/nio/channels/FileLock.html#channel()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Calls <c><see cref="M:Java.Nio.Channels.FileLock.Release" /></c> for <c>AutoCloseable</c>.</summary>
        <remarks><para tool="javadoc-to-mdoc">Calls <c><see cref="M:Java.Nio.Channels.FileLock.Release" /></c> for <c>AutoCloseable</c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/nio/channels/FileLock.html#close()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isShared", "()Z", "GetIsSharedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates if the file lock is shared with other processes or if it is
 exclusive.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Indicates if the file lock is shared with other processes or if it is
 exclusive.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/nio/channels/FileLock.html#isShared()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public abstract bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isValid", "()Z", "GetIsValidHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether this lock is a valid file lock.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Indicates whether this lock is a valid file lock. The lock is
 valid unless the underlying channel has been closed or it has been
 explicitly released.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/nio/channels/FileLock.html#isValid()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Overlaps">
      <MemberSignature Language="C#" Value="public bool Overlaps (long start, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Overlaps(int64 start, int64 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("overlaps", "(JJ)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="start">the starting position for the comparative lock.</param>
        <param name="length">the length of the comparative lock.</param>
        <summary>Indicates if the receiver's lock region overlaps the region described
 in the parameter list.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Indicates if the receiver's lock region overlaps the region described
 in the parameter list.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/nio/channels/FileLock.html#overlaps(long, long)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public long Position ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Position() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("position", "()J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the lock's starting position in the file.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns the lock's starting position in the file.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/nio/channels/FileLock.html#position()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public abstract void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "GetReleaseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases this particular lock on the file.</summary>
        <remarks><para tool="javadoc-to-mdoc">Releases this particular lock on the file. If the lock is invalid then
 this method has no effect. Once released, the lock becomes invalid.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/nio/channels/FileLock.html#release()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel is already closed when an attempt to release
             the lock is made.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public long Size ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Size() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("size", "()J", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the length of the file lock in bytes.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns the length of the file lock in bytes.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/nio/channels/FileLock.html#size()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override sealed string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("toString", "()Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that shows the details of the lock suitable for debugging.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns a string that shows the details of the lock suitable for debugging.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/nio/channels/FileLock.html#toString()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
