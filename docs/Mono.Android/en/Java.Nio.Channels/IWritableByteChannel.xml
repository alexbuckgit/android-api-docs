<Type Name="IWritableByteChannel" FullName="Java.Nio.Channels.IWritableByteChannel">
  <TypeSignature Language="C#" Value="public interface IWritableByteChannel : IDisposable, Java.Nio.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWritableByteChannel implements class Android.Runtime.IJavaObject, class Java.IO.ICloseable, class Java.Nio.Channels.IChannel, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/nio/channels/WritableByteChannel", "", "Java.Nio.Channels.IWritableByteChannelInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <c>WritableByteChannel</c> is a type of <c><see cref="T:Java.Nio.Channels.IChannel" /></c> that can write
 bytes.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A <c>WritableByteChannel</c> is a type of <c><see cref="T:Java.Nio.Channels.IChannel" /></c> that can write
 bytes.
 </para>
      <para tool="javadoc-to-mdoc">
 Write operations are synchronous on a <c>WritableByteChannel</c>, that is,
 if a write is already in progress on the channel then subsequent writes will
 block until the first write completes. It is undefined whether non-write
 operations will block.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/nio/channels/WritableByteChannel.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public int Write (Java.Nio.ByteBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Write(class Java.Nio.ByteBuffer buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("write", "(Ljava/nio/ByteBuffer;)I", "GetWrite_Ljava_nio_ByteBuffer_Handler:Java.Nio.Channels.IWritableByteChannelInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="Java.Nio.ByteBuffer" />
      </Parameters>
      <Docs>
        <param name="buffer">the byte buffer containing the bytes to be written.</param>
        <summary>Writes bytes from the given buffer to the channel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes bytes from the given buffer to the channel.
 </para>
          <para tool="javadoc-to-mdoc">
 The maximum number of bytes that will be written is the
 <c>remaining()</c> number of bytes in the buffer when the method
 invoked. The bytes will be written from the buffer starting at the
 buffer's <c>position</c>.
 </para>
          <para tool="javadoc-to-mdoc">
 The call may block if other threads are also attempting to write on the
 same channel.
 </para>
          <para tool="javadoc-to-mdoc">
 Upon completion, the buffer's <c>position()</c> is updated to the
 end of the bytes that were written. The buffer's <c>limit()</c>
 is unmodified.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/WritableByteChannel.html#write(java.nio.ByteBuffer)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.NonWritableChannelException">if the channel was not opened for writing.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if the channel was already closed.</exception>
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if another thread closes the channel during the write.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupt the calling thread during the
             write.</exception>
        <exception cref="T:Java.IO.IOException">another IO exception occurs, details are in the message.
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
