<Type Name="ServerSocketChannel" FullName="Java.Nio.Channels.ServerSocketChannel">
  <TypeSignature Language="C#" Value="public abstract class ServerSocketChannel : Java.Nio.Channels.Spi.AbstractSelectableChannel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ServerSocketChannel extends Java.Nio.Channels.Spi.AbstractSelectableChannel" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Nio.Channels.Spi.AbstractSelectableChannel</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/nio/channels/ServerSocketChannel", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A <c>ServerSocketChannel</c> is a partial abstraction of a selectable,
 stream-oriented listening socket.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A <c>ServerSocketChannel</c> is a partial abstraction of a selectable,
 stream-oriented listening socket. Binding and manipulation of socket options
 can only be done through the associated <c><see cref="T:Java.Net.ServerSocket" /></c> object, returned
 by calling <c>socket()</c>. ServerSocketChannels can not be constructed for
 an already existing server-socket, nor can a <c><see cref="T:Java.Net.SocketImpl" /></c> be assigned.
 </para>
      <para tool="javadoc-to-mdoc">
 A server-socket channel is open but not bound when created by the <c>open()</c> method. Calling <c>accept</c> before bound will cause a
 <c><see cref="T:Java.Nio.Channels.NotYetBoundException" /></c>. It can be bound by calling the bind method of a
 related <c>ServerSocket</c> instance.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/nio/channels/ServerSocketChannel.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ServerSocketChannel (Java.Nio.Channels.Spi.SelectorProvider selectorProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Java.Nio.Channels.Spi.SelectorProvider selectorProvider) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/nio/channels/spi/SelectorProvider;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="selectorProvider" Type="Java.Nio.Channels.Spi.SelectorProvider" />
      </Parameters>
      <Docs>
        <param name="selectorProvider">To be added.</param>
        <summary>Constructs a new <c><see cref="T:Java.Nio.Channels.ServerSocketChannel" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c><see cref="T:Java.Nio.Channels.ServerSocketChannel" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/ServerSocketChannel.html#ServerSocketChannel(java.nio.channels.spi.SelectorProvider)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ServerSocketChannel (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T}(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.SocketChannel Accept ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.SocketChannel Accept() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("accept", "()Ljava/nio/channels/SocketChannel;", "GetAcceptHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.SocketChannel</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Accepts a connection to this server-socket channel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Accepts a connection to this server-socket channel.
 </para>
          <para tool="javadoc-to-mdoc">
 This method returns <c>null</c> when this channel is non-blocking and no
 connection is available, otherwise it blocks until a new connection is
 available or an I/O error occurs. The socket channel returned by this
 method will always be in blocking mode.
 </para>
          <para tool="javadoc-to-mdoc">
 This method just executes the same security checks as the <c>accept()</c> method of the <c><see cref="T:Java.Net.ServerSocket" /></c> class.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/ServerSocketChannel.html#accept()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Nio.Channels.AsynchronousCloseException">if this channel is closed by another thread while this method
             is in operation.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedByInterruptException">if another thread interrupts the calling thread while this
             operation is in progress. The interrupt state of the calling
             thread is set and the channel is closed.</exception>
        <exception cref="T:Java.Nio.Channels.ClosedChannelException">if this channel is closed.</exception>
        <exception cref="T:Java.IO.IOException">if another I/O error occurs.</exception>
        <exception cref="T:Java.Nio.Channels.NotYetBoundException">if the socket has not yet been bound.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AcceptAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Java.Nio.Channels.SocketChannel&gt; AcceptAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Java.Nio.Channels.SocketChannel&gt; AcceptAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Java.Nio.Channels.SocketChannel&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public Java.Nio.Channels.ServerSocketChannel Bind (Java.Net.SocketAddress p0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.Channels.ServerSocketChannel Bind(class Java.Net.SocketAddress p0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("bind", "(Ljava/net/SocketAddress;)Ljava/nio/channels/ServerSocketChannel;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.ServerSocketChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Java.Net.SocketAddress" />
      </Parameters>
      <Docs>
        <param name="p0">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public abstract Java.Nio.Channels.ServerSocketChannel Bind (Java.Net.SocketAddress p0, int p1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Nio.Channels.ServerSocketChannel Bind(class Java.Net.SocketAddress p0, int32 p1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("bind", "(Ljava/net/SocketAddress;I)Ljava/nio/channels/ServerSocketChannel;", "GetBind_Ljava_net_SocketAddress_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.ServerSocketChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="Java.Net.SocketAddress" />
        <Parameter Name="p1" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="p0">To be added.</param>
        <param name="p1">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static Java.Nio.Channels.ServerSocketChannel Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Nio.Channels.ServerSocketChannel Open() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("open", "()Ljava/nio/channels/ServerSocketChannel;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.ServerSocketChannel</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an open and unbound server-socket channel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates an open and unbound server-socket channel.
 </para>
          <para tool="javadoc-to-mdoc">
 This channel is created by calling <c>openServerSocketChannel</c> method
 of the default <c>SelectorProvider</c> instance.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/ServerSocketChannel.html#open()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Socket">
      <MemberSignature Language="C#" Value="public abstract Java.Net.ServerSocket Socket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Net.ServerSocket Socket() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("socket", "()Ljava/net/ServerSocket;", "GetSocketHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Net.ServerSocket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Return the server-socket assigned this channel, which does not declare
 any public methods that are not declared in <c>ServerSocket</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return the server-socket assigned this channel, which does not declare
 any public methods that are not declared in <c>ServerSocket</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/ServerSocketChannel.html#socket()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidOps">
      <MemberSignature Language="C#" Value="public override sealed Java.Nio.Channels.Operations ValidOps ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Java.Nio.Channels.Operations ValidOps() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("validOps", "()I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.Channels.Operations</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the valid operations of this channel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the valid operations of this channel. Server-socket channels support
 accepting operation, so this method returns <c>SelectionKey.OP_ACCEPT</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/nio/channels/ServerSocketChannel.html#validOps()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Java.Nio.Channels.SelectableChannel.ValidOps" />
      </Docs>
    </Member>
  </Members>
</Type>
