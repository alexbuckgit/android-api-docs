<Type Name="IInterruptibleChannel" FullName="Java.Nio.Channels.IInterruptibleChannel">
  <TypeSignature Language="C#" Value="public interface IInterruptibleChannel : IDisposable, Java.Nio.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInterruptibleChannel implements class Android.Runtime.IJavaObject, class Java.IO.ICloseable, class Java.Nio.Channels.IChannel, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.Nio.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/nio/channels/InterruptibleChannel", "", "Java.Nio.Channels.IInterruptibleChannelInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Channels that implement this interface can be asynchronously closed and
 interrupted.</summary>
    <remarks><para tool="javadoc-to-mdoc">Channels that implement this interface can be asynchronously closed and
 interrupted.
 </para><para tool="javadoc-to-mdoc">
 A channel that can be asynchronously closed permits that a thread blocked on
 an I/O operation (the I/O thread) can be released by another thread calling
 the channel's <c><see cref="M:Java.Nio.Channels.IInterruptibleChannel.Close" /></c> method. The I/O thread will throw an
 <c><see cref="T:Java.Nio.Channels.AsynchronousCloseException" /></c> and the channel will be closed.
 </para><para tool="javadoc-to-mdoc">
 A channel that is interruptible permits a thread blocked on an I/O operation
 (the I/O thread) to be interrupted by another thread (by invoking
 <c><see cref="M:Java.Lang.Thread.Interrupt" /></c> on the I/O thread). When the I/O thread is
 interrupted it will throw a <c><see cref="T:Java.Nio.Channels.ClosedByInterruptException" /></c>, it will have
 its interrupted status set and the channel will be closed. If the I/O thread
 attempts to make an I/O call with the interrupt status set the call will
 immediately fail with a <c><see cref="T:Java.Nio.Channels.ClosedByInterruptException" /></c>.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/nio/channels/InterruptibleChannel.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "GetCloseHandler:Java.Nio.Channels.IInterruptibleChannelInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the channel.</summary>
        <remarks><para tool="javadoc-to-mdoc">Closes the channel.
 </para><para tool="javadoc-to-mdoc">
 Any threads that are blocked on I/O operations on this channel will be
 interrupted with an <c><see cref="T:Java.Nio.Channels.AsynchronousCloseException" /></c>. Otherwise, this
 method behaves the same as defined in the <c>Channel</c> interface.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/nio/channels/InterruptibleChannel.html#close()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an I/O error occurs while closing the channel.
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
