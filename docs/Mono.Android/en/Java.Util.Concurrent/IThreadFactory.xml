<Type Name="IThreadFactory" FullName="Java.Util.Concurrent.IThreadFactory">
  <TypeSignature Language="C#" Value="public interface IThreadFactory : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IThreadFactory implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/ThreadFactory", "", "Java.Util.Concurrent.IThreadFactoryInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>An object that creates new threads on demand.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">An object that creates new threads on demand.  Using thread factories
 removes hardwiring of calls to <c><see cref="C:Java.Lang.Thread(Java.Lang.IRunnable)" /></c>,
 enabling applications to use special thread subclasses, priorities, etc.

 </para>
      <para tool="javadoc-to-mdoc">
 The simplest implementation of this interface is just:
  <example><code lang="java">class SimpleThreadFactory implements ThreadFactory {
   public Thread newThread(Runnable r) {
     return new Thread(r);
   
 }}</code></example>

 The <c><see cref="M:Java.Util.Concurrent.Executors.DefaultThreadFactory" /></c> method provides a more
 useful simple implementation, that sets the created thread context
 to known values before returning it.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/ThreadFactory.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="NewThread">
      <MemberSignature Language="C#" Value="public Java.Lang.Thread NewThread (Java.Lang.IRunnable r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Thread NewThread(class Java.Lang.IRunnable r) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newThread", "(Ljava/lang/Runnable;)Ljava/lang/Thread;", "GetNewThread_Ljava_lang_Runnable_Handler:Java.Util.Concurrent.IThreadFactoryInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Thread</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="r">a runnable to be executed by new thread instance</param>
        <summary>Constructs a new <c>Thread</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructs a new <c>Thread</c>.  Implementations may also initialize
 priority, name, daemon status, <c>ThreadGroup</c>, etc.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ThreadFactory.html#newThread(java.lang.Runnable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
