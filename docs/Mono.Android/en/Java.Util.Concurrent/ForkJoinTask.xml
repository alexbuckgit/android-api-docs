<Type Name="ForkJoinTask" FullName="Java.Util.Concurrent.ForkJoinTask">
  <TypeSignature Language="C#" Value="public abstract class ForkJoinTask : Java.Lang.Object, IDisposable, Java.IO.ISerializable, Java.Util.Concurrent.IFuture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ForkJoinTask extends Java.Lang.Object implements class Android.Runtime.IJavaObject, class Java.IO.ISerializable, class Java.Util.Concurrent.IFuture, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Java.IO.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Util.Concurrent.IFuture</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/ForkJoinTask", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>Abstract base class for tasks that run within a <c><see cref="T:Java.Util.Concurrent.ForkJoinPool" /></c>.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Abstract base class for tasks that run within a <c><see cref="T:Java.Util.Concurrent.ForkJoinPool" /></c>.
 A <c>ForkJoinTask</c> is a thread-like entity that is much
 lighter weight than a normal thread.  Huge numbers of tasks and
 subtasks may be hosted by a small number of actual threads in a
 ForkJoinPool, at the price of some usage limitations.

 </para>
      <para tool="javadoc-to-mdoc">A "main" <c>ForkJoinTask</c> begins execution when it is
 explicitly submitted to a <c><see cref="T:Java.Util.Concurrent.ForkJoinPool" /></c>, or, if not already
 engaged in a ForkJoin computation, commenced in the <c>ForkJoinPool.commonPool()</c> via <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Fork" /></c>, <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Invoke" /></c>, or
 related methods.  Once started, it will usually in turn start other
 subtasks.  As indicated by the name of this class, many programs
 using <c>ForkJoinTask</c> employ only methods <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Fork" /></c> and
 <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Join" /></c>, or derivatives such as <c><see cref="!:Java.Util.Concurrent.ForkJoinTask.invokeAll(java.util.concurrent.ForkJoinTask&lt;?&gt;...)" /></c>.  However, this class also
 provides a number of other methods that can come into play in
 advanced usages, as well as extension mechanics that allow support
 of new forms of fork/join processing.

 </para>
      <para tool="javadoc-to-mdoc">A <c>ForkJoinTask</c> is a lightweight form of <c><see cref="T:Java.Util.Concurrent.IFuture" /></c>.
 The efficiency of <c>ForkJoinTask</c>s stems from a set of
 restrictions (that are only partially statically enforceable)
 reflecting their main use as computational tasks calculating pure
 functions or operating on purely isolated objects.  The primary
 coordination mechanisms are <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Fork" /></c>, that arranges
 asynchronous execution, and <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Join" /></c>, that doesn't proceed
 until the task's result has been computed.  Computations should
 ideally avoid <c>synchronized</c> methods or blocks, and should
 minimize other blocking synchronization apart from joining other
 tasks or using synchronizers such as Phasers that are advertised to
 cooperate with fork/join scheduling. Subdividable tasks should also
 not perform blocking I/O, and should ideally access variables that
 are completely independent of those accessed by other running
 tasks. These guidelines are loosely enforced by not permitting
 checked exceptions such as <c>IOExceptions</c> to be
 thrown. However, computations may still encounter unchecked
 exceptions, that are rethrown to callers attempting to join
 them. These exceptions may additionally include <c><see cref="T:Java.Util.Concurrent.RejectedExecutionException" /></c> stemming from internal resource
 exhaustion, such as failure to allocate internal task
 queues. Rethrown exceptions behave in the same way as regular
 exceptions, but, when possible, contain stack traces (as displayed
 for example using <c>ex.printStackTrace()</c>) of both the thread
 that initiated the computation as well as the thread actually
 encountering the exception; minimally only the latter.

 </para>
      <para tool="javadoc-to-mdoc">It is possible to define and use ForkJoinTasks that may block,
 but doing do requires three further considerations: (1) Completion
 of few if any <i>other</i> tasks should be dependent on a task
 that blocks on external synchronization or I/O. Event-style async
 tasks that are never joined often fall into this category.
 (2) To minimize resource impact, tasks should be small; ideally
 performing only the (possibly) blocking action. (3) Unless the <c><see cref="!:NoType:java/util/concurrent/ForkJoinPool$ManagedBlocker;Href=../../../../reference/java/util/concurrent/ForkJoinPool.ManagedBlocker.html" /></c> API is used, or the number of possibly
 blocked tasks is known to be less than the pool's <c><see cref="P:Java.Util.Concurrent.ForkJoinPool.Parallelism" /></c> level, the pool cannot guarantee that
 enough threads will be available to ensure progress or good
 performance.

 </para>
      <para tool="javadoc-to-mdoc">The primary method for awaiting completion and extracting
 results of a task is <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Join" /></c>, but there are several variants:
 The <c><see cref="M:Java.Util.Concurrent.IFuture.Get" /></c> methods support interruptible and/or timed
 waits for completion and report results using <c>Future</c>
 conventions. Method <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Invoke" /></c> is semantically
 equivalent to <c>fork(); join()</c> but always attempts to begin
 execution in the current thread. The "<i>quiet</i>" forms of
 these methods do not extract results or report exceptions. These
 may be useful when a set of tasks are being executed, and you need
 to delay processing of results or exceptions until all complete.
 Method <c>invokeAll</c> (available in multiple versions)
 performs the most common form of parallel invocation: forking a set
 of tasks and joining them all.

 </para>
      <para tool="javadoc-to-mdoc">In the most typical usages, a fork-join pair act like a call
 (fork) and return (join) from a parallel recursive function. As is
 the case with other forms of recursive calls, returns (joins)
 should be performed innermost-first. For example, <c>a.fork();
 b.fork(); b.join(); a.join();</c> is likely to be substantially more
 efficient than joining <c>a</c> before <c>b</c>.

 </para>
      <para tool="javadoc-to-mdoc">The execution status of tasks may be queried at several levels
 of detail: <c><see cref="P:Java.Util.Concurrent.ForkJoinTask.IsDone" /></c> is true if a task completed in any way
 (including the case where a task was cancelled without executing);
 <c><see cref="P:Java.Util.Concurrent.ForkJoinTask.IsCompletedNormally" /></c> is true if a task completed without
 cancellation or encountering an exception; <c><see cref="P:Java.Util.Concurrent.ForkJoinTask.IsCancelled" /></c> is
 true if the task was cancelled (in which case <c><see cref="P:Java.Util.Concurrent.ForkJoinTask.Exception" /></c>
 returns a <c><see cref="T:Java.Util.Concurrent.CancellationException" /></c>); and
 <c><see cref="P:Java.Util.Concurrent.ForkJoinTask.IsCompletedAbnormally" /></c> is true if a task was either
 cancelled or encountered an exception, in which case <c><see cref="P:Java.Util.Concurrent.ForkJoinTask.Exception" /></c> will return either the encountered exception or
 <c><see cref="T:Java.Util.Concurrent.CancellationException" /></c>.

 </para>
      <para tool="javadoc-to-mdoc">The ForkJoinTask class is not usually directly subclassed.
 Instead, you subclass one of the abstract classes that support a
 particular style of fork/join processing, typically <c><see cref="T:Java.Util.Concurrent.RecursiveAction" /></c> for most computations that do not return results
 and <c><see cref="T:Java.Util.Concurrent.RecursiveTask" /></c> for those that do. Normally, a concrete
 ForkJoinTask subclass declares fields comprising its parameters,
 established in a constructor, and then defines a <c>compute</c>
 method that somehow uses the control methods supplied by this base class.

 </para>
      <para tool="javadoc-to-mdoc">Method <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Join" /></c> and its variants are appropriate for use
 only when completion dependencies are acyclic; that is, the
 parallel computation can be described as a directed acyclic graph
 (DAG). Otherwise, executions may encounter a form of deadlock as
 tasks cyclically wait for each other.  However, this framework
 supports other methods and techniques (for example the use of
 <c><see cref="T:Java.Util.Concurrent.Phaser" /></c>, <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.HelpQuiesce" /></c>, and <c><see cref="!:Java.Util.Concurrent.ForkJoinTask.complete(V)" /></c>) that
 may be of use in constructing custom subclasses for problems that
 are not statically structured as DAGs. To support such usages, a
 ForkJoinTask may be atomically <i>tagged</i> with a <c>short</c>
 value using <c>setForkJoinTaskTag</c> or <c>compareAndSetForkJoinTaskTag</c> and checked using <c>getForkJoinTaskTag</c>. The ForkJoinTask implementation does not use
 these <c>protected</c> methods or tags for any purpose, but they
 may be of use in the construction of specialized subclasses.  For
 example, parallel graph traversals can use the supplied methods to
 avoid revisiting nodes/tasks that have already been processed.
 (Method names for tagging are bulky in part to encourage definition
 of methods that reflect their usage patterns.)

 </para>
      <para tool="javadoc-to-mdoc">Most base support methods are <c>final</c>, to prevent
 overriding of implementations that are intrinsically tied to the
 underlying lightweight task scheduling framework.  Developers
 creating new basic styles of fork/join processing should minimally
 implement <c>protected</c> methods <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Exec" /></c>, <c><see cref="!:Java.Util.Concurrent.ForkJoinTask.setRawResult(V)" /></c>, and <c><see cref="P:Java.Util.Concurrent.ForkJoinTask.RawRawResult" /></c>, while also introducing
 an abstract computational method that can be implemented in its
 subclasses, possibly relying on other <c>protected</c> methods
 provided by this class.

 </para>
      <para tool="javadoc-to-mdoc">ForkJoinTasks should perform relatively small amounts of
 computation. Large tasks should be split into smaller subtasks,
 usually via recursive decomposition. As a very rough rule of thumb,
 a task should perform more than 100 and less than 10000 basic
 computational steps, and should avoid indefinite looping. If tasks
 are too big, then parallelism cannot improve throughput. If too
 small, then memory and internal task maintenance overhead may
 overwhelm processing.

 </para>
      <para tool="javadoc-to-mdoc">This class provides <c>adapt</c> methods for <c><see cref="T:Java.Lang.IRunnable" /></c>
 and <c><see cref="T:Java.Util.Concurrent.ICallable" /></c>, that may be of use when mixing execution of
 <c>ForkJoinTasks</c> with other kinds of tasks. When all tasks are
 of this form, consider using a pool constructed in <i>asyncMode</i>.

 </para>
      <para tool="javadoc-to-mdoc">ForkJoinTasks are <c>Serializable</c>, which enables them to be
 used in extensions such as remote execution frameworks. It is
 sensible to serialize tasks only before or after, but not during,
 execution. Serialization is not relied on during execution itself.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ForkJoinTask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary></summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#ForkJoinTask()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ForkJoinTask (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T,U}(System.IntPtr,Android.Runtime.JniHandleOwnership)" tool="ReplaceLinkValue" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Adapt">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ForkJoinTask Adapt (Java.Lang.IRunnable runnable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ForkJoinTask Adapt(class Java.Lang.IRunnable runnable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("adapt", "(Ljava/lang/Runnable;)Ljava/util/concurrent/ForkJoinTask;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runnable" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="runnable">the runnable action</param>
        <summary>Returns a new <c>ForkJoinTask</c> that performs the <c>run</c>
 method of the given <c>Runnable</c> as its action, and returns
 a null result upon <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Join" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a new <c>ForkJoinTask</c> that performs the <c>run</c>
 method of the given <c>Runnable</c> as its action, and returns
 a null result upon <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Join" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#adapt(java.lang.Runnable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Adapt">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ForkJoinTask Adapt (Java.Util.Concurrent.ICallable callable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ForkJoinTask Adapt(class Java.Util.Concurrent.ICallable callable) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("adapt", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/ForkJoinTask;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callable" Type="Java.Util.Concurrent.ICallable" />
      </Parameters>
      <Docs>
        <param name="callable">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Adapt">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ForkJoinTask Adapt (Java.Lang.IRunnable runnable, Java.Lang.Object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ForkJoinTask Adapt(class Java.Lang.IRunnable runnable, class Java.Lang.Object result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("adapt", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/ForkJoinTask;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runnable" Type="Java.Lang.IRunnable" />
        <Parameter Name="result" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="runnable">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public virtual bool Cancel (bool mayInterruptIfRunning);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Cancel(bool mayInterruptIfRunning) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("cancel", "(Z)Z", "GetCancel_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mayInterruptIfRunning" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mayInterruptIfRunning">this value has no effect in the
 default implementation because interrupts are not used to
 control cancellation.</param>
        <summary>Attempts to cancel execution of this task.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to cancel execution of this task. This attempt will
 fail if the task has already completed or could not be
 cancelled for some other reason. If successful, and this task
 has not started when <c>cancel</c> is called, execution of
 this task is suppressed. After this method returns
 successfully, unless there is an intervening call to <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Reinitialize" /></c>, subsequent calls to <c><see cref="P:Java.Util.Concurrent.ForkJoinTask.IsCancelled" /></c>,
 <c><see cref="P:Java.Util.Concurrent.ForkJoinTask.IsDone" /></c>, and <c>cancel</c> will return <c>true</c>
 and calls to <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Join" /></c> and related methods will result in
 <c>CancellationException</c>.

 </para>
          <para tool="javadoc-to-mdoc">This method may be overridden in subclasses, but if so, must
 still ensure that these properties hold. In particular, the
 <c>cancel</c> method itself must not throw exceptions.

 </para>
          <para tool="javadoc-to-mdoc">This method is designed to be invoked by <i>other</i>
 tasks. To terminate the current task, you can just return or
 throw an unchecked exception from its computation method, or
 invoke <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.CompleteExceptionally(Java.Lang.Throwable)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#cancel(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public virtual void Complete (Java.Lang.Object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Complete(class Java.Lang.Object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("complete", "(Ljava/lang/Object;)V", "GetComplete_Ljava_lang_Object_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompleteExceptionally">
      <MemberSignature Language="C#" Value="public virtual void CompleteExceptionally (Java.Lang.Throwable ex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CompleteExceptionally(class Java.Lang.Throwable ex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("completeExceptionally", "(Ljava/lang/Throwable;)V", "GetCompleteExceptionally_Ljava_lang_Throwable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="Java.Lang.Throwable" />
      </Parameters>
      <Docs>
        <param name="ex">the exception to throw. If this exception is not a
 <c>RuntimeException</c> or <c>Error</c>, the actual exception
 thrown will be a <c>RuntimeException</c> with cause <c>ex</c>.
</param>
        <summary>Completes this task abnormally, and if not already aborted or
 cancelled, causes it to throw the given exception upon
 <c>join</c> and related operations.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Completes this task abnormally, and if not already aborted or
 cancelled, causes it to throw the given exception upon
 <c>join</c> and related operations. This method may be used
 to induce exceptions in asynchronous tasks, or to force
 completion of tasks that would not otherwise complete.  Its use
 in other situations is discouraged.  This method is
 overridable, but overridden versions must invoke <c>super</c>
 implementation to maintain guarantees.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#completeExceptionally(java.lang.Throwable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Java.Lang.Throwable Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Throwable Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getException", "()Ljava/lang/Throwable;", "GetGetExceptionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Throwable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the exception thrown by the base computation, or a
 <c>CancellationException</c> if cancelled, or <c>null</c> if
 none or if the method has not yet completed.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the exception thrown by the base computation, or a
 <c>CancellationException</c> if cancelled, or <c>null</c> if
 none or if the method has not yet completed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#getException()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exec">
      <MemberSignature Language="C#" Value="protected abstract bool Exec ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Exec() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("exec", "()Z", "GetExecHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Immediately performs the base action of this task and returns
 true if, upon return from this method, this task is guaranteed
 to have completed normally.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Immediately performs the base action of this task and returns
 true if, upon return from this method, this task is guaranteed
 to have completed normally. This method may return false
 otherwise, to indicate that this task is not necessarily
 complete (or is not known to be complete), for example in
 asynchronous actions that require explicit invocations of
 completion methods. This method may also throw an (unchecked)
 exception to indicate abnormal exit. This method is designed to
 support extensions, and should not in general be called
 otherwise.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#exec()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fork">
      <MemberSignature Language="C#" Value="public Java.Util.Concurrent.ForkJoinTask Fork ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Util.Concurrent.ForkJoinTask Fork() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("fork", "()Ljava/util/concurrent/ForkJoinTask;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arranges to asynchronously execute this task in the pool the
 current task is running in, if applicable, or using the <c>ForkJoinPool.commonPool()</c> if not <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.InForkJoinPool" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Arranges to asynchronously execute this task in the pool the
 current task is running in, if applicable, or using the <c>ForkJoinPool.commonPool()</c> if not <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.InForkJoinPool" /></c>.  While
 it is not necessarily enforced, it is a usage error to fork a
 task more than once unless it has completed and been
 reinitialized.  Subsequent modifications to the state of this
 task or any data it operates on are not necessarily
 consistently observable by any thread other than the one
 executing it unless preceded by a call to <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Join" /></c> or
 related methods, or a call to <c><see cref="P:Java.Util.Concurrent.ForkJoinTask.IsDone" /></c> returning <c>true</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#fork()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public Java.Lang.Object Get ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Get() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("get", "()Ljava/lang/Object;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Waits if necessary for the computation to complete, and then
 retrieves its result.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Waits if necessary for the computation to complete, and then
 retrieves its result.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#get()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Util.Concurrent.CancellationException">if the computation was cancelled</exception>
        <exception cref="T:Java.Util.Concurrent.ExecutionException">if the computation threw an
 exception</exception>
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is not a
 member of a ForkJoinPool and was interrupted while waiting
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public Java.Lang.Object Get (long timeout, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Get(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("get", "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">the maximum time to wait</param>
        <param name="unit">the time unit of the timeout argument</param>
        <summary>Waits if necessary for at most the given time for the computation
 to complete, and then retrieves its result, if available.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Waits if necessary for at most the given time for the computation
 to complete, and then retrieves its result, if available.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#get(long, java.util.concurrent.TimeUnit)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Util.Concurrent.CancellationException">if the computation was cancelled</exception>
        <exception cref="T:Java.Util.Concurrent.ExecutionException">if the computation threw an
 exception</exception>
        <exception cref="T:Java.Lang.InterruptedException">if the current thread is not a
 member of a ForkJoinPool and was interrupted while waiting</exception>
        <exception cref="T:Java.Util.Concurrent.TimeoutException">if the wait timed out
</exception>
      </Docs>
    </Member>
    <Member MemberName="HelpQuiesce">
      <MemberSignature Language="C#" Value="public static void HelpQuiesce ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void HelpQuiesce() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("helpQuiesce", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Possibly executes tasks until the pool hosting the current task
 <c><see cref="P:Java.Util.Concurrent.ForkJoinPool.IsQuiescent" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Possibly executes tasks until the pool hosting the current task
 <c><see cref="P:Java.Util.Concurrent.ForkJoinPool.IsQuiescent" /></c>. This method may
 be of use in designs in which many tasks are forked, but none
 are explicitly joined, instead executing them until all are
 processed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#helpQuiesce()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InForkJoinPool">
      <MemberSignature Language="C#" Value="public static bool InForkJoinPool ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool InForkJoinPool() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("inForkJoinPool", "()Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns <c>true</c> if the current thread is a <c><see cref="T:Java.Util.Concurrent.ForkJoinWorkerThread" /></c> executing as a ForkJoinPool computation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if the current thread is a <c><see cref="T:Java.Util.Concurrent.ForkJoinWorkerThread" /></c> executing as a ForkJoinPool computation.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#inForkJoinPool()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public Java.Lang.Object Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Lang.Object Invoke() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invoke", "()Ljava/lang/Object;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Commences performing this task, awaits its completion if
 necessary, and returns its result, or throws an (unchecked)
 <c>RuntimeException</c> or <c>Error</c> if the underlying
 computation did so.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Commences performing this task, awaits its completion if
 necessary, and returns its result, or throws an (unchecked)
 <c>RuntimeException</c> or <c>Error</c> if the underlying
 computation did so.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#invoke()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAll">
      <MemberSignature Language="C#" Value="public static void InvokeAll (Java.Util.Concurrent.ForkJoinTask[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InvokeAll(class Java.Util.Concurrent.ForkJoinTask[] tasks) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invokeAll", "([Ljava/util/concurrent/ForkJoinTask;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="Java.Util.Concurrent.ForkJoinTask[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAll">
      <MemberSignature Language="C#" Value="public static System.Collections.ICollection InvokeAll (System.Collections.ICollection tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ICollection InvokeAll(class System.Collections.ICollection tasks) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invokeAll", "(Ljava/util/Collection;)Ljava/util/Collection;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="tasks">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAll">
      <MemberSignature Language="C#" Value="public static void InvokeAll (Java.Util.Concurrent.ForkJoinTask t1, Java.Util.Concurrent.ForkJoinTask t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InvokeAll(class Java.Util.Concurrent.ForkJoinTask t1, class Java.Util.Concurrent.ForkJoinTask t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invokeAll", "(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinTask;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="Java.Util.Concurrent.ForkJoinTask" />
        <Parameter Name="t2" Type="Java.Util.Concurrent.ForkJoinTask" />
      </Parameters>
      <Docs>
        <param name="t1">To be added.</param>
        <param name="t2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancelled">
      <MemberSignature Language="C#" Value="public bool IsCancelled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancelled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isCancelled", "()Z", "GetIsCancelledHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this task was cancelled before it completed
 normally.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if this task was cancelled before it completed
 normally.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#isCancelled()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompletedAbnormally">
      <MemberSignature Language="C#" Value="public bool IsCompletedAbnormally { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompletedAbnormally" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isCompletedAbnormally", "()Z", "GetIsCompletedAbnormallyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this task threw an exception or was cancelled.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if this task threw an exception or was cancelled.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#isCompletedAbnormally()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompletedNormally">
      <MemberSignature Language="C#" Value="public bool IsCompletedNormally { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompletedNormally" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isCompletedNormally", "()Z", "GetIsCompletedNormallyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this task completed without throwing an
 exception and was not cancelled.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if this task completed without throwing an
 exception and was not cancelled.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#isCompletedNormally()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDone">
      <MemberSignature Language="C#" Value="public bool IsDone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isDone", "()Z", "GetIsDoneHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this task completed.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if this task completed.

 Completion may be due to normal termination, an exception, or
 cancellation -- in all of these cases, this method will return
 <c>true</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#isDone()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public Java.Lang.Object Join ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Lang.Object Join() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("join", "()Ljava/lang/Object;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the result of the computation when it <c><see cref="P:Java.Util.Concurrent.ForkJoinTask.IsDone" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the result of the computation when it <c><see cref="P:Java.Util.Concurrent.ForkJoinTask.IsDone" /></c>.  This method differs from <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Get" /></c> in that
 abnormal completion results in <c>RuntimeException</c> or
 <c>Error</c>, not <c>ExecutionException</c>, and that
 interrupts of the calling thread do <i>not</i> cause the
 method to abruptly return by throwing <c>InterruptedException</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#join()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PeekNextLocalTask">
      <MemberSignature Language="C#" Value="protected static Java.Util.Concurrent.ForkJoinTask PeekNextLocalTask ();" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class Java.Util.Concurrent.ForkJoinTask PeekNextLocalTask() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("peekNextLocalTask", "()Ljava/util/concurrent/ForkJoinTask;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns, but does not unschedule or execute, a task queued by
 the current thread but not yet executed, if one is immediately
 available.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns, but does not unschedule or execute, a task queued by
 the current thread but not yet executed, if one is immediately
 available. There is no guarantee that this task will actually
 be polled or executed next. Conversely, this method may return
 null even if a task exists but cannot be accessed without
 contention with other threads.  This method is designed
 primarily to support extensions, and is unlikely to be useful
 otherwise.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#peekNextLocalTask()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PollNextLocalTask">
      <MemberSignature Language="C#" Value="protected static Java.Util.Concurrent.ForkJoinTask PollNextLocalTask ();" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class Java.Util.Concurrent.ForkJoinTask PollNextLocalTask() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("pollNextLocalTask", "()Ljava/util/concurrent/ForkJoinTask;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unschedules and returns, without executing, the next task
 queued by the current thread but not yet executed, if the
 current thread is operating in a ForkJoinPool.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Unschedules and returns, without executing, the next task
 queued by the current thread but not yet executed, if the
 current thread is operating in a ForkJoinPool.  This method is
 designed primarily to support extensions, and is unlikely to be
 useful otherwise.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#pollNextLocalTask()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PollTask">
      <MemberSignature Language="C#" Value="protected static Java.Util.Concurrent.ForkJoinTask PollTask ();" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class Java.Util.Concurrent.ForkJoinTask PollTask() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("pollTask", "()Ljava/util/concurrent/ForkJoinTask;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>If the current thread is operating in a ForkJoinPool,
 unschedules and returns, without executing, the next task
 queued by the current thread but not yet executed, if one is
 available, or if not available, a task that was forked by some
 other thread, if available.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">If the current thread is operating in a ForkJoinPool,
 unschedules and returns, without executing, the next task
 queued by the current thread but not yet executed, if one is
 available, or if not available, a task that was forked by some
 other thread, if available. Availability may be transient, so a
 <c>null</c> result does not necessarily imply quiescence of
 the pool this task is operating in.  This method is designed
 primarily to support extensions, and is unlikely to be useful
 otherwise.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#pollTask()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pool">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ForkJoinPool Pool { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Java.Util.Concurrent.ForkJoinPool Pool" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPool", "()Ljava/util/concurrent/ForkJoinPool;", "GetGetPoolHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinPool</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the pool hosting the current task execution, or null
 if this task is executing outside of any ForkJoinPool.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the pool hosting the current task execution, or null
 if this task is executing outside of any ForkJoinPool.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#getPool()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Java.Util.Concurrent.ForkJoinTask.InForkJoinPool" />
      </Docs>
    </Member>
    <Member MemberName="QueuedTaskCount">
      <MemberSignature Language="C#" Value="public static int QueuedTaskCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 QueuedTaskCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getQueuedTaskCount", "()I", "GetGetQueuedTaskCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of the number of tasks that have been
 forked by the current worker thread but not yet executed.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an estimate of the number of tasks that have been
 forked by the current worker thread but not yet executed. This
 value may be useful for heuristic decisions about whether to
 fork other tasks.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#getQueuedTaskCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuietlyInvoke">
      <MemberSignature Language="C#" Value="public void QuietlyInvoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QuietlyInvoke() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("quietlyInvoke", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Commences performing this task and awaits its completion if
 necessary, without returning its result or throwing its
 exception.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Commences performing this task and awaits its completion if
 necessary, without returning its result or throwing its
 exception.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#quietlyInvoke()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuietlyJoin">
      <MemberSignature Language="C#" Value="public void QuietlyJoin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QuietlyJoin() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("quietlyJoin", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Joins this task, without returning its result or throwing its
 exception.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Joins this task, without returning its result or throwing its
 exception. This method may be useful when processing
 collections of tasks when some have been cancelled or otherwise
 known to have aborted.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#quietlyJoin()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RawRawResult">
      <MemberSignature Language="C#" Value="protected abstract Java.Lang.Object RawRawResult { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Lang.Object RawRawResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRawResult", "()Ljava/lang/Object;", "GetGetRawResultHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the result that would be returned by <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Join" /></c>, even
 if this task completed abnormally, or <c>null</c> if this task
 is not known to have been completed.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the result that would be returned by <c><see cref="M:Java.Util.Concurrent.ForkJoinTask.Join" /></c>, even
 if this task completed abnormally, or <c>null</c> if this task
 is not known to have been completed.  This method is designed
 to aid debugging, as well as to support extensions. Its use in
 any other context is discouraged.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#getRawResult()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reinitialize">
      <MemberSignature Language="C#" Value="public virtual void Reinitialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reinitialize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reinitialize", "()V", "GetReinitializeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the internal bookkeeping state of this task, allowing a
 subsequent <c>fork</c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Resets the internal bookkeeping state of this task, allowing a
 subsequent <c>fork</c>. This method allows repeated reuse of
 this task, but only if reuse occurs when this task has either
 never been forked, or has been forked, then completed and all
 outstanding joins of this task have also completed. Effects
 under any other usage conditions are not guaranteed.
 This method may be useful when executing
 pre-constructed trees of subtasks in loops.

 </para>
          <para tool="javadoc-to-mdoc">Upon completion of this method, <c>isDone()</c> reports
 <c>false</c>, and <c>getException()</c> reports <c>null</c>. However, the value returned by <c>getRawResult</c> is
 unaffected. To clear this value, you can invoke <c>setRawResult(null)</c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#reinitialize()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRawResult">
      <MemberSignature Language="C#" Value="protected abstract void SetRawResult (Java.Lang.Object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetRawResult(class Java.Lang.Object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setRawResult", "(Ljava/lang/Object;)V", "GetSetRawResult_Ljava_lang_Object_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SurplusQueuedTaskCount">
      <MemberSignature Language="C#" Value="public static int SurplusQueuedTaskCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 SurplusQueuedTaskCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSurplusQueuedTaskCount", "()I", "GetGetSurplusQueuedTaskCountHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an estimate of how many more locally queued tasks are
 held by the current worker thread than there are other worker
 threads that might steal them, or zero if this thread is not
 operating in a ForkJoinPool.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an estimate of how many more locally queued tasks are
 held by the current worker thread than there are other worker
 threads that might steal them, or zero if this thread is not
 operating in a ForkJoinPool. This value may be useful for
 heuristic decisions about whether to fork other tasks. In many
 usages of ForkJoinTasks, at steady state, each worker should
 aim to maintain a small constant surplus (for example, 3) of
 tasks, and to process computations locally if this threshold is
 exceeded.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#getSurplusQueuedTaskCount()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUnfork">
      <MemberSignature Language="C#" Value="public virtual bool TryUnfork ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryUnfork() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("tryUnfork", "()Z", "GetTryUnforkHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tries to unschedule this task for execution.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Tries to unschedule this task for execution. This method will
 typically (but is not guaranteed to) succeed if this task is
 the most recently forked task by the current thread, and has
 not commenced executing in another thread.  This method may be
 useful when arranging alternative local processing of tasks
 that could have been, but were not, stolen.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html#tryUnfork()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>