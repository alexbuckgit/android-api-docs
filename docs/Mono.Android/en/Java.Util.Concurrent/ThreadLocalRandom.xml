<Type Name="ThreadLocalRandom" FullName="Java.Util.Concurrent.ThreadLocalRandom">
  <TypeSignature Language="C#" Value="public class ThreadLocalRandom : Java.Util.Random" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ThreadLocalRandom extends Java.Util.Random" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Util.Random</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/ThreadLocalRandom", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>A random number generator isolated to the current thread.</summary>
    <remarks />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ThreadLocalRandom (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ThreadLocalRandom Current ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ThreadLocalRandom Current() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("current", "()Ljava/util/concurrent/ThreadLocalRandom;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ThreadLocalRandom</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the current thread's <c>ThreadLocalRandom</c>.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="NextDouble">
      <MemberSignature Language="C#" Value="public virtual double NextDouble (double n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NextDouble(float64 n) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextDouble", "(D)D", "GetNextDouble_DHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="n">the bound on the random number to be returned.  Must be
        positive.</param>
        <summary tool="true">Returns a pseudorandom, uniformly distributed <c>double</c> value
 between 0 (inclusive) and the specified value (exclusive).</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.Lang.IllegalArgumentException">if n is not positive
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextDouble">
      <MemberSignature Language="C#" Value="public virtual double NextDouble (double least, double bound);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NextDouble(float64 least, float64 bound) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextDouble", "(DD)D", "GetNextDouble_DDHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="least" Type="System.Double" />
        <Parameter Name="bound" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="least">the least value returned</param>
        <param name="bound">the upper bound (exclusive)</param>
        <summary>Returns a pseudorandom, uniformly distributed value between the
 given least value (inclusive) and bound (exclusive).</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.Lang.IllegalArgumentException">if least greater than or equal
 to bound
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextInt">
      <MemberSignature Language="C#" Value="public virtual int NextInt (int least, int bound);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 NextInt(int32 least, int32 bound) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextInt", "(II)I", "GetNextInt_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="least" Type="System.Int32" />
        <Parameter Name="bound" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="least">the least value returned</param>
        <param name="bound">the upper bound (exclusive)</param>
        <summary>Returns a pseudorandom, uniformly distributed value between the
 given least value (inclusive) and bound (exclusive).</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.Lang.IllegalArgumentException">if least greater than or equal
 to bound
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextLong">
      <MemberSignature Language="C#" Value="public virtual long NextLong (long n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 NextLong(int64 n) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextLong", "(J)J", "GetNextLong_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="n">the bound on the random number to be returned.  Must be
        positive.</param>
        <summary tool="true">Returns a pseudorandom, uniformly distributed value
 between 0 (inclusive) and the specified value (exclusive).</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.Lang.IllegalArgumentException">if n is not positive
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextLong">
      <MemberSignature Language="C#" Value="public virtual long NextLong (long least, long bound);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 NextLong(int64 least, int64 bound) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextLong", "(JJ)J", "GetNextLong_JJHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="least" Type="System.Int64" />
        <Parameter Name="bound" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="least">the least value returned</param>
        <param name="bound">the upper bound (exclusive)</param>
        <summary>Returns a pseudorandom, uniformly distributed value between the
 given least value (inclusive) and bound (exclusive).</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.Lang.IllegalArgumentException">if least greater than or equal
 to bound
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
  </Members>
</Type>
