<Type Name="ThreadLocalRandom" FullName="Java.Util.Concurrent.ThreadLocalRandom">
  <TypeSignature Language="C#" Value="public class ThreadLocalRandom : Java.Util.Random" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ThreadLocalRandom extends Java.Util.Random" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Util.Random</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/ThreadLocalRandom", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>A random number generator isolated to the current thread.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A random number generator isolated to the current thread.  Like the
 global <c><see cref="T:Java.Util.Random" /></c> generator used by the <c><see cref="T:Java.Lang.Math" /></c> class, a <c>ThreadLocalRandom</c> is initialized
 with an internally generated seed that may not otherwise be
 modified. When applicable, use of <c>ThreadLocalRandom</c> rather
 than shared <c>Random</c> objects in concurrent programs will
 typically encounter much less overhead and contention.  Use of
 <c>ThreadLocalRandom</c> is particularly appropriate when multiple
 tasks (for example, each a <c><see cref="T:Java.Util.Concurrent.ForkJoinTask" /></c>) use random numbers
 in parallel in thread pools.

 </para>
      <para tool="javadoc-to-mdoc">Usages of this class should typically be of the form:
 <c>ThreadLocalRandom.current().nextX(...)</c> (where
 <c>X</c> is <c>Int</c>, <c>Long</c>, etc).
 When all usages are of this form, it is never possible to
 accidently share a <c>ThreadLocalRandom</c> across multiple threads.

 </para>
      <para tool="javadoc-to-mdoc">This class also provides additional commonly used bounded random
 generation methods.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/ThreadLocalRandom.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ThreadLocalRandom (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static Java.Util.Concurrent.ThreadLocalRandom Current ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Java.Util.Concurrent.ThreadLocalRandom Current() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("current", "()Ljava/util/concurrent/ThreadLocalRandom;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ThreadLocalRandom</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the current thread's <c>ThreadLocalRandom</c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the current thread's <c>ThreadLocalRandom</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ThreadLocalRandom.html#current()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextDouble">
      <MemberSignature Language="C#" Value="public virtual double NextDouble (double n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NextDouble(float64 n) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextDouble", "(D)D", "GetNextDouble_DHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="n">the bound on the random number to be returned.  Must be
        positive.</param>
        <summary tool="true">Returns a pseudorandom, uniformly distributed <c>double</c> value
 between 0 (inclusive) and the specified value (exclusive).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a pseudorandom, uniformly distributed <c>double</c> value
 between 0 (inclusive) and the specified value (exclusive).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ThreadLocalRandom.html#nextDouble(double)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if n is not positive
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextDouble">
      <MemberSignature Language="C#" Value="public virtual double NextDouble (double least, double bound);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NextDouble(float64 least, float64 bound) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextDouble", "(DD)D", "GetNextDouble_DDHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="least" Type="System.Double" />
        <Parameter Name="bound" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="least">the least value returned</param>
        <param name="bound">the upper bound (exclusive)</param>
        <summary>Returns a pseudorandom, uniformly distributed value between the
 given least value (inclusive) and bound (exclusive).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a pseudorandom, uniformly distributed value between the
 given least value (inclusive) and bound (exclusive).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ThreadLocalRandom.html#nextDouble(double, double)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if least greater than or equal
 to bound
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextInt">
      <MemberSignature Language="C#" Value="public virtual int NextInt (int least, int bound);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 NextInt(int32 least, int32 bound) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextInt", "(II)I", "GetNextInt_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="least" Type="System.Int32" />
        <Parameter Name="bound" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="least">the least value returned</param>
        <param name="bound">the upper bound (exclusive)</param>
        <summary>Returns a pseudorandom, uniformly distributed value between the
 given least value (inclusive) and bound (exclusive).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a pseudorandom, uniformly distributed value between the
 given least value (inclusive) and bound (exclusive).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ThreadLocalRandom.html#nextInt(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if least greater than or equal
 to bound
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextLong">
      <MemberSignature Language="C#" Value="public virtual long NextLong (long n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 NextLong(int64 n) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextLong", "(J)J", "GetNextLong_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="n">the bound on the random number to be returned.  Must be
        positive.</param>
        <summary tool="true">Returns a pseudorandom, uniformly distributed value
 between 0 (inclusive) and the specified value (exclusive).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a pseudorandom, uniformly distributed value
 between 0 (inclusive) and the specified value (exclusive).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ThreadLocalRandom.html#nextLong(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if n is not positive
</exception>
      </Docs>
    </Member>
    <Member MemberName="NextLong">
      <MemberSignature Language="C#" Value="public virtual long NextLong (long least, long bound);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 NextLong(int64 least, int64 bound) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("nextLong", "(JJ)J", "GetNextLong_JJHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="least" Type="System.Int64" />
        <Parameter Name="bound" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="least">the least value returned</param>
        <param name="bound">the upper bound (exclusive)</param>
        <summary>Returns a pseudorandom, uniformly distributed value between the
 given least value (inclusive) and bound (exclusive).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns a pseudorandom, uniformly distributed value between the
 given least value (inclusive) and bound (exclusive).</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/ThreadLocalRandom.html#nextLong(long, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalArgumentException">if least greater than or equal
 to bound
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
