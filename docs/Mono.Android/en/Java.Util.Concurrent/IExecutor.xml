<Type Name="IExecutor" FullName="Java.Util.Concurrent.IExecutor">
  <TypeSignature Language="C#" Value="public interface IExecutor : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IExecutor implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/Executor", "", "Java.Util.Concurrent.IExecutorInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An object that executes submitted <c><see cref="T:Java.Lang.IRunnable" /></c> tasks.</summary>
    <remarks><para tool="javadoc-to-mdoc">An object that executes submitted <c><see cref="T:Java.Lang.IRunnable" /></c> tasks. This
 interface provides a way of decoupling task submission from the
 mechanics of how each task will be run, including details of thread
 use, scheduling, etc.  An <c>Executor</c> is normally used
 instead of explicitly creating threads. For example, rather than
 invoking <c>new Thread(new(RunnableTask())).start()</c> for each
 of a set of tasks, you might use:

 <sample external-id="981BDA7FA363221E36BC139009B94F9F" />

 However, the <c>Executor</c> interface does not strictly
 require that execution be asynchronous. In the simplest case, an
 executor can run the submitted task immediately in the caller's
 thread:

  <sample external-id="CFE91804AC59B635CBDBB1B8C294C6A9" />

 More typically, tasks are executed in some thread other
 than the caller's thread.  The executor below spawns a new thread
 for each task.

  <sample external-id="49D01E23F0A674C537A55D761554B5CE" />

 Many <c>Executor</c> implementations impose some sort of
 limitation on how and when tasks are scheduled.  The executor below
 serializes the submission of tasks to a second executor,
 illustrating a composite executor.

  <sample external-id="651F0BA3FF6E04928CEB56B156A5F1D7" />

 The <c>Executor</c> implementations provided in this package
 implement <c><see cref="T:Java.Util.Concurrent.IExecutorService" /></c>, which is a more extensive
 interface.  The <c><see cref="T:Java.Util.Concurrent.ThreadPoolExecutor" /></c> class provides an
 extensible thread pool implementation. The <c><see cref="T:Java.Util.Concurrent.Executors" /></c> class
 provides convenient factory methods for these Executors.

 </para><para tool="javadoc-to-mdoc">Memory consistency effects: Actions in a thread prior to
 submitting a <c>Runnable</c> object to an <c>Executor</c>
 its execution begins, perhaps in another thread.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/util/concurrent/Executor.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (Java.Lang.IRunnable command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Execute(class Java.Lang.IRunnable command) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("execute", "(Ljava/lang/Runnable;)V", "GetExecute_Ljava_lang_Runnable_Handler:Java.Util.Concurrent.IExecutorInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="command">the runnable task</param>
        <summary>Executes the given command at some time in the future.</summary>
        <remarks><para tool="javadoc-to-mdoc">Executes the given command at some time in the future.  The command
 may execute in a new thread, in a pooled thread, or in the calling
 thread, at the discretion of the <c>Executor</c> implementation.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/util/concurrent/Executor.html#execute(java.lang.Runnable)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.Concurrent.RejectedExecutionException">if this task cannot be
 accepted for execution</exception>
        <exception cref="T:Java.Lang.NullPointerException">if command is null
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
