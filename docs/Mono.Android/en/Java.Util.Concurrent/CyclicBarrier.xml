<Type Name="CyclicBarrier" FullName="Java.Util.Concurrent.CyclicBarrier">
  <TypeSignature Language="C#" Value="public class CyclicBarrier : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CyclicBarrier extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/CyclicBarrier", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>A synchronization aid that allows a set of threads to all wait for
 each other to reach a common barrier point.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A synchronization aid that allows a set of threads to all wait for
 each other to reach a common barrier point.  CyclicBarriers are
 useful in programs involving a fixed sized party of threads that
 must occasionally wait for each other. The barrier is called
 <i>cyclic</i> because it can be re-used after the waiting threads
 are released.

 </para>
      <para tool="javadoc-to-mdoc">A <c>CyclicBarrier</c> supports an optional <c><see cref="T:Java.Lang.IRunnable" /></c> command
 that is run once per barrier point, after the last thread in the party
 arrives, but before any threads are released.
 This <i>barrier action</i> is useful
 for updating shared-state before any of the parties continue.

 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Sample usage:</b>
        </format> Here is an example of
  using a barrier in a parallel decomposition design:

  <example><code lang="java">class Solver {
   final int N;
   final float[][] data;
   final CyclicBarrier barrier;

   class Worker implements Runnable {
     int myRow;
     Worker(int row) { myRow = row; 
     public void run() {
       while (!done()) {
         processRow(myRow);

         try {
           barrier.await();
         } catch (InterruptedException ex) {
           return;
         } catch (BrokenBarrierException ex) {
           return;
         }
       }
     }
   }

   public Solver(float[][] matrix) {
     data = matrix;
     N = matrix.length;
     barrier = new CyclicBarrier(N,
                                 new Runnable() {
                                   public void run() {
                                     mergeRows(...);
                                   }
                                 });
     for (int i = 0; i </code></example>

 Here, each worker thread processes a row of the matrix then waits at the
 barrier until all rows have been processed. When all rows are processed
 the supplied <c><see cref="T:Java.Lang.IRunnable" /></c> barrier action is executed and merges the
 rows. If the merger
 determines that a solution has been found then <c>done()</c> will return
 <c>true</c> and each worker will terminate.

 </para>
      <para tool="javadoc-to-mdoc">If the barrier action does not rely on the parties being suspended when
 it is executed, then any of the threads in the party could execute that
 action when it is released. To facilitate this, each invocation of
 <c><see cref="M:Java.Util.Concurrent.CyclicBarrier.Await" /></c> returns the arrival index of that thread at the barrier.
 You can then choose which thread should execute the barrier action, for
 example:
  <example><code lang="java">if (barrier.await() == 0) {
   // log the completion of this iteration
 }</code></example></para>
      <para tool="javadoc-to-mdoc">The <c>CyclicBarrier</c> uses an all-or-none breakage model
 for failed synchronization attempts: If a thread leaves a barrier
 point prematurely because of interruption, failure, or timeout, all
 other threads waiting at that barrier point will also leave
 abnormally via <c><see cref="T:Java.Util.Concurrent.BrokenBarrierException" /></c> (or
 <c><see cref="T:Java.Lang.InterruptedException" /></c> if they too were interrupted at about
 the same time).

 </para>
      <para tool="javadoc-to-mdoc">Memory consistency effects: Actions in a thread prior to calling
 <c>await()</c>
 actions that are part of the barrier action, which in turn
 <format type="text/html"><i>happen-before</i></format> actions following a successful return from the
 corresponding <c>await()</c> in other threads.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Java.Util.Concurrent.CountDownLatch" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/CyclicBarrier.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CyclicBarrier (int parties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 parties) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parties" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parties">To be added.</param>
        <summary>Creates a new <c>CyclicBarrier</c> that will trip when the
 given number of parties (threads) are waiting upon it, and
 does not perform a predefined action when the barrier is tripped.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new <c>CyclicBarrier</c> that will trip when the
 given number of parties (threads) are waiting upon it, and
 does not perform a predefined action when the barrier is tripped.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/CyclicBarrier.html#CyclicBarrier(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>parties</c> is less than 1
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CyclicBarrier (int parties, Java.Lang.IRunnable barrierAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 parties, class Java.Lang.IRunnable barrierAction) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(ILjava/lang/Runnable;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parties" Type="System.Int32" />
        <Parameter Name="barrierAction" Type="Java.Lang.IRunnable" />
      </Parameters>
      <Docs>
        <param name="parties">To be added.</param>
        <param name="barrierAction">To be added.</param>
        <summary>Creates a new <c>CyclicBarrier</c> that will trip when the
 given number of parties (threads) are waiting upon it, and which
 will execute the given barrier action when the barrier is tripped,
 performed by the last thread entering the barrier.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new <c>CyclicBarrier</c> that will trip when the
 given number of parties (threads) are waiting upon it, and which
 will execute the given barrier action when the barrier is tripped,
 performed by the last thread entering the barrier.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/CyclicBarrier.html#CyclicBarrier(int, java.lang.Runnable)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>parties</c> is less than 1
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CyclicBarrier (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Await">
      <MemberSignature Language="C#" Value="public virtual int Await ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Await() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("await", "()I", "GetAwaitHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Waits until all <c><see cref="P:Java.Util.Concurrent.CyclicBarrier.Parties" /></c> have invoked
 <c>await</c> on this barrier.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Waits until all <c><see cref="P:Java.Util.Concurrent.CyclicBarrier.Parties" /></c> have invoked
 <c>await</c> on this barrier.

 </para>
          <para tool="javadoc-to-mdoc">If the current thread is not the last to arrive then it is
 disabled for thread scheduling purposes and lies dormant until
 one of the following things happens:
 <list type="bullet"><item><term>The last thread arrives; or
 </term></item><item><term>Some other thread <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>
 the current thread; or
 </term></item><item><term>Some other thread <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>
 one of the other waiting threads; or
 </term></item><item><term>Some other thread times out while waiting for barrier; or
 </term></item><item><term>Some other thread invokes <c><see cref="M:Java.Util.Concurrent.CyclicBarrier.Reset" /></c> on this barrier.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">If the current thread:
 <list type="bullet"><item><term>has its interrupted status set on entry to this method; or
 </term></item><item><term>is <c><see cref="M:Java.Lang.Thread.Interrupt" /></c> while waiting
 </term></item></list>
 then <c><see cref="T:Java.Lang.InterruptedException" /></c> is thrown and the current thread's
 interrupted status is cleared.

 </para>
          <para tool="javadoc-to-mdoc">If the barrier is <c><see cref="M:Java.Util.Concurrent.CyclicBarrier.Reset" /></c> while any thread is waiting,
 or if the barrier <c><see cref="P:Java.Util.Concurrent.CyclicBarrier.IsBroken" /></c> when
 <c>await</c> is invoked, or while any thread is waiting, then
 <c><see cref="T:Java.Util.Concurrent.BrokenBarrierException" /></c> is thrown.

 </para>
          <para tool="javadoc-to-mdoc">If any thread is <c><see cref="M:Java.Lang.Thread.Interrupt" /></c> while waiting,
 then all other waiting threads will throw
 <c><see cref="T:Java.Util.Concurrent.BrokenBarrierException" /></c> and the barrier is placed in the broken
 state.

 </para>
          <para tool="javadoc-to-mdoc">If the current thread is the last thread to arrive, and a
 non-null barrier action was supplied in the constructor, then the
 current thread runs the action before allowing the other threads to
 continue.
 If an exception occurs during the barrier action then that exception
 will be propagated in the current thread and the barrier is placed in
 the broken state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/CyclicBarrier.html#await()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread was interrupted
         while waiting</exception>
        <exception cref="T:Java.Util.Concurrent.BrokenBarrierException">if <i>another</i> thread was
         interrupted or timed out while the current thread was
         waiting, or the barrier was reset, or the barrier was
         broken when <c>await</c> was called, or the barrier
         action (if present) failed due to an exception
</exception>
      </Docs>
    </Member>
    <Member MemberName="Await">
      <MemberSignature Language="C#" Value="public virtual int Await (long timeout, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Await(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("await", "(JLjava/util/concurrent/TimeUnit;)I", "GetAwait_JLjava_util_concurrent_TimeUnit_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">the time to wait for the barrier</param>
        <param name="unit">the time unit of the timeout parameter</param>
        <summary>Waits until all <c><see cref="P:Java.Util.Concurrent.CyclicBarrier.Parties" /></c> have invoked
 <c>await</c> on this barrier, or the specified waiting time elapses.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Waits until all <c><see cref="P:Java.Util.Concurrent.CyclicBarrier.Parties" /></c> have invoked
 <c>await</c> on this barrier, or the specified waiting time elapses.

 </para>
          <para tool="javadoc-to-mdoc">If the current thread is not the last to arrive then it is
 disabled for thread scheduling purposes and lies dormant until
 one of the following things happens:
 <list type="bullet"><item><term>The last thread arrives; or
 </term></item><item><term>The specified timeout elapses; or
 </term></item><item><term>Some other thread <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>
 the current thread; or
 </term></item><item><term>Some other thread <c><see cref="M:Java.Lang.Thread.Interrupt" /></c>
 one of the other waiting threads; or
 </term></item><item><term>Some other thread times out while waiting for barrier; or
 </term></item><item><term>Some other thread invokes <c><see cref="M:Java.Util.Concurrent.CyclicBarrier.Reset" /></c> on this barrier.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">If the current thread:
 <list type="bullet"><item><term>has its interrupted status set on entry to this method; or
 </term></item><item><term>is <c><see cref="M:Java.Lang.Thread.Interrupt" /></c> while waiting
 </term></item></list>
 then <c><see cref="T:Java.Lang.InterruptedException" /></c> is thrown and the current thread's
 interrupted status is cleared.

 </para>
          <para tool="javadoc-to-mdoc">If the specified waiting time elapses then <c><see cref="T:Java.Util.Concurrent.TimeoutException" /></c>
 is thrown. If the time is less than or equal to zero, the
 method will not wait at all.

 </para>
          <para tool="javadoc-to-mdoc">If the barrier is <c><see cref="M:Java.Util.Concurrent.CyclicBarrier.Reset" /></c> while any thread is waiting,
 or if the barrier <c><see cref="P:Java.Util.Concurrent.CyclicBarrier.IsBroken" /></c> when
 <c>await</c> is invoked, or while any thread is waiting, then
 <c><see cref="T:Java.Util.Concurrent.BrokenBarrierException" /></c> is thrown.

 </para>
          <para tool="javadoc-to-mdoc">If any thread is <c><see cref="M:Java.Lang.Thread.Interrupt" /></c> while
 waiting, then all other waiting threads will throw <c><see cref="T:Java.Util.Concurrent.BrokenBarrierException" /></c> and the barrier is placed in the broken
 state.

 </para>
          <para tool="javadoc-to-mdoc">If the current thread is the last thread to arrive, and a
 non-null barrier action was supplied in the constructor, then the
 current thread runs the action before allowing the other threads to
 continue.
 If an exception occurs during the barrier action then that exception
 will be propagated in the current thread and the barrier is placed in
 the broken state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/CyclicBarrier.html#await(long, java.util.concurrent.TimeUnit)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if the current thread was interrupted
         while waiting</exception>
        <exception cref="T:Java.Util.Concurrent.TimeoutException">if the specified timeout elapses</exception>
        <exception cref="T:Java.Util.Concurrent.BrokenBarrierException">if <i>another</i> thread was
         interrupted or timed out while the current thread was
         waiting, or the barrier was reset, or the barrier was broken
         when <c>await</c> was called, or the barrier action (if
         present) failed due to an exception
</exception>
      </Docs>
    </Member>
    <Member MemberName="AwaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; AwaitAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; AwaitAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AwaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; AwaitAsync (long timeout, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; AwaitAsync(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">To be added.</param>
        <param name="unit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBroken">
      <MemberSignature Language="C#" Value="public virtual bool IsBroken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBroken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isBroken", "()Z", "GetIsBrokenHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries if this barrier is in a broken state.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Queries if this barrier is in a broken state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/CyclicBarrier.html#isBroken()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NumberWaiting">
      <MemberSignature Language="C#" Value="public virtual int NumberWaiting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberWaiting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNumberWaiting", "()I", "GetGetNumberWaitingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of parties currently waiting at the barrier.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the number of parties currently waiting at the barrier.
 This method is primarily useful for debugging and assertions.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/CyclicBarrier.html#getNumberWaiting()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Parties">
      <MemberSignature Language="C#" Value="public virtual int Parties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Parties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getParties", "()I", "GetGetPartiesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of parties required to trip this barrier.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the number of parties required to trip this barrier.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/CyclicBarrier.html#getParties()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reset", "()V", "GetResetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the barrier to its initial state.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Resets the barrier to its initial state.  If any parties are
 currently waiting at the barrier, they will return with a
 <c><see cref="T:Java.Util.Concurrent.BrokenBarrierException" /></c>. Note that resets <i>after</i>
 a breakage has occurred for other reasons can be complicated to
 carry out; threads need to re-synchronize in some other way,
 and choose one to perform the reset.  It may be preferable to
 instead create a new barrier for subsequent use.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/CyclicBarrier.html#reset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>