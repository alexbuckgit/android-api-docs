<Type Name="ICompletionService" FullName="Java.Util.Concurrent.ICompletionService">
  <TypeSignature Language="C#" Value="public interface ICompletionService : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICompletionService implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/CompletionService", "", "Java.Util.Concurrent.ICompletionServiceInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A service that decouples the production of new asynchronous tasks
 from the consumption of the results of completed tasks.</summary>
    <remarks><para tool="javadoc-to-mdoc">A service that decouples the production of new asynchronous tasks
 from the consumption of the results of completed tasks.  Producers
 <c>submit</c> tasks for execution. Consumers <c>take</c>
 completed tasks and process their results in the order they
 complete.  A <c>CompletionService</c> can for example be used to
 manage asynchronous I/O, in which tasks that perform reads are
 submitted in one part of a program or system, and then acted upon
 in a different part of the program when the reads complete,
 possibly in a different order than they were requested.

 </para><para tool="javadoc-to-mdoc">Typically, a <c>CompletionService</c> relies on a separate
 <c><see cref="T:Java.Util.Concurrent.IExecutor" /></c> to actually execute the tasks, in which case the
 <c>CompletionService</c> only manages an internal completion
 queue. The <c><see cref="T:Java.Util.Concurrent.ExecutorCompletionService" /></c> class provides an
 implementation of this approach.

 </para><para tool="javadoc-to-mdoc">Memory consistency effects: Actions in a thread prior to
 submitting a task to a <c>CompletionService</c>
 actions taken by that task, which in turn <format type="text/html"><i>happen-before</i></format>
 actions following a successful return from the corresponding <c>take()</c>.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/util/concurrent/CompletionService.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Poll">
      <MemberSignature Language="C#" Value="public Java.Util.Concurrent.IFuture Poll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.IFuture Poll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("poll", "()Ljava/util/concurrent/Future;", "GetPollHandler:Java.Util.Concurrent.ICompletionServiceInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IFuture</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves and removes the Future representing the next
 completed task, or <c>null</c> if none are present.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Retrieves and removes the Future representing the next
 completed task, or <c>null</c> if none are present.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/util/concurrent/CompletionService.html#poll()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Poll">
      <MemberSignature Language="C#" Value="public Java.Util.Concurrent.IFuture Poll (long timeout, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.IFuture Poll(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("poll", "(JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/Future;", "GetPoll_JLjava_util_concurrent_TimeUnit_Handler:Java.Util.Concurrent.ICompletionServiceInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">how long to wait before giving up, in units of
        <c>unit</c></param>
        <param name="unit">a <c>TimeUnit</c> determining how to interpret the
        <c>timeout</c> parameter</param>
        <summary>Retrieves and removes the Future representing the next
 completed task, waiting if necessary up to the specified wait
 time if none are yet present.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Retrieves and removes the Future representing the next
 completed task, waiting if necessary up to the specified wait
 time if none are yet present.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/util/concurrent/CompletionService.html#poll(long, java.util.concurrent.TimeUnit)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if interrupted while waiting
</exception>
      </Docs>
    </Member>
    <Member MemberName="Submit">
      <MemberSignature Language="C#" Value="public Java.Util.Concurrent.IFuture Submit (Java.Util.Concurrent.ICallable task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.IFuture Submit(class Java.Util.Concurrent.ICallable task) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("submit", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;", "GetSubmit_Ljava_util_concurrent_Callable_Handler:Java.Util.Concurrent.ICompletionServiceInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Util.Concurrent.ICallable" />
      </Parameters>
      <Docs>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Submit">
      <MemberSignature Language="C#" Value="public Java.Util.Concurrent.IFuture Submit (Java.Lang.IRunnable task, Java.Lang.Object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.IFuture Submit(class Java.Lang.IRunnable task, class Java.Lang.Object result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("submit", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;", "GetSubmit_Ljava_lang_Runnable_Ljava_lang_Object_Handler:Java.Util.Concurrent.ICompletionServiceInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IFuture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Java.Lang.IRunnable" />
        <Parameter Name="result" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="task">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Take">
      <MemberSignature Language="C#" Value="public Java.Util.Concurrent.IFuture Take ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Util.Concurrent.IFuture Take() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("take", "()Ljava/util/concurrent/Future;", "GetTakeHandler:Java.Util.Concurrent.ICompletionServiceInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.IFuture</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves and removes the Future representing the next
 completed task, waiting if none are yet present.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Retrieves and removes the Future representing the next
 completed task, waiting if none are yet present.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/util/concurrent/CompletionService.html#take()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.InterruptedException">if interrupted while waiting
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
