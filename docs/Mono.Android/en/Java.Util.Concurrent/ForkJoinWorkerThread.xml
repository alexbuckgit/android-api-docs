<Type Name="ForkJoinWorkerThread" FullName="Java.Util.Concurrent.ForkJoinWorkerThread">
  <TypeSignature Language="C#" Value="public class ForkJoinWorkerThread : Java.Lang.Thread" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ForkJoinWorkerThread extends Java.Lang.Thread" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Thread</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/ForkJoinWorkerThread", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A thread managed by a <c><see cref="T:Java.Util.Concurrent.ForkJoinPool" /></c>, which executes
 <c><see cref="T:Java.Util.Concurrent.ForkJoinTask" /></c>s.</summary>
    <remarks><para tool="javadoc-to-mdoc">A thread managed by a <c><see cref="T:Java.Util.Concurrent.ForkJoinPool" /></c>, which executes
 <c><see cref="T:Java.Util.Concurrent.ForkJoinTask" /></c>s.
 This class is subclassable solely for the sake of adding
 functionality -- there are no overridable methods dealing with
 scheduling or execution.  However, you can override initialization
 and termination methods surrounding the main task processing loop.
 If you do create such a subclass, you will also need to supply a
 custom <c><see cref="!:NoType:java/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;Href=../../../../reference/java/util/concurrent/ForkJoinPool.ForkJoinWorkerThreadFactory.html" /></c> to
 <c><see cref="C:Java.Util.Concurrent.ForkJoinPool" /></c> in a <c>ForkJoinPool</c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinWorkerThread.html" target="_blank">[Android Documentation]</a></format></para></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ForkJoinWorkerThread (Java.Util.Concurrent.ForkJoinPool pool);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Java.Util.Concurrent.ForkJoinPool pool) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/util/concurrent/ForkJoinPool;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pool" Type="Java.Util.Concurrent.ForkJoinPool" />
      </Parameters>
      <Docs>
        <param name="pool">To be added.</param>
        <summary>Creates a ForkJoinWorkerThread operating in the given pool.</summary>
        <remarks><para tool="javadoc-to-mdoc">Creates a ForkJoinWorkerThread operating in the given pool.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinWorkerThread.html#ForkJoinWorkerThread(java.util.concurrent.ForkJoinPool)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <exception cref="T:Java.Lang.NullPointerException">if pool is null
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ForkJoinWorkerThread (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStart">
      <MemberSignature Language="C#" Value="protected virtual void OnStart ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStart() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStart", "()V", "GetOnStartHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initializes internal state after construction but before
 processing any tasks.</summary>
        <remarks><para tool="javadoc-to-mdoc">Initializes internal state after construction but before
 processing any tasks. If you override this method, you must
 invoke <c>super.onStart()</c> at the beginning of the method.
 Initialization requires care: Most fields must have legal
 default values, to ensure that attempted accesses from other
 threads work correctly even before this thread starts
 processing tasks.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinWorkerThread.html#onStart()" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTermination">
      <MemberSignature Language="C#" Value="protected virtual void OnTermination (Java.Lang.Throwable exception);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTermination(class Java.Lang.Throwable exception) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onTermination", "(Ljava/lang/Throwable;)V", "GetOnTermination_Ljava_lang_Throwable_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="Java.Lang.Throwable" />
      </Parameters>
      <Docs>
        <param name="exception">the exception causing this thread to abort due
 to an unrecoverable error, or <c>null</c> if completed normally
</param>
        <summary>Performs cleanup associated with termination of this worker
 thread.</summary>
        <remarks><para tool="javadoc-to-mdoc">Performs cleanup associated with termination of this worker
 thread.  If you override this method, you must invoke
 <c>super.onTermination</c> at the end of the overridden method.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinWorkerThread.html#onTermination(java.lang.Throwable)" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Pool">
      <MemberSignature Language="C#" Value="public virtual Java.Util.Concurrent.ForkJoinPool Pool { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.Concurrent.ForkJoinPool Pool" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPool", "()Ljava/util/concurrent/ForkJoinPool;", "GetGetPoolHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Concurrent.ForkJoinPool</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the pool hosting this thread.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Returns the pool hosting this thread.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinWorkerThread.html#getPool()" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PoolIndex">
      <MemberSignature Language="C#" Value="public virtual int PoolIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PoolIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPoolIndex", "()I", "GetGetPoolIndexHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the unique index number of this thread in its pool.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Returns the unique index number of this thread in its pool.
 The returned value ranges from zero to the maximum number of
 threads (minus one) that may exist in the pool, and does not
 change during the lifetime of the thread.  This method may be
 useful for applications that track status or collect results
 per-worker-thread rather than per-task.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/java/util/concurrent/ForkJoinWorkerThread.html#getPoolIndex()" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
