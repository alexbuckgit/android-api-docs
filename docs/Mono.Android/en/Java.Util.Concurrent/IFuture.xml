<Type Name="IFuture" FullName="Java.Util.Concurrent.IFuture">
  <TypeSignature Language="C#" Value="public interface IFuture : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFuture implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("java/util/concurrent/Future", "", "Java.Util.Concurrent.IFutureInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <c>Future</c> represents the result of an asynchronous
 computation.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A <c>Future</c> represents the result of an asynchronous
 computation.  Methods are provided to check if the computation is
 complete, to wait for its completion, and to retrieve the result of
 the computation.  The result can only be retrieved using method
 <c>get</c> when the computation has completed, blocking if
 necessary until it is ready.  Cancellation is performed by the
 <c>cancel</c> method.  Additional methods are provided to
 determine if the task completed normally or was cancelled. Once a
 computation has completed, the computation cannot be cancelled.
 If you would like to use a <c>Future</c> for the sake
 of cancellability but not provide a usable result, you can
 declare types of the form <c>Future&lt;?&gt;</c> and
 return <c>null</c> as a result of the underlying task.

 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Sample Usage</b>
        </format> (Note that the following classes are all
 made-up.) </para>
      <para tool="javadoc-to-mdoc">
        <example>
          <code lang="java">interface ArchiveSearcher { String search(String target); 
 class App {
   ExecutorService executor = ...
   ArchiveSearcher searcher = ...
   void showSearch(final String target)
       throws InterruptedException {
     Future future
       = executor.submit(new Callable() {
         public String call() {
             return searcher.search(target);
         }});
     displayOtherThings(); // do other things while searching
     try {
       displayText(future.get()); // use future
     } catch (ExecutionException ex) { cleanup(); return; }
   }
 }}</code>
        </example>

 The <c><see cref="T:Java.Util.Concurrent.FutureTask" /></c> class is an implementation of <c>Future</c> that
 implements <c>Runnable</c>, and so may be executed by an <c>Executor</c>.
 For example, the above construction with <c>submit</c> could be replaced by:
  <example><code lang="java">FutureTask future =
   new FutureTask(new Callable() {
     public String call() {
       return searcher.search(target);
   });
 executor.execute(future);}</code></example></para>
      <para tool="javadoc-to-mdoc">Memory consistency effects: Actions taken by the asynchronous computation
 
 actions following the corresponding <c>Future.get()</c> in another thread.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Java.Util.Concurrent.FutureTask" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="T:Java.Util.Concurrent.IExecutor" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/java/util/concurrent/Future.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public bool Cancel (bool mayInterruptIfRunning);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Cancel(bool mayInterruptIfRunning) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("cancel", "(Z)Z", "GetCancel_ZHandler:Java.Util.Concurrent.IFutureInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mayInterruptIfRunning" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mayInterruptIfRunning">
          <c>true</c> if the thread executing this
 task should be interrupted; otherwise, in-progress tasks are allowed
 to complete</param>
        <summary>Attempts to cancel execution of this task.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempts to cancel execution of this task.  This attempt will
 fail if the task has already completed, has already been cancelled,
 or could not be cancelled for some other reason. If successful,
 and this task has not started when <c>cancel</c> is called,
 this task should never run.  If the task has already started,
 then the <c>mayInterruptIfRunning</c> parameter determines
 whether the thread executing this task should be interrupted in
 an attempt to stop the task.

 </para>
          <para tool="javadoc-to-mdoc">After this method returns, subsequent calls to <c><see cref="P:Java.Util.Concurrent.IFuture.IsDone" /></c> will
 always return <c>true</c>.  Subsequent calls to <c><see cref="P:Java.Util.Concurrent.IFuture.IsCancelled" /></c>
 will always return <c>true</c> if this method returned <c>true</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Future.html#cancel(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public Java.Lang.Object Get ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Get() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("get", "()Ljava/lang/Object;", "GetGetHandler:Java.Util.Concurrent.IFutureInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary tool="true">Waits if necessary for at most the given time for the computation
 to complete, and then retrieves its result, if available.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Waits if necessary for the computation to complete, and then
 retrieves its result.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Future.html#get()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.Concurrent.CancellationException">if the computation was cancelled</exception>
        <exception cref="T:Java.Util.Concurrent.ExecutionException">if the computation threw an
 exception</exception>
        <exception cref="T:Java.Lang.InterruptedException">if the current thread was interrupted
 while waiting
</exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public Java.Lang.Object Get (long timeout, Java.Util.Concurrent.TimeUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Get(int64 timeout, class Java.Util.Concurrent.TimeUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("get", "(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", "GetGet_JLjava_util_concurrent_TimeUnit_Handler:Java.Util.Concurrent.IFutureInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int64" />
        <Parameter Name="unit" Type="Java.Util.Concurrent.TimeUnit" />
      </Parameters>
      <Docs>
        <param name="timeout">the maximum time to wait</param>
        <param name="unit">the time unit of the timeout argument</param>
        <summary>Waits if necessary for at most the given time for the computation
 to complete, and then retrieves its result, if available.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Waits if necessary for at most the given time for the computation
 to complete, and then retrieves its result, if available.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Future.html#get(long, java.util.concurrent.TimeUnit)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Util.Concurrent.CancellationException">if the computation was cancelled</exception>
        <exception cref="T:Java.Util.Concurrent.ExecutionException">if the computation threw an
 exception</exception>
        <exception cref="T:Java.Lang.InterruptedException">if the current thread was interrupted
 while waiting</exception>
        <exception cref="T:Java.Util.Concurrent.TimeoutException">if the wait timed out
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsCancelled">
      <MemberSignature Language="C#" Value="public bool IsCancelled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancelled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isCancelled", "()Z", "GetIsCancelledHandler:Java.Util.Concurrent.IFutureInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this task was cancelled before it completed
 normally.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if this task was cancelled before it completed
 normally.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Future.html#isCancelled()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsDone">
      <MemberSignature Language="C#" Value="public bool IsDone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isDone", "()Z", "GetIsDoneHandler:Java.Util.Concurrent.IFutureInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <c>true</c> if this task completed.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if this task completed.

 Completion may be due to normal termination, an exception, or
 cancellation -- in all of these cases, this method will return
 <c>true</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/java/util/concurrent/Future.html#isDone()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>