<Type Name="IErrorHandler" FullName="Org.Xml.Sax.IErrorHandler">
  <TypeSignature Language="C#" Value="public interface IErrorHandler : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IErrorHandler implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("org/xml/sax/ErrorHandler", "", "Org.Xml.Sax.IErrorHandlerInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Basic interface for SAX error handlers.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Basic interface for SAX error handlers.

 <format type="text/html"><blockquote><i>This module, both source code and documentation, is in the
 Public Domain, and comes with <i>NO WARRANTY</i>.</i>
 See 
 for further information.
 </blockquote></format></para>
      <para tool="javadoc-to-mdoc">If a SAX application needs to implement customized error
 handling, it must implement this interface and then register an
 instance with the XML reader using the
 <c><see cref="P:Org.Xml.Sax.IXMLReader.ErrorHandler" /></c>
 method.  The parser will then report all errors and warnings
 through this interface.</para>
      <para tool="javadoc-to-mdoc">
        <i>WARNING:</i> If an application does <i>not</i>
 register an ErrorHandler, XML parsing errors will go unreported,
 except that <i>SAXParseException</i>s will be thrown for fatal errors.
 In order to detect validity errors, an ErrorHandler that does something
 with <c><see cref="M:Org.Xml.Sax.IErrorHandler.Error(Org.Xml.Sax.SAXParseException)" /></c> calls must be registered.</para>
      <para tool="javadoc-to-mdoc">For XML processing errors, a SAX driver must use this interface
 in preference to throwing an exception: it is up to the application
 to decide whether to throw an exception for different types of
 errors and warnings.  Note, however, that there is no requirement that
 the parser continue to report additional errors after a call to
 <c><see cref="M:Org.Xml.Sax.IErrorHandler.FatalError(Org.Xml.Sax.SAXParseException)" /></c>.  In other words, a SAX driver class
 may throw an exception after reporting any fatalError.
 Also parsers may throw appropriate exceptions for non-XML errors.
 For example, <c><see cref="M:Org.Xml.Sax.IXMLReader.Parse(System.String)" /></c> would throw
 an IOException for errors accessing entities or the document.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="P:Org.Xml.Sax.IXMLReader.ErrorHandler" />
            </c>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="T:Org.Xml.Sax.SAXParseException" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/org/xml/sax/ErrorHandler.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public void Error (Org.Xml.Sax.SAXParseException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Error(class Org.Xml.Sax.SAXParseException exception) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("error", "(Lorg/xml/sax/SAXParseException;)V", "GetError_Lorg_xml_sax_SAXParseException_Handler:Org.Xml.Sax.IErrorHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="Org.Xml.Sax.SAXParseException" />
      </Parameters>
      <Docs>
        <param name="exception">The error information encapsulated in a
                  SAX parse exception.</param>
        <summary>Receive notification of a recoverable error.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Receive notification of a recoverable error.

 </para>
          <para tool="javadoc-to-mdoc">This corresponds to the definition of "error" in section 1.2
 of the W3C XML 1.0 Recommendation.  For example, a validating
 parser would use this callback to report the violation of a
 validity constraint.  The default behaviour is to take no
 action.</para>
          <para tool="javadoc-to-mdoc">The SAX parser must continue to provide normal parsing
 events after invoking this method: it should still be possible
 for the application to process the document through to the end.
 If the application cannot do so, then the parser should report
 a fatal error even if the XML recommendation does not require
 it to do so.</para>
          <para tool="javadoc-to-mdoc">Filters may use this method to report other, non-XML errors
 as well.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/ErrorHandler.html#error(org.xml.sax.SAXParseException)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="T:Org.Xml.Sax.SAXParseException" />
      </Docs>
    </Member>
    <Member MemberName="FatalError">
      <MemberSignature Language="C#" Value="public void FatalError (Org.Xml.Sax.SAXParseException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FatalError(class Org.Xml.Sax.SAXParseException exception) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("fatalError", "(Lorg/xml/sax/SAXParseException;)V", "GetFatalError_Lorg_xml_sax_SAXParseException_Handler:Org.Xml.Sax.IErrorHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="Org.Xml.Sax.SAXParseException" />
      </Parameters>
      <Docs>
        <param name="exception">The error information encapsulated in a
                  SAX parse exception.</param>
        <summary>Receive notification of a non-recoverable error.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Receive notification of a non-recoverable error.

 </para>
          <para tool="javadoc-to-mdoc">
            <i>There is an apparent contradiction between the
 documentation for this method and the documentation for <c><see cref="M:Org.Xml.Sax.IContentHandler.EndDocument" /></c>.  Until this ambiguity
 is resolved in a future major release, clients should make no
 assumptions about whether endDocument() will or will not be
 invoked when the parser has reported a fatalError() or thrown
 an exception.</i>
          </para>
          <para tool="javadoc-to-mdoc">This corresponds to the definition of "fatal error" in
 section 1.2 of the W3C XML 1.0 Recommendation.  For example, a
 parser would use this callback to report the violation of a
 well-formedness constraint.</para>
          <para tool="javadoc-to-mdoc">The application must assume that the document is unusable
 after the parser has invoked this method, and should continue
 (if at all) only for the sake of collecting additional error
 messages: in fact, SAX parsers are free to stop reporting any
 other events once this method has been invoked.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/ErrorHandler.html#fatalError(org.xml.sax.SAXParseException)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="T:Org.Xml.Sax.SAXParseException" />
      </Docs>
    </Member>
    <Member MemberName="Warning">
      <MemberSignature Language="C#" Value="public void Warning (Org.Xml.Sax.SAXParseException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Warning(class Org.Xml.Sax.SAXParseException exception) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("warning", "(Lorg/xml/sax/SAXParseException;)V", "GetWarning_Lorg_xml_sax_SAXParseException_Handler:Org.Xml.Sax.IErrorHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="Org.Xml.Sax.SAXParseException" />
      </Parameters>
      <Docs>
        <param name="exception">The warning information encapsulated in a
                  SAX parse exception.</param>
        <summary>Receive notification of a warning.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Receive notification of a warning.

 </para>
          <para tool="javadoc-to-mdoc">SAX parsers will use this method to report conditions that
 are not errors or fatal errors as defined by the XML
 recommendation.  The default behaviour is to take no
 action.</para>
          <para tool="javadoc-to-mdoc">The SAX parser must continue to provide normal parsing events
 after invoking this method: it should still be possible for the
 application to process the document through to the end.</para>
          <para tool="javadoc-to-mdoc">Filters may use this method to report other, non-XML warnings
 as well.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/ErrorHandler.html#warning(org.xml.sax.SAXParseException)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="T:Org.Xml.Sax.SAXParseException" />
      </Docs>
    </Member>
  </Members>
</Type>