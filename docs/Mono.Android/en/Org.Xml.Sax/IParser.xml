<Type Name="IParser" FullName="Org.Xml.Sax.IParser">
  <TypeSignature Language="C#" Value="public interface IParser : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IParser implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("org/xml/sax/Parser", "", "Org.Xml.Sax.IParserInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Basic interface for SAX (Simple API for XML) parsers.</summary>
    <remarks><para tool="javadoc-to-mdoc">Basic interface for SAX (Simple API for XML) parsers.

 <format type="text/html"><blockquote><i>This module, both source code and documentation, is in the
 Public Domain, and comes with <i>NO WARRANTY</i>.</i>
 See 
 for further information.
 </blockquote></format></para><para tool="javadoc-to-mdoc">This was the main event supplier interface for SAX1; it has
 been replaced in SAX2 by <c><see cref="T:Org.Xml.Sax.IXMLReader" /></c>,
 which includes Namespace support and sophisticated configurability
 and extensibility.</para><para tool="javadoc-to-mdoc">All SAX1 parsers must implement this basic interface: it allows
 applications to register handlers for different types of events
 and to initiate a parse from a URI, or a character stream.</para><para tool="javadoc-to-mdoc">All SAX1 parsers must also implement a zero-argument constructor
 (though other constructors are also allowed).</para><para tool="javadoc-to-mdoc">SAX1 parsers are reusable but not re-entrant: the application
 may reuse a parser object (possibly with a different input source)
 once the first parse has completed successfully, but it may not
 invoke the parse() methods recursively within a parse.<format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="T:Org.Xml.Sax.IEntityResolver" /></c></term></item><item><term><c><see cref="T:Org.Xml.Sax.IDTDHandler" /></c></term></item><item><term><c><see cref="T:Org.Xml.Sax.IDocumentHandler" /></c></term></item><item><term><c><see cref="T:Org.Xml.Sax.IErrorHandler" /></c></term></item><item><term><c><see cref="T:Org.Xml.Sax.HandlerBase" /></c></term></item><item><term><c><see cref="T:Org.Xml.Sax.InputSource" /></c></term></item></list></para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/Parser.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 1Deprecated since API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public void Parse (Org.Xml.Sax.InputSource source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Parse(class Org.Xml.Sax.InputSource source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parse", "(Lorg/xml/sax/InputSource;)V", "GetParse_Lorg_xml_sax_InputSource_Handler:Org.Xml.Sax.IParserInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Org.Xml.Sax.InputSource" />
      </Parameters>
      <Docs>
        <param name="source">The input source for the top-level of the
        XML document.</param>
        <summary>Parse an XML document.</summary>
        <remarks><para tool="javadoc-to-mdoc">Parse an XML document.

 </para><para tool="javadoc-to-mdoc">The application can use this method to instruct the SAX parser
 to begin parsing an XML document from any valid input
 source (a character stream, a byte stream, or a URI).</para><para tool="javadoc-to-mdoc">Applications may not invoke this method while a parse is in
 progress (they should create a new Parser instead for each
 additional XML document).  Once a parse is complete, an
 application may reuse the same Parser object, possibly with a
 different input source.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/Parser.html#parse(org.xml.sax.InputSource)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <exception cref="T:Java.IO.IOException">An IO exception from the parser,
            possibly from a byte stream or character stream
            supplied by the application.</exception>
        <altmember cref="T:Org.Xml.Sax.InputSource" />
        <altmember cref="M:Org.Xml.Sax.IParser.Parse(System.String)" />
        <altmember cref="M:Org.Xml.Sax.IParser.SetEntityResolver(Org.Xml.Sax.IEntityResolver)" />
        <altmember cref="M:Org.Xml.Sax.IParser.SetDTDHandler(Org.Xml.Sax.IDTDHandler)" />
        <altmember cref="M:Org.Xml.Sax.IParser.SetDocumentHandler(Org.Xml.Sax.IDocumentHandler)" />
        <altmember cref="M:Org.Xml.Sax.IParser.SetErrorHandler(Org.Xml.Sax.IErrorHandler)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public void Parse (string systemId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Parse(string systemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("parse", "(Ljava/lang/String;)V", "GetParse_Ljava_lang_String_Handler:Org.Xml.Sax.IParserInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="systemId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="systemId">The system identifier (URI).</param>
        <summary>Parse an XML document from a system identifier (URI).</summary>
        <remarks><para tool="javadoc-to-mdoc">Parse an XML document from a system identifier (URI).

 <sample external-id="6CDB1360E3BEB1554DF934E75001E09E" /></para><para tool="javadoc-to-mdoc">This method is a shortcut for the common case of reading a
 document from a system identifier.  It is the exact
 equivalent of the following:</para><para tool="javadoc-to-mdoc">If the system identifier is a URL, it must be fully resolved
 by the application before it is passed to the parser.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/Parser.html#parse(java.lang.String)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <exception cref="T:Java.IO.IOException">An IO exception from the parser,
            possibly from a byte stream or character stream
            supplied by the application.</exception>
        <altmember cref="M:Org.Xml.Sax.IParser.Parse(Org.Xml.Sax.InputSource)" />
      </Docs>
    </Member>
    <Member MemberName="SetDocumentHandler">
      <MemberSignature Language="C#" Value="public void SetDocumentHandler (Org.Xml.Sax.IDocumentHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDocumentHandler(class Org.Xml.Sax.IDocumentHandler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDocumentHandler", "(Lorg/xml/sax/DocumentHandler;)V", "GetSetDocumentHandler_Lorg_xml_sax_DocumentHandler_Handler:Org.Xml.Sax.IParserInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="Org.Xml.Sax.IDocumentHandler" />
      </Parameters>
      <Docs>
        <param name="handler">The document handler.</param>
        <summary>Allow an application to register a document event handler.</summary>
        <remarks><para tool="javadoc-to-mdoc">Allow an application to register a document event handler.

 </para><para tool="javadoc-to-mdoc">If the application does not register a document handler, all
 document events reported by the SAX parser will be silently
 ignored (this is the default behaviour implemented by
 HandlerBase).</para><para tool="javadoc-to-mdoc">Applications may register a new or different handler in the
 middle of a parse, and the SAX parser must begin using the new
 handler immediately.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/Parser.html#setDocumentHandler(org.xml.sax.DocumentHandler)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Org.Xml.Sax.IDocumentHandler" />
        <altmember cref="T:Org.Xml.Sax.HandlerBase" />
      </Docs>
    </Member>
    <Member MemberName="SetDTDHandler">
      <MemberSignature Language="C#" Value="public void SetDTDHandler (Org.Xml.Sax.IDTDHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDTDHandler(class Org.Xml.Sax.IDTDHandler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDTDHandler", "(Lorg/xml/sax/DTDHandler;)V", "GetSetDTDHandler_Lorg_xml_sax_DTDHandler_Handler:Org.Xml.Sax.IParserInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="Org.Xml.Sax.IDTDHandler" />
      </Parameters>
      <Docs>
        <param name="handler">The DTD handler.</param>
        <summary>Allow an application to register a DTD event handler.</summary>
        <remarks><para tool="javadoc-to-mdoc">Allow an application to register a DTD event handler.

 </para><para tool="javadoc-to-mdoc">If the application does not register a DTD handler, all DTD
 events reported by the SAX parser will be silently
 ignored (this is the default behaviour implemented by
 HandlerBase).</para><para tool="javadoc-to-mdoc">Applications may register a new or different
 handler in the middle of a parse, and the SAX parser must
 begin using the new handler immediately.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/Parser.html#setDTDHandler(org.xml.sax.DTDHandler)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Org.Xml.Sax.IDTDHandler" />
        <altmember cref="T:Org.Xml.Sax.HandlerBase" />
      </Docs>
    </Member>
    <Member MemberName="SetEntityResolver">
      <MemberSignature Language="C#" Value="public void SetEntityResolver (Org.Xml.Sax.IEntityResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEntityResolver(class Org.Xml.Sax.IEntityResolver resolver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEntityResolver", "(Lorg/xml/sax/EntityResolver;)V", "GetSetEntityResolver_Lorg_xml_sax_EntityResolver_Handler:Org.Xml.Sax.IParserInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolver" Type="Org.Xml.Sax.IEntityResolver" />
      </Parameters>
      <Docs>
        <param name="resolver">The object for resolving entities.</param>
        <summary>Allow an application to register a custom entity resolver.</summary>
        <remarks><para tool="javadoc-to-mdoc">Allow an application to register a custom entity resolver.

 </para><para tool="javadoc-to-mdoc">If the application does not register an entity resolver, the
 SAX parser will resolve system identifiers and open connections
 to entities itself (this is the default behaviour implemented in
 HandlerBase).</para><para tool="javadoc-to-mdoc">Applications may register a new or different entity resolver
 in the middle of a parse, and the SAX parser must begin using
 the new resolver immediately.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/Parser.html#setEntityResolver(org.xml.sax.EntityResolver)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Org.Xml.Sax.IEntityResolver" />
        <altmember cref="T:Org.Xml.Sax.HandlerBase" />
      </Docs>
    </Member>
    <Member MemberName="SetErrorHandler">
      <MemberSignature Language="C#" Value="public void SetErrorHandler (Org.Xml.Sax.IErrorHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetErrorHandler(class Org.Xml.Sax.IErrorHandler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setErrorHandler", "(Lorg/xml/sax/ErrorHandler;)V", "GetSetErrorHandler_Lorg_xml_sax_ErrorHandler_Handler:Org.Xml.Sax.IParserInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="Org.Xml.Sax.IErrorHandler" />
      </Parameters>
      <Docs>
        <param name="handler">The error handler.</param>
        <summary>Allow an application to register an error event handler.</summary>
        <remarks><para tool="javadoc-to-mdoc">Allow an application to register an error event handler.

 </para><para tool="javadoc-to-mdoc">If the application does not register an error event handler,
 all error events reported by the SAX parser will be silently
 ignored, except for fatalError, which will throw a SAXException
 (this is the default behaviour implemented by HandlerBase).</para><para tool="javadoc-to-mdoc">Applications may register a new or different handler in the
 middle of a parse, and the SAX parser must begin using the new
 handler immediately.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/Parser.html#setErrorHandler(org.xml.sax.ErrorHandler)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Org.Xml.Sax.IErrorHandler" />
        <altmember cref="T:Org.Xml.Sax.SAXException" />
        <altmember cref="T:Org.Xml.Sax.HandlerBase" />
      </Docs>
    </Member>
    <Member MemberName="SetLocale">
      <MemberSignature Language="C#" Value="public void SetLocale (Java.Util.Locale locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLocale(class Java.Util.Locale locale) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setLocale", "(Ljava/util/Locale;)V", "GetSetLocale_Ljava_util_Locale_Handler:Org.Xml.Sax.IParserInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locale" Type="Java.Util.Locale" />
      </Parameters>
      <Docs>
        <param name="locale">A Java Locale object.</param>
        <summary>Allow an application to request a locale for errors and warnings.</summary>
        <remarks><para tool="javadoc-to-mdoc">Allow an application to request a locale for errors and warnings.

 </para><para tool="javadoc-to-mdoc">SAX parsers are not required to provide localisation for errors
 and warnings; if they cannot support the requested locale,
 however, they must throw a SAX exception.  Applications may
 not request a locale change in the middle of a parse.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/Parser.html#setLocale(java.util.Locale)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Throws an exception
            (using the previous or default locale) if the
            requested locale is not supported.</exception>
        <altmember cref="T:Org.Xml.Sax.SAXException" />
        <altmember cref="T:Org.Xml.Sax.SAXParseException" />
      </Docs>
    </Member>
  </Members>
</Type>
