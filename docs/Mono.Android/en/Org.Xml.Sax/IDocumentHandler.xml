<Type Name="IDocumentHandler" FullName="Org.Xml.Sax.IDocumentHandler">
  <TypeSignature Language="C#" Value="public interface IDocumentHandler : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDocumentHandler implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("org/xml/sax/DocumentHandler", "", "Org.Xml.Sax.IDocumentHandlerInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Receive notification of general document events.</summary>
    <remarks><para tool="javadoc-to-mdoc">Receive notification of general document events.

 <format type="text/html"><blockquote><i>This module, both source code and documentation, is in the
 Public Domain, and comes with <i>NO WARRANTY</i>.</i>
 See 
 for further information.
 </blockquote></format></para><para tool="javadoc-to-mdoc">This was the main event-handling interface for SAX1; in
 SAX2, it has been replaced by <c><see cref="T:Org.Xml.Sax.IContentHandler" /></c>, which provides Namespace support and reporting
 of skipped entities.  This interface is included in SAX2 only
 to support legacy SAX1 applications.</para><para tool="javadoc-to-mdoc">The order of events in this interface is very important, and
 mirrors the order of information in the document itself.  For
 example, all of an element's content (character data, processing
 instructions, and/or subelements) will appear, in order, between
 the startElement event and the corresponding endElement event.</para><para tool="javadoc-to-mdoc">Application writers who do not want to implement the entire
 interface can derive a class from HandlerBase, which implements
 the default functionality; parser writers can instantiate
 HandlerBase to obtain a default handler.  The application can find
 the location of any document event using the Locator interface
 supplied by the Parser through the setDocumentLocator method.<format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="M:Org.Xml.Sax.IParser.SetDocumentHandler(Org.Xml.Sax.IDocumentHandler)" /></c></term></item><item><term><c><see cref="T:Org.Xml.Sax.ILocator" /></c></term></item><item><term><c><see cref="T:Org.Xml.Sax.HandlerBase" /></c></term></item></list></para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/DocumentHandler.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 1Deprecated since API level 1" />
  </Docs>
  <Members>
    <Member MemberName="Characters">
      <MemberSignature Language="C#" Value="public void Characters (char[] ch, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Characters(char[] ch, int32 start, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("characters", "([CII)V", "GetCharacters_arrayCIIHandler:Org.Xml.Sax.IDocumentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ch">The characters from the XML document.</param>
        <param name="start">The start position in the array.</param>
        <param name="length">The number of characters to read from the array.</param>
        <summary>Receive notification of character data.</summary>
        <remarks><para tool="javadoc-to-mdoc">Receive notification of character data.

 </para><para tool="javadoc-to-mdoc">The Parser will call this method to report each chunk of
 character data.  SAX parsers may return all contiguous character
 data in a single chunk, or they may split it into several
 chunks; however, all of the characters in any single event
 must come from the same external entity, so that the Locator
 provides useful information.</para><para tool="javadoc-to-mdoc">The application must not attempt to read from the array
 outside of the specified range.</para><para tool="javadoc-to-mdoc">Note that some parsers will report whitespace using the
 ignorableWhitespace() method rather than this one (validating
 parsers must do so).</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/DocumentHandler.html#characters(char[], int, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IDocumentHandler.IgnorableWhitespace(System.Char[], System.Int32, System.Int32)" />
        <altmember cref="T:Org.Xml.Sax.ILocator" />
      </Docs>
    </Member>
    <Member MemberName="EndDocument">
      <MemberSignature Language="C#" Value="public void EndDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndDocument() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("endDocument", "()V", "GetEndDocumentHandler:Org.Xml.Sax.IDocumentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Receive notification of the end of a document.</summary>
        <remarks><para tool="javadoc-to-mdoc">Receive notification of the end of a document.

 </para><para tool="javadoc-to-mdoc">The SAX parser will invoke this method only once, and it will
 be the last method invoked during the parse.  The parser shall
 not invoke this method until it has either abandoned parsing
 (because of an unrecoverable error) or reached the end of
 input.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/DocumentHandler.html#endDocument()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.
</exception>
      </Docs>
    </Member>
    <Member MemberName="EndElement">
      <MemberSignature Language="C#" Value="public void EndElement (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndElement(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("endElement", "(Ljava/lang/String;)V", "GetEndElement_Ljava_lang_String_Handler:Org.Xml.Sax.IDocumentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The element type name</param>
        <summary>Receive notification of the end of an element.</summary>
        <remarks><para tool="javadoc-to-mdoc">Receive notification of the end of an element.

 </para><para tool="javadoc-to-mdoc">The SAX parser will invoke this method at the end of every
 element in the XML document; there will be a corresponding
 startElement() event for every endElement() event (even when the
 element is empty).</para><para tool="javadoc-to-mdoc">If the element name has a namespace prefix, the prefix will
 still be attached to the name.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/DocumentHandler.html#endElement(java.lang.String)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.
</exception>
      </Docs>
    </Member>
    <Member MemberName="IgnorableWhitespace">
      <MemberSignature Language="C#" Value="public void IgnorableWhitespace (char[] ch, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void IgnorableWhitespace(char[] ch, int32 start, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ignorableWhitespace", "([CII)V", "GetIgnorableWhitespace_arrayCIIHandler:Org.Xml.Sax.IDocumentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ch">The characters from the XML document.</param>
        <param name="start">The start position in the array.</param>
        <param name="length">The number of characters to read from the array.</param>
        <summary>Receive notification of ignorable whitespace in element content.</summary>
        <remarks><para tool="javadoc-to-mdoc">Receive notification of ignorable whitespace in element content.

 </para><para tool="javadoc-to-mdoc">Validating Parsers must use this method to report each chunk
 of ignorable whitespace (see the W3C XML 1.0 recommendation,
 section 2.10): non-validating parsers may also use this method
 if they are capable of parsing and using content models.</para><para tool="javadoc-to-mdoc">SAX parsers may return all contiguous whitespace in a single
 chunk, or they may split it into several chunks; however, all of
 the characters in any single event must come from the same
 external entity, so that the Locator provides useful
 information.</para><para tool="javadoc-to-mdoc">The application must not attempt to read from the array
 outside of the specified range.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/DocumentHandler.html#ignorableWhitespace(char[], int, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IDocumentHandler.Characters(System.Char[], System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessingInstruction">
      <MemberSignature Language="C#" Value="public void ProcessingInstruction (string target, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessingInstruction(string target, string data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("processingInstruction", "(Ljava/lang/String;Ljava/lang/String;)V", "GetProcessingInstruction_Ljava_lang_String_Ljava_lang_String_Handler:Org.Xml.Sax.IDocumentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">The processing instruction target.</param>
        <param name="data">The processing instruction data, or null if
        none was supplied.</param>
        <summary>Receive notification of a processing instruction.</summary>
        <remarks><para tool="javadoc-to-mdoc">Receive notification of a processing instruction.

 </para><para tool="javadoc-to-mdoc">The Parser will invoke this method once for each processing
 instruction found: note that processing instructions may occur
 before or after the main document element.</para><para tool="javadoc-to-mdoc">A SAX parser should never report an XML declaration (XML 1.0,
 section 2.8) or a text declaration (XML 1.0, section 4.3.1)
 using this method.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/DocumentHandler.html#processingInstruction(java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetDocumentLocator">
      <MemberSignature Language="C#" Value="public void SetDocumentLocator (Org.Xml.Sax.ILocator locator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDocumentLocator(class Org.Xml.Sax.ILocator locator) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDocumentLocator", "(Lorg/xml/sax/Locator;)V", "GetSetDocumentLocator_Lorg_xml_sax_Locator_Handler:Org.Xml.Sax.IDocumentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locator" Type="Org.Xml.Sax.ILocator" />
      </Parameters>
      <Docs>
        <param name="locator">An object that can return the location of
                any SAX document event.</param>
        <summary>Receive an object for locating the origin of SAX document events.</summary>
        <remarks><para tool="javadoc-to-mdoc">Receive an object for locating the origin of SAX document events.

 </para><para tool="javadoc-to-mdoc">SAX parsers are strongly encouraged (though not absolutely
 required) to supply a locator: if it does so, it must supply
 the locator to the application by invoking this method before
 invoking any of the other methods in the DocumentHandler
 interface.</para><para tool="javadoc-to-mdoc">The locator allows the application to determine the end
 position of any document-related event, even if the parser is
 not reporting an error.  Typically, the application will
 use this information for reporting its own errors (such as
 character content that does not match an application's
 business rules).  The information returned by the locator
 is probably not sufficient for use with a search engine.</para><para tool="javadoc-to-mdoc">Note that the locator will return correct information only
 during the invocation of the events in this interface.  The
 application should not attempt to use it at any other time.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/DocumentHandler.html#setDocumentLocator(org.xml.sax.Locator)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <altmember cref="T:Org.Xml.Sax.ILocator" />
      </Docs>
    </Member>
    <Member MemberName="StartDocument">
      <MemberSignature Language="C#" Value="public void StartDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartDocument() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startDocument", "()V", "GetStartDocumentHandler:Org.Xml.Sax.IDocumentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Receive notification of the beginning of a document.</summary>
        <remarks><para tool="javadoc-to-mdoc">Receive notification of the beginning of a document.

 </para><para tool="javadoc-to-mdoc">The SAX parser will invoke this method only once, before any
 other methods in this interface or in DTDHandler (except for
 setDocumentLocator).</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/DocumentHandler.html#startDocument()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.
</exception>
      </Docs>
    </Member>
    <Member MemberName="StartElement">
      <MemberSignature Language="C#" Value="public void StartElement (string name, Org.Xml.Sax.IAttributeList atts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartElement(string name, class Org.Xml.Sax.IAttributeList atts) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startElement", "(Ljava/lang/String;Lorg/xml/sax/AttributeList;)V", "GetStartElement_Ljava_lang_String_Lorg_xml_sax_AttributeList_Handler:Org.Xml.Sax.IDocumentHandlerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="atts" Type="Org.Xml.Sax.IAttributeList" />
      </Parameters>
      <Docs>
        <param name="name">The element type name.</param>
        <param name="atts">The attributes attached to the element, if any.</param>
        <summary>Receive notification of the beginning of an element.</summary>
        <remarks><para tool="javadoc-to-mdoc">Receive notification of the beginning of an element.

 </para><para tool="javadoc-to-mdoc">The Parser will invoke this method at the beginning of every
 element in the XML document; there will be a corresponding
 endElement() event for every startElement() event (even when the
 element is empty). All of the element's content will be
 reported, in order, before the corresponding endElement()
 event.</para><para tool="javadoc-to-mdoc">If the element name has a namespace prefix, the prefix will
 still be attached.  Note that the attribute list provided will
 contain only attributes with explicit values (specified or
 defaulted): #IMPLIED attributes will be omitted.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/org/xml/sax/DocumentHandler.html#startElement(java.lang.String, org.xml.sax.AttributeList)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <altmember cref="M:Org.Xml.Sax.IDocumentHandler.EndElement(System.String)" />
        <altmember cref="T:Org.Xml.Sax.IAttributeList" />
      </Docs>
    </Member>
  </Members>
</Type>
