<Type Name="IEntityResolver" FullName="Org.Xml.Sax.IEntityResolver">
  <TypeSignature Language="C#" Value="public interface IEntityResolver : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEntityResolver implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("org/xml/sax/EntityResolver", "", "Org.Xml.Sax.IEntityResolverInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Basic interface for resolving entities.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Basic interface for resolving entities.

 <format type="text/html"><blockquote><i>This module, both source code and documentation, is in the
 Public Domain, and comes with <i>NO WARRANTY</i>.</i>
 See 
 for further information.
 </blockquote></format><example><code lang="java">
 import org.xml.sax.EntityResolver;
 import org.xml.sax.InputSource;

 public class MyResolver implements EntityResolver {
   public InputSource resolveEntity (String publicId, String systemId)
   {
     if (systemId.equals("http://www.myhost.com/today")) {
              // return a special input source
       MyReader reader = new MyReader();
       return new InputSource(reader);
     } else {
              // use the default behaviour
       return null;
     }
   }
 }
 </code></example></para>
      <para tool="javadoc-to-mdoc">If a SAX application needs to implement customized handling
 for external entities, it must implement this interface and
 register an instance with the SAX driver using the
 <c><see cref="P:Org.Xml.Sax.IXMLReader.EntityResolver" /></c>
 method.</para>
      <para tool="javadoc-to-mdoc">The XML reader will then allow the application to intercept any
 external entities (including the external DTD subset and external
 parameter entities, if any) before including them.</para>
      <para tool="javadoc-to-mdoc">Many SAX applications will not need to implement this interface,
 but it will be especially useful for applications that build
 XML documents from databases or other specialised input sources,
 or for applications that use URI types other than URLs.</para>
      <para tool="javadoc-to-mdoc">The following resolver would provide the application
 with a special character stream for the entity with the system
 identifier "http://www.myhost.com/today":</para>
      <para tool="javadoc-to-mdoc">The application can also use this interface to redirect system
 identifiers to local URIs or to look up replacements in a catalog
 (possibly by using the public identifier).<format type="text/html"><h5 class="jd-tagtitle">See Also</h5></format><list type="bullet"><item><term><c><see cref="P:Org.Xml.Sax.IXMLReader.EntityResolver" /></c></term></item><item><term><c><see cref="T:Org.Xml.Sax.InputSource" /></c></term></item></list></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/org/xml/sax/EntityResolver.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="C#" Value="public Org.Xml.Sax.InputSource ResolveEntity (string publicId, string systemId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Org.Xml.Sax.InputSource ResolveEntity(string publicId, string systemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("resolveEntity", "(Ljava/lang/String;Ljava/lang/String;)Lorg/xml/sax/InputSource;", "GetResolveEntity_Ljava_lang_String_Ljava_lang_String_Handler:Org.Xml.Sax.IEntityResolverInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.Xml.Sax.InputSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publicId" Type="System.String" />
        <Parameter Name="systemId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="publicId">The public identifier of the external entity
        being referenced, or null if none was supplied.</param>
        <param name="systemId">The system identifier of the external entity
        being referenced.</param>
        <summary>Allow the application to resolve external entities.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Allow the application to resolve external entities.

 </para>
          <para tool="javadoc-to-mdoc">The parser will call this method before opening any external
 entity except the top-level document entity.  Such entities include
 the external DTD subset and external parameter entities referenced
 within the DTD (in either case, only if the parser reads external
 parameter entities), and external general entities referenced
 within the document element (if the parser reads external general
 entities).  The application may request that the parser locate
 the entity itself, that it use an alternative URI, or that it
 use data provided by the application (as a character or byte
 input stream).</para>
          <para tool="javadoc-to-mdoc">Application writers can use this method to redirect external
 system identifiers to secure and/or local URIs, to look up
 public identifiers in a catalogue, or to read an entity from a
 database or other input source (including, for example, a dialog
 box).  Neither XML nor SAX specifies a preferred policy for using
 public or system IDs to resolve resources.  However, SAX specifies
 how to interpret any InputSource returned by this method, and that
 if none is returned, then the system ID will be dereferenced as
 a URL.  </para>
          <para tool="javadoc-to-mdoc">If the system identifier is a URL, the SAX parser must
 resolve it fully before reporting it to the application.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/org/xml/sax/EntityResolver.html#resolveEntity(java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Org.Xml.Sax.SAXException">Any SAX exception, possibly
            wrapping another exception.</exception>
        <exception cref="T:Java.IO.IOException">A Java-specific IO exception,
            possibly the result of creating a new InputStream
            or Reader for the InputSource.</exception>
        <altmember cref="T:Org.Xml.Sax.InputSource" />
      </Docs>
    </Member>
  </Members>
</Type>
