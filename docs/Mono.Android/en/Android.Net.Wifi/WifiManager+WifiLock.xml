<Type Name="WifiManager+WifiLock" FullName="Android.Net.Wifi.WifiManager+WifiLock">
  <TypeSignature Language="C#" Value="public class WifiManager.WifiLock : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit WifiManager/WifiLock extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/net/wifi/WifiManager$WifiLock", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Allows an application to keep the Wi-Fi radio awake.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Allows an application to keep the Wi-Fi radio awake.
 Normally the Wi-Fi radio may turn off when the user has not used the device in a while.
 Acquiring a WifiLock will keep the radio on until the lock is released.  Multiple
 applications may hold WifiLocks, and the radio will only be allowed to turn off when no
 WifiLocks are held in any application.
 </para>
      <para tool="javadoc-to-mdoc">
 Before using a WifiLock, consider carefully if your application requires Wi-Fi access, or
 could function over a mobile network, if available.  A program that needs to download large
 files should hold a WifiLock to ensure that the download will complete, but a program whose
 network usage is occasional or low-bandwidth should not hold a WifiLock to avoid adversely
 affecting battery life.
 </para>
      <para tool="javadoc-to-mdoc">
 Note that WifiLocks cannot override the user-level "Wi-Fi Enabled" setting, nor Airplane
 Mode.  They simply keep the radio from turning off when Wi-Fi is already on but the device
 is idle.
 </para>
      <para tool="javadoc-to-mdoc">
 Any application using a WifiLock must request the <c>android.permission.WAKE_LOCK</c>
 permission in an <c>&lt;uses-permission&gt;</c> element of the application's manifest.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/net/wifi/WifiManager.WifiLock.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WifiLock (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T}(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acquire">
      <MemberSignature Language="C#" Value="public virtual void Acquire ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Acquire() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("acquire", "()V", "GetAcquireHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Locks the Wi-Fi radio on until <c><see cref="M:Android.Net.Wifi.WifiManager.WifiLock.Release" /></c> is called.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Locks the Wi-Fi radio on until <c><see cref="M:Android.Net.Wifi.WifiManager.WifiLock.Release" /></c> is called.

 If this WifiLock is reference-counted, each call to <c>acquire</c> will increment the
 reference count, and the radio will remain locked as long as the reference count is
 above zero.

 If this WifiLock is not reference-counted, the first call to <c>acquire</c> will lock
 the radio, but subsequent calls will be ignored.  Only one call to <c><see cref="M:Android.Net.Wifi.WifiManager.WifiLock.Release" /></c>
 will be required, regardless of the number of times that <c>acquire</c> is called.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/wifi/WifiManager.WifiLock.html#acquire()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsHeld">
      <MemberSignature Language="C#" Value="public virtual bool IsHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isHeld", "()Z", "GetIsHeldHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Checks whether this WifiLock is currently held.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Checks whether this WifiLock is currently held.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/wifi/WifiManager.WifiLock.html#isHeld()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public virtual void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "GetReleaseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unlocks the Wi-Fi radio, allowing it to turn off when the device is idle.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Unlocks the Wi-Fi radio, allowing it to turn off when the device is idle.

 If this WifiLock is reference-counted, each call to <c>release</c> will decrement the
 reference count, and the radio will be unlocked only when the reference count reaches
 zero.  If the reference count goes below zero (that is, if <c>release</c> is called
 a greater number of times than <c><see cref="M:Android.Net.Wifi.WifiManager.WifiLock.Acquire" /></c>), an exception is thrown.

 If this WifiLock is not reference-counted, the first call to <c>release</c> (after
 the radio was locked using <c><see cref="M:Android.Net.Wifi.WifiManager.WifiLock.Acquire" /></c>) will unlock the radio, and subsequent
 calls will be ignored.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/wifi/WifiManager.WifiLock.html#release()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetReferenceCounted">
      <MemberSignature Language="C#" Value="public virtual void SetReferenceCounted (bool refCounted);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetReferenceCounted(bool refCounted) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setReferenceCounted", "(Z)V", "GetSetReferenceCounted_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refCounted" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="refCounted">true if this WifiLock should keep a reference count
</param>
        <summary>Controls whether this is a reference-counted or non-reference-counted WifiLock.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Controls whether this is a reference-counted or non-reference-counted WifiLock.

 Reference-counted WifiLocks keep track of the number of calls to <c><see cref="M:Android.Net.Wifi.WifiManager.WifiLock.Acquire" /></c> and
 <c><see cref="M:Android.Net.Wifi.WifiManager.WifiLock.Release" /></c>, and only allow the radio to sleep when every call to <c><see cref="M:Android.Net.Wifi.WifiManager.WifiLock.Acquire" /></c>
 has been balanced with a call to <c><see cref="M:Android.Net.Wifi.WifiManager.WifiLock.Release" /></c>.  Non-reference-counted WifiLocks
 lock the radio whenever <c><see cref="M:Android.Net.Wifi.WifiManager.WifiLock.Acquire" /></c> is called and it is unlocked, and unlock the
 radio whenever <c><see cref="M:Android.Net.Wifi.WifiManager.WifiLock.Release" /></c> is called and it is locked.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/wifi/WifiManager.WifiLock.html#setReferenceCounted(boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetWorkSource">
      <MemberSignature Language="C#" Value="public virtual void SetWorkSource (Android.OS.WorkSource ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWorkSource(class Android.OS.WorkSource ws) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setWorkSource", "(Landroid/os/WorkSource;)V", "GetSetWorkSource_Landroid_os_WorkSource_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="Android.OS.WorkSource" />
      </Parameters>
      <Docs>
        <param name="ws">To be added.</param>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/net/wifi/WifiManager.WifiLock.html#setWorkSource(android.os.WorkSource)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
