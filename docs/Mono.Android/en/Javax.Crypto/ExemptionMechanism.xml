<Type Name="ExemptionMechanism" FullName="Javax.Crypto.ExemptionMechanism">
  <TypeSignature Language="C#" Value="public class ExemptionMechanism : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExemptionMechanism extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Javax.Crypto.ExemptionMechanism" />
  <TypeSignature Language="F#" Value="type ExemptionMechanism = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("javax/crypto/ExemptionMechanism", ApiSince=1, DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>This class implements the functionality of an exemption mechanism such as
 <format type="text/html"><i>key recovery</i></format>, <format type="text/html"><i>key weakening</i></format>, or <format type="text/html"><i>key escrow</i></format>.</summary>
    <remarks />
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExemptionMechanism (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Crypto.ExemptionMechanism.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Javax.Crypto.ExemptionMechanism : nativeint * Android.Runtime.JniHandleOwnership -&gt; Javax.Crypto.ExemptionMechanism" Usage="new Javax.Crypto.ExemptionMechanism (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExemptionMechanism (Javax.Crypto.ExemptionMechanismSpi exmechSpi, Java.Security.Provider provider, string mechanism);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Javax.Crypto.ExemptionMechanismSpi exmechSpi, class Java.Security.Provider provider, string mechanism) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Crypto.ExemptionMechanism.#ctor(Javax.Crypto.ExemptionMechanismSpi,Java.Security.Provider,System.String)" />
      <MemberSignature Language="F#" Value="new Javax.Crypto.ExemptionMechanism : Javax.Crypto.ExemptionMechanismSpi * Java.Security.Provider * string -&gt; Javax.Crypto.ExemptionMechanism" Usage="new Javax.Crypto.ExemptionMechanism (exmechSpi, provider, mechanism)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljavax/crypto/ExemptionMechanismSpi;Ljava/security/Provider;Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="exmechSpi" Type="Javax.Crypto.ExemptionMechanismSpi" />
        <Parameter Name="provider" Type="Java.Security.Provider" />
        <Parameter Name="mechanism" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="exmechSpi">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="mechanism">To be added.</param>
        <summary>Creates a <c>ExemptionMechanism</c> instance.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GenExemptionBlob">
      <MemberSignature Language="C#" Value="public byte[] GenExemptionBlob ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GenExemptionBlob() cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Crypto.ExemptionMechanism.GenExemptionBlob" />
      <MemberSignature Language="F#" Value="member this.GenExemptionBlob : unit -&gt; byte[]" Usage="exemptionMechanism.GenExemptionBlob " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("genExemptionBlob", "()[B", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generates the result key blob for this exemption mechanism.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>ExemptionMechanism</c> instance is not
             initialized.</exception>
        <exception cref="T:Javax.Crypto.ExemptionMechanismException">if error(s) occur during generation.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GenExemptionBlob">
      <MemberSignature Language="C#" Value="public int GenExemptionBlob (byte[] output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GenExemptionBlob(unsigned int8[] output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Crypto.ExemptionMechanism.GenExemptionBlob(System.Byte[])" />
      <MemberSignature Language="F#" Value="member this.GenExemptionBlob : byte[] -&gt; int" Usage="exemptionMechanism.GenExemptionBlob output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("genExemptionBlob", "([B)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="output">the output buffer for the result key blob.</param>
        <summary>Generates the result key blob for this exemption mechanism and stores it
 into the <c>output</c> buffer.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>ExemptionMechanism</c> instance is not
             initialized.</exception>
        <exception cref="T:Javax.Crypto.ShortBufferException">if the provided buffer is too small for the result key blob.</exception>
        <exception cref="T:Javax.Crypto.ExemptionMechanismException">if error(s) occur during generation.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GenExemptionBlob">
      <MemberSignature Language="C#" Value="public int GenExemptionBlob (byte[] output, int outputOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GenExemptionBlob(unsigned int8[] output, int32 outputOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Crypto.ExemptionMechanism.GenExemptionBlob(System.Byte[],System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GenExemptionBlob : byte[] * int -&gt; int" Usage="exemptionMechanism.GenExemptionBlob (output, outputOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("genExemptionBlob", "([BI)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Byte[]" />
        <Parameter Name="outputOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="output">the output buffer for the result key blob.</param>
        <param name="outputOffset">the offset in the output buffer to start.</param>
        <summary>Generates the result key blob for this exemption mechanism and stores it
 into the <c>output</c> buffer at offset <c>outputOffset</c>.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>ExemptionMechanism</c> instance is not
             initialized.</exception>
        <exception cref="T:Javax.Crypto.ShortBufferException">if the provided buffer is too small for the result key blob.</exception>
        <exception cref="T:Javax.Crypto.ExemptionMechanismException">if error(s) occur during generation.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static Javax.Crypto.ExemptionMechanism GetInstance (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Javax.Crypto.ExemptionMechanism GetInstance(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Crypto.ExemptionMechanism.GetInstance(System.String)" />
      <MemberSignature Language="F#" Value="static member GetInstance : string -&gt; Javax.Crypto.ExemptionMechanism" Usage="Javax.Crypto.ExemptionMechanism.GetInstance algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInstance", "(Ljava/lang/String;)Ljavax/crypto/ExemptionMechanism;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Crypto.ExemptionMechanism</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm">the name of the requested exemption mechanism.</param>
        <summary tool="true">Returns a new <c>ExemptionMechanism</c> instance that provides the
 specified exemption mechanism algorithm.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Security.NoSuchAlgorithmException">if the specified algorithm is not available by any provider.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the algorithm parameter is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static Javax.Crypto.ExemptionMechanism GetInstance (string algorithm, Java.Security.Provider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Javax.Crypto.ExemptionMechanism GetInstance(string algorithm, class Java.Security.Provider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Crypto.ExemptionMechanism.GetInstance(System.String,Java.Security.Provider)" />
      <MemberSignature Language="F#" Value="static member GetInstance : string * Java.Security.Provider -&gt; Javax.Crypto.ExemptionMechanism" Usage="Javax.Crypto.ExemptionMechanism.GetInstance (algorithm, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInstance", "(Ljava/lang/String;Ljava/security/Provider;)Ljavax/crypto/ExemptionMechanism;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Crypto.ExemptionMechanism</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
        <Parameter Name="provider" Type="Java.Security.Provider" />
      </Parameters>
      <Docs>
        <param name="algorithm">the name of the requested exemption mechanism.</param>
        <param name="provider">the provider that is providing the algorithm.</param>
        <summary>Returns a new <c>ExemptionMechanism</c> instance that provides the
 specified exemption mechanism algorithm from the specified provider.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Security.NoSuchAlgorithmException">if the specified algorithm is not provided by the specified
             provider.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the algorithm parameter is <c>null</c>.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the provider parameter is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static Javax.Crypto.ExemptionMechanism GetInstance (string algorithm, string provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Javax.Crypto.ExemptionMechanism GetInstance(string algorithm, string provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Crypto.ExemptionMechanism.GetInstance(System.String,System.String)" />
      <MemberSignature Language="F#" Value="static member GetInstance : string * string -&gt; Javax.Crypto.ExemptionMechanism" Usage="Javax.Crypto.ExemptionMechanism.GetInstance (algorithm, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInstance", "(Ljava/lang/String;Ljava/lang/String;)Ljavax/crypto/ExemptionMechanism;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Crypto.ExemptionMechanism</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
        <Parameter Name="provider" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm">the name of the requested exemption mechanism.</param>
        <param name="provider">the name of the provider that is providing the algorithm.</param>
        <summary>Returns a new <c>ExemptionMechansm</c> instance that provides the
 specified exemption mechanism algorithm from the specified provider.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Security.NoSuchAlgorithmException">if the specified algorithm is not provided by the specified
             provider.</exception>
        <exception cref="T:Java.Security.NoSuchProviderException">if the specified provider is not available.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if the algorithm parameter is <c>null</c>.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the provider parameter is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOutputSize">
      <MemberSignature Language="C#" Value="public int GetOutputSize (int inputLen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetOutputSize(int32 inputLen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Crypto.ExemptionMechanism.GetOutputSize(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.GetOutputSize : int -&gt; int" Usage="exemptionMechanism.GetOutputSize inputLen" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputSize", "(I)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputLen" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inputLen">the specified input length (in bytes).</param>
        <summary>Returns the size in bytes for the output buffer needed to hold the output
 of the next <c><see cref="M:Javax.Crypto.ExemptionMechanism.GenExemptionBlob" /></c> call, given the specified <c>inputLen</c> (in bytes).</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if this <c>ExemptionMechanism</c> instance is not
             initialized.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Init">
      <MemberSignature Language="C#" Value="public void Init (Java.Security.IKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Init(class Java.Security.IKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Crypto.ExemptionMechanism.Init(Java.Security.IKey)" />
      <MemberSignature Language="F#" Value="member this.Init : Java.Security.IKey -&gt; unit" Usage="exemptionMechanism.Init key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("init", "(Ljava/security/Key;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Java.Security.IKey" />
      </Parameters>
      <Docs>
        <param name="key">the key to initialize this instance with.</param>
        <summary tool="true">Initializes this <c>ExemptionMechanism</c> instance with the
 specified key.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Security.InvalidKeyException">if the key cannot be used to initialize this mechanism.</exception>
        <exception cref="T:Javax.Crypto.ExemptionMechanismException">if error(s) occur during initialization.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Init">
      <MemberSignature Language="C#" Value="public void Init (Java.Security.IKey key, Java.Security.AlgorithmParameters params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Init(class Java.Security.IKey key, class Java.Security.AlgorithmParameters params) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Crypto.ExemptionMechanism.Init(Java.Security.IKey,Java.Security.AlgorithmParameters)" />
      <MemberSignature Language="F#" Value="member this.Init : Java.Security.IKey * Java.Security.AlgorithmParameters -&gt; unit" Usage="exemptionMechanism.Init (key, params)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("init", "(Ljava/security/Key;Ljava/security/AlgorithmParameters;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Java.Security.IKey" />
        <Parameter Name="params" Type="Java.Security.AlgorithmParameters" />
      </Parameters>
      <Docs>
        <param name="key">the key to initialize this instance with.</param>
        <param name="params">To be added.</param>
        <summary>Initializes this <c>ExemptionMechanism</c> instance with the
 specified key and algorithm parameters.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Security.InvalidKeyException">if the key cannot be used to initialize this mechanism.</exception>
        <exception cref="T:Java.Security.InvalidAlgorithmParameterException">if the parameters cannot be used to initialize this
             mechanism.</exception>
        <exception cref="T:Javax.Crypto.ExemptionMechanismException">if error(s) occur during initialization.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Init">
      <MemberSignature Language="C#" Value="public void Init (Java.Security.IKey key, Java.Security.Spec.IAlgorithmParameterSpec params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Init(class Java.Security.IKey key, class Java.Security.Spec.IAlgorithmParameterSpec params) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Crypto.ExemptionMechanism.Init(Java.Security.IKey,Java.Security.Spec.IAlgorithmParameterSpec)" />
      <MemberSignature Language="F#" Value="member this.Init : Java.Security.IKey * Java.Security.Spec.IAlgorithmParameterSpec -&gt; unit" Usage="exemptionMechanism.Init (key, params)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("init", "(Ljava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Java.Security.IKey" />
        <Parameter Name="params" Type="Java.Security.Spec.IAlgorithmParameterSpec" />
      </Parameters>
      <Docs>
        <param name="key">the key to initialize this instance with.</param>
        <param name="params">To be added.</param>
        <summary>Initializes this <c>ExemptionMechanism</c> instance with the
 specified key and algorithm parameters.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Security.InvalidKeyException">if the key cannot be used to initialize this mechanism.</exception>
        <exception cref="T:Java.Security.InvalidAlgorithmParameterException">the the parameters cannot be used to initialize this
             mechanism.</exception>
        <exception cref="T:Javax.Crypto.ExemptionMechanismException">if error(s) occur during initialization.
</exception>
      </Docs>
    </Member>
    <Member MemberName="IsCryptoAllowed">
      <MemberSignature Language="C#" Value="public bool IsCryptoAllowed (Java.Security.IKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsCryptoAllowed(class Java.Security.IKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Javax.Crypto.ExemptionMechanism.IsCryptoAllowed(Java.Security.IKey)" />
      <MemberSignature Language="F#" Value="member this.IsCryptoAllowed : Java.Security.IKey -&gt; bool" Usage="exemptionMechanism.IsCryptoAllowed key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isCryptoAllowed", "(Ljava/security/Key;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Java.Security.IKey" />
      </Parameters>
      <Docs>
        <param name="key">the key to verify.</param>
        <summary>Returns whether the result blob for this <c>ExemptionMechanism</c>
 instance has been generated successfully and that the specified key is
 the same as the one that was used to initialize and generate.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Javax.Crypto.ExemptionMechanismException">if an error occurs while determining whether the result blob
             has been generated successfully.
</exception>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Javax.Crypto.ExemptionMechanism.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Javax.Crypto.ExemptionMechanism.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Javax.Crypto.ExemptionMechanism.Name" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Javax.Crypto.ExemptionMechanism.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getName", "()Ljava/lang/String;", "GetGetNameHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the name of this <c>ExemptionMechanism</c>.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public Java.Security.Provider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Security.Provider Provider" />
      <MemberSignature Language="DocId" Value="P:Javax.Crypto.ExemptionMechanism.Provider" />
      <MemberSignature Language="F#" Value="member this.Provider : Java.Security.Provider" Usage="Javax.Crypto.ExemptionMechanism.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getProvider", "()Ljava/security/Provider;", "GetGetProviderHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Security.Provider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the provider of this <c>ExemptionMechanism</c> instance.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Javax.Crypto.ExemptionMechanism.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Javax.Crypto.ExemptionMechanism.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Javax.Crypto.ExemptionMechanism.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Javax.Crypto.ExemptionMechanism.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Mono.Android</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
  </Members>
</Type>
