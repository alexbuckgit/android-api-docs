<Type Name="AnimatorSet+Builder" FullName="Android.Animation.AnimatorSet+Builder">
  <TypeSignature Language="C#" Value="public class AnimatorSet.Builder : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit AnimatorSet/Builder extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/animation/AnimatorSet$Builder", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The <c>Builder</c> object is a utility class to facilitate adding animations to a
 <c>AnimatorSet</c> along with the relationships between the various animations.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">The <c>Builder</c> object is a utility class to facilitate adding animations to a
 <c>AnimatorSet</c> along with the relationships between the various animations. The
 intention of the <c>Builder</c> methods, along with the <c><see cref="M:Android.Animation.AnimatorSet.Play(Android.Animation.Animator)" /></c> method of <c>AnimatorSet</c> is to make it possible
 to express the dependency relationships of animations in a natural way. Developers can also
 use the <c><see cref="!:Android.Animation.AnimatorSet.playTogether(android.animation.Animator...)" /></c> and <c><see cref="!:Android.Animation.AnimatorSet.playSequentially(android.animation.Animator...)" /></c> methods if these suit the need,
 but it might be easier in some situations to express the AnimatorSet of animations in pairs.
 </para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">The <c>Builder</c> object cannot be constructed directly, but is rather constructed
 internally via a call to <c><see cref="M:Android.Animation.AnimatorSet.Play(Android.Animation.Animator)" /></c>.</para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">For example, this sets up a AnimatorSet to play anim1 and anim2 at the same time, anim3 to
 play when anim2 finishes, and anim4 to play when anim3 finishes:<example><code lang="java">
     AnimatorSet s = new AnimatorSet();
     s.play(anim1).with(anim2);
     s.play(anim2).before(anim3);
     s.play(anim4).after(anim3);
 </code></example></para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">Note in the example that both <c><see cref="M:Android.Animation.AnimatorSet.Builder.Before(Android.Animation.Animator)" /></c> and <c><see cref="M:Android.Animation.AnimatorSet.Builder.After(Android.Animation.Animator)" /></c> are used. These are just different ways of expressing the same
 relationship and are provided to make it easier to say things in a way that is more natural,
 depending on the situation.</para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">It is possible to make several calls into the same <c>Builder</c> object to express
 multiple relationships. However, note that it is only the animation passed into the initial
 <c><see cref="M:Android.Animation.AnimatorSet.Play(Android.Animation.Animator)" /></c> method that is the dependency in any of the successive
 calls to the <c>Builder</c> object. For example, the following code starts both anim2
 and anim3 when anim1 ends; there is no direct dependency relationship between anim2 and
 anim3:
 <example><code lang="java">
   AnimatorSet s = new AnimatorSet();
   s.play(anim1).before(anim2).before(anim3);
 </code></example>
 If the desired result is to play anim1 then anim2 then anim3, this code expresses the
 relationship correctly:</para>
      <example>
        <code lang="java">
   AnimatorSet s = new AnimatorSet();
   s.play(anim1).before(anim2);
   s.play(anim2).before(anim3);
 </code>
      </example>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">Note that it is possible to express relationships that cannot be resolved and will not
 result in sensible results. For example, <c>play(anim1).after(anim1)</c> makes no
 sense. In general, circular dependencies like this one (or more indirect ones where a depends
 on b, which depends on c, which depends on a) should be avoided. Only create AnimatorSets
 that can boil down to a simple, one-way relationship of animations starting with, before, and
 after other, different, animations.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/animation/AnimatorSet.Builder.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 11" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Builder (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="After">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.AnimatorSet.Builder After (Android.Animation.Animator anim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Animation.AnimatorSet/Builder After(class Android.Animation.Animator anim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("after", "(Landroid/animation/Animator;)Landroid/animation/AnimatorSet$Builder;", "GetAfter_Landroid_animation_Animator_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.AnimatorSet+Builder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anim" Type="Android.Animation.Animator" />
      </Parameters>
      <Docs>
        <param name="anim">The animation whose end will cause the animation supplied to the
 <c><see cref="M:Android.Animation.AnimatorSet.Play(Android.Animation.Animator)" /></c> method to play.
</param>
        <summary>Sets up the given animation to play when the animation supplied in the
 <c><see cref="M:Android.Animation.AnimatorSet.Play(Android.Animation.Animator)" /></c> call that created this <c>Builder</c> object
 to start when the animation supplied in this method call ends.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets up the given animation to play when the animation supplied in the
 <c><see cref="M:Android.Animation.AnimatorSet.Play(Android.Animation.Animator)" /></c> call that created this <c>Builder</c> object
 to start when the animation supplied in this method call ends.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/AnimatorSet.Builder.html#after(android.animation.Animator)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="After">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.AnimatorSet.Builder After (long delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Animation.AnimatorSet/Builder After(int64 delay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("after", "(J)Landroid/animation/AnimatorSet$Builder;", "GetAfter_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.AnimatorSet+Builder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="delay">The number of milliseconds that should elapse before the
 animation starts.
</param>
        <summary>Sets up the animation supplied in the
 <c><see cref="M:Android.Animation.AnimatorSet.Play(Android.Animation.Animator)" /></c> call that created this <c>Builder</c> object
 to play when the given amount of time elapses.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets up the animation supplied in the
 <c><see cref="M:Android.Animation.AnimatorSet.Play(Android.Animation.Animator)" /></c> call that created this <c>Builder</c> object
 to play when the given amount of time elapses.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/AnimatorSet.Builder.html#after(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Before">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.AnimatorSet.Builder Before (Android.Animation.Animator anim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Animation.AnimatorSet/Builder Before(class Android.Animation.Animator anim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("before", "(Landroid/animation/Animator;)Landroid/animation/AnimatorSet$Builder;", "GetBefore_Landroid_animation_Animator_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.AnimatorSet+Builder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anim" Type="Android.Animation.Animator" />
      </Parameters>
      <Docs>
        <param name="anim">The animation that will play when the animation supplied to the
 <c><see cref="M:Android.Animation.AnimatorSet.Play(Android.Animation.Animator)" /></c> method ends.
</param>
        <summary>Sets up the given animation to play when the animation supplied in the
 <c><see cref="M:Android.Animation.AnimatorSet.Play(Android.Animation.Animator)" /></c> call that created this <c>Builder</c> object
 ends.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets up the given animation to play when the animation supplied in the
 <c><see cref="M:Android.Animation.AnimatorSet.Play(Android.Animation.Animator)" /></c> call that created this <c>Builder</c> object
 ends.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/AnimatorSet.Builder.html#before(android.animation.Animator)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="With">
      <MemberSignature Language="C#" Value="public virtual Android.Animation.AnimatorSet.Builder With (Android.Animation.Animator anim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Animation.AnimatorSet/Builder With(class Android.Animation.Animator anim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("with", "(Landroid/animation/Animator;)Landroid/animation/AnimatorSet$Builder;", "GetWith_Landroid_animation_Animator_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.AnimatorSet+Builder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anim" Type="Android.Animation.Animator" />
      </Parameters>
      <Docs>
        <param name="anim">The animation that will play when the animation supplied to the
 <c><see cref="M:Android.Animation.AnimatorSet.Play(Android.Animation.Animator)" /></c> method starts.
</param>
        <summary>Sets up the given animation to play at the same time as the animation supplied in the
 <c><see cref="M:Android.Animation.AnimatorSet.Play(Android.Animation.Animator)" /></c> call that created this <c>Builder</c> object.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets up the given animation to play at the same time as the animation supplied in the
 <c><see cref="M:Android.Animation.AnimatorSet.Play(Android.Animation.Animator)" /></c> call that created this <c>Builder</c> object.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/AnimatorSet.Builder.html#with(android.animation.Animator)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
  </Members>
</Type>
