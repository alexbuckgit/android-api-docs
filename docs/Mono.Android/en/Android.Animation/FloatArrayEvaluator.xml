<Type Name="FloatArrayEvaluator" FullName="Android.Animation.FloatArrayEvaluator">
  <TypeSignature Language="C#" Value="public class FloatArrayEvaluator : Java.Lang.Object, Android.Animation.ITypeEvaluator, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FloatArrayEvaluator extends Java.Lang.Object implements class Android.Animation.ITypeEvaluator, class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Animation.ITypeEvaluator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/animation/FloatArrayEvaluator", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>This evaluator can be used to perform type interpolation between <c>float[]</c> values.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">This evaluator can be used to perform type interpolation between <c>float[]</c> values.
 Each index into the array is treated as a separate value to interpolate. For example,
 evaluating <c>{100, 200}</c> and <c>{300, 400}</c> will interpolate the value at
 the first index between 100 and 300 and the value at the second index value between 200 and 400.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/animation/FloatArrayEvaluator.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FloatArrayEvaluator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Create a FloatArrayEvaluator that does not reuse the animated value.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a FloatArrayEvaluator that does not reuse the animated value. Care must be taken
 when using this option because on every evaluation a new <c>float[]</c> will be
 allocated.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/FloatArrayEvaluator.html#FloatArrayEvaluator()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="C:Android.Animation.FloatArrayEvaluator(System.Single[])" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FloatArrayEvaluator (float[] reuseArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32[] reuseArray) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "([F)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="reuseArray" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="reuseArray">To be added.</param>
        <summary>Create a FloatArrayEvaluator that reuses <c>reuseArray</c> for every evaluate() call.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a FloatArrayEvaluator that reuses <c>reuseArray</c> for every evaluate() call.
 Caution must be taken to ensure that the value returned from
 <c><see cref="P:Android.Animation.ValueAnimator.AnimatedValue" /></c> is not cached, modified, or
 used across threads. The value will be modified on each <c>evaluate()</c> call.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/FloatArrayEvaluator.html#FloatArrayEvaluator(float[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FloatArrayEvaluator (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Android.Animation.ITypeEvaluator.Evaluate">
      <MemberSignature Language="C#" Value="Java.Lang.Object ITypeEvaluator.Evaluate (float fraction, Java.Lang.Object startValue, Java.Lang.Object endValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Java.Lang.Object Android.Animation.ITypeEvaluator.Evaluate(float32 fraction, class Java.Lang.Object startValue, class Java.Lang.Object endValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fraction" Type="System.Single" />
        <Parameter Name="startValue" Type="Java.Lang.Object" />
        <Parameter Name="endValue" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="fraction">To be added.</param>
        <param name="startValue">To be added.</param>
        <param name="endValue">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public virtual float[] Evaluate (float fraction, float[] startValue, float[] endValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32[] Evaluate(float32 fraction, float32[] startValue, float32[] endValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("evaluate", "(F[F[F)[F", "GetEvaluate_FarrayFarrayFHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fraction" Type="System.Single" />
        <Parameter Name="startValue" Type="System.Single[]" />
        <Parameter Name="endValue" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="fraction">The fraction from the starting to the ending values</param>
        <param name="startValue">The start value.</param>
        <param name="endValue">The end value.</param>
        <summary>Interpolates the value at each index by the fraction.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Interpolates the value at each index by the fraction. If
 <c><see cref="C:Android.Animation.FloatArrayEvaluator(System.Single[])" /></c> was used to construct this object,
 <c>reuseArray</c> will be returned, otherwise a new <c>float[]</c>
 will be returned.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/FloatArrayEvaluator.html#evaluate(float, float[], float[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>