<Type Name="AnimatorSet" FullName="Android.Animation.AnimatorSet">
  <TypeSignature Language="C#" Value="public sealed class AnimatorSet : Android.Animation.Animator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AnimatorSet extends Android.Animation.Animator" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Animation.Animator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/animation/AnimatorSet", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>This class plays a set of <c><see cref="T:Android.Animation.Animator" /></c> objects in the specified order.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">This class plays a set of <c><see cref="T:Android.Animation.Animator" /></c> objects in the specified order. Animations
 can be set up to play together, in sequence, or after a specified delay.

 </para>
      <para tool="javadoc-to-mdoc">There are two different approaches to adding animations to a <c>AnimatorSet</c>:
 either the <c><see cref="!:Android.Animation.AnimatorSet.playTogether(android.animation.Animator...)" /></c> or
 <c><see cref="!:Android.Animation.AnimatorSet.playSequentially(android.animation.Animator...)" /></c> methods can be called to add
 a set of animations all at once, or the <c><see cref="M:Android.Animation.AnimatorSet.Play(Android.Animation.Animator)" /></c> can be
 used in conjunction with methods in the <c><see cref="!:NoType:android/animation/AnimatorSet$Builder;Href=../../../reference/android/animation/AnimatorSet.Builder.html" /></c>
 class to add animations
 one by one.</para>
      <para tool="javadoc-to-mdoc">It is possible to set up a <c>AnimatorSet</c> with circular dependencies between
 its animations. For example, an animation a1 could be set up to start before animation a2, a2
 before a3, and a3 before a1. The results of this configuration are undefined, but will typically
 result in none of the affected animations being played. Because of this (and because
 circular dependencies do not make logical sense anyway), circular dependencies
 should be avoided, and the dependency flow of animations should only be in one direction.

 <format type="text/html"><h3>Developer Guides</h3></format></para>
      <para tool="javadoc-to-mdoc">For more information about animating with <c>AnimatorSet</c>, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/graphics/prop-animation.html#choreography">Property
 Animation</a></format> developer guide.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/animation/AnimatorSet.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 11" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AnimatorSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/AnimatorSet.html#AnimatorSet()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ChildAnimations">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Android.Animation.Animator&gt; ChildAnimations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Android.Animation.Animator&gt; ChildAnimations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getChildAnimations", "()Ljava/util/ArrayList;", "GetGetChildAnimationsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.Animation.Animator&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current list of child Animator objects controlled by this
 AnimatorSet.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the current list of child Animator objects controlled by this
 AnimatorSet. This is a copy of the internal list; modifications to the returned list
 will not affect the AnimatorSet, although changes to the underlying Animator objects
 will affect those objects being managed by the AnimatorSet.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/AnimatorSet.html#getChildAnimations()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public override long Duration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Duration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDuration", "()J", "GetGetDurationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the length of each of the child animations of this AnimatorSet.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the length of each of the child animations of this AnimatorSet. This value may
 be less than 0, which indicates that no duration has been set on this AnimatorSet
 and each of the child animations will use their own duration.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/AnimatorSet.html#getDuration()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public override bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isRunning", "()Z", "GetIsRunningHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if any of the child animations of this AnimatorSet have been started and have
 not yet ended.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns true if any of the child animations of this AnimatorSet have been started and have
 not yet ended.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/AnimatorSet.html#isRunning()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Play">
      <MemberSignature Language="C#" Value="public Android.Animation.AnimatorSet.Builder Play (Android.Animation.Animator anim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Animation.AnimatorSet/Builder Play(class Android.Animation.Animator anim) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("play", "(Landroid/animation/Animator;)Landroid/animation/AnimatorSet$Builder;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.AnimatorSet+Builder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anim" Type="Android.Animation.Animator" />
      </Parameters>
      <Docs>
        <param name="anim">The animation that is the dependency used in later calls to the
 methods in the returned <c>Builder</c> object. A null parameter will result
 in a null <c>Builder</c> return value.</param>
        <summary>This method creates a <c>Builder</c> object, which is used to
 set up playing constraints.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">This method creates a <c>Builder</c> object, which is used to
 set up playing constraints. This initial <c>play()</c> method
 tells the <c>Builder</c> the animation that is the dependency for
 the succeeding commands to the <c>Builder</c>. For example,
 calling <c>play(a1).with(a2)</c> sets up the AnimatorSet to play
 <c>a1</c> and <c>a2</c> at the same time,
 <c>play(a1).before(a2)</c> sets up the AnimatorSet to play
 <c>a1</c> first, followed by <c>a2</c>, and
 <c>play(a1).after(a2)</c> sets up the AnimatorSet to play
 <c>a2</c> first, followed by <c>a1</c>.

 </para>
          <para tool="javadoc-to-mdoc">Note that <c>play()</c> is the only way to tell the
 <c>Builder</c> the animation upon which the dependency is created,
 so successive calls to the various functions in <c>Builder</c>
 will all refer to the initial parameter supplied in <c>play()</c>
 as the dependency of the other animations. For example, calling
 <c>play(a1).before(a2).before(a3)</c> will play both <c>a2</c>
 and <c>a3</c> when a1 ends; it does not set up a dependency between
 <c>a2</c> and <c>a3</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/AnimatorSet.html#play(android.animation.Animator)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="PlaySequentially">
      <MemberSignature Language="C#" Value="public void PlaySequentially (Android.Animation.Animator[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PlaySequentially(class Android.Animation.Animator[] items) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("playSequentially", "([Landroid/animation/Animator;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Android.Animation.Animator[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlaySequentially">
      <MemberSignature Language="C#" Value="public void PlaySequentially (System.Collections.Generic.IList&lt;Android.Animation.Animator&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PlaySequentially(class System.Collections.Generic.IList`1&lt;class Android.Animation.Animator&gt; items) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("playSequentially", "(Ljava/util/List;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IList&lt;Android.Animation.Animator&gt;" />
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlayTogether">
      <MemberSignature Language="C#" Value="public void PlayTogether (Android.Animation.Animator[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PlayTogether(class Android.Animation.Animator[] items) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("playTogether", "([Landroid/animation/Animator;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Android.Animation.Animator[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlayTogether">
      <MemberSignature Language="C#" Value="public void PlayTogether (System.Collections.Generic.ICollection&lt;Android.Animation.Animator&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PlayTogether(class System.Collections.Generic.ICollection`1&lt;class Android.Animation.Animator&gt; items) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("playTogether", "(Ljava/util/Collection;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.ICollection&lt;Android.Animation.Animator&gt;" />
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDuration">
      <MemberSignature Language="C#" Value="public override Android.Animation.Animator SetDuration (long duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Animation.Animator SetDuration(int64 duration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDuration", "(J)Landroid/animation/Animator;", "GetSetDuration_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Animation.Animator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="duration">The length of the animation, in milliseconds, of each of the child
 animations of this AnimatorSet.
</param>
        <summary>Sets the length of each of the current child animations of this AnimatorSet.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the length of each of the current child animations of this AnimatorSet. By default,
 each child animation will use its own duration. If the duration is set on the AnimatorSet,
 then each child animation inherits this duration.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/AnimatorSet.html#setDuration(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetInterpolator">
      <MemberSignature Language="C#" Value="public override void SetInterpolator (Android.Animation.ITimeInterpolator interpolator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetInterpolator(class Android.Animation.ITimeInterpolator interpolator) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setInterpolator", "(Landroid/animation/TimeInterpolator;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interpolator" Type="Android.Animation.ITimeInterpolator" />
      </Parameters>
      <Docs>
        <param name="interpolator">the interpolator to be used by each child animation of this AnimatorSet
</param>
        <summary>Sets the TimeInterpolator for all current <c><see cref="P:Android.Animation.AnimatorSet.ChildAnimations" /></c>
 of this AnimatorSet.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the TimeInterpolator for all current <c><see cref="P:Android.Animation.AnimatorSet.ChildAnimations" /></c>
 of this AnimatorSet. The default value is null, which means that no interpolator
 is set on this AnimatorSet. Setting the interpolator to any non-null value
 will cause that interpolator to be set on the child animations
 when the set is started.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/animation/AnimatorSet.html#setInterpolator(android.animation.TimeInterpolator)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="StartDelay">
      <MemberSignature Language="C#" Value="public override long StartDelay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 StartDelay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getStartDelay", "()J", "GetGetStartDelayHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setStartDelay", "(J)V", "GetSetStartDelay_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The amount of time, in milliseconds, to delay starting the animation after
 <c><see cref="!:Android.Animation.AnimatorSet.start()" /></c> is called.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/android/animation/AnimatorSet.html#getStartDelay()" target="_blank">[Android Documentation]</a>
              <br />
            </format>The amount of time, in milliseconds, to delay starting the animation after
 <c><see cref="!:Android.Animation.AnimatorSet.start()" /></c> is called.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/android/animation/AnimatorSet.html#setStartDelay(long)" target="_blank">[Android Documentation]</a>
              <br />
            </format>The amount of time, in milliseconds, to delay starting the animation after
 <c><see cref="!:Android.Animation.AnimatorSet.start()" /></c> is called.</para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
