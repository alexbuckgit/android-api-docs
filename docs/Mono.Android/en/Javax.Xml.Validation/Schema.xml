<Type Name="Schema" FullName="Javax.Xml.Validation.Schema">
  <TypeSignature Language="C#" Value="public abstract class Schema : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Schema extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("javax/xml/validation/Schema", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="8">
    <summary>Immutable in-memory representation of grammar.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Immutable in-memory representation of grammar.

 </para>
      <para tool="javadoc-to-mdoc">
 This object represents a set of constraints that can be checked/
 enforced against an XML document.

 </para>
      <para tool="javadoc-to-mdoc">
 A <c><see cref="T:Javax.Xml.Validation.Schema" /></c> object is thread safe and applications are
 encouraged to share it across many parsers in many threads.

 </para>
      <para tool="javadoc-to-mdoc">
 A <c><see cref="T:Javax.Xml.Validation.Schema" /></c> object is immutable in the sense that it shouldn't
 change the set of constraints once it is created. In other words,
 if an application validates the same document twice against the same
 <c><see cref="T:Javax.Xml.Validation.Schema" /></c>, it must always produce the same result.

 </para>
      <para tool="javadoc-to-mdoc">
 A <c><see cref="T:Javax.Xml.Validation.Schema" /></c> object is usually created from <c><see cref="T:Javax.Xml.Validation.SchemaFactory" /></c>.

 </para>
      <para tool="javadoc-to-mdoc">
 Two kinds of validators can be created from a <c><see cref="T:Javax.Xml.Validation.Schema" /></c> object.
 One is <c><see cref="T:Javax.Xml.Validation.Validator" /></c>, which provides highly-level validation
 operations that cover typical use cases. The other is
 <c><see cref="T:Javax.Xml.Validation.ValidatorHandler" /></c>, which works on top of SAX for better
 modularity.

 </para>
      <para tool="javadoc-to-mdoc">
 This specification does not refine
 the <c><see cref="M:Java.Lang.Object.Equals(Java.Lang.Object)" /></c> method.
 In other words, if you parse the same schema twice, you may
 still get <c>!schemaA.equals(schemaB)</c>.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
          </term>
        </item>
        <item>
          <term>
          </term>
        </item>
        <item>
          <term>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/javax/xml/validation/Schema.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 8" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Schema ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Constructor for the derived class.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructor for the derived class.

 </para>
          <para tool="javadoc-to-mdoc">
 The constructor does nothing.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/xml/validation/Schema.html#Schema()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Schema (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T}(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewValidator">
      <MemberSignature Language="C#" Value="public abstract Javax.Xml.Validation.Validator NewValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Javax.Xml.Validation.Validator NewValidator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newValidator", "()Ljavax/xml/validation/Validator;", "GetNewValidatorHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Xml.Validation.Validator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new <c><see cref="T:Javax.Xml.Validation.Validator" /></c> for this <c><see cref="T:Javax.Xml.Validation.Schema" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new <c><see cref="T:Javax.Xml.Validation.Validator" /></c> for this <c><see cref="T:Javax.Xml.Validation.Schema" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">
 A validator enforces/checks the set of constraints this object
 represents.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/xml/validation/Schema.html#newValidator()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="NewValidatorHandler">
      <MemberSignature Language="C#" Value="public abstract Javax.Xml.Validation.ValidatorHandler NewValidatorHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Javax.Xml.Validation.ValidatorHandler NewValidatorHandler() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newValidatorHandler", "()Ljavax/xml/validation/ValidatorHandler;", "GetNewValidatorHandlerHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Xml.Validation.ValidatorHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new <c><see cref="T:Javax.Xml.Validation.ValidatorHandler" /></c> for this <c><see cref="T:Javax.Xml.Validation.Schema" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new <c><see cref="T:Javax.Xml.Validation.ValidatorHandler" /></c> for this <c><see cref="T:Javax.Xml.Validation.Schema" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/xml/validation/Schema.html#newValidatorHandler()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
