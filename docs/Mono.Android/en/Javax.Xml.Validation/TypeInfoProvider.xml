<Type Name="TypeInfoProvider" FullName="Javax.Xml.Validation.TypeInfoProvider">
  <TypeSignature Language="C#" Value="public abstract class TypeInfoProvider : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TypeInfoProvider extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("javax/xml/validation/TypeInfoProvider", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="8">
    <summary>This class provides access to the type information determined
 by <c><see cref="T:Javax.Xml.Validation.ValidatorHandler" /></c>.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">This class provides access to the type information determined
 by <c><see cref="T:Javax.Xml.Validation.ValidatorHandler" /></c>.

 </para>
      <para tool="javadoc-to-mdoc">
 Some schema languages, such as W3C XML Schema, encourages a validator
 to report the "type" it assigns to each attribute/element.
 Those applications who wish to access this type information can invoke
 methods defined on this "interface" to access such type information.

 </para>
      <para tool="javadoc-to-mdoc">
 Implementation of this "interface" can be obtained through the
 <c><see cref="P:Javax.Xml.Validation.ValidatorHandler.TypeInfoProvider" /></c> method.</para>
      <format type="text/html">
        <h5 class="jd-tagtitle">See Also</h5>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="T:Org.W3c.Dom.TypeInfo" />
            </c>
          </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/javax/xml/validation/TypeInfoProvider.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 8" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeInfoProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Constructor for the derived class.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Constructor for the derived class.

 </para>
          <para tool="javadoc-to-mdoc">
 The constructor does nothing.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/xml/validation/TypeInfoProvider.html#TypeInfoProvider()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeInfoProvider (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementTypeInfo">
      <MemberSignature Language="C#" Value="public abstract Org.W3c.Dom.ITypeInfo ElementTypeInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Org.W3c.Dom.ITypeInfo ElementTypeInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getElementTypeInfo", "()Lorg/w3c/dom/TypeInfo;", "GetGetElementTypeInfoHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.W3c.Dom.ITypeInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary></summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">Returns the immutable <c><see cref="T:Org.W3c.Dom.TypeInfo" /></c> object for the current element.</para>
          <para tool="javadoc-to-mdoc">
 The method may only be called by the startElement and endElement event of
 the <c><see cref="T:Org.Xml.Sax.IContentHandler" /></c> that the application sets to the
 <c><see cref="T:Javax.Xml.Validation.ValidatorHandler" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/xml/validation/TypeInfoProvider.html#getElementTypeInfo()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Java.Lang.IllegalStateException">If this method is called from other <c><see cref="T:Org.Xml.Sax.IContentHandler" /></c>
      methods.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeTypeInfo">
      <MemberSignature Language="C#" Value="public abstract Org.W3c.Dom.ITypeInfo GetAttributeTypeInfo (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Org.W3c.Dom.ITypeInfo GetAttributeTypeInfo(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getAttributeTypeInfo", "(I)Lorg/w3c/dom/TypeInfo;", "GetGetAttributeTypeInfo_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Org.W3c.Dom.ITypeInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of the attribute. The same index for
      the <c><see cref="T:Org.Xml.Sax.IAttributes" /></c> object passed to the
      <c>startElement</c> callback.</param>
        <summary>Returns the immutable <c><see cref="T:Org.W3c.Dom.TypeInfo" /></c> object for the specified
 attribute of the current element.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the immutable <c><see cref="T:Org.W3c.Dom.TypeInfo" /></c> object for the specified
 attribute of the current element.

 </para>
          <para tool="javadoc-to-mdoc">
 The method may only be called by the startElement event of
 the <c><see cref="T:Org.Xml.Sax.IContentHandler" /></c> that the application sets to the
 <c><see cref="T:Javax.Xml.Validation.ValidatorHandler" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/xml/validation/TypeInfoProvider.html#getAttributeTypeInfo(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">If the index is invalid.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">If this method is called from other <c><see cref="T:Org.Xml.Sax.IContentHandler" /></c>
      methods.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsIdAttribute">
      <MemberSignature Language="C#" Value="public abstract bool IsIdAttribute (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdAttribute(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isIdAttribute", "(I)Z", "GetIsIdAttribute_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of the attribute. The same index for
      the <c><see cref="T:Org.Xml.Sax.IAttributes" /></c> object passed to the
      <c>startElement</c> callback.</param>
        <summary>Returns <c>true</c> if the specified attribute is determined
 to be ID.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>true</c> if the specified attribute is determined
 to be ID.

 </para>
          <para tool="javadoc-to-mdoc">
 Exactly how an attribute is "determined to be ID" is up to the
 schema language. In case of W3C XML Schema, this means
 that the actual type of the attribute is the built-in ID type
 or its derived type.

 </para>
          <para tool="javadoc-to-mdoc">
 A <c><see cref="T:Javax.Xml.Parsers.DocumentBuilder" /></c> uses this information
 to properly implement <c><see cref="P:Org.W3c.Dom.IAttr.IsId" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">
 The method may only be called by the startElement event of
 the <c><see cref="T:Org.Xml.Sax.IContentHandler" /></c> that the application sets to the
 <c><see cref="T:Javax.Xml.Validation.ValidatorHandler" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/xml/validation/TypeInfoProvider.html#isIdAttribute(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">If the index is invalid.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">If this method is called from other <c><see cref="T:Org.Xml.Sax.IContentHandler" /></c>
      methods.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSpecified">
      <MemberSignature Language="C#" Value="public abstract bool IsSpecified (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSpecified(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isSpecified", "(I)Z", "GetIsSpecified_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of the attribute. The same index for
      the <c><see cref="T:Org.Xml.Sax.IAttributes" /></c> object passed to the
      <c>startElement</c> callback.</param>
        <summary>Returns <c>false</c> if the attribute was added by the validator.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns <c>false</c> if the attribute was added by the validator.

 </para>
          <para tool="javadoc-to-mdoc">
 This method provides information necessary for
 a <c><see cref="T:Javax.Xml.Parsers.DocumentBuilder" /></c> to determine what
 the DOM tree should return from the <c><see cref="P:Org.W3c.Dom.IAttr.Specified" /></c> method.

 </para>
          <para tool="javadoc-to-mdoc">
 The method may only be called by the startElement event of
 the <c><see cref="T:Org.Xml.Sax.IContentHandler" /></c> that the application sets to the
 <c><see cref="T:Javax.Xml.Validation.ValidatorHandler" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">
 A general guideline for validators is to return true if
 the attribute was originally present in the pipeline, and
 false if it was added by the validator.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/xml/validation/TypeInfoProvider.html#isSpecified(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Java.Lang.IndexOutOfBoundsException">If the index is invalid.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">If this method is called from other <c><see cref="T:Org.Xml.Sax.IContentHandler" /></c>
      methods.</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" tool="ReplaceLinkValue" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>