<Type Name="OpcodeInfo" FullName="Dalvik.Bytecode.OpcodeInfo">
  <TypeSignature Language="C#" Value="public sealed class OpcodeInfo : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OpcodeInfo extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("dalvik/bytecode/OpcodeInfo", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Information about Dalvik opcodes.</summary>
    <remarks><para tool="javadoc-to-mdoc">Information about Dalvik opcodes.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/dalvik/bytecode/OpcodeInfo.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 11" />
  </Docs>
  <Members>
    <Member MemberName="MaximumPackedValue">
      <MemberSignature Language="C#" Value="public static int MaximumPackedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaximumPackedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MAXIMUM_PACKED_VALUE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The maximum possible "packed value" of a Dalvik opcode.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">The maximum possible "packed value" of a Dalvik opcode. The
 packed value of an opcode is a denser representation that is
 only used when reporting usage statistics. The mapping between
 packed opcode values and regular opcode values is
 implementation-specific and may vary over time.

 </para><para tool="javadoc-to-mdoc"><format type="text/html"><b>Note:</b></format>: This is constant in any given VM incarnation,
 but it is subject to change over time, so it is not appropriate
 to represent as a compile-time constant value.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/dalvik/bytecode/OpcodeInfo.html#MAXIMUM_PACKED_VALUE" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="MaximumValue">
      <MemberSignature Language="C#" Value="public static int MaximumValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaximumValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MAXIMUM_VALUE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The maximum possible value of a Dalvik opcode.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">The maximum possible value of a Dalvik opcode.

 </para><para tool="javadoc-to-mdoc"><format type="text/html"><b>Note:</b></format>: This is constant in any given VM incarnation,
 but it is subject to change over time, so it is not appropriate
 to represent as a compile-time constant value.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/dalvik/bytecode/OpcodeInfo.html#MAXIMUM_VALUE" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
