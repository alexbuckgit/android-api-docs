<Type Name="PdfDocument" FullName="Android.Graphics.Pdf.PdfDocument">
  <TypeSignature Language="C#" Value="public class PdfDocument : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PdfDocument extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/graphics/pdf/PdfDocument", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary tool="true">
 This class enables generating a PDF document from native Android content.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">
        <example>
          <code lang="java">
 // create a new document
 PdfDocument document = new PdfDocument();

 // crate a page description
 PageInfo pageInfo = new PageInfo.Builder(new Rect(0, 0, 100, 100), 1).create();

 // start a page
 Page page = document.startPage(pageInfo);

 // draw something on the page
 View content = getContentView();
 content.draw(page.getCanvas());

 // finish the page
 document.finishPage(page);
 . . .
 // add more pages
 . . .
 // write the document content
 document.writeTo(getOutputStream());

 // close the document
 document.close();
 </code>
        </example>
      </para>
      <para tool="javadoc-to-mdoc">
 This class enables generating a PDF document from native Android content. You
 create a new document and then for every page you want to add you start a page,
 write content to the page, and finish the page. After you are done with all
 pages, you write the document to an output stream and close the document.
 After a document is closed you should not use it anymore. Note that pages are
 created one by one, i.e. you can have only a single page to which you are
 writing at any given time. This class is not thread safe.
 </para>
      <para tool="javadoc-to-mdoc">
 A typical use of the APIs looks like this:
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/graphics/pdf/PdfDocument.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PdfDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a new instance.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a new instance.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/pdf/PdfDocument.html#PdfDocument()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PdfDocument (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("close", "()V", "GetCloseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes this document.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Closes this document. This method should be called after you
 are done working with the document. After this call the document
 is considered closed and none of its methods should be called.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> Do not call this method if the page
 returned by <c><see cref="M:Android.Graphics.Pdf.PdfDocument.StartPage(.PageInfo)" /></c> is not finished by
 calling <c><see cref="M:Android.Graphics.Pdf.PdfDocument.FinishPage(.Page)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/pdf/PdfDocument.html#close()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishPage">
      <MemberSignature Language="C#" Value="public virtual void FinishPage (Android.Graphics.Pdf.PdfDocument.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishPage(class Android.Graphics.Pdf.PdfDocument/Page page) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("finishPage", "(Landroid/graphics/pdf/PdfDocument$Page;)V", "GetFinishPage_Landroid_graphics_pdf_PdfDocument_Page_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="Android.Graphics.Pdf.PdfDocument+Page" />
      </Parameters>
      <Docs>
        <param name="page">The page. Cannot be null.</param>
        <summary>Finishes a started page.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Finishes a started page. You should always finish the last started page.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> Do not call this method after <c><see cref="M:Android.Graphics.Pdf.PdfDocument.Close" /></c>.
 You should not finish the same page more than once.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/pdf/PdfDocument.html#finishPage(android.graphics.pdf.PdfDocument.Page)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Graphics.Pdf.PdfDocument.StartPage(.PageInfo)" />
      </Docs>
    </Member>
    <Member MemberName="Pages">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.Graphics.Pdf.PdfDocument.PageInfo&gt; Pages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Android.Graphics.Pdf.PdfDocument/PageInfo&gt; Pages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPages", "()Ljava/util/List;", "GetGetPagesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.Graphics.Pdf.PdfDocument+PageInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the pages of the document.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the pages of the document.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/pdf/PdfDocument.html#getPages()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartPage">
      <MemberSignature Language="C#" Value="public virtual Android.Graphics.Pdf.PdfDocument.Page StartPage (Android.Graphics.Pdf.PdfDocument.PageInfo pageInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Graphics.Pdf.PdfDocument/Page StartPage(class Android.Graphics.Pdf.PdfDocument/PageInfo pageInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startPage", "(Landroid/graphics/pdf/PdfDocument$PageInfo;)Landroid/graphics/pdf/PdfDocument$Page;", "GetStartPage_Landroid_graphics_pdf_PdfDocument_PageInfo_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Graphics.Pdf.PdfDocument+Page</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageInfo" Type="Android.Graphics.Pdf.PdfDocument+PageInfo" />
      </Parameters>
      <Docs>
        <param name="pageInfo">The page info. Cannot be null.</param>
        <summary>Starts a page using the provided <c><see cref="!:NoType:android/graphics/pdf/PdfDocument$PageInfo;Href=../../../../reference/android/graphics/pdf/PdfDocument.PageInfo.html" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Starts a page using the provided <c><see cref="!:NoType:android/graphics/pdf/PdfDocument$PageInfo;Href=../../../../reference/android/graphics/pdf/PdfDocument.PageInfo.html" /></c>. After the page
 is created you can draw arbitrary content on the page's canvas which
 you can get by calling <c><see cref="!:NoType:android/graphics/pdf/PdfDocument$Page;Href=../../../../reference/android/graphics/pdf/PdfDocument.Page.html#getCanvas()" /></c>. After you are done
 drawing the content you should finish the page by calling
 <c><see cref="M:Android.Graphics.Pdf.PdfDocument.FinishPage(.Page)" /></c>. After the page is finished you should
 no longer access the page or its canvas.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> Do not call this method after <c><see cref="M:Android.Graphics.Pdf.PdfDocument.Close" /></c>.
 Also do not call this method if the last page returned by this method
 is not finished by calling <c><see cref="M:Android.Graphics.Pdf.PdfDocument.FinishPage(.Page)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/pdf/PdfDocument.html#startPage(android.graphics.pdf.PdfDocument.PageInfo)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Graphics.Pdf.PdfDocument.FinishPage(.Page)" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public virtual void WriteTo (System.IO.Stream out);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteTo(class System.IO.Stream out) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("writeTo", "(Ljava/io/OutputStream;)V", "GetWriteTo_Ljava_io_OutputStream_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="out" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="out">The output stream. Cannot be null.</param>
        <summary>Writes the document to an output stream.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Writes the document to an output stream. You can call this method
 multiple times.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> Do not call this method after <c><see cref="M:Android.Graphics.Pdf.PdfDocument.Close" /></c>.
 Also do not call this method if a page returned by <c><see cref="M:Android.Graphics.Pdf.PdfDocument.StartPage(.PageInfo)" /></c> is not finished by calling <c><see cref="M:Android.Graphics.Pdf.PdfDocument.FinishPage(.Page)" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/graphics/pdf/PdfDocument.html#writeTo(java.io.OutputStream)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.IO.IOException">If an error occurs while writing.
</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToAsync (System.IO.Stream out);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToAsync(class System.IO.Stream out) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="out" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="out">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>