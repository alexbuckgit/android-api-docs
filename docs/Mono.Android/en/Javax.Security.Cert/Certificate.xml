<Type Name="Certificate" FullName="Javax.Security.Cert.Certificate">
  <TypeSignature Language="C#" Value="public abstract class Certificate : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Certificate extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("javax/security/cert/Certificate", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Abstract class to represent identity certificates.</summary>
    <remarks><para tool="javadoc-to-mdoc">Abstract class to represent identity certificates. It represents a way to
 verify the binding of a Principal and its public key. Examples are X.509,
 PGP, and SDSI.
 </para><para tool="javadoc-to-mdoc">
 Note: This package is provided only for compatibility reasons.
 It contains a simplified version of the java.security.cert package that was
 previously used by JSSE (Java SSL package). All applications that do not have
 to be compatible with older versions of JSSE (that is before Java SDK 1.5)
 should only use java.security.cert.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/javax/security/cert/Certificate.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Certificate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a new <c>Certificate</c>.</summary>
        <remarks><para tool="javadoc-to-mdoc">Creates a new <c>Certificate</c>.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/javax/security/cert/Certificate.html#Certificate()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Certificate (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEncoded">
      <MemberSignature Language="C#" Value="public abstract byte[] GetEncoded ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetEncoded() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getEncoded", "()[B", "GetGetEncodedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the encoded representation for this certificate.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns the encoded representation for this certificate.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/javax/security/cert/Certificate.html#getEncoded()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Javax.Security.Cert.CertificateEncodingException">if encoding fails.
</exception>
      </Docs>
    </Member>
    <Member MemberName="PublicKey">
      <MemberSignature Language="C#" Value="public abstract Java.Security.IPublicKey PublicKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Security.IPublicKey PublicKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPublicKey", "()Ljava/security/PublicKey;", "GetGetPublicKeyHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Security.IPublicKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the public key corresponding to this certificate.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Returns the public key corresponding to this certificate.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/javax/security/cert/Certificate.html#getPublicKey()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public abstract string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("toString", "()Ljava/lang/String;", "GetToStringHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string containing a concise, human-readable description of the
 receiver.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns a string containing a concise, human-readable description of the
 receiver.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/javax/security/cert/Certificate.html#toString()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Verify">
      <MemberSignature Language="C#" Value="public abstract void Verify (Java.Security.IPublicKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Verify(class Java.Security.IPublicKey key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("verify", "(Ljava/security/PublicKey;)V", "GetVerify_Ljava_security_PublicKey_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Java.Security.IPublicKey" />
      </Parameters>
      <Docs>
        <param name="key">public key for which verification should be performed.</param>
        <summary>Verifies that this certificate was signed with the given public key.</summary>
        <remarks><para tool="javadoc-to-mdoc">Verifies that this certificate was signed with the given public key.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/javax/security/cert/Certificate.html#verify(java.security.PublicKey)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Javax.Security.Cert.CertificateException">if encoding errors are detected</exception>
        <exception cref="T:Java.Security.NoSuchAlgorithmException">if an unsupported algorithm is detected</exception>
        <exception cref="T:Java.Security.InvalidKeyException">if an invalid key is detected</exception>
        <exception cref="T:Java.Security.NoSuchProviderException">if there is no default provider</exception>
        <exception cref="T:Java.Security.SignatureException">if signature errors are detected
</exception>
      </Docs>
    </Member>
    <Member MemberName="Verify">
      <MemberSignature Language="C#" Value="public abstract void Verify (Java.Security.IPublicKey key, string sigProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Verify(class Java.Security.IPublicKey key, string sigProvider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("verify", "(Ljava/security/PublicKey;Ljava/lang/String;)V", "GetVerify_Ljava_security_PublicKey_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Java.Security.IPublicKey" />
        <Parameter Name="sigProvider" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">public key for which verification should be performed.</param>
        <param name="sigProvider">the name of the signature provider.</param>
        <summary>Verifies that this certificate was signed with the given public key.</summary>
        <remarks><para tool="javadoc-to-mdoc">Verifies that this certificate was signed with the given public key. Uses
 the signature algorithm given by the provider.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/javax/security/cert/Certificate.html#verify(java.security.PublicKey, java.lang.String)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Javax.Security.Cert.CertificateException">if encoding errors are detected</exception>
        <exception cref="T:Java.Security.NoSuchAlgorithmException">if an unsupported algorithm is detected</exception>
        <exception cref="T:Java.Security.InvalidKeyException">if an invalid key is detected</exception>
        <exception cref="T:Java.Security.NoSuchProviderException">if the specified provider does not exists.</exception>
        <exception cref="T:Java.Security.SignatureException">if signature errors are detected
</exception>
      </Docs>
    </Member>
  </Members>
</Type>
