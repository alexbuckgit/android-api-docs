<Type Name="SSLSocket" FullName="Javax.Net.Ssl.SSLSocket">
  <TypeSignature Language="C#" Value="public abstract class SSLSocket : Java.Net.Socket" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SSLSocket extends Java.Net.Socket" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Net.Socket</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("javax/net/ssl/SSLSocket", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The extension of <c>Socket</c> providing secure protocols like SSL (Secure
 Sockets Layer) or TLS (Transport Layer Security).</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">The extension of <c>Socket</c> providing secure protocols like SSL (Secure
 Sockets Layer) or TLS (Transport Layer Security).

 <format type="text/html"><h3>Default configuration</h3></format></para>
      <para tool="javadoc-to-mdoc">
        <c>SSLSocket</c> instances obtained from default <c><see cref="T:Javax.Net.Ssl.SSLSocketFactory" /></c>,
 <c><see cref="T:Javax.Net.Ssl.SSLServerSocketFactory" /></c>, and <c><see cref="T:Javax.Net.Ssl.SSLContext" /></c> are configured as follows:

 <format type="text/html"><h4>Protocols</h4></format></para>
      <para tool="javadoc-to-mdoc">Client socket:
 <format type="text/html"><table><thead><tr><th>Protocol</th><th>Supported (API Levels)</th><th>Enabled by default (API Levels)</th></tr></thead><tbody><tr><td>SSLv3</td><td>1+</td><td>1+</td></tr><tr><td>TLSv1</td><td>1+</td><td>1+</td></tr><tr><td>TLSv1.1</td><td>16+</td><td>20+</td></tr><tr><td>TLSv1.2</td><td>16+</td><td>20+</td></tr></tbody></table></format></para>
      <para tool="javadoc-to-mdoc">Server socket:
 <format type="text/html"><table><thead><tr><th>Protocol</th><th>Supported (API Levels)</th><th>Enabled by default (API Levels)</th></tr></thead><tbody><tr><td>SSLv3</td><td>1+</td><td>1+</td></tr><tr><td>TLSv1</td><td>1+</td><td>1+</td></tr><tr><td>TLSv1.1</td><td>16+</td><td>16+</td></tr><tr><td>TLSv1.2</td><td>16+</td><td>16+</td></tr></tbody></table></format><format type="text/html"><h4>Cipher suites</h4></format></para>
      <para tool="javadoc-to-mdoc">Methods that operate with cipher suite names (for example,
 <c><see cref="M:Javax.Net.Ssl.SSLSocket.GetSupportedCipherSuites" /></c>,
 <c><see cref="M:Javax.Net.Ssl.SSLSocket.SetEnabledCipherSuites(System.String[])" /></c>) have used
 standard names for cipher suites since API Level 9, as listed in the table
 below. Prior to API Level 9, non-standard (OpenSSL) names had been used (see
 the table following this table).
 <format type="text/html"><table><thead><tr><th>Cipher suite</th><th>Supported (API Levels)</th><th>Enabled by default (API Levels)</th></tr></thead><tbody><tr><td>SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA</td><td>9+</td><td>9-19</td></tr><tr><td>SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA</td><td>9+</td><td>9-19</td></tr><tr><td>SSL_DHE_DSS_WITH_DES_CBC_SHA</td><td>9+</td><td>9-19</td></tr><tr><td>SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA</td><td>9+</td><td>9-19</td></tr><tr><td>SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA</td><td>9+</td><td>9-19</td></tr><tr><td>SSL_DHE_RSA_WITH_DES_CBC_SHA</td><td>9+</td><td>9-19</td></tr><tr><td>SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA</td><td>9+</td><td /></tr><tr><td>SSL_DH_anon_EXPORT_WITH_RC4_40_MD5</td><td>9+</td><td /></tr><tr><td>SSL_DH_anon_WITH_3DES_EDE_CBC_SHA</td><td>9+</td><td /></tr><tr><td>SSL_DH_anon_WITH_DES_CBC_SHA</td><td>9+</td><td /></tr><tr><td>SSL_DH_anon_WITH_RC4_128_MD5</td><td>9+</td><td /></tr><tr><td>SSL_RSA_EXPORT_WITH_DES40_CBC_SHA</td><td>9+</td><td>9-19</td></tr><tr><td>SSL_RSA_EXPORT_WITH_RC4_40_MD5</td><td>9+</td><td>9-19</td></tr><tr><td>SSL_RSA_WITH_3DES_EDE_CBC_SHA</td><td>9+</td><td>9-19</td></tr><tr><td>SSL_RSA_WITH_DES_CBC_SHA</td><td>9+</td><td>9-19</td></tr><tr><td>SSL_RSA_WITH_NULL_MD5</td><td>9+</td><td /></tr><tr><td>SSL_RSA_WITH_NULL_SHA</td><td>9+</td><td /></tr><tr><td>SSL_RSA_WITH_RC4_128_MD5</td><td>9+</td><td>9-19</td></tr><tr><td>SSL_RSA_WITH_RC4_128_SHA</td><td>9+</td><td>9+</td></tr><tr><td>TLS_DHE_DSS_WITH_AES_128_CBC_SHA</td><td>9+</td><td>9+</td></tr><tr><td>TLS_DHE_DSS_WITH_AES_128_CBC_SHA256</td><td>20+</td><td /></tr><tr><td>TLS_DHE_DSS_WITH_AES_128_GCM_SHA256</td><td>20+</td><td /></tr><tr><td>TLS_DHE_DSS_WITH_AES_256_CBC_SHA</td><td>9+</td><td>11+</td></tr><tr><td>TLS_DHE_DSS_WITH_AES_256_CBC_SHA256</td><td>20+</td><td /></tr><tr><td>TLS_DHE_DSS_WITH_AES_256_GCM_SHA384</td><td>20+</td><td /></tr><tr><td>TLS_DHE_RSA_WITH_AES_128_CBC_SHA</td><td>9+</td><td>9+</td></tr><tr><td>TLS_DHE_RSA_WITH_AES_128_CBC_SHA256</td><td>20+</td><td /></tr><tr><td>TLS_DHE_RSA_WITH_AES_128_GCM_SHA256</td><td>20+</td><td>20+</td></tr><tr><td>TLS_DHE_RSA_WITH_AES_256_CBC_SHA</td><td>9+</td><td>11+</td></tr><tr><td>TLS_DHE_RSA_WITH_AES_256_CBC_SHA256</td><td>20+</td><td /></tr><tr><td>TLS_DHE_RSA_WITH_AES_256_GCM_SHA384</td><td>20+</td><td>20+</td></tr><tr><td>TLS_DH_anon_WITH_AES_128_CBC_SHA</td><td>9+</td><td /></tr><tr><td>TLS_DH_anon_WITH_AES_128_CBC_SHA256</td><td>20+</td><td /></tr><tr><td>TLS_DH_anon_WITH_AES_128_GCM_SHA256</td><td>20+</td><td /></tr><tr><td>TLS_DH_anon_WITH_AES_256_CBC_SHA</td><td>9+</td><td /></tr><tr><td>TLS_DH_anon_WITH_AES_256_CBC_SHA256</td><td>20+</td><td /></tr><tr><td>TLS_DH_anon_WITH_AES_256_GCM_SHA384</td><td>20+</td><td /></tr><tr><td>TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA</td><td>11+</td><td>11-19</td></tr><tr><td>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</td><td>11+</td><td>11+</td></tr><tr><td>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256</td><td>20+</td><td /></tr><tr><td>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</td><td>20+</td><td>20+</td></tr><tr><td>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</td><td>11+</td><td>11+</td></tr><tr><td>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384</td><td>20+</td><td /></tr><tr><td>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</td><td>20+</td><td>20+</td></tr><tr><td>TLS_ECDHE_ECDSA_WITH_NULL_SHA</td><td>11+</td><td /></tr><tr><td>TLS_ECDHE_ECDSA_WITH_RC4_128_SHA</td><td>11+</td><td>11+</td></tr><tr><td>TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA</td><td>21+</td><td>21+</td></tr><tr><td>TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA</td><td>21+</td><td>21+</td></tr><tr><td>TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</td><td>11+</td><td>11-19</td></tr><tr><td>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</td><td>11+</td><td>11+</td></tr><tr><td>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256</td><td>20+</td><td /></tr><tr><td>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</td><td>20+</td><td>20+</td></tr><tr><td>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA</td><td>11+</td><td>11+</td></tr><tr><td>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384</td><td>20+</td><td /></tr><tr><td>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</td><td>20+</td><td>20+</td></tr><tr><td>TLS_ECDHE_RSA_WITH_NULL_SHA</td><td>11+</td><td /></tr><tr><td>TLS_ECDHE_RSA_WITH_RC4_128_SHA</td><td>11+</td><td>11+</td></tr><tr><td>TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA</td><td>11+</td><td>11-19</td></tr><tr><td>TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA</td><td>11+</td><td>11-19</td></tr><tr><td>TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256</td><td>20+</td><td /></tr><tr><td>TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256</td><td>20+</td><td /></tr><tr><td>TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA</td><td>11+</td><td>11-19</td></tr><tr><td>TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384</td><td>20+</td><td /></tr><tr><td>TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384</td><td>20+</td><td /></tr><tr><td>TLS_ECDH_ECDSA_WITH_NULL_SHA</td><td>11+</td><td /></tr><tr><td>TLS_ECDH_ECDSA_WITH_RC4_128_SHA</td><td>11+</td><td>11-19</td></tr><tr><td>TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA</td><td>11+</td><td>11-19</td></tr><tr><td>TLS_ECDH_RSA_WITH_AES_128_CBC_SHA</td><td>11+</td><td>11-19</td></tr><tr><td>TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256</td><td>20+</td><td /></tr><tr><td>TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256</td><td>20+</td><td /></tr><tr><td>TLS_ECDH_RSA_WITH_AES_256_CBC_SHA</td><td>11+</td><td>11-19</td></tr><tr><td>TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384</td><td>20+</td><td /></tr><tr><td>TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384</td><td>20+</td><td /></tr><tr><td>TLS_ECDH_RSA_WITH_NULL_SHA</td><td>11+</td><td /></tr><tr><td>TLS_ECDH_RSA_WITH_RC4_128_SHA</td><td>11+</td><td>11-19</td></tr><tr><td>TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA</td><td>11+</td><td /></tr><tr><td>TLS_ECDH_anon_WITH_AES_128_CBC_SHA</td><td>11+</td><td /></tr><tr><td>TLS_ECDH_anon_WITH_AES_256_CBC_SHA</td><td>11+</td><td /></tr><tr><td>TLS_ECDH_anon_WITH_NULL_SHA</td><td>11+</td><td /></tr><tr><td>TLS_ECDH_anon_WITH_RC4_128_SHA</td><td>11+</td><td /></tr><tr><td>TLS_EMPTY_RENEGOTIATION_INFO_SCSV</td><td>11+</td><td>11+</td></tr><tr><td>TLS_FALLBACK_SCSV</td><td>21+</td><td /></tr><tr><td>TLS_PSK_WITH_3DES_EDE_CBC_SHA</td><td>21+</td><td /></tr><tr><td>TLS_PSK_WITH_AES_128_CBC_SHA</td><td>21+</td><td>21+</td></tr><tr><td>TLS_PSK_WITH_AES_256_CBC_SHA</td><td>21+</td><td>21+</td></tr><tr><td>TLS_PSK_WITH_RC4_128_SHA</td><td>21+</td><td /></tr><tr><td>TLS_RSA_WITH_AES_128_CBC_SHA</td><td>9+</td><td>9+</td></tr><tr><td>TLS_RSA_WITH_AES_128_CBC_SHA256</td><td>20+</td><td /></tr><tr><td>TLS_RSA_WITH_AES_128_GCM_SHA256</td><td>20+</td><td>20+</td></tr><tr><td>TLS_RSA_WITH_AES_256_CBC_SHA</td><td>9+</td><td>11+</td></tr><tr><td>TLS_RSA_WITH_AES_256_CBC_SHA256</td><td>20+</td><td /></tr><tr><td>TLS_RSA_WITH_AES_256_GCM_SHA384</td><td>20+</td><td>20+</td></tr><tr><td>TLS_RSA_WITH_NULL_SHA256</td><td>20+</td><td /></tr></tbody></table></format></para>
      <para tool="javadoc-to-mdoc">
        <i>NOTE</i>: PSK cipher suites are enabled by default only if the <c>SSLContext</c> through
 which the socket was created has been initialized with a <c>PSKKeyManager</c>.

 </para>
      <para tool="javadoc-to-mdoc">API Levels 1 to 8 use OpenSSL names for cipher suites. The table below
 lists these OpenSSL names and their corresponding standard names used in API
 Levels 9 and newer.
 <format type="text/html"><table><thead><tr><th>OpenSSL cipher suite</th><th>Standard cipher suite</th><th>Supported (API Levels)</th><th>Enabled by default (API Levels)</th></tr></thead><tbody><tr><td>AES128-SHA</td><td>TLS_RSA_WITH_AES_128_CBC_SHA</td><td>1+</td><td>1+</td></tr><tr><td>AES256-SHA</td><td>TLS_RSA_WITH_AES_256_CBC_SHA</td><td>1+</td><td>1-8, 11+</td></tr><tr><td>DES-CBC-MD5</td><td>SSL_CK_DES_64_CBC_WITH_MD5</td><td>1-8</td><td>1-8</td></tr><tr><td>DES-CBC-SHA</td><td>SSL_RSA_WITH_DES_CBC_SHA</td><td>1+</td><td>1-19</td></tr><tr><td>DES-CBC3-MD5</td><td>SSL_CK_DES_192_EDE3_CBC_WITH_MD5</td><td>1-8</td><td>1-8</td></tr><tr><td>DES-CBC3-SHA</td><td>SSL_RSA_WITH_3DES_EDE_CBC_SHA</td><td>1+</td><td>1-19</td></tr><tr><td>DHE-DSS-AES128-SHA</td><td>TLS_DHE_DSS_WITH_AES_128_CBC_SHA</td><td>1+</td><td>1+</td></tr><tr><td>DHE-DSS-AES256-SHA</td><td>TLS_DHE_DSS_WITH_AES_256_CBC_SHA</td><td>1+</td><td>1-8, 11+</td></tr><tr><td>DHE-RSA-AES128-SHA</td><td>TLS_DHE_RSA_WITH_AES_128_CBC_SHA</td><td>1+</td><td>1+</td></tr><tr><td>DHE-RSA-AES256-SHA</td><td>TLS_DHE_RSA_WITH_AES_256_CBC_SHA</td><td>1+</td><td>1-8, 11+</td></tr><tr><td>EDH-DSS-DES-CBC-SHA</td><td>SSL_DHE_DSS_WITH_DES_CBC_SHA</td><td>1+</td><td>1-19</td></tr><tr><td>EDH-DSS-DES-CBC3-SHA</td><td>SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA</td><td>1+</td><td>1-19</td></tr><tr><td>EDH-RSA-DES-CBC-SHA</td><td>SSL_DHE_RSA_WITH_DES_CBC_SHA</td><td>1+</td><td>1-19</td></tr><tr><td>EDH-RSA-DES-CBC3-SHA</td><td>SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA</td><td>1+</td><td>1-19</td></tr><tr><td>EXP-DES-CBC-SHA</td><td>SSL_RSA_EXPORT_WITH_DES40_CBC_SHA</td><td>1+</td><td>1-19</td></tr><tr><td>EXP-EDH-DSS-DES-CBC-SHA</td><td>SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA</td><td>1+</td><td>1-19</td></tr><tr><td>EXP-EDH-RSA-DES-CBC-SHA</td><td>SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA</td><td>1+</td><td>1-19</td></tr><tr><td>EXP-RC2-CBC-MD5</td><td>SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5</td><td>1-8</td><td>1-8</td></tr><tr><td>EXP-RC4-MD5</td><td>SSL_RSA_EXPORT_WITH_RC4_40_MD5</td><td>1+</td><td>1-19</td></tr><tr><td>RC2-CBC-MD5</td><td>SSL_CK_RC2_128_CBC_WITH_MD5</td><td>1-8</td><td>1-8</td></tr><tr><td>RC4-MD5</td><td>SSL_RSA_WITH_RC4_128_MD5</td><td>1+</td><td>1-19</td></tr><tr><td>RC4-SHA</td><td>SSL_RSA_WITH_RC4_128_SHA</td><td>1+</td><td>1+</td></tr></tbody></table></format></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SSLSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Only to be used by subclasses.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Only to be used by subclasses.
 </para>
          <para tool="javadoc-to-mdoc">
 Creates a TCP socket.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#SSLSocket()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SSLSocket (Java.Net.InetAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Java.Net.InetAddress address, int32 port) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/net/InetAddress;I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="address" Type="Java.Net.InetAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">To be added.</param>
        <param name="port">To be added.</param>
        <summary>Only to be used by subclasses.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Only to be used by subclasses.
 </para>
          <para tool="javadoc-to-mdoc">
 Creates a TCP socket connection to the specified address at the specified
 port.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#SSLSocket(java.net.InetAddress, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if creating the socket fails.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SSLSocket (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SSLSocket (string host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string host, int32 port) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host">To be added.</param>
        <param name="port">To be added.</param>
        <summary>Only to be used by subclasses.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Only to be used by subclasses.
 </para>
          <para tool="javadoc-to-mdoc">
 Creates a TCP socket connection to the specified host at the specified
 port.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#SSLSocket(java.lang.String, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if creating the socket fails.</exception>
        <exception cref="T:Java.Net.UnknownHostException">if the specified host is not known.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SSLSocket (Java.Net.InetAddress address, int port, Java.Net.InetAddress clientAddress, int clientPort);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Java.Net.InetAddress address, int32 port, class Java.Net.InetAddress clientAddress, int32 clientPort) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/net/InetAddress;ILjava/net/InetAddress;I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="address" Type="Java.Net.InetAddress" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="clientAddress" Type="Java.Net.InetAddress" />
        <Parameter Name="clientPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">To be added.</param>
        <param name="port">To be added.</param>
        <param name="clientAddress">To be added.</param>
        <param name="clientPort">To be added.</param>
        <summary>Only to be used by subclasses.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Only to be used by subclasses.
 </para>
          <para tool="javadoc-to-mdoc">
 Creates a TCP socket connection to the specified address at the specified
 port with the client side bound to the specified address and port.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#SSLSocket(java.net.InetAddress, int, java.net.InetAddress, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if creating the socket fails.
</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SSLSocket (string host, int port, Java.Net.InetAddress clientAddress, int clientPort);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string host, int32 port, class Java.Net.InetAddress clientAddress, int32 clientPort) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/lang/String;ILjava/net/InetAddress;I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="clientAddress" Type="Java.Net.InetAddress" />
        <Parameter Name="clientPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host">To be added.</param>
        <param name="port">To be added.</param>
        <param name="clientAddress">To be added.</param>
        <param name="clientPort">To be added.</param>
        <summary>Only to be used by subclasses.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Only to be used by subclasses.
 </para>
          <para tool="javadoc-to-mdoc">
 Creates a TCP socket connection to the specified host at the specified
 port with the client side bound to the specified address and port.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#SSLSocket(java.lang.String, int, java.net.InetAddress, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if creating the socket fails.</exception>
        <exception cref="T:Java.Net.UnknownHostException">if the specified host is not known.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHandshakeCompletedListener">
      <MemberSignature Language="C#" Value="public abstract void AddHandshakeCompletedListener (Javax.Net.Ssl.IHandshakeCompletedListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandshakeCompletedListener(class Javax.Net.Ssl.IHandshakeCompletedListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addHandshakeCompletedListener", "(Ljavax/net/ssl/HandshakeCompletedListener;)V", "GetAddHandshakeCompletedListener_Ljavax_net_ssl_HandshakeCompletedListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Javax.Net.Ssl.IHandshakeCompletedListener" />
      </Parameters>
      <Docs>
        <param name="listener">the listener to register.</param>
        <summary>Registers the specified listener to receive notification on completion of
 a handshake on this connection.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Registers the specified listener to receive notification on completion of
 a handshake on this connection.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if <c>listener</c> is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="EnableSessionCreation">
      <MemberSignature Language="C#" Value="public abstract bool EnableSessionCreation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSessionCreation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getEnableSessionCreation", "()Z", "GetGetEnableSessionCreationHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setEnableSessionCreation", "(Z)V", "GetSetEnableSessionCreation_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether new SSL sessions may be created by this socket or if
 existing sessions must be reused.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#getEnableSessionCreation()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns whether new SSL sessions may be created by this socket or if
 existing sessions must be reused.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#setEnableSessionCreation(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets whether new SSL sessions may be created by this socket or if
 existing sessions must be reused. If <c>flag</c> is false and there are
 no sessions to resume, handshaking will fail.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetEnabledCipherSuites">
      <MemberSignature Language="C#" Value="public abstract string[] GetEnabledCipherSuites ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetEnabledCipherSuites() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getEnabledCipherSuites", "()[Ljava/lang/String;", "GetGetEnabledCipherSuitesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the names of the enabled cipher suites.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the names of the enabled cipher suites.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#getEnabledCipherSuites()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetEnabledProtocols">
      <MemberSignature Language="C#" Value="public abstract string[] GetEnabledProtocols ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetEnabledProtocols() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getEnabledProtocols", "()[Ljava/lang/String;", "GetGetEnabledProtocolsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the names of the enabled protocols.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the names of the enabled protocols.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#getEnabledProtocols()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedCipherSuites">
      <MemberSignature Language="C#" Value="public abstract string[] GetSupportedCipherSuites ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetSupportedCipherSuites() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getSupportedCipherSuites", "()[Ljava/lang/String;", "GetGetSupportedCipherSuitesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the names of the supported cipher suites.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the names of the supported cipher suites.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#getSupportedCipherSuites()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedProtocols">
      <MemberSignature Language="C#" Value="public abstract string[] GetSupportedProtocols ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetSupportedProtocols() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getSupportedProtocols", "()[Ljava/lang/String;", "GetGetSupportedProtocolsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the names of the supported protocols.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the names of the supported protocols.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#getSupportedProtocols()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="HandshakeSession">
      <MemberSignature Language="C#" Value="public virtual Javax.Net.Ssl.ISSLSession HandshakeSession { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Javax.Net.Ssl.ISSLSession HandshakeSession" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getHandshakeSession", "()Ljavax/net/ssl/SSLSession;", "GetGetHandshakeSessionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Net.Ssl.ISSLSession</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedClientAuth">
      <MemberSignature Language="C#" Value="public abstract bool NeedClientAuth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NeedClientAuth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getNeedClientAuth", "()Z", "GetGetNeedClientAuthHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setNeedClientAuth", "(Z)V", "GetSetNeedClientAuth_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the server socket should require client authentication.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#getNeedClientAuth()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns true if the server socket should require client authentication.
 This does not apply to sockets in <c><see cref="P:Javax.Net.Ssl.SSLSocket.UseClientMode" /></c>.
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#setNeedClientAuth(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets whether the server should require client authentication. This
 does not apply to sockets in <c><see cref="P:Javax.Net.Ssl.SSLSocket.UseClientMode" /></c>.
 Client authentication is one of the following:
 <list type="bullet"><item><term>authentication required</term></item><item><term>authentication requested</term></item><item><term>no authentication needed</term></item></list>
 This method overrides the setting of <c><see cref="P:Javax.Net.Ssl.SSLSocket.WantClientAuth" /></c>.
</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandshakeCompletedListener">
      <MemberSignature Language="C#" Value="public abstract void RemoveHandshakeCompletedListener (Javax.Net.Ssl.IHandshakeCompletedListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandshakeCompletedListener(class Javax.Net.Ssl.IHandshakeCompletedListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeHandshakeCompletedListener", "(Ljavax/net/ssl/HandshakeCompletedListener;)V", "GetRemoveHandshakeCompletedListener_Ljavax_net_ssl_HandshakeCompletedListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Javax.Net.Ssl.IHandshakeCompletedListener" />
      </Parameters>
      <Docs>
        <param name="listener">the listener to remove.</param>
        <summary>Removes the specified handshake completion listener.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Removes the specified handshake completion listener.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified listener is not registered or <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Session">
      <MemberSignature Language="C#" Value="public abstract Javax.Net.Ssl.ISSLSession Session { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Javax.Net.Ssl.ISSLSession Session" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSession", "()Ljavax/net/ssl/SSLSession;", "GetGetSessionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Net.Ssl.ISSLSession</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <c>SSLSession</c> for this connection.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the <c>SSLSession</c> for this connection. If necessary, a
 handshake will be initiated, in which case this method will block until the handshake
 has been established. If the handshake fails, an invalid session object
 will be returned.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#getSession()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetEnabledCipherSuites">
      <MemberSignature Language="C#" Value="public abstract void SetEnabledCipherSuites (string[] suites);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEnabledCipherSuites(string[] suites) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEnabledCipherSuites", "([Ljava/lang/String;)V", "GetSetEnabledCipherSuites_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="suites" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="suites">the names of the to be enabled cipher suites.</param>
        <summary>Sets the names of the cipher suites to be enabled.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the names of the cipher suites to be enabled.
 Only cipher suites returned by <c><see cref="M:Javax.Net.Ssl.SSLSocket.GetSupportedCipherSuites" /></c> are
 allowed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#setEnabledCipherSuites(java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if one of the cipher suite names is not supported.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetEnabledProtocols">
      <MemberSignature Language="C#" Value="public abstract void SetEnabledProtocols (string[] protocols);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEnabledProtocols(string[] protocols) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEnabledProtocols", "([Ljava/lang/String;)V", "GetSetEnabledProtocols_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocols" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="protocols">the names of the to be enabled protocols.</param>
        <summary>Sets the names of the protocols to be enabled.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the names of the protocols to be enabled. Only
 protocols returned by <c><see cref="M:Javax.Net.Ssl.SSLSocket.GetSupportedProtocols" /></c> are allowed.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#setEnabledProtocols(java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if one of the protocols is not supported.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SSLParameters">
      <MemberSignature Language="C#" Value="public virtual Javax.Net.Ssl.SSLParameters SSLParameters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Javax.Net.Ssl.SSLParameters SSLParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSSLParameters", "()Ljavax/net/ssl/SSLParameters;", "GetGetSSLParametersHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setSSLParameters", "(Ljavax/net/ssl/SSLParameters;)V", "GetSetSSLParameters_Ljavax_net_ssl_SSLParameters_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Net.Ssl.SSLParameters</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a new SSLParameters based on this SSLSocket's current
 cipher suites, protocols, and client authentication settings.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#getSSLParameters()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns a new SSLParameters based on this SSLSocket's current
 cipher suites, protocols, and client authentication settings.</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#setSSLParameters(javax.net.ssl.SSLParameters)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets various SSL handshake parameters based on the SSLParameter
 argument. Specifically, sets the SSLSocket's enabled cipher
 suites if the parameter's cipher suites are non-null. Similarly
 sets the enabled protocols. If the parameters specify the want
 or need for client authentication, those requirements are set
 on the SSLSocket, otherwise both are set to false.</para>
        </remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="StartHandshake">
      <MemberSignature Language="C#" Value="public abstract void StartHandshake ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartHandshake() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startHandshake", "()V", "GetStartHandshakeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts a new SSL handshake on this connection.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Starts a new SSL handshake on this connection.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#startHandshake()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.IOException">if an error occurs.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseClientMode">
      <MemberSignature Language="C#" Value="public abstract bool UseClientMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseClientMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getUseClientMode", "()Z", "GetGetUseClientModeHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setUseClientMode", "(Z)V", "GetSetUseClientMode_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this connection will act in client mode when handshaking.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#getUseClientMode()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns true if this connection will act in client mode when handshaking.
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#setUseClientMode(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets whether this connection should act in client mode when handshaking.</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WantClientAuth">
      <MemberSignature Language="C#" Value="public abstract bool WantClientAuth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WantClientAuth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWantClientAuth", "()Z", "GetGetWantClientAuthHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setWantClientAuth", "(Z)V", "GetSetWantClientAuth_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if the server should request client authentication.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc: Get method documentation">
            <format type="text/html">
              <b>Get method documentation</b>
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#getWantClientAuth()" target="_blank">[Android Documentation]</a>
              <br />
            </format>Returns true if the server should request client authentication. This
 does not apply to sockets in <c><see cref="P:Javax.Net.Ssl.SSLSocket.UseClientMode" /></c>.
</para>
          <para tool="javadoc-to-mdoc: Set method documentation">
            <format type="text/html">
              <b>Set method documentation</b>
              <a href="http://developer.android.com/reference/javax/net/ssl/SSLSocket.html#setWantClientAuth(boolean)" target="_blank">[Android Documentation]</a>
              <br />
            </format>Sets whether the server should request client authentication. Unlike
 <c><see cref="P:Javax.Net.Ssl.SSLSocket.NeedClientAuth" /></c> this won't stop the negotiation if the client
 doesn't authenticate. This does not apply to sockets in <c><see cref="P:Javax.Net.Ssl.SSLSocket.UseClientMode" /></c>.The client authentication is one of:
 <list type="bullet"><item><term>authentication required</term></item><item><term>authentication requested</term></item><item><term>no authentication needed</term></item></list>
 This method overrides the setting of <c><see cref="P:Javax.Net.Ssl.SSLSocket.NeedClientAuth" /></c>.
</para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
