<Type Name="HttpsURLConnection" FullName="Javax.Net.Ssl.HttpsURLConnection">
  <TypeSignature Language="C#" Value="public abstract class HttpsURLConnection : Java.Net.HttpURLConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit HttpsURLConnection extends Java.Net.HttpURLConnection" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Net.HttpURLConnection</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("javax/net/ssl/HttpsURLConnection", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An <c><see cref="T:Java.Net.HttpURLConnection" /></c> for HTTPS ().</summary>
    <remarks><para tool="javadoc-to-mdoc">An <c><see cref="T:Java.Net.HttpURLConnection" /></c> for HTTPS (). A
 connected <c>HttpsURLConnection</c> allows access to the
 negotiated cipher suite, the server certificate chain, and the
 client certificate chain if any.

 <format type="text/html"><h3>Providing an application specific X509TrustManager</h3></format>

 If an application wants to trust Certificate Authority (CA)
 certificates that are not part of the system, it should specify its
 own <c>X509TrustManager</c> via a <c>SSLSocketFactory</c> set on
 the <c>HttpsURLConnection</c>. The <c>X509TrustManager</c> can be
 created based on a <c>KeyStore</c> using a <c>TrustManagerFactory</c> to supply trusted CA certificates. Note that
 self-signed certificates are effectively their own CA and can be
 trusted by including them in a <c>KeyStore</c>.

 </para><para tool="javadoc-to-mdoc">For example, to trust a set of certificates specified by a <c>KeyStore</c>:
 <example><code lang="java">KeyStore keyStore = ...;
   String algorithm = TrustManagerFactory.getDefaultAlgorithm();
   TrustManagerFactory tmf = TrustManagerFactory.getInstance(algorithm);
   tmf.init(keyStore);

   SSLContext context = SSLContext.getInstance("TLS");
   context.init(null, tmf.getTrustManagers(), null);

   URL url = new URL("https://www.example.com/");
   HttpsURLConnection urlConnection = (HttpsURLConnection) url.openConnection();
   urlConnection.setSSLSocketFactory(context.getSocketFactory());
   InputStream in = urlConnection.getInputStream();
 </code></example></para><para tool="javadoc-to-mdoc">It is possible to implement <c>X509TrustManager</c> directly
 instead of using one created by a <c>TrustManagerFactory</c>. While this is straightforward in the insecure
 case of allowing all certificate chains to pass verification,
 writing a proper implementation will usually want to take advantage
 of <c><see cref="T:Java.Security.Cert.CertPathValidator" /></c>. In general, it might be better to write a
 custom <c>KeyStore</c> implementation to pass to the <c>TrustManagerFactory</c> than to try and write a custom <c>X509TrustManager</c>.

 <format type="text/html"><h3>Providing an application specific X509KeyManager</h3></format>

 A custom <c>X509KeyManager</c> can be used to supply a client
 certificate and its associated private key to authenticate a
 connection to the server. The <c>X509KeyManager</c> can be created
 based on a <c>KeyStore</c> using a <c>KeyManagerFactory</c>.

 </para><para tool="javadoc-to-mdoc">For example, to supply client certificates from a <c>KeyStore</c>:
 <example><code lang="java">KeyStore keyStore = ...;
   String algorithm = KeyManagerFactory.getDefaultAlgorithm();
   KeyManagerFactory kmf = KeyManagerFactory.getInstance(algorithm);
   kmf.init(keyStore);

   SSLContext context = SSLContext.getInstance("TLS");
   context.init(kmf.getKeyManagers(), null, null);

   URL url = new URL("https://www.example.com/");
   HttpsURLConnection urlConnection = (HttpsURLConnection) url.openConnection();
   urlConnection.setSSLSocketFactory(context.getSocketFactory());
   InputStream in = urlConnection.getInputStream();
 </code></example></para><para tool="javadoc-to-mdoc">A <c>X509KeyManager</c> can also be implemented directly. This
 can allow an application to return a certificate and private key
 from a non-<c>KeyStore</c> source or to specify its own logic for
 selecting a specific credential to use when many may be present in
 a single <c>KeyStore</c>.

 <format type="text/html"><h3>TLS Intolerance Support</h3></format>

 This class attempts to create secure connections using common TLS
 extensions and SSL deflate compression. Should that fail, the
 connection will be retried with SSLv3 only.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpsURLConnection (Java.Net.URL url);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Java.Net.URL url) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Ljava/net/URL;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="url" Type="Java.Net.URL" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <summary>Creates a new <c>HttpsURLConnection</c> with the specified <c>URL</c>.</summary>
        <remarks><para tool="javadoc-to-mdoc">Creates a new <c>HttpsURLConnection</c> with the specified <c>URL</c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html#HttpsURLConnection(java.net.URL)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpsURLConnection (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CipherSuite">
      <MemberSignature Language="C#" Value="public abstract string CipherSuite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CipherSuite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCipherSuite", "()Ljava/lang/String;", "GetGetCipherSuiteHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the name of the cipher suite negotiated during the SSL handshake.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Returns the name of the cipher suite negotiated during the SSL handshake.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html#getCipherSuite()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if no connection has been established yet.
</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultHostnameVerifier">
      <MemberSignature Language="C#" Value="public static Javax.Net.Ssl.IHostnameVerifier DefaultHostnameVerifier { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class Javax.Net.Ssl.IHostnameVerifier DefaultHostnameVerifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDefaultHostnameVerifier", "()Ljavax/net/ssl/HostnameVerifier;", "GetGetDefaultHostnameVerifierHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setDefaultHostnameVerifier", "(Ljavax/net/ssl/HostnameVerifier;)V", "GetSetDefaultHostnameVerifier_Ljavax_net_ssl_HostnameVerifier_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Net.Ssl.IHostnameVerifier</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the default hostname verifier.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html#getDefaultHostnameVerifier()" target="_blank">[Android Documentation]</a><br /></format>Returns the default hostname verifier.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html#setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)" target="_blank">[Android Documentation]</a><br /></format>Sets the default hostname verifier to be used by new instances.</para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified verifier is <c>null</c>.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified verifier is <c>null</c>.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified verifier is <c>null</c>.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified verifier is <c>null</c>.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified verifier is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultSSLSocketFactory">
      <MemberSignature Language="C#" Value="public static Javax.Net.Ssl.SSLSocketFactory DefaultSSLSocketFactory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class Javax.Net.Ssl.SSLSocketFactory DefaultSSLSocketFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDefaultSSLSocketFactory", "()Ljavax/net/ssl/SSLSocketFactory;", "GetGetDefaultSSLSocketFactoryHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setDefaultSSLSocketFactory", "(Ljavax/net/ssl/SSLSocketFactory;)V", "GetSetDefaultSSLSocketFactory_Ljavax_net_ssl_SSLSocketFactory_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Net.Ssl.SSLSocketFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the default SSL socket factory for new instances.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html#getDefaultSSLSocketFactory()" target="_blank">[Android Documentation]</a><br /></format>Returns the default SSL socket factory for new instances.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html#setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)" target="_blank">[Android Documentation]</a><br /></format>Sets the default SSL socket factory to be used by new instances.</para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified socket factory is <c>null</c>.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified socket factory is <c>null</c>.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified socket factory is <c>null</c>.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified socket factory is <c>null</c>.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified socket factory is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetLocalCertificates">
      <MemberSignature Language="C#" Value="public abstract Java.Security.Cert.Certificate[] GetLocalCertificates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Security.Cert.Certificate[] GetLocalCertificates() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getLocalCertificates", "()[Ljava/security/cert/Certificate;", "GetGetLocalCertificatesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Security.Cert.Certificate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the list of local certificates used during the handshake.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns the list of local certificates used during the handshake. These
 certificates were sent to the peer.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html#getLocalCertificates()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if no connection has been established yet.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetServerCertificates">
      <MemberSignature Language="C#" Value="public abstract Java.Security.Cert.Certificate[] GetServerCertificates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Security.Cert.Certificate[] GetServerCertificates() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getServerCertificates", "()[Ljava/security/cert/Certificate;", "GetGetServerCertificatesHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Security.Cert.Certificate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Return the list of certificates identifying the peer during the
 handshake.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Return the list of certificates identifying the peer during the
 handshake.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html#getServerCertificates()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Javax.Net.Ssl.SSLPeerUnverifiedException">if the identity of the peer has not been verified..</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if no connection has been established yet.
</exception>
      </Docs>
    </Member>
    <Member MemberName="HostnameVerifier">
      <MemberSignature Language="C#" Value="public virtual Javax.Net.Ssl.IHostnameVerifier HostnameVerifier { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Javax.Net.Ssl.IHostnameVerifier HostnameVerifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getHostnameVerifier", "()Ljavax/net/ssl/HostnameVerifier;", "GetGetHostnameVerifierHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setHostnameVerifier", "(Ljavax/net/ssl/HostnameVerifier;)V", "GetSetHostnameVerifier_Ljavax_net_ssl_HostnameVerifier_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Net.Ssl.IHostnameVerifier</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the hostname verifier used by this instance.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html#getHostnameVerifier()" target="_blank">[Android Documentation]</a><br /></format>Returns the hostname verifier used by this instance.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html#setHostnameVerifier(javax.net.ssl.HostnameVerifier)" target="_blank">[Android Documentation]</a><br /></format>Sets the hostname verifier for this instance.</para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified verifier is <c>null</c>.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified verifier is <c>null</c>.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified verifier is <c>null</c>.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified verifier is <c>null</c>.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified verifier is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="LocalPrincipal">
      <MemberSignature Language="C#" Value="public virtual Java.Security.IPrincipal LocalPrincipal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Security.IPrincipal LocalPrincipal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getLocalPrincipal", "()Ljava/security/Principal;", "GetGetLocalPrincipalHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Security.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <c>Principal</c> used to identify the local host during the handshake.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Returns the <c>Principal</c> used to identify the local host during the handshake.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html#getLocalPrincipal()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if no connection has been established yet.
</exception>
      </Docs>
    </Member>
    <Member MemberName="PeerPrincipal">
      <MemberSignature Language="C#" Value="public virtual Java.Security.IPrincipal PeerPrincipal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Security.IPrincipal PeerPrincipal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getPeerPrincipal", "()Ljava/security/Principal;", "GetGetPeerPrincipalHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Security.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <c>Principal</c> identifying the peer.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Returns the <c>Principal</c> identifying the peer.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html#getPeerPrincipal()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Javax.Net.Ssl.SSLPeerUnverifiedException">if the identity of the peer has not been verified.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if no connection has been established yet.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SSLSocketFactory">
      <MemberSignature Language="C#" Value="public virtual Javax.Net.Ssl.SSLSocketFactory SSLSocketFactory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Javax.Net.Ssl.SSLSocketFactory SSLSocketFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSSLSocketFactory", "()Ljavax/net/ssl/SSLSocketFactory;", "GetGetSSLSocketFactoryHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setSSLSocketFactory", "(Ljavax/net/ssl/SSLSocketFactory;)V", "GetSetSSLSocketFactory_Ljavax_net_ssl_SSLSocketFactory_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Net.Ssl.SSLSocketFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the SSL socket factory used by this instance.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc: Get method documentation"><format type="text/html"><b>Get method documentation</b> <a href="http://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html#getSSLSocketFactory()" target="_blank">[Android Documentation]</a><br /></format>Returns the SSL socket factory used by this instance.</para><para tool="javadoc-to-mdoc: Set method documentation"><format type="text/html"><b>Set method documentation</b> <a href="http://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html#setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)" target="_blank">[Android Documentation]</a><br /></format>Sets the SSL socket factory for this instance.</para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified socket factory is <c>null</c>.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified socket factory is <c>null</c>.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified socket factory is <c>null</c>.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified socket factory is <c>null</c>.
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the specified socket factory is <c>null</c>.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
