<Type Name="AccessibilityNodeProvider" FullName="Android.Views.Accessibility.AccessibilityNodeProvider">
  <TypeSignature Language="C#" Value="public abstract class AccessibilityNodeProvider : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit AccessibilityNodeProvider extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/accessibility/AccessibilityNodeProvider", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>This class is the contract a client should implement to enable support of a
 virtual view hierarchy rooted at a given view for accessibility purposes.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">This class is the contract a client should implement to enable support of a
 virtual view hierarchy rooted at a given view for accessibility purposes. A virtual
 view hierarchy is a tree of imaginary Views that is reported as a part of the view
 hierarchy when an <c><see cref="T:Android.AccessibilityServices.AccessibilityService" /></c> explores the window content.
 Since the virtual View tree does not exist this class is responsible for
 managing the <c><see cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" /></c>s describing that tree to accessibility
 services.
 </para>
      <para tool="javadoc-to-mdoc">
 The main use case of these APIs is to enable a custom view that draws complex content,
 for example a monthly calendar grid, to be presented as a tree of logical nodes,
 for example month days each containing events, thus conveying its logical structure.
 </para>
      <para tool="javadoc-to-mdoc">
        <sample external-id="7B87FA08492BFD92ED783F292AA642E8" />
      </para>
      <para tool="javadoc-to-mdoc">
 A typical use case is to override <c><see cref="P:Android.Views.View.AccessibilityNodeProvider" /></c> of the
 View that is a root of a virtual View hierarchy to return an instance of this class.
 In such a case this instance is responsible for managing <c><see cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" /></c>s
 describing the virtual sub-tree rooted at the View including the one representing the
 View itself. Similarly the returned instance is responsible for performing accessibility
 actions on any virtual view or the root view itself. For example:
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/view/accessibility/AccessibilityNodeProvider.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 16" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessibilityNodeProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/accessibility/AccessibilityNodeProvider.html#AccessibilityNodeProvider()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AccessibilityNodeProvider (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityNodeInfo">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Accessibility.AccessibilityNodeInfo CreateAccessibilityNodeInfo (int virtualViewId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.Accessibility.AccessibilityNodeInfo CreateAccessibilityNodeInfo(int32 virtualViewId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createAccessibilityNodeInfo", "(I)Landroid/view/accessibility/AccessibilityNodeInfo;", "GetCreateAccessibilityNodeInfo_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Accessibility.AccessibilityNodeInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualViewId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="virtualViewId">A client defined virtual view id.</param>
        <summary>Returns an <c><see cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" /></c> representing a virtual view,
 i.e. a descendant of the host View, with the given <c>virtualViewId</c>
 or the host View itself if <c>virtualViewId</c> equals to <c><see cref="F:Android.Views.View.NoId" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns an <c><see cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" /></c> representing a virtual view,
 i.e. a descendant of the host View, with the given <c>virtualViewId</c>
 or the host View itself if <c>virtualViewId</c> equals to <c><see cref="F:Android.Views.View.NoId" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 A virtual descendant is an imaginary View that is reported as a part of the view
 hierarchy for accessibility purposes. This enables custom views that draw complex
 content to report them selves as a tree of virtual views, thus conveying their
 logical structure.
 </para>
          <para tool="javadoc-to-mdoc">
 The implementer is responsible for obtaining an accessibility node info from the
 pool of reusable instances and setting the desired properties of the node info
 before returning it.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/accessibility/AccessibilityNodeProvider.html#createAccessibilityNodeInfo(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.View.CreateAccessibilityNodeInfo" />
        <altmember cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" />
      </Docs>
    </Member>
    <Member MemberName="FindAccessibilityNodeInfosByText">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.Views.Accessibility.AccessibilityNodeInfo&gt; FindAccessibilityNodeInfosByText (string text, int virtualViewId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class Android.Views.Accessibility.AccessibilityNodeInfo&gt; FindAccessibilityNodeInfosByText(string text, int32 virtualViewId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("findAccessibilityNodeInfosByText", "(Ljava/lang/String;I)Ljava/util/List;", "GetFindAccessibilityNodeInfosByText_Ljava_lang_String_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.Views.Accessibility.AccessibilityNodeInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="virtualViewId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The searched text.</param>
        <param name="virtualViewId">A client defined virtual view id which defined
     the root of the tree in which to perform the search.</param>
        <summary>Finds <c><see cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" /></c>s by text.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Finds <c><see cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" /></c>s by text. The match is case insensitive
 containment. The search is relative to the virtual view, i.e. a descendant of the
 host View, with the given <c>virtualViewId</c> or the host View itself 
 <c>virtualViewId</c> equals to <c><see cref="F:Android.Views.View.NoId" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/accessibility/AccessibilityNodeProvider.html#findAccessibilityNodeInfosByText(java.lang.String, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.Accessibility.AccessibilityNodeProvider.CreateAccessibilityNodeInfo(System.Int32)" />
        <altmember cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" />
      </Docs>
    </Member>
    <Member MemberName="PerformAction">
      <MemberSignature Language="C#" Value="public virtual bool PerformAction (int virtualViewId, Android.AccessibilityServices.GlobalAction action, Android.OS.Bundle arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformAction(int32 virtualViewId, valuetype Android.AccessibilityServices.GlobalAction action, class Android.OS.Bundle arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("performAction", "(IILandroid/os/Bundle;)Z", "GetPerformAction_IILandroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualViewId" Type="System.Int32" />
        <Parameter Name="action" Type="Android.AccessibilityServices.GlobalAction">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="arguments" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="virtualViewId">A client defined virtual view id.</param>
        <param name="action">The action to perform.</param>
        <param name="arguments">Optional action arguments.</param>
        <summary>Performs an accessibility action on a virtual view, i.e. a descendant of the
 host View, with the given <c>virtualViewId</c> or the host View itself
 if <c>virtualViewId</c> equals to <c><see cref="F:Android.Views.View.NoId" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Performs an accessibility action on a virtual view, i.e. a descendant of the
 host View, with the given <c>virtualViewId</c> or the host View itself
 if <c>virtualViewId</c> equals to <c><see cref="F:Android.Views.View.NoId" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/accessibility/AccessibilityNodeProvider.html#performAction(int, int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <altmember cref="M:Android.Views.View.PerformAccessibilityAction(Android.AccessibilityServices.GlobalAction, Android.OS.Bundle)" />
        <altmember cref="M:Android.Views.Accessibility.AccessibilityNodeProvider.CreateAccessibilityNodeInfo(System.Int32)" />
        <altmember cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
