<Type Name="Telephony" FullName="Android.Provider.Telephony">
  <TypeSignature Language="C#" Value="public sealed class Telephony : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Telephony extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/provider/Telephony", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The Telephony provider contains data related to phone operation, specifically SMS and MMS
 messages and access to the APN list, including the MMSC to use.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">The Telephony provider contains data related to phone operation, specifically SMS and MMS
 messages and access to the APN list, including the MMSC to use.

 </para>
      <para tool="javadoc-to-mdoc">
        <i>Note:</i> These APIs are not available on all Android-powered
 devices. If your app depends on telephony features such as for managing SMS messages, include
 a <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/manifest/uses-feature-element.html">&lt;uses-feature&gt;</a></format> element in your manifest that declares the <c>"android.hardware.telephony"</c> hardware
 feature. Alternatively, you can check for telephony availability at runtime using either
 <c><see cref="M:Android.Content.PM.PackageManager.HasSystemFeature(System.String)" /></c> or <c><see cref="P:Android.Telephony.TelephonyManager.PhoneType" /></c>.</para>
      <format type="text/html">
        <h3>Creating an SMS app</h3>
      </format>
      <para tool="javadoc-to-mdoc">Only the default SMS app (selected by the user in system settings) is able to write to the
 SMS Provider (the tables defined within the <c>Telephony</c> class) and only the default SMS
 app receives the <c><see cref="!:NoType:android/provider/Telephony$Sms$Intents;Href=../../../reference/android/provider/Telephony.Sms.Intents.html#SMS_DELIVER_ACTION" /></c> broadcast
 when the user receives an SMS or the <c><see cref="!:NoType:android/provider/Telephony$Sms$Intents;Href=../../../reference/android/provider/Telephony.Sms.Intents.html#WAP_PUSH_DELIVER_ACTION" /></c> broadcast when the user
 receives an MMS.</para>
      <para tool="javadoc-to-mdoc">Any app that wants to behave as the user's default SMS app must handle the following intents:
 <list type="bullet"><item><term>In a broadcast receiver, include an intent filter for <c><see cref="!:NoType:android/provider/Telephony$Sms$Intents;Href=../../../reference/android/provider/Telephony.Sms.Intents.html#SMS_DELIVER_ACTION" /></c>
 (<c>"android.provider.Telephony.SMS_DELIVER"</c>). The broadcast receiver must also
 require the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#BROADCAST_SMS" /></c> permission.
 </term></item><item><term>In a broadcast receiver, include an intent filter for <c><see cref="!:NoType:android/provider/Telephony$Sms$Intents;Href=../../../reference/android/provider/Telephony.Sms.Intents.html#WAP_PUSH_DELIVER_ACTION" /></c>} (<c>"android.provider.Telephony.WAP_PUSH_DELIVER"</c>)
 with the MIME type <c>"application/vnd.wap.mms-message"</c>.
 The broadcast receiver must also require the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#BROADCAST_WAP_PUSH" /></c> permission.
 </term></item><item><term>In your activity that delivers new messages, include an intent filter for
 <c><see cref="F:Android.Content.Intent.ActionSendto" /></c> (<c>"android.intent.action.SENDTO"
 </c>) with schemas, <c>sms:</c>, <c>smsto:</c>, <c>mms:</c>, and
 <c>mmsto:</c>.
 </term></item><item><term>In a service, include an intent filter for <c><see cref="F:Android.Telephony.TelephonyManager.ActionRespondViaMessage" /></c>
 (<c>"android.intent.action.RESPOND_VIA_MESSAGE"</c>) with schemas,
 <c>sms:</c>, <c>smsto:</c>, <c>mms:</c>, and <c>mmsto:</c>.
 This service must also require the <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#SEND_RESPOND_VIA_MESSAGE" /></c> permission.
 </term></item></list></para>
      <para tool="javadoc-to-mdoc">This allows your app to directly receive incoming SMS messages.</para>
      <para tool="javadoc-to-mdoc">This allows your app to directly receive incoming MMS messages.</para>
      <para tool="javadoc-to-mdoc">This allows your app to receive intents from other apps that want to deliver a
 message.</para>
      <para tool="javadoc-to-mdoc">This allows users to respond to incoming phone calls with an immediate text message
 using your app.</para>
      <para tool="javadoc-to-mdoc">Other apps that are not selected as the default SMS app can only <i>read</i> the SMS
 Provider, but may also be notified when a new SMS arrives by listening for the <c><see cref="!:NoType:android/provider/Telephony$Sms$Intents;Href=../../../reference/android/provider/Telephony.Sms.Intents.html#SMS_RECEIVED_ACTION" /></c>
 broadcast, which is a non-abortable broadcast that may be delivered to multiple apps. This
 broadcast is intended for apps that&amp;mdash;while not selected as the default SMS app&amp;mdash;need to
 read special incoming messages such as to perform phone number verification.</para>
      <para tool="javadoc-to-mdoc">For more information about building SMS apps, read the blog post, .</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/provider/Telephony.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members />
</Type>
