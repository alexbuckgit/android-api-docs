<Type Name="ContactsContract+StreamItems" FullName="Android.Provider.ContactsContract+StreamItems">
  <TypeSignature Language="C#" Value="public sealed class ContactsContract.StreamItems : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit ContactsContract/StreamItems extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/provider/ContactsContract$StreamItems", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("This class is obsoleted in this android platform")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
    </summary>
    <remarks>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">
 Constants for the stream_items table, which contains social stream updates from
 the user's contact list.
 </para>
      <para tool="javadoc-to-mdoc">
 Only a certain number of stream items will ever be stored under a given raw contact.
 Users of this API can query <c><see cref="P:Android.Provider.ContactsContract.StreamItems.ContentLimitUri" /></c> to
 determine this limit, and should restrict the number of items inserted in any given
 transaction correspondingly.  Insertion of more items beyond the limit will
 automatically lead to deletion of the oldest items, by <c><see cref="F:Android.Provider.ContactsContract.StreamItemsColumns.Timestamp" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 Access to the social stream through these URIs requires additional permissions beyond the
 read/write contact permissions required by the provider.  Querying for social stream data
 requires android.permission.READ_SOCIAL_STREAM permission, and inserting or updating social
 stream items requires android.permission.WRITE_SOCIAL_STREAM permission.
 <format type="text/html"><h3>Account check</h3></format></para>
      <para tool="javadoc-to-mdoc">
 The content URIs to the insert, update and delete operations are required to have the account
 information matching that of the owning raw contact as query parameters, namely
 <c><see cref="F:Android.Provider.ContactsContract.SyncColumns.AccountType" /></c> and <c><see cref="F:Android.Provider.ContactsContract.SyncColumns.AccountName" /></c>.
 <c><see cref="F:Android.Provider.ContactsContract.RawContactsColumns.DataSet" /></c> isn't required.
 </para>
      <format type="text/html">
        <h3>Operations</h3>
      </format>
      <format type="text/html">
        <dl>
          <dt>
            <b>Insert</b>
          </dt>
          <dd>Social stream updates are always associated with a raw contact.  There are a couple
 of ways to insert these entries.
 <dl><dt>Via the <c><see cref="F:Android.Provider.ContactsContract.RawContacts.StreamItems.ContentDirectory" /></c> sub-path of a raw contact:</dt><dd><sample external-id="FB2E5C39E24AD19C829C0A94B15CE62D" /></dd><dt>Via <c><see cref="P:Android.Provider.ContactsContract+Contacts.ContentUri" /></c>:</dt><dd><sample external-id="863819C0885BAC13999A315F25E82CD9" /></dd></dl></dd>
        </dl>
      </format>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">
        <dt>
          <b>Update</b>
        </dt>
        <dd>Updates can be performed by appending the stream item ID to the
 <c><see cref="P:Android.Provider.ContactsContract+Contacts.ContentUri" /></c> URI.  Only social stream entries that were
 created by the calling package can be updated.</dd>
        <dt>
          <b>Delete</b>
        </dt>
        <dd>Deletes can be performed by appending the stream item ID to the
 <c><see cref="P:Android.Provider.ContactsContract+Contacts.ContentUri" /></c> URI.  Only social stream entries that were
 created by the calling package can be deleted.</dd>
        <dt>
          <b>Query</b>
        </dt>
        <dl>
          <dt>Finding all social stream updates for a given contact</dt>
          <dd>By Contact ID:
 <example><code lang="java">
 Cursor c = getContentResolver().query(Uri.withAppendedPath(
          ContentUris.withAppendedId(Contacts.CONTENT_URI, contactId),
          Contacts.StreamItems.CONTENT_DIRECTORY),
          null, null, null, null);
 </code></example></dd>
          <dd>By lookup key:
 <example><code lang="java">
 Cursor c = getContentResolver().query(Contacts.CONTENT_URI.buildUpon()
          .appendPath(lookupKey)
          .appendPath(Contacts.StreamItems.CONTENT_DIRECTORY).build(),
          null, null, null, null);
 </code></example></dd>
          <dt>Finding all social stream updates for a given raw contact</dt>
          <dd>
            <example>
              <code lang="java">
 Cursor c = getContentResolver().query(Uri.withAppendedPath(
          ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId),
          RawContacts.StreamItems.CONTENT_DIRECTORY)),
          null, null, null, null);
 </code>
            </example>
          </dd>
          <dt>Querying for a specific stream item by ID</dt>
          <dd>
            <example>
              <code lang="java">
 Cursor c = getContentResolver().query(ContentUris.withAppendedId(
          StreamItems.CONTENT_URI, streamItemId),
          null, null, null, null);
 </code>
            </example>
          </dd>
        </dl>
      </para>
      <para tool="javadoc-to-mdoc">
 Once a <c><see cref="T:Android.Provider.ContactsContract+Contacts+StreamItems" /></c> entry has been inserted, photos associated with that
 social update can be inserted.  For example, after one of the insertions above,
 photos could be added to the stream item in one of the following ways:
 <dl><dt>Via a URI including the stream item ID:</dt><dd><example><code lang="java">
 values.clear();
 values.put(StreamItemPhotos.SORT_INDEX, 1);
 values.put(StreamItemPhotos.PHOTO, photoData);
 getContentResolver().insert(Uri.withAppendedPath(
     ContentUris.withAppendedId(StreamItems.CONTENT_URI, streamItemId),
     StreamItems.StreamItemPhotos.CONTENT_DIRECTORY), values);
 </code></example></dd><dt>Via <c><see cref="P:Android.Provider.ContactsContract.StreamItems.ContentPhotoUri" /></c>:</dt><dd><example><code lang="java">
 values.clear();
 values.put(StreamItemPhotos.STREAM_ITEM_ID, streamItemId);
 values.put(StreamItemPhotos.SORT_INDEX, 1);
 values.put(StreamItemPhotos.PHOTO, photoData);
 getContentResolver().insert(StreamItems.CONTENT_PHOTO_URI, values);
 </code></example>Note that this latter form allows the insertion of a stream item and its
 photos in a single transaction, by using <c><see cref="T:Android.Content.ContentProviderOperation" /></c> with
 back references to populate the stream item ID in the <c><see cref="T:Android.Content.ContentValues" /></c>.
 </dd></dl></para>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/provider/ContactsContract.StreamItems.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 15" />
  </Docs>
  <Members>
    <Member MemberName="ContentItemType">
      <MemberSignature Language="C#" Value="public const string ContentItemType;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ContentItemType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONTENT_ITEM_TYPE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The MIME type of a single stream item.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The MIME type of a single stream item.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/ContactsContract.StreamItems.html#CONTENT_ITEM_TYPE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 15" />
      </Docs>
    </Member>
    <Member MemberName="ContentLimitUri">
      <MemberSignature Language="C#" Value="public static Android.Net.Uri ContentLimitUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Net.Uri ContentLimitUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONTENT_LIMIT_URI")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This URI allows the caller to query for the maximum number of stream items
 that will be stored under any single raw contact.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This URI allows the caller to query for the maximum number of stream items
 that will be stored under any single raw contact.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/ContactsContract.StreamItems.html#CONTENT_LIMIT_URI" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 15" />
      </Docs>
    </Member>
    <Member MemberName="ContentPhotoUri">
      <MemberSignature Language="C#" Value="public static Android.Net.Uri ContentPhotoUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Net.Uri ContentPhotoUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONTENT_PHOTO_URI")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
 A content:// style URI for the photos stored in a sub-table underneath
 stream items.  This is only used for inserts, and updates - queries and deletes
 for photos should be performed by appending
 <c><see cref="F:Android.Provider.ContactsContract.StreamItems.StreamItemPhotos.ContentDirectory" /></c> path to URIs for a
 specific stream item.
 </para>
          <para tool="javadoc-to-mdoc">
 When using this URI, the stream item ID for the photo(s) must be identified
 in the <c><see cref="T:Android.Content.ContentValues" /></c> passed in.
 </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/ContactsContract.StreamItems.html#CONTENT_PHOTO_URI" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 15" />
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public const string ContentType;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ContentType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONTENT_TYPE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The MIME type of a directory of stream items.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The MIME type of a directory of stream items.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/ContactsContract.StreamItems.html#CONTENT_TYPE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 15" />
      </Docs>
    </Member>
    <Member MemberName="ContentUri">
      <MemberSignature Language="C#" Value="public static Android.Net.Uri ContentUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Net.Uri ContentUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONTENT_URI")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The content:// style URI for this table, which handles social network stream
 updates for the user's contacts.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">The content:// style URI for this table, which handles social network stream
 updates for the user's contacts.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/ContactsContract.StreamItems.html#CONTENT_URI" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 15" />
      </Docs>
    </Member>
    <Member MemberName="MaxItems">
      <MemberSignature Language="C#" Value="public const string MaxItems;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MaxItems" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MAX_ITEMS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Queries to <c><see cref="P:Android.Provider.ContactsContract.StreamItems.ContentLimitUri" /></c> will
 contain this column, with the value indicating the maximum number of
 stream items that will be stored under any single raw contact.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Queries to <c><see cref="P:Android.Provider.ContactsContract.StreamItems.ContentLimitUri" /></c> will
 contain this column, with the value indicating the maximum number of
 stream items that will be stored under any single raw contact.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/ContactsContract.StreamItems.html#MAX_ITEMS" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 15" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>