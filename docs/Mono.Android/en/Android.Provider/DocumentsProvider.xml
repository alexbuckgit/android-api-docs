<Type Name="DocumentsProvider" FullName="Android.Provider.DocumentsProvider">
  <TypeSignature Language="C#" Value="public abstract class DocumentsProvider : Android.Content.ContentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DocumentsProvider extends Android.Content.ContentProvider" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Content.ContentProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/provider/DocumentsProvider", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="19">
    <summary>Base class for a document provider.</summary>
    <remarks />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DocumentsProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DocumentsProvider (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CreateDocument">
      <MemberSignature Language="C#" Value="public virtual string CreateDocument (string parentDocumentId, string mimeType, string displayName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateDocument(string parentDocumentId, string mimeType, string displayName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createDocument", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "GetCreateDocument_Ljava_lang_String_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentDocumentId" Type="System.String" />
        <Parameter Name="mimeType" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parentDocumentId">the parent directory to create the new document
            under.</param>
        <param name="mimeType">the concrete MIME type associated with the new document.
            If the MIME type is not supported, the provider must throw.</param>
        <param name="displayName">the display name of the new document. The provider may
            alter this name to meet any internal constraints, such as
            avoiding conflicting names.
</param>
        <summary>Create a new document and return its newly generated
 <c><see cref="T:Android.Provider.DocumentsContract+Document" tool="ReplaceLinkValue" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
      </Docs>
      <since version="Added in API level 19" />
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public override sealed int Delete (Android.Net.Uri uri, string selection, string[] selectionArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Delete(class Android.Net.Uri uri, string selection, string[] selectionArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("delete", "(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="uri">The full URI to query, including a row ID (if a specific record is requested).</param>
        <param name="selection">An optional restriction to apply to rows when deleting.</param>
        <param name="selectionArgs">To be added.</param>
        <summary>Implementation is provided by the parent class.</summary>
        <returns>To be added.</returns>
        <remarks />
        <altmember cref="M:Android.Provider.DocumentsProvider.DeleteDocument(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteDocument">
      <MemberSignature Language="C#" Value="public virtual void DeleteDocument (string documentId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteDocument(string documentId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("deleteDocument", "(Ljava/lang/String;)V", "GetDeleteDocument_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="documentId">the document to delete.
</param>
        <summary>Delete the requested document.</summary>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="GetDocumentType">
      <MemberSignature Language="C#" Value="public virtual string GetDocumentType (string documentId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetDocumentType(string documentId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getDocumentType", "(Ljava/lang/String;)Ljava/lang/String;", "GetGetDocumentType_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="documentId">To be added.</param>
        <summary>Return concrete MIME type of the requested document.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public override sealed string GetType (Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetType(class Android.Net.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getType", "(Landroid/net/Uri;)Ljava/lang/String;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">the URI to query.</param>
        <summary>Implementation is provided by the parent class.</summary>
        <returns>To be added.</returns>
        <remarks />
        <altmember cref="M:Android.Provider.DocumentsProvider.GetDocumentType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public override sealed Android.Net.Uri Insert (Android.Net.Uri uri, Android.Content.ContentValues values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Net.Uri Insert(class Android.Net.Uri uri, class Android.Content.ContentValues values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("insert", "(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="values" Type="Android.Content.ContentValues" />
      </Parameters>
      <Docs>
        <param name="uri">The content:// URI of the insertion request. This must not be <c>null</c>.</param>
        <param name="values">A set of column_name/value pairs to add to the database.
     This must not be <c>null</c>.</param>
        <summary>Implementation is provided by the parent class.</summary>
        <returns>To be added.</returns>
        <remarks />
        <altmember cref="M:Android.Provider.DocumentsProvider.CreateDocument(System.String, System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsChildDocument">
      <MemberSignature Language="C#" Value="public virtual bool IsChildDocument (string parentDocumentId, string documentId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsChildDocument(string parentDocumentId, string documentId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isChildDocument", "(Ljava/lang/String;Ljava/lang/String;)Z", "GetIsChildDocument_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentDocumentId" Type="System.String" />
        <Parameter Name="documentId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parentDocumentId">parent to verify against.</param>
        <param name="documentId">child to verify.</param>
        <summary>Test if a document is descendant (child, grandchild, etc) from the given
 parent.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="OpenAssetFile">
      <MemberSignature Language="C#" Value="public override sealed Android.Content.Res.AssetFileDescriptor OpenAssetFile (Android.Net.Uri uri, string mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Content.Res.AssetFileDescriptor OpenAssetFile(class Android.Net.Uri uri, string mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openAssetFile", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose file is to be opened.</param>
        <param name="mode">Access mode for the file.  May be "r" for read-only access,
 "w" for write-only access (erasing whatever data is currently in
 the file), "wa" for write-only access to append to any existing data,
 "rw" for read and write access on any existing data, and "rwt" for read
 and write access that truncates any existing file.</param>
        <summary>Implementation is provided by the parent class.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
        <altmember cref="M:Android.Provider.DocumentsProvider.OpenDocument(System.String, System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OpenAssetFile">
      <MemberSignature Language="C#" Value="public override sealed Android.Content.Res.AssetFileDescriptor OpenAssetFile (Android.Net.Uri uri, string mode, Android.OS.CancellationSignal signal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Content.Res.AssetFileDescriptor OpenAssetFile(class Android.Net.Uri uri, string mode, class Android.OS.CancellationSignal signal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openAssetFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="signal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose file is to be opened.</param>
        <param name="mode">Access mode for the file.  May be "r" for read-only access,
 "w" for write-only access (erasing whatever data is currently in
 the file), "wa" for write-only access to append to any existing data,
 "rw" for read and write access on any existing data, and "rwt" for read
 and write access that truncates any existing file.</param>
        <param name="signal">A signal to cancel the operation in progress, or
            <c>null</c> if none. For example, if you are downloading a
            file from the network to service a "rw" mode request, you
            should periodically call
            <c><see cref="M:Android.OS.CancellationSignal.ThrowIfCanceled" /></c> to check whether
            the client has canceled the request and abort the download.</param>
        <summary>Implementation is provided by the parent class.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
        <altmember cref="M:Android.Provider.DocumentsProvider.OpenDocument(System.String, System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OpenDocument">
      <MemberSignature Language="C#" Value="public abstract Android.OS.ParcelFileDescriptor OpenDocument (string documentId, string mode, Android.OS.CancellationSignal signal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.ParcelFileDescriptor OpenDocument(string documentId, string mode, class Android.OS.CancellationSignal signal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openDocument", "(Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;", "GetOpenDocument_Ljava_lang_String_Ljava_lang_String_Landroid_os_CancellationSignal_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentId" Type="System.String" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="signal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="documentId">the document to return.</param>
        <param name="mode">the mode to open with, such as 'r', 'w', or 'rw'.</param>
        <param name="signal">used by the caller to signal if the request should be
            cancelled. May be null.</param>
        <summary>Open and return the requested document.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
        <altmember cref="M:Android.OS.ParcelFileDescriptor.Open(Java.IO.File, Android.OS.ParcelFileMode, Android.OS.ParcelFileMode, Android.OS.ParcelFileMode)" />
        <altmember cref="M:Android.OS.ParcelFileDescriptor.CreateReliablePipe" />
        <altmember cref="M:Android.OS.ParcelFileDescriptor.CreateReliableSocketPair" />
        <altmember cref="M:Android.OS.ParcelFileDescriptor.ParseMode(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OpenDocumentThumbnail">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Res.AssetFileDescriptor OpenDocumentThumbnail (string documentId, Android.Graphics.Point sizeHint, Android.OS.CancellationSignal signal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Res.AssetFileDescriptor OpenDocumentThumbnail(string documentId, class Android.Graphics.Point sizeHint, class Android.OS.CancellationSignal signal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openDocumentThumbnail", "(Ljava/lang/String;Landroid/graphics/Point;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;", "GetOpenDocumentThumbnail_Ljava_lang_String_Landroid_graphics_Point_Landroid_os_CancellationSignal_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentId" Type="System.String" />
        <Parameter Name="sizeHint" Type="Android.Graphics.Point" />
        <Parameter Name="signal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="documentId">the document to return.</param>
        <param name="sizeHint">hint of the optimal thumbnail dimensions.</param>
        <param name="signal">used by the caller to signal if the request should be
            cancelled. May be null.</param>
        <summary>Open and return a thumbnail of the requested document.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="OpenFile">
      <MemberSignature Language="C#" Value="public override sealed Android.OS.ParcelFileDescriptor OpenFile (Android.Net.Uri uri, string mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.OS.ParcelFileDescriptor OpenFile(class Android.Net.Uri uri, string mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openFile", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose file is to be opened.</param>
        <param name="mode">Access mode for the file.  May be "r" for read-only access,
 "rw" for read and write access, or "rwt" for read and write access
 that truncates any existing file.</param>
        <summary>Implementation is provided by the parent class.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
        <altmember cref="M:Android.Provider.DocumentsProvider.OpenDocument(System.String, System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OpenFile">
      <MemberSignature Language="C#" Value="public override sealed Android.OS.ParcelFileDescriptor OpenFile (Android.Net.Uri uri, string mode, Android.OS.CancellationSignal signal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.OS.ParcelFileDescriptor OpenFile(class Android.Net.Uri uri, string mode, class Android.OS.CancellationSignal signal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="signal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose file is to be opened.</param>
        <param name="mode">Access mode for the file. May be "r" for read-only access,
            "w" for write-only access, "rw" for read and write access, or
            "rwt" for read and write access that truncates any existing
            file.</param>
        <param name="signal">A signal to cancel the operation in progress, or
            <c>null</c> if none. For example, if you are downloading a
            file from the network to service a "rw" mode request, you
            should periodically call
            <c><see cref="M:Android.OS.CancellationSignal.ThrowIfCanceled" /></c> to check whether
            the client has canceled the request and abort the download.</param>
        <summary>Implementation is provided by the parent class.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
        <altmember cref="M:Android.Provider.DocumentsProvider.OpenDocument(System.String, System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OpenTypedAssetFile">
      <MemberSignature Language="C#" Value="public override sealed Android.Content.Res.AssetFileDescriptor OpenTypedAssetFile (Android.Net.Uri uri, string mimeTypeFilter, Android.OS.Bundle opts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Content.Res.AssetFileDescriptor OpenTypedAssetFile(class Android.Net.Uri uri, string mimeTypeFilter, class Android.OS.Bundle opts) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openTypedAssetFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/res/AssetFileDescriptor;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeTypeFilter" Type="System.String" />
        <Parameter Name="opts" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="uri">The data in the content provider being queried.</param>
        <param name="mimeTypeFilter">The type of data the client desires.  May be
 a pattern, such as *&amp;#47;*, if the caller does not have specific type
 requirements; in this case the content provider will pick its best
 type matching the pattern.</param>
        <param name="opts">Additional options from the client.  The definitions of
 these are specific to the content provider being called.</param>
        <summary>Implementation is provided by the parent class.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
        <altmember cref="M:Android.Provider.DocumentsProvider.OpenDocumentThumbnail(System.String, Android.Graphics.Point, Android.Graphics.Point)" />
      </Docs>
    </Member>
    <Member MemberName="OpenTypedAssetFile">
      <MemberSignature Language="C#" Value="public override sealed Android.Content.Res.AssetFileDescriptor OpenTypedAssetFile (Android.Net.Uri uri, string mimeTypeFilter, Android.OS.Bundle opts, Android.OS.CancellationSignal signal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Content.Res.AssetFileDescriptor OpenTypedAssetFile(class Android.Net.Uri uri, string mimeTypeFilter, class Android.OS.Bundle opts, class Android.OS.CancellationSignal signal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openTypedAssetFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeTypeFilter" Type="System.String" />
        <Parameter Name="opts" Type="Android.OS.Bundle" />
        <Parameter Name="signal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The data in the content provider being queried.</param>
        <param name="mimeTypeFilter">The type of data the client desires.  May be
 a pattern, such as *&amp;#47;*, if the caller does not have specific type
 requirements; in this case the content provider will pick its best
 type matching the pattern.</param>
        <param name="opts">Additional options from the client.  The definitions of
 these are specific to the content provider being called.</param>
        <param name="signal">A signal to cancel the operation in progress, or
            <c>null</c> if none. For example, if you are downloading a
            file from the network to service a "rw" mode request, you
            should periodically call
            <c><see cref="M:Android.OS.CancellationSignal.ThrowIfCanceled" /></c> to check whether
            the client has canceled the request and abort the download.</param>
        <summary>Implementation is provided by the parent class.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
        <altmember cref="M:Android.Provider.DocumentsProvider.OpenDocumentThumbnail(System.String, Android.Graphics.Point, Android.Graphics.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public override sealed Android.Database.ICursor Query (Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Database.ICursor Query(class Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("query", "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="projection" Type="System.String[]" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="sortOrder" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to query. This will be the full URI sent by the client;
      if the client is requesting a specific record, the URI will end in a record number
      that the implementation should parse and add to a WHERE or HAVING clause, specifying
      that _id value.</param>
        <param name="projection">The list of columns to put into the cursor. If
      <c>null</c> all columns are included.</param>
        <param name="selection">A selection criteria to apply when filtering rows.
      If <c>null</c> then all rows are included.</param>
        <param name="selectionArgs">You may include ?s in selection, which will be replaced by
      the values from selectionArgs, in order that they appear in the selection.
      The values will be bound as Strings.</param>
        <param name="sortOrder">How the rows in the cursor should be sorted.
      If <c>null</c> then the provider is free to define the sort order.</param>
        <summary>Implementation is provided by the parent class.</summary>
        <returns>To be added.</returns>
        <remarks />
        <altmember cref="M:Android.Provider.DocumentsProvider.QueryRoots(System.String[])" />
        <altmember cref="M:Android.Provider.DocumentsProvider.QueryRecentDocuments(System.String, System.String[])" />
        <altmember cref="M:Android.Provider.DocumentsProvider.QueryDocument(System.String, System.String[])" />
        <altmember cref="M:Android.Provider.DocumentsProvider.QueryChildDocuments(System.String, System.String[], System.String[])" />
        <altmember cref="M:Android.Provider.DocumentsProvider.QuerySearchDocuments(System.String, System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="QueryChildDocuments">
      <MemberSignature Language="C#" Value="public abstract Android.Database.ICursor QueryChildDocuments (string parentDocumentId, string[] projection, string sortOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor QueryChildDocuments(string parentDocumentId, string[] projection, string sortOrder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queryChildDocuments", "(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;", "GetQueryChildDocuments_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentDocumentId" Type="System.String" />
        <Parameter Name="projection" Type="System.String[]" />
        <Parameter Name="sortOrder" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parentDocumentId">the directory to return children for.</param>
        <param name="projection">list of <c><see cref="T:Android.Provider.DocumentsContract+Document" tool="ReplaceLinkValue" /></c> columns to put into the
            cursor. If <c>null</c> all supported columns should be
            included.</param>
        <param name="sortOrder">how to order the rows, formatted as an SQL
            <c>ORDER BY</c> clause (excluding the ORDER BY itself).
            Passing <c>null</c> will use the default sort order, which
            may be unordered. This ordering is a hint that can be used to
            prioritize how data is fetched from the network, but UI may
            always enforce a specific ordering.</param>
        <summary>Return the children documents contained in the requested directory.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
        <altmember cref="F:Android.Provider.DocumentsContract.ExtraLoading" />
        <altmember cref="F:Android.Provider.DocumentsContract.ExtraInfo" />
        <altmember cref="F:Android.Provider.DocumentsContract.ExtraError" />
      </Docs>
    </Member>
    <Member MemberName="QueryDocument">
      <MemberSignature Language="C#" Value="public abstract Android.Database.ICursor QueryDocument (string documentId, string[] projection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor QueryDocument(string documentId, string[] projection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queryDocument", "(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;", "GetQueryDocument_Ljava_lang_String_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentId" Type="System.String" />
        <Parameter Name="projection" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="documentId">the document to return.</param>
        <param name="projection">list of <c><see cref="T:Android.Provider.DocumentsContract+Document" tool="ReplaceLinkValue" /></c> columns to put into the
            cursor. If <c>null</c> all supported columns should be
            included.
</param>
        <summary>Return metadata for the single requested document.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="QueryRecentDocuments">
      <MemberSignature Language="C#" Value="public virtual Android.Database.ICursor QueryRecentDocuments (string rootId, string[] projection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor QueryRecentDocuments(string rootId, string[] projection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queryRecentDocuments", "(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;", "GetQueryRecentDocuments_Ljava_lang_String_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootId" Type="System.String" />
        <Parameter Name="projection" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="rootId">To be added.</param>
        <param name="projection">list of <c><see cref="T:Android.Provider.DocumentsContract+Document" tool="ReplaceLinkValue" /></c> columns to put into the
            cursor. If <c>null</c> all supported columns should be
            included.</param>
        <summary>Return recently modified documents under the requested root.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
        <altmember cref="F:Android.Provider.DocumentsContract.ExtraLoading" />
      </Docs>
    </Member>
    <Member MemberName="QueryRoots">
      <MemberSignature Language="C#" Value="public abstract Android.Database.ICursor QueryRoots (string[] projection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor QueryRoots(string[] projection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queryRoots", "([Ljava/lang/String;)Landroid/database/Cursor;", "GetQueryRoots_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projection" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="projection">list of <c><see cref="!:NoType:android/provider/DocumentsContract$Root;Href=../../../reference/android/provider/DocumentsContract.Root.html" /></c> columns to put into the cursor. If
            <c>null</c> all supported columns should be included.
</param>
        <summary>Return all roots currently provided.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="QuerySearchDocuments">
      <MemberSignature Language="C#" Value="public virtual Android.Database.ICursor QuerySearchDocuments (string rootId, string query, string[] projection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor QuerySearchDocuments(string rootId, string query, string[] projection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("querySearchDocuments", "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;", "GetQuerySearchDocuments_Ljava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootId" Type="System.String" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="projection" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="rootId">the root to search under.</param>
        <param name="query">string to match documents against.</param>
        <param name="projection">list of <c><see cref="T:Android.Provider.DocumentsContract+Document" tool="ReplaceLinkValue" /></c> columns to put into the
            cursor. If <c>null</c> all supported columns should be
            included.</param>
        <summary>Return documents that match the given query under the requested
 root.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
        <altmember cref="F:Android.Provider.DocumentsContract.ExtraLoading" />
        <altmember cref="F:Android.Provider.DocumentsContract.ExtraInfo" />
        <altmember cref="F:Android.Provider.DocumentsContract.ExtraError" />
      </Docs>
    </Member>
    <Member MemberName="RenameDocument">
      <MemberSignature Language="C#" Value="public virtual string RenameDocument (string documentId, string displayName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string RenameDocument(string documentId, string displayName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("renameDocument", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "GetRenameDocument_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentId" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="documentId">the document to rename.</param>
        <param name="displayName">the updated display name of the document. The provider
            may alter this name to meet any internal constraints, such as
            avoiding conflicting names.
</param>
        <summary>Rename an existing document.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="RevokeDocumentPermission">
      <MemberSignature Language="C#" Value="public void RevokeDocumentPermission (string documentId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RevokeDocumentPermission(string documentId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("revokeDocumentPermission", "(Ljava/lang/String;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="documentId">To be added.</param>
        <summary>Revoke any active permission grants for the given
 <c><see cref="T:Android.Provider.DocumentsContract+Document" tool="ReplaceLinkValue" /></c>, usually called when a document
 becomes invalid.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override sealed int Update (Android.Net.Uri uri, Android.Content.ContentValues values, string selection, string[] selectionArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Update(class Android.Net.Uri uri, class Android.Content.ContentValues values, string selection, string[] selectionArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("update", "(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="values" Type="Android.Content.ContentValues" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to query. This can potentially have a record ID if this
 is an update request for a specific record.</param>
        <param name="values">A set of column_name/value pairs to update in the database.
     This must not be <c>null</c>.</param>
        <param name="selection">An optional filter to match rows to update.</param>
        <param name="selectionArgs">To be added.</param>
        <summary>Implementation is provided by the parent class.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
  </Members>
</Type>
