<Type Name="ContactsContract+StreamItemPhotos" FullName="Android.Provider.ContactsContract+StreamItemPhotos">
  <TypeSignature Language="C#" Value="public sealed class ContactsContract.StreamItemPhotos : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit ContactsContract/StreamItemPhotos extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/provider/ContactsContract$StreamItemPhotos", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <format type="text/html">
        <h3>Account check</h3>
      </format>
      <format type="text/html">
        <h3>Operations</h3>
      </format>
      <format type="text/html">
        <dl>
          <dt>
            <b>Insert</b>
          </dt>
          <dd />
          <dt>
            <b>Update</b>
          </dt>
          <dd />
          <dt>
            <b>Delete</b>
          </dt>
          <dd>Deletes can be made against either a specific photo item in a stream item, or
 against all or a selected subset of photo items under a stream item.
 For example:
 <dl><dt>Deleting a single photo via the
 <c><see cref="F:Android.Provider.ContactsContract.StreamItems.StreamItemPhotos.ContentDirectory" /></c> sub-path of a stream item:
 </dt><dd><sample external-id="2C7B662CD03DCA668BD41ECD3FC454D6" /></dd><dt>Deleting all photos under a stream item</dt><dd><sample external-id="3B73B8D9F510D1F27B0979C80109110D" /></dd></dl></dd>
          <dt>
            <b>Query</b>
          </dt>
          <dl>
            <dt>Querying for a specific photo in a stream item</dt>
            <dd>
              <example>
                <code lang="java">
 Cursor c = getContentResolver().query(
     ContentUris.withAppendedId(
         Uri.withAppendedPath(
             ContentUris.withAppendedId(StreamItems.CONTENT_URI, streamItemId)
             StreamItems.StreamItemPhotos#CONTENT_DIRECTORY),
         streamItemPhotoId), null, null, null, null);
 </code>
              </example>
            </dd>
            <dt>Querying for all photos in a stream item</dt>
            <dd>
              <example>
                <code lang="java">
 Cursor c = getContentResolver().query(
     Uri.withAppendedPath(
         ContentUris.withAppendedId(StreamItems.CONTENT_URI, streamItemId)
         StreamItems.StreamItemPhotos#CONTENT_DIRECTORY),
     null, null, null, StreamItemPhotos.SORT_INDEX);
 </code>
              </example>
            </dd>
          </dl>
 The record will contain both a <c><see cref="F:Android.Provider.ContactsContract.StreamItemPhotosColumns.PhotoFileId" /></c> and a
 <c><see cref="F:Android.Provider.ContactsContract.StreamItemPhotosColumns.PhotoUri" /></c>.  The <c><see cref="F:Android.Provider.ContactsContract.StreamItemPhotosColumns.PhotoFileId" /></c>
 can be used in conjunction with the <c><see cref="T:Android.Provider.ContactsContract+DisplayPhoto" /></c> API to
 retrieve photo content, or you can open the <c><see cref="F:Android.Provider.ContactsContract.StreamItemPhotosColumns.PhotoUri" /></c> as
 an asset file, as follows:
 <example><code lang="java">
 public InputStream openDisplayPhoto(String photoUri) {
     try {
         AssetFileDescriptor fd = getContentResolver().openAssetFileDescriptor(photoUri, "r");
         return fd.createInputStream();
     } catch (IOException e) {
         return null;
     }
 }
 </code></example></dl>
      </format>
    </summary>
    <remarks>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <h3>Account check</h3>
        </format>
        <format type="text/html">
          <h3>Operations</h3>
        </format>
        <format type="text/html">
          <dl>
            <dt>
              <b>Insert</b>
            </dt>
            <dd />
            <dt>
              <b>Update</b>
            </dt>
            <dd />
            <dt>
              <b>Delete</b>
            </dt>
            <dd>Deletes can be made against either a specific photo item in a stream item, or
 against all or a selected subset of photo items under a stream item.
 For example:
 <dl><dt>Deleting a single photo via the
 <c><see cref="F:Android.Provider.ContactsContract.StreamItems.StreamItemPhotos.ContentDirectory" /></c> sub-path of a stream item:
 </dt><dd><sample external-id="2C7B662CD03DCA668BD41ECD3FC454D6" /></dd><dt>Deleting all photos under a stream item</dt><dd><sample external-id="3B73B8D9F510D1F27B0979C80109110D" /></dd></dl></dd>
            <dt>
              <b>Query</b>
            </dt>
            <dl>
              <dt>Querying for a specific photo in a stream item</dt>
              <dd>
                <example>
                  <code lang="java">
 Cursor c = getContentResolver().query(
     ContentUris.withAppendedId(
         Uri.withAppendedPath(
             ContentUris.withAppendedId(StreamItems.CONTENT_URI, streamItemId)
             StreamItems.StreamItemPhotos#CONTENT_DIRECTORY),
         streamItemPhotoId), null, null, null, null);
 </code>
                </example>
              </dd>
              <dt>Querying for all photos in a stream item</dt>
              <dd>
                <example>
                  <code lang="java">
 Cursor c = getContentResolver().query(
     Uri.withAppendedPath(
         ContentUris.withAppendedId(StreamItems.CONTENT_URI, streamItemId)
         StreamItems.StreamItemPhotos#CONTENT_DIRECTORY),
     null, null, null, StreamItemPhotos.SORT_INDEX);
 </code>
                </example>
              </dd>
            </dl>
 The record will contain both a <c><see cref="F:Android.Provider.ContactsContract.StreamItemPhotosColumns.PhotoFileId" /></c> and a
 <c><see cref="F:Android.Provider.ContactsContract.StreamItemPhotosColumns.PhotoUri" /></c>.  The <c><see cref="F:Android.Provider.ContactsContract.StreamItemPhotosColumns.PhotoFileId" /></c>
 can be used in conjunction with the <c><see cref="T:Android.Provider.ContactsContract+DisplayPhoto" /></c> API to
 retrieve photo content, or you can open the <c><see cref="F:Android.Provider.ContactsContract.StreamItemPhotosColumns.PhotoUri" /></c> as
 an asset file, as follows:
 <example><code lang="java">
 public InputStream openDisplayPhoto(String photoUri) {
     try {
         AssetFileDescriptor fd = getContentResolver().openAssetFileDescriptor(photoUri, "r");
         return fd.createInputStream();
     } catch (IOException e) {
         return null;
     }
 }
 </code></example></dl>
        </format>
      </para>
      <para tool="javadoc-to-mdoc">
 Constants for the stream_item_photos table, which contains photos associated with
 social stream updates.
 </para>
      <para tool="javadoc-to-mdoc">
 Access to social stream photos requires additional permissions beyond the read/write
 contact permissions required by the provider.  Querying for social stream photos
 requires android.permission.READ_SOCIAL_STREAM permission, and inserting or updating
 social stream photos requires android.permission.WRITE_SOCIAL_STREAM permission.
 </para>
      <para tool="javadoc-to-mdoc">
 The content URIs to the insert, update and delete operations are required to have the account
 information matching that of the owning raw contact as query parameters, namely
 <c><see cref="F:Android.Provider.ContactsContract.SyncColumns.AccountType" /></c> and <c><see cref="F:Android.Provider.ContactsContract.SyncColumns.AccountName" /></c>.
 <c><see cref="F:Android.Provider.ContactsContract.RawContactsColumns.DataSet" /></c> isn't required.
 </para>
      <para tool="javadoc-to-mdoc">Social stream photo entries are associated with a social stream item.  Photos
 can be inserted into a social stream item in a couple of ways:
 <dl><dt>
 Via the <c><see cref="F:Android.Provider.ContactsContract.StreamItems.StreamItemPhotos.ContentDirectory" /></c> sub-path of a
 stream item:
 </dt><dd><sample external-id="DC0FE0679A9C8031E94A2D86E068BA69" /></dd><dt>Via the <c><see cref="P:Android.Provider.ContactsContract.StreamItems.ContentPhotoUri" /></c> URI:</dt><dd><sample external-id="A2D839959CC32F9F14B860CDA109A3E1" /></dd></dl></para>
      <para tool="javadoc-to-mdoc">Updates can only be made against a specific <c><see cref="T:Android.Provider.ContactsContract+StreamItems+StreamItemPhotos" /></c> entry,
 identified by both the stream item ID it belongs to and the stream item photo ID.
 This can be specified in two ways.
 <dl><dt>Via the <c><see cref="F:Android.Provider.ContactsContract.StreamItems.StreamItemPhotos.ContentDirectory" /></c> sub-path of a
 stream item:
 </dt><dd><sample external-id="1AD0FBC2167BAA6F58AC6EA444C589C9" /></dd><dt>Via the <c><see cref="P:Android.Provider.ContactsContract.StreamItems.ContentPhotoUri" /></c> URI:</dt><dd><sample external-id="E2948863C704A965DAFB32ACD208BAB8" /></dd></dl></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/provider/ContactsContract.StreamItemPhotos.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 15" />
  </Docs>
  <Members>
    <Member MemberName="Photo">
      <MemberSignature Language="C#" Value="public const string Photo;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string Photo" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PHOTO")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
 The binary representation of the photo.  Any size photo can be inserted;
 the provider will resize it appropriately for storage and display.
 </para>
          <para tool="javadoc-to-mdoc">
 This is only intended for use when inserting or updating a stream item photo.
 To retrieve the photo that was stored, open <c><see cref="F:Android.Provider.ContactsContract.StreamItemPhotosColumns.PhotoUri" /></c>
 as an asset file.
 </para>
          <para tool="javadoc-to-mdoc">Type: BLOB</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/provider/ContactsContract.StreamItemPhotos.html#PHOTO" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 15" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
