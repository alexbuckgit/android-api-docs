<Type Name="AccessibilityServiceFlags" FullName="Android.AccessibilityServices.AccessibilityServiceFlags">
  <TypeSignature Language="C#" Value="public enum AccessibilityServiceFlags" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed AccessibilityServiceFlags extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
    </summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="Default" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.AccessibilityServices.AccessibilityServiceFlags Default = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.AccessibilityServices.AccessibilityServiceFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">If an <c><see cref="T:Android.AccessibilityServices.AccessibilityService" /></c> is the default for a given type.
 Default service is invoked only if no package specific one exists. In case of
 more than one package specific service only the earlier registered is notified.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="IncludeNotImportantViews">
      <MemberSignature Language="C#" Value="IncludeNotImportantViews" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.AccessibilityServices.AccessibilityServiceFlags IncludeNotImportantViews = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.AccessibilityServices.AccessibilityServiceFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">If this flag is set the system will regard views that are not important
 for accessibility in addition to the ones that are important for accessibility.
 That is, views that are marked as not important for accessibility via
 <c><see cref="F:Android.Views.View.ImportantForAccessibilityNo" /></c> and views that are marked as
 potentially important for accessibility via
 <c><see cref="F:Android.Views.View.ImportantForAccessibilityAuto" /></c> for which the system has determined
 that are not important for accessibility, are both reported while querying the
 window content and also the accessibility service will receive accessibility events
 from them.
 </para>
          <para tool="javadoc-to-mdoc">
            <i>Note:</i> For accessibility services targeting API version
 <c><see cref="F:Android.OS.Build.VERSION_CODES.JellyBean" /></c> or higher this flag has to be explicitly
 set for the system to regard views that are not important for accessibility. For
 accessibility services targeting API version lower than
 <c><see cref="F:Android.OS.Build.VERSION_CODES.JellyBean" /></c> this flag is ignored and all views are
 regarded for accessibility purposes.
 </para>
          <para tool="javadoc-to-mdoc">
 Usually views not important for accessibility are layout managers that do not
 react to user actions, do not draw any content, and do not have any special
 semantics in the context of the screen content. For example, a three by three
 grid can be implemented as three horizontal linear layouts and one vertical,
 or three vertical linear layouts and one horizontal, or one grid layout, etc.
 In this context the actual layout mangers used to achieve the grid configuration
 are not important, rather it is important that there are nine evenly distributed
 elements.
 </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ReportViewIds">
      <MemberSignature Language="C#" Value="ReportViewIds" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.AccessibilityServices.AccessibilityServiceFlags ReportViewIds = int32(16)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.AccessibilityServices.AccessibilityServiceFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">This flag requests that the <c><see cref="T:Android.Views.Accessibility.AccessibilityNodeInfo" /></c>s obtained
 by an <c><see cref="T:Android.AccessibilityServices.AccessibilityService" /></c> contain the id of the source view.
 The source view id will be a fully qualified resource name of the
 form "package:id/name", for example "foo.bar:id/my_list", and it is
 useful for UI test automation. This flag is not set by default.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="RequestEnhancedWebAccessibility">
      <MemberSignature Language="C#" Value="RequestEnhancedWebAccessibility" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.AccessibilityServices.AccessibilityServiceFlags RequestEnhancedWebAccessibility = int32(8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.AccessibilityServices.AccessibilityServiceFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">This flag requests from the system to enable web accessibility enhancing
 extensions. Such extensions aim to provide improved accessibility support
 for content presented in a <c><see cref="T:Android.Webkit.WebView" /></c>. An example of such
 an extension is injecting JavaScript from a secure source. The system will enable
 enhanced web accessibility if there is at least one accessibility service
 that has this flag set. Hence, clearing this flag does not guarantee that the
 device will not have enhanced web accessibility enabled since there may be
 another enabled service that requested it.
 </para>
          <para tool="javadoc-to-mdoc">
 Services that want to set this flag have to declare this capability
 in their meta-data by setting the attribute <c><see cref="T:Android.Resource+Attribute" /></c> to
 true, otherwise this flag will be ignored. For how to declare the meta-data
 of a service refer to <c><see cref="F:Android.AccessibilityServices.AccessibilityService.ServiceMetaData" /></c>.
 </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="RequestFilterKeyEvents">
      <MemberSignature Language="C#" Value="RequestFilterKeyEvents" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.AccessibilityServices.AccessibilityServiceFlags RequestFilterKeyEvents = int32(32)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.AccessibilityServices.AccessibilityServiceFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">This flag requests from the system to filter key events. If this flag
 is set the accessibility service will receive the key events before
 applications allowing it implement global shortcuts. Setting this flag
 does not guarantee that this service will filter key events since only
 one service can do so at any given time. This avoids user confusion due
 to behavior change in case different key filtering services are enabled.
 If there is already another key filtering service enabled, this one will
 not receive key events.
 </para>
          <para tool="javadoc-to-mdoc">
 Services that want to set this flag have to declare this capability
 in their meta-data by setting the attribute <c><see cref="T:Android.Resource+Attribute" /></c> to true,
 otherwise this flag will be ignored. For how to declare the meta-data
 of a service refer to <c><see cref="F:Android.AccessibilityServices.AccessibilityService.ServiceMetaData" /></c>.
 </para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="RequestTouchExplorationMode">
      <MemberSignature Language="C#" Value="RequestTouchExplorationMode" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.AccessibilityServices.AccessibilityServiceFlags RequestTouchExplorationMode = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.AccessibilityServices.AccessibilityServiceFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">This flag requests that the system gets into touch exploration mode.
 In this mode a single finger moving on the screen behaves as a mouse
 pointer hovering over the user interface. The system will also detect
 certain gestures performed on the touch screen and notify this service.
 The system will enable touch exploration mode if there is at least one
 accessibility service that has this flag set. Hence, clearing this
 flag does not guarantee that the device will not be in touch exploration
 mode since there may be another enabled service that requested it.
 </para>
          <para tool="javadoc-to-mdoc">
 For accessibility services targeting API version higher than
 <c><see cref="F:Android.OS.Build.VERSION_CODES.JellyBeanMr1" /></c> that want to set
 this flag have to declare this capability in their meta-data by setting
 the attribute <c><see cref="F:Android.Resource.Attribute.CanRequestTouchExplorationMode" /></c> to true, otherwise this flag will
 be ignored. For how to declare the meta-data of a service refer to
 <c><see cref="F:Android.AccessibilityServices.AccessibilityService.ServiceMetaData" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 Services targeting API version equal to or lower than
 <c><see cref="F:Android.OS.Build.VERSION_CODES.JellyBeanMr1" /></c> will work normally, i.e.
 the first time they are run, if this flag is specified, a dialog is
 shown to the user to confirm enabling explore by touch.
 </para>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>
