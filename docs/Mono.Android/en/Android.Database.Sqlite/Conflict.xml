<Type Name="Conflict" FullName="Android.Database.Sqlite.Conflict">
  <TypeSignature Language="C#" Value="public enum Conflict" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conflict extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Enumerates values returned by  several types and taken as a parameter of the <see cref="M:Android.Database.Sqlite.SQLiteDatabase.InsertWithOnConflict" />, and <see cref="M:Android.Database.Sqlite.SQLiteDatabase.UpdateWithOnConflict" /> members.</summary>
    <remarks>Enumerates values returned by the following: <list type="bullet"><item><term><see cref="M:Android.Database.Sqlite.Conflict.Abort" /></term></item><item><term><see cref="M:Android.Database.Sqlite.Conflict.Fail" /></term></item><item><term><see cref="M:Android.Database.Sqlite.Conflict.Ignore" /></term></item><item><term><see cref="M:Android.Database.Sqlite.Conflict.None" /></term></item><item><term><see cref="M:Android.Database.Sqlite.Conflict.Replace" /></term></item><item><term><see cref="M:Android.Database.Sqlite.Conflict.Rollback" /></term></item><item><term><see cref="M:Android.Database.Sqlite.SQLiteDatabase.ConflictAbort" /></term></item><item><term><see cref="M:Android.Database.Sqlite.SQLiteDatabase.ConflictFail" /></term></item><item><term><see cref="M:Android.Database.Sqlite.SQLiteDatabase.ConflictIgnore" /></term></item><item><term><see cref="M:Android.Database.Sqlite.SQLiteDatabase.ConflictNone" /></term></item><item><term><see cref="M:Android.Database.Sqlite.SQLiteDatabase.ConflictReplace" /></term></item><item><term><see cref="M:Android.Database.Sqlite.SQLiteDatabase.ConflictRollback" /></term></item></list>
 and taken as a parameter of the <see cref="M:Android.Database.Sqlite.SQLiteDatabase.InsertWithOnConflict" />, and <see cref="M:Android.Database.Sqlite.SQLiteDatabase.UpdateWithOnConflict" /> members.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="Abort" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Database.Sqlite.Conflict Abort = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.Conflict</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">When a constraint violation occurs,no ROLLBACK is executed
 so changes from prior commands within the same transaction
 are preserved. This is the default behavior.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="Fail" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Database.Sqlite.Conflict Fail = int32(3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.Conflict</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">When a constraint violation occurs, the command aborts with a return
 code SQLITE_CONSTRAINT. But any changes to the database that
 the command made prior to encountering the constraint violation
 are preserved and are not backed out.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="Ignore" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Database.Sqlite.Conflict Ignore = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.Conflict</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">When a constraint violation occurs, the one row that contains
 the constraint violation is not inserted or changed.
 But the command continues executing normally. Other rows before and
 after the row that contained the constraint violation continue to be
 inserted or updated normally. No error is returned.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Database.Sqlite.Conflict None = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.Conflict</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">Use the following when no conflict action is specified.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="Replace" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Database.Sqlite.Conflict Replace = int32(5)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.Conflict</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">When a UNIQUE constraint violation occurs, the pre-existing rows that
 are causing the constraint violation are removed prior to inserting
 or updating the current row. Thus the insert or update always occurs.
 The command continues executing normally. No error is returned.
 If a NOT NULL constraint violation occurs, the NULL value is replaced
 by the default value for that column. If the column has no default
 value, then the ABORT algorithm is used. If a CHECK constraint
 violation occurs then the IGNORE algorithm is used. When this conflict
 resolution strategy deletes rows in order to satisfy a constraint,
 it does not invoke delete triggers on those rows.
 This behavior might change in a future release.
</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="Rollback" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Database.Sqlite.Conflict Rollback = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Database.Sqlite.Conflict</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para tool="javadoc-to-mdoc">When a constraint violation occurs, an immediate ROLLBACK occurs,
 thus ending the current transaction, and the command aborts with a
 return code of SQLITE_CONSTRAINT. If no transaction is active
 (other than the implied transaction that is created on every command)
 then this algorithm works the same as ABORT.
</para>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>