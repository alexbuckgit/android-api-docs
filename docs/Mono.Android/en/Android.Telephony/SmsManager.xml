<Type Name="SmsManager" FullName="Android.Telephony.SmsManager">
  <TypeSignature Language="C#" Value="public sealed class SmsManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SmsManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/telephony/SmsManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Manages SMS operations such as sending data, text, and pdu SMS messages.</summary>
    <remarks><para tool="javadoc-to-mdoc">Manages SMS operations such as sending data, text, and pdu SMS messages.
 Get this object by calling the static method <c><see cref="P:Android.Telephony.SmsManager.Default" /></c>.

 </para><para tool="javadoc-to-mdoc">For information about how to behave as the default SMS app on Android 4.4 (API level 19)
 and higher, see <c><see cref="T:Android.Provider.Telephony" /></c>.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/telephony/SmsManager.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 4" />
  </Docs>
  <Members>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static Android.Telephony.SmsManager Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Android.Telephony.SmsManager Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDefault", "()Landroid/telephony/SmsManager;", "GetGetDefaultHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Telephony.SmsManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the default instance of the SmsManager</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Get the default instance of the SmsManager</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/telephony/SmsManager.html#getDefault()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="DivideMessage">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; DivideMessage (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IList`1&lt;string&gt; DivideMessage(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("divideMessage", "(Ljava/lang/String;)Ljava/util/ArrayList;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">the original message.  Must not be null.</param>
        <summary>Divide a message text into several fragments, none bigger than
 the maximum SMS message size.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Divide a message text into several fragments, none bigger than
 the maximum SMS message size.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/telephony/SmsManager.html#divideMessage(java.lang.String)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 4" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if text is null
</exception>
      </Docs>
    </Member>
    <Member MemberName="SendDataMessage">
      <MemberSignature Language="C#" Value="public void SendDataMessage (string destinationAddress, string scAddress, short destinationPort, byte[] data, Android.App.PendingIntent sentIntent, Android.App.PendingIntent deliveryIntent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendDataMessage(string destinationAddress, string scAddress, int16 destinationPort, unsigned int8[] data, class Android.App.PendingIntent sentIntent, class Android.App.PendingIntent deliveryIntent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendDataMessage", "(Ljava/lang/String;Ljava/lang/String;S[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destinationAddress" Type="System.String" />
        <Parameter Name="scAddress" Type="System.String" />
        <Parameter Name="destinationPort" Type="System.Int16" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="sentIntent" Type="Android.App.PendingIntent" />
        <Parameter Name="deliveryIntent" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="destinationAddress">the address to send the message to</param>
        <param name="scAddress">is the service center address or null to use
  the current default SMSC</param>
        <param name="destinationPort">the port to deliver the message to</param>
        <param name="data">the body of the message to send</param>
        <param name="sentIntent">if not NULL this <c>PendingIntent</c> is
  broadcast when the message is successfully sent, or failed.
  The result code will be <c>Activity.RESULT_OK</c> for success,
  or one of these errors:<format type="text/html"><br /></format><c>RESULT_ERROR_GENERIC_FAILURE</c><format type="text/html"><br /></format><c>RESULT_ERROR_RADIO_OFF</c><format type="text/html"><br /></format><c>RESULT_ERROR_NULL_PDU</c><format type="text/html"><br /></format>
  For <c>RESULT_ERROR_GENERIC_FAILURE</c> the sentIntent may include
  the extra "errorCode" containing a radio technology specific value,
  generally only useful for troubleshooting.<format type="text/html"><br /></format>
  The per-application based SMS control checks sentIntent. If sentIntent
  is NULL the caller will be checked against all unknown applications,
  which cause smaller number of SMS to be sent in checking period.</param>
        <param name="deliveryIntent">if not NULL this <c>PendingIntent</c> is
  broadcast when the message is delivered to the recipient.  The
  raw pdu of the status report is in the extended data ("pdu").</param>
        <summary>Send a data based SMS to a specific application port.</summary>
        <remarks><para tool="javadoc-to-mdoc">Send a data based SMS to a specific application port.

 </para><para tool="javadoc-to-mdoc"><i>Note:</i> Using this method requires that your app has the
 <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#SEND_SMS" /></c> permission.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/telephony/SmsManager.html#sendDataMessage(java.lang.String, java.lang.String, short, byte[], android.app.PendingIntent, android.app.PendingIntent)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 4" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if destinationAddress or data are empty
</exception>
      </Docs>
    </Member>
    <Member MemberName="SendMultipartTextMessage">
      <MemberSignature Language="C#" Value="public void SendMultipartTextMessage (string destinationAddress, string scAddress, System.Collections.Generic.IList&lt;string&gt; parts, System.Collections.Generic.IList&lt;Android.App.PendingIntent&gt; sentIntents, System.Collections.Generic.IList&lt;Android.App.PendingIntent&gt; deliveryIntents);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendMultipartTextMessage(string destinationAddress, string scAddress, class System.Collections.Generic.IList`1&lt;string&gt; parts, class System.Collections.Generic.IList`1&lt;class Android.App.PendingIntent&gt; sentIntents, class System.Collections.Generic.IList`1&lt;class Android.App.PendingIntent&gt; deliveryIntents) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendMultipartTextMessage", "(Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destinationAddress" Type="System.String" />
        <Parameter Name="scAddress" Type="System.String" />
        <Parameter Name="parts" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
        <Parameter Name="sentIntents" Type="System.Collections.Generic.IList&lt;Android.App.PendingIntent&gt;" />
        <Parameter Name="deliveryIntents" Type="System.Collections.Generic.IList&lt;Android.App.PendingIntent&gt;" />
      </Parameters>
      <Docs>
        <param name="destinationAddress">To be added.</param>
        <param name="scAddress">To be added.</param>
        <param name="parts">To be added.</param>
        <param name="sentIntents">To be added.</param>
        <param name="deliveryIntents">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendTextMessage">
      <MemberSignature Language="C#" Value="public void SendTextMessage (string destinationAddress, string scAddress, string text, Android.App.PendingIntent sentIntent, Android.App.PendingIntent deliveryIntent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendTextMessage(string destinationAddress, string scAddress, string text, class Android.App.PendingIntent sentIntent, class Android.App.PendingIntent deliveryIntent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendTextMessage", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destinationAddress" Type="System.String" />
        <Parameter Name="scAddress" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="sentIntent" Type="Android.App.PendingIntent" />
        <Parameter Name="deliveryIntent" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="destinationAddress">the address to send the message to</param>
        <param name="scAddress">is the service center address or null to use
  the current default SMSC</param>
        <param name="text">the body of the message to send</param>
        <param name="sentIntent">if not NULL this <c>PendingIntent</c> is
  broadcast when the message is successfully sent, or failed.
  The result code will be <c>Activity.RESULT_OK</c> for success,
  or one of these errors:<format type="text/html"><br /></format><c>RESULT_ERROR_GENERIC_FAILURE</c><format type="text/html"><br /></format><c>RESULT_ERROR_RADIO_OFF</c><format type="text/html"><br /></format><c>RESULT_ERROR_NULL_PDU</c><format type="text/html"><br /></format>
  For <c>RESULT_ERROR_GENERIC_FAILURE</c> the sentIntent may include
  the extra "errorCode" containing a radio technology specific value,
  generally only useful for troubleshooting.<format type="text/html"><br /></format>
  The per-application based SMS control checks sentIntent. If sentIntent
  is NULL the caller will be checked against all unknown applications,
  which cause smaller number of SMS to be sent in checking period.</param>
        <param name="deliveryIntent">if not NULL this <c>PendingIntent</c> is
  broadcast when the message is delivered to the recipient.  The
  raw pdu of the status report is in the extended data ("pdu").</param>
        <summary>Send a text based SMS.</summary>
        <remarks><para tool="javadoc-to-mdoc">Send a text based SMS.

 </para><para tool="javadoc-to-mdoc"><i>Note:</i> Using this method requires that your app has the
 <c><see cref="!:NoType:android/Manifest$permission;Href=../../../reference/android/Manifest.permission.html#SEND_SMS" /></c> permission.</para><para tool="javadoc-to-mdoc"><i>Note:</i> Beginning with Android 4.4 (API level 19), if
 <i>and only if</i> an app is not selected as the default SMS app, the system automatically
 writes messages sent using this method to the SMS Provider (the default SMS app is always
 responsible for writing its sent messages to the SMS Provider). For information about
 how to behave as the default SMS app, see <c><see cref="T:Android.Provider.Telephony" /></c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/telephony/SmsManager.html#sendTextMessage(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 4" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if destinationAddress or text are empty
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
