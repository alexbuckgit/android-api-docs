<Type Name="IComponentCallbacks2" FullName="Android.Content.IComponentCallbacks2">
  <TypeSignature Language="C#" Value="public interface IComponentCallbacks2 : Android.Content.IComponentCallbacks, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComponentCallbacks2 implements class Android.Content.IComponentCallbacks, class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Content.IComponentCallbacks</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/content/ComponentCallbacks2", "", "Android.Content.IComponentCallbacks2Invoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="14">
    <summary>Extended <c><see cref="T:Android.Content.IComponentCallbacks" /></c> interface with a new callback for
 finer-grained memory management.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Extended <c><see cref="T:Android.Content.IComponentCallbacks" /></c> interface with a new callback for
 finer-grained memory management. This interface is available in all application components
 (<c><see cref="T:Android.App.Activity" /></c>, <c><see cref="T:Android.App.Service" /></c>,
 <c><see cref="T:Android.Content.ContentProvider" /></c>, and <c><see cref="T:Android.App.Application" /></c>).

 </para>
      <para tool="javadoc-to-mdoc">You should implement <c><see cref="!:Android.Content.ComponentCallbacks2.onTrimMemory(int)" /></c> to incrementally release memory based on current
 system constraints. Using this callback to release your resources helps provide a more
 responsive system overall, but also directly benefits the user experience for
 your app by allowing the system to keep your process alive longer. That is,
 if you <i>don't</i> trim your resources based on memory levels defined by this callback,
 the system is more likely to kill your process while it is cached in the least-recently used
 (LRU) list, thus requiring your app to restart and restore all state when the user returns to it.

 </para>
      <para tool="javadoc-to-mdoc">The values provided by <c><see cref="!:Android.Content.ComponentCallbacks2.onTrimMemory(int)" /></c> do not represent a single linear progression of
 memory limits, but provide you different types of clues about memory availability:</para>
      <list type="bullet">
        <item>
          <term>When your app is running:
  <list type="number" /></term>
        </item>
        <item>
          <term>
            <c>
              <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningModerate" />
            </c>
            <format type="text/html">
              <br />
            </format>The device is beginning to run low on memory.
 Your app is running and not killable.
  </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningLow" />
            </c>
            <format type="text/html">
              <br />
            </format>The device is running much lower on memory.
 Your app is running and not killable, but please release unused resources to improve system
 performance (which directly impacts your app's performance).
  </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningCritical" />
            </c>
            <format type="text/html">
              <br />
            </format>The device is running extremely low on memory.
 Your app is not yet considered a killable process, but the system will begin killing
 background processes if apps do not release resources, so you should release non-critical
 resources now to prevent performance degradation.
  </term>
        </item>
        <item>
          <term>When your app's visibility changes:
  <list type="number" /></term>
        </item>
        <item>
          <term>
            <c>
              <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryUiHidden" />
            </c>
            <format type="text/html">
              <br />
            </format>Your app's UI is no longer visible, so this is a good
 time to release large resources that are used only by your UI.
  </term>
        </item>
        <item>
          <term>When your app's process resides in the background LRU list:
  <list type="number" /></term>
        </item>
        <item>
          <term>
            <c>
              <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryBackground" />
            </c>
            <format type="text/html">
              <br />
            </format>The system is running low on memory and your process is
 near the beginning of the LRU list. Although your app process is not at a high risk of being
 killed, the system may already be killing processes in the LRU list, so you should release
 resources that are easy to recover so your process will remain in the list and resume
 quickly when the user returns to your app.
  </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryModerate" />
            </c>
            <format type="text/html">
              <br />
            </format>The system is running low on memory and your process is
 near the middle of the LRU list. If the system becomes further constrained for memory, there's a
 chance your process will be killed.
  </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryComplete" />
            </c>
            <format type="text/html">
              <br />
            </format>The system is running low on memory and your process is
 one of the first to be killed if the system does not recover memory now. You should release
 absolutely everything that's not critical to resuming your app state.
   To support API levels lower than 14, you can use the <c><see cref="M:Android.Content.IComponentCallbacks.OnLowMemory" /></c> method as a
 fallback that's roughly equivalent to the <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryComplete" /></c> level.
  </term>
        </item>
      </list>
      <para tool="javadoc-to-mdoc" />
      <para tool="javadoc-to-mdoc">
        <i>Note:</i> When the system begins
 killing processes in the LRU list, although it primarily works bottom-up, it does give some
 consideration to which processes are consuming more memory and will thus provide more gains in
 memory if killed. So the less memory you consume while in the LRU list overall, the better
 your chances are to remain in the list and be able to quickly resume.</para>
      <para tool="javadoc-to-mdoc">More information about the different stages of a process lifecycle (such as what it means
 to be placed in the background LRU list) is provided in the <format type="text/html"><a href="http://developer.android.com/reference/../guide/components/processes-and-threads.html#Lifecycle">Processes and Threads</a></format>
 document.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 14" />
  </Docs>
  <Members>
    <Member MemberName="OnTrimMemory">
      <MemberSignature Language="C#" Value="public void OnTrimMemory (Android.Content.TrimMemory level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnTrimMemory(valuetype Android.Content.TrimMemory level) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onTrimMemory", "(I)V", "GetOnTrimMemory_IHandler:Android.Content.IComponentCallbacks2Invoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="Android.Content.TrimMemory">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="level">The context of the trim, giving a hint of the amount of
 trimming the application may like to perform.  May be
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryComplete" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryModerate" /></c>,
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryBackground" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryUiHidden" /></c>,
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningCritical" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningLow" /></c>,
 or <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningModerate" /></c>.
</param>
        <summary>Called when the operating system has determined that it is a good
 time for a process to trim unneeded memory from its process.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when the operating system has determined that it is a good
 time for a process to trim unneeded memory from its process.  This will
 happen for example when it goes in the background and there is not enough
 memory to keep as many background processes running as desired.  You
 should never compare to exact values of the level, since new intermediate
 values may be added -- you will typically want to compare if the value
 is greater or equal to a level you are interested in.

 </para>
          <para tool="javadoc-to-mdoc">To retrieve the processes current trim level at any point, you can
 use <c><see cref="M:Android.App.ActivityManager.GetMyMemoryState(.RunningAppProcessInfo)" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/ComponentCallbacks2.html#onTrimMemory(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
  </Members>
</Type>
