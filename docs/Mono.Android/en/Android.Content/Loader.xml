<Type Name="Loader" FullName="Android.Content.Loader">
  <TypeSignature Language="C#" Value="public class Loader : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Loader extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/content/Loader", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="11">
    <summary>A class that performs asynchronous loading of data.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A class that performs asynchronous loading of data. While Loaders are active
 they should monitor the source of their data and deliver new results when the contents
 change.  See <c><see cref="T:Android.App.LoaderManager" /></c> for more detail.

 <format type="text/html"><h3>Developer Guides</h3></format></para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <b>Note on threading:</b>
        </format> Clients of loaders should as a rule perform
 any calls on to a Loader from the main thread of their process (that is,
 the thread the Activity callbacks and other things occur on).  Subclasses
 of Loader (such as <c><see cref="T:Android.Content.AsyncTaskLoader" /></c>) will often perform their work
 in a separate thread, but when delivering their results this too should
 be done on the main thread.</para>
      <para tool="javadoc-to-mdoc">Subclasses generally must implement at least <c><see cref="M:Android.Content.Loader.OnStartLoading" /></c>,
 <c><see cref="M:Android.Content.Loader.OnStopLoading" /></c>, <c><see cref="M:Android.Content.Loader.OnForceLoad" /></c>, and <c><see cref="M:Android.Content.Loader.OnReset" /></c>.</para>
      <para tool="javadoc-to-mdoc">Most implementations should not derive directly from this class, but
 instead inherit from <c><see cref="T:Android.Content.AsyncTaskLoader" /></c>.</para>
      <para tool="javadoc-to-mdoc">For more information about using loaders, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/loaders.html">Loaders</a></format> developer guide.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/content/Loader.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 11" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Loader (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Android.Content.Context context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(Landroid/content/Context;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Stores away the application context associated with context.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Stores away the application context associated with context.
 Since Loaders can be used across multiple activities it's dangerous to
 store the context directly; always use <c><see cref="P:Android.Content.Loader.Context" /></c> to retrieve
 the Loader's Context, don't use the constructor argument directly.
 The Context returned by <c><see cref="P:Android.Content.Loader.Context" /></c> is safe to use across
 Activity instances.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#Loader(android.content.Context)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Loader (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abandon">
      <MemberSignature Language="C#" Value="public virtual void Abandon ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Abandon() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("abandon", "()V", "GetAbandonHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This function will normally be called for you automatically by
 <c><see cref="T:Android.App.LoaderManager" /></c> when restarting a Loader.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This function will normally be called for you automatically by
 <c><see cref="T:Android.App.LoaderManager" /></c> when restarting a Loader.  When using
 a Loader with <c><see cref="T:Android.App.LoaderManager" /></c>,
 you <i>must not</i> call this method yourself, or you will conflict
 with its management of the Loader.

 Tell the Loader that it is being abandoned.  This is called prior
 to <c><see cref="M:Android.Content.Loader.Reset" /></c> to have it retain its current data but not report
 any new data.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#abandon()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="CancelLoad">
      <MemberSignature Language="C#" Value="public virtual bool CancelLoad ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CancelLoad() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("cancelLoad", "()Z", "GetCancelLoadHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempt to cancel the current load task.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Attempt to cancel the current load task.
 Must be called on the main thread of the process.

 </para>
          <para tool="javadoc-to-mdoc">Cancellation is not an immediate operation, since the load is performed
 in a background thread.  If there is currently a load in progress, this
 method requests that the load be canceled, and notes this is the case;
 once the background thread has completed its work its remaining state
 will be cleared.  If another load request comes in during this time,
 it will be held until the canceled load is complete.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#cancelLoad()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="CommitContentChanged">
      <MemberSignature Language="C#" Value="public virtual void CommitContentChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommitContentChanged() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("commitContentChanged", "()V", "GetCommitContentChangedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Commit that you have actually fully processed a content change that
 was returned by <c><see cref="M:Android.Content.Loader.TakeContentChanged" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Commit that you have actually fully processed a content change that
 was returned by <c><see cref="M:Android.Content.Loader.TakeContentChanged" /></c>.  This is for use with
 <c><see cref="M:Android.Content.Loader.RollbackContentChanged" /></c> to handle situations where a load
 is cancelled.  Call this when you have completely processed a load
 without it being cancelled.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#commitContentChanged()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Context Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Context Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getContext", "()Landroid/content/Context;", "GetGetContextHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary></summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#getContext()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="DataToString">
      <MemberSignature Language="C#" Value="public virtual string DataToString (Java.Lang.Object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string DataToString(class Java.Lang.Object data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dataToString", "(Ljava/lang/Object;)Ljava/lang/String;", "GetDataToString_Ljava_lang_Object_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverCancellation">
      <MemberSignature Language="C#" Value="public virtual void DeliverCancellation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeliverCancellation() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("deliverCancellation", "()V", "GetDeliverCancellationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informs the registered <c><see cref="!:NoType:android/content/Loader$OnLoadCanceledListener;Href=../../../reference/android/content/Loader.OnLoadCanceledListener.html" /></c> that the load has been canceled.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Informs the registered <c><see cref="!:NoType:android/content/Loader$OnLoadCanceledListener;Href=../../../reference/android/content/Loader.OnLoadCanceledListener.html" /></c> that the load has been canceled.
 Should only be called by subclasses.

 Must be called from the process's main thread.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#deliverCancellation()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="DeliverResult">
      <MemberSignature Language="C#" Value="public virtual void DeliverResult (Java.Lang.Object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeliverResult(class Java.Lang.Object data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("deliverResult", "(Ljava/lang/Object;)V", "GetDeliverResult_Ljava_lang_Object_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Java.Lang.Object" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dump">
      <MemberSignature Language="C#" Value="public virtual void Dump (string prefix, Java.IO.FileDescriptor fd, Java.IO.PrintWriter writer, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dump(string prefix, class Java.IO.FileDescriptor fd, class Java.IO.PrintWriter writer, string[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dump", "(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V", "GetDump_Ljava_lang_String_Ljava_io_FileDescriptor_Ljava_io_PrintWriter_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="writer" Type="Java.IO.PrintWriter" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="prefix">Text to print at the front of each line.</param>
        <param name="fd">The raw file descriptor that the dump is being sent to.</param>
        <param name="writer">A PrintWriter to which the dump is to be set.</param>
        <param name="args">Additional arguments to the dump request.
</param>
        <summary>Print the Loader's state into the given stream.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Print the Loader's state into the given stream.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="DumpAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DumpAsync (string prefix, Java.IO.FileDescriptor fd, Java.IO.PrintWriter writer, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DumpAsync(string prefix, class Java.IO.FileDescriptor fd, class Java.IO.PrintWriter writer, string[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="writer" Type="Java.IO.PrintWriter" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="prefix">To be added.</param>
        <param name="fd">To be added.</param>
        <param name="writer">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceLoad">
      <MemberSignature Language="C#" Value="public virtual void ForceLoad ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ForceLoad() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("forceLoad", "()V", "GetForceLoadHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Force an asynchronous load.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Force an asynchronous load. Unlike <c><see cref="M:Android.Content.Loader.StartLoading" /></c> this will ignore a previously
 loaded data set and load a new one.  This simply calls through to the
 implementation's <c><see cref="M:Android.Content.Loader.OnForceLoad" /></c>.  You generally should only call this
 when the loader is started -- that is, <c><see cref="P:Android.Content.Loader.IsStarted" /></c> returns true.

 </para>
          <para tool="javadoc-to-mdoc">Must be called from the process's main thread.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#forceLoad()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public virtual int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getId", "()I", "GetGetIdHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary></summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#getId()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsAbandoned">
      <MemberSignature Language="C#" Value="public virtual bool IsAbandoned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbandoned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isAbandoned", "()Z", "GetIsAbandonedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return whether this loader has been abandoned.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return whether this loader has been abandoned.  In this state, the
 loader <i>must not</i> report any new data, and <i>must</i> keep
 its last reported data valid until it is finally reset.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#isAbandoned()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsReset">
      <MemberSignature Language="C#" Value="public virtual bool IsReset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isReset", "()Z", "GetIsResetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return whether this load has been reset.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return whether this load has been reset.  That is, either the loader
 has not yet been started for the first time, or its <c><see cref="M:Android.Content.Loader.Reset" /></c>
 has been called.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#isReset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsStarted">
      <MemberSignature Language="C#" Value="public virtual bool IsStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isStarted", "()Z", "GetIsStartedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return whether this load has been started.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Return whether this load has been started.  That is, its <c><see cref="M:Android.Content.Loader.StartLoading" /></c>
 has been called and no calls to <c><see cref="M:Android.Content.Loader.StopLoading" /></c> or
 <c><see cref="M:Android.Content.Loader.Reset" /></c> have yet been made.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#isStarted()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnAbandon">
      <MemberSignature Language="C#" Value="protected virtual void OnAbandon ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAbandon() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onAbandon", "()V", "GetOnAbandonHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Subclasses implement this to take care of being abandoned.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Subclasses implement this to take care of being abandoned.  This is
 an optional intermediate state prior to <c><see cref="M:Android.Content.Loader.OnReset" /></c> -- it means that
 the client is no longer interested in any new data from the loader,
 so the loader must not report any further updates.  However, the
 loader <i>must</i> keep its last reported data valid until the final
 <c><see cref="M:Android.Content.Loader.OnReset" /></c> happens.  You can retrieve the current abandoned
 state with <c><see cref="P:Android.Content.Loader.IsAbandoned" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#onAbandon()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnCancelLoad">
      <MemberSignature Language="C#" Value="protected virtual bool OnCancelLoad ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnCancelLoad() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCancelLoad", "()Z", "GetOnCancelLoadHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Subclasses must implement this to take care of requests to <c><see cref="M:Android.Content.Loader.CancelLoad" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Subclasses must implement this to take care of requests to <c><see cref="M:Android.Content.Loader.CancelLoad" /></c>.
 This will always be called from the process's main thread.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#onCancelLoad()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="OnContentChanged">
      <MemberSignature Language="C#" Value="public virtual void OnContentChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnContentChanged() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onContentChanged", "()V", "GetOnContentChangedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when <c><see cref="!:NoType:android/content/Loader$ForceLoadContentObserver;Href=../../../reference/android/content/Loader.ForceLoadContentObserver.html" /></c> detects a change.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Called when <c><see cref="!:NoType:android/content/Loader$ForceLoadContentObserver;Href=../../../reference/android/content/Loader.ForceLoadContentObserver.html" /></c> detects a change.  The
 default implementation checks to see if the loader is currently started;
 if so, it simply calls <c><see cref="M:Android.Content.Loader.ForceLoad" /></c>; otherwise, it sets a flag
 so that <c><see cref="M:Android.Content.Loader.TakeContentChanged" /></c> returns true.

 </para>
          <para tool="javadoc-to-mdoc">Must be called from the process's main thread.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#onContentChanged()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnForceLoad">
      <MemberSignature Language="C#" Value="protected virtual void OnForceLoad ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnForceLoad() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onForceLoad", "()V", "GetOnForceLoadHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Subclasses must implement this to take care of requests to <c><see cref="M:Android.Content.Loader.ForceLoad" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Subclasses must implement this to take care of requests to <c><see cref="M:Android.Content.Loader.ForceLoad" /></c>.
 This will always be called from the process's main thread.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#onForceLoad()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnReset">
      <MemberSignature Language="C#" Value="protected virtual void OnReset ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnReset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onReset", "()V", "GetOnResetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Subclasses must implement this to take care of resetting their loader,
 as per <c><see cref="M:Android.Content.Loader.Reset" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Subclasses must implement this to take care of resetting their loader,
 as per <c><see cref="M:Android.Content.Loader.Reset" /></c>.  This is not called by clients directly,
 but as a result of a call to <c><see cref="M:Android.Content.Loader.Reset" /></c>.
 This will always be called from the process's main thread.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#onReset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnStartLoading">
      <MemberSignature Language="C#" Value="protected virtual void OnStartLoading ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStartLoading() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStartLoading", "()V", "GetOnStartLoadingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Subclasses must implement this to take care of loading their data,
 as per <c><see cref="M:Android.Content.Loader.StartLoading" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Subclasses must implement this to take care of loading their data,
 as per <c><see cref="M:Android.Content.Loader.StartLoading" /></c>.  This is not called by clients directly,
 but as a result of a call to <c><see cref="M:Android.Content.Loader.StartLoading" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#onStartLoading()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="OnStopLoading">
      <MemberSignature Language="C#" Value="protected virtual void OnStopLoading ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStopLoading() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onStopLoading", "()V", "GetOnStopLoadingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Subclasses must implement this to take care of stopping their loader,
 as per <c><see cref="M:Android.Content.Loader.StopLoading" /></c>.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Subclasses must implement this to take care of stopping their loader,
 as per <c><see cref="M:Android.Content.Loader.StopLoading" /></c>.  This is not called by clients directly,
 but as a result of a call to <c><see cref="M:Android.Content.Loader.StopLoading" /></c>.
 This will always be called from the process's main thread.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#onStopLoading()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="RegisterListener">
      <MemberSignature Language="C#" Value="public virtual void RegisterListener (int id, Android.Content.Loader.IOnLoadCompleteListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterListener(int32 id, class Android.Content.Loader/IOnLoadCompleteListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerListener", "(ILandroid/content/Loader$OnLoadCompleteListener;)V", "GetRegisterListener_ILandroid_content_Loader_OnLoadCompleteListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="listener" Type="Android.Content.Loader+IOnLoadCompleteListener" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <param name="listener">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterOnLoadCanceledListener">
      <MemberSignature Language="C#" Value="public virtual void RegisterOnLoadCanceledListener (Android.Content.Loader.IOnLoadCanceledListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterOnLoadCanceledListener(class Android.Content.Loader/IOnLoadCanceledListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerOnLoadCanceledListener", "(Landroid/content/Loader$OnLoadCanceledListener;)V", "GetRegisterOnLoadCanceledListener_Landroid_content_Loader_OnLoadCanceledListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Content.Loader+IOnLoadCanceledListener" />
      </Parameters>
      <Docs>
        <param name="listener">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reset", "()V", "GetResetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This function will normally be called for you automatically by
 <c><see cref="T:Android.App.LoaderManager" /></c> when destroying a Loader.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This function will normally be called for you automatically by
 <c><see cref="T:Android.App.LoaderManager" /></c> when destroying a Loader.  When using
 a Loader with <c><see cref="T:Android.App.LoaderManager" /></c>,
 you <i>must not</i> call this method yourself, or you will conflict
 with its management of the Loader.

 Resets the state of the Loader.  The Loader should at this point free
 all of its resources, since it may never be called again; however, its
 <c><see cref="M:Android.Content.Loader.StartLoading" /></c> may later be called at which point it must be
 able to start running again.

 </para>
          <para tool="javadoc-to-mdoc">This updates the Loader's internal state so that
 <c><see cref="P:Android.Content.Loader.IsStarted" /></c> and <c><see cref="P:Android.Content.Loader.IsReset" /></c> will return the correct
 values, and then calls the implementation's <c><see cref="M:Android.Content.Loader.OnReset" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Must be called from the process's main thread.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#reset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="RollbackContentChanged">
      <MemberSignature Language="C#" Value="public virtual void RollbackContentChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RollbackContentChanged() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("rollbackContentChanged", "()V", "GetRollbackContentChangedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Report that you have abandoned the processing of a content change that
 was returned by <c><see cref="M:Android.Content.Loader.TakeContentChanged" /></c> and would like to rollback
 to the state where there is again a pending content change.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Report that you have abandoned the processing of a content change that
 was returned by <c><see cref="M:Android.Content.Loader.TakeContentChanged" /></c> and would like to rollback
 to the state where there is again a pending content change.  This is
 to handle the case where a data load due to a content change has been
 canceled before its data was delivered back to the loader.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#rollbackContentChanged()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="StartLoading">
      <MemberSignature Language="C#" Value="public void StartLoading ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartLoading() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startLoading", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This function will normally be called for you automatically by
 <c><see cref="T:Android.App.LoaderManager" /></c> when the associated fragment/activity
 is being started.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This function will normally be called for you automatically by
 <c><see cref="T:Android.App.LoaderManager" /></c> when the associated fragment/activity
 is being started.  When using a Loader with <c><see cref="T:Android.App.LoaderManager" /></c>,
 you <i>must not</i> call this method yourself, or you will conflict
 with its management of the Loader.

 Starts an asynchronous load of the Loader's data. When the result
 is ready the callbacks will be called on the process's main thread.
 If a previous load has been completed and is still valid
 the result may be passed to the callbacks immediately.
 The loader will monitor the source of
 the data set and may deliver future callbacks if the source changes.
 Calling <c><see cref="M:Android.Content.Loader.StopLoading" /></c> will stop the delivery of callbacks.

 </para>
          <para tool="javadoc-to-mdoc">This updates the Loader's internal state so that
 <c><see cref="P:Android.Content.Loader.IsStarted" /></c> and <c><see cref="P:Android.Content.Loader.IsReset" /></c> will return the correct
 values, and then calls the implementation's <c><see cref="M:Android.Content.Loader.OnStartLoading" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Must be called from the process's main thread.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#startLoading()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="StopLoading">
      <MemberSignature Language="C#" Value="public virtual void StopLoading ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopLoading() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stopLoading", "()V", "GetStopLoadingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This function will normally be called for you automatically by
 <c><see cref="T:Android.App.LoaderManager" /></c> when the associated fragment/activity
 is being stopped.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This function will normally be called for you automatically by
 <c><see cref="T:Android.App.LoaderManager" /></c> when the associated fragment/activity
 is being stopped.  When using a Loader with <c><see cref="T:Android.App.LoaderManager" /></c>,
 you <i>must not</i> call this method yourself, or you will conflict
 with its management of the Loader.

 </para>
          <para tool="javadoc-to-mdoc">Stops delivery of updates until the next time <c><see cref="M:Android.Content.Loader.StartLoading" /></c> is called.
 Implementations should <i>not</i> invalidate their data at this point --
 clients are still free to use the last data the loader reported.  They will,
 however, typically stop reporting new data if the data changes; they can
 still monitor for changes, but must not report them to the client until and
 if <c><see cref="M:Android.Content.Loader.StartLoading" /></c> is later called.

 </para>
          <para tool="javadoc-to-mdoc">This updates the Loader's internal state so that
 <c><see cref="P:Android.Content.Loader.IsStarted" /></c> will return the correct
 value, and then calls the implementation's <c><see cref="M:Android.Content.Loader.OnStopLoading" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">Must be called from the process's main thread.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#stopLoading()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="TakeContentChanged">
      <MemberSignature Language="C#" Value="public virtual bool TakeContentChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TakeContentChanged() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("takeContentChanged", "()Z", "GetTakeContentChangedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Take the current flag indicating whether the loader's content had
 changed while it was stopped.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Take the current flag indicating whether the loader's content had
 changed while it was stopped.  If it had, true is returned and the
 flag is cleared.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/content/Loader.html#takeContentChanged()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterListener">
      <MemberSignature Language="C#" Value="public virtual void UnregisterListener (Android.Content.Loader.IOnLoadCompleteListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterListener(class Android.Content.Loader/IOnLoadCompleteListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterListener", "(Landroid/content/Loader$OnLoadCompleteListener;)V", "GetUnregisterListener_Landroid_content_Loader_OnLoadCompleteListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Content.Loader+IOnLoadCompleteListener" />
      </Parameters>
      <Docs>
        <param name="listener">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterOnLoadCanceledListener">
      <MemberSignature Language="C#" Value="public virtual void UnregisterOnLoadCanceledListener (Android.Content.Loader.IOnLoadCanceledListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterOnLoadCanceledListener(class Android.Content.Loader/IOnLoadCanceledListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterOnLoadCanceledListener", "(Landroid/content/Loader$OnLoadCanceledListener;)V", "GetUnregisterOnLoadCanceledListener_Landroid_content_Loader_OnLoadCanceledListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Content.Loader+IOnLoadCanceledListener" />
      </Parameters>
      <Docs>
        <param name="listener">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
