<Type Name="ContentProvider" FullName="Android.Content.ContentProvider">
  <TypeSignature Language="C#" Value="public abstract class ContentProvider : Java.Lang.Object, Android.Content.IComponentCallbacks2, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ContentProvider extends Java.Lang.Object implements class Android.Content.IComponentCallbacks, class Android.Content.IComponentCallbacks2, class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Content.IComponentCallbacks2</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/content/ContentProvider", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Content providers are one of the primary building blocks of Android applications, providing
 content to applications.</summary>
    <remarks />
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Construct a ContentProvider instance.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ContentProvider (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ApplyBatch">
      <MemberSignature Language="C#" Value="public virtual Android.Content.ContentProviderResult[] ApplyBatch (System.Collections.Generic.IList&lt;Android.Content.ContentProviderOperation&gt; operations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.ContentProviderResult[] ApplyBatch(class System.Collections.Generic.IList`1&lt;class Android.Content.ContentProviderOperation&gt; operations) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("applyBatch", "(Ljava/util/ArrayList;)[Landroid/content/ContentProviderResult;", "GetApplyBatch_Ljava_util_ArrayList_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.ContentProviderResult[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="System.Collections.Generic.IList&lt;Android.Content.ContentProviderOperation&gt;" />
      </Parameters>
      <Docs>
        <param name="operations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AttachInfo">
      <MemberSignature Language="C#" Value="public virtual void AttachInfo (Android.Content.Context context, Android.Content.PM.ProviderInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachInfo(class Android.Content.Context context, class Android.Content.PM.ProviderInfo info) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("attachInfo", "(Landroid/content/Context;Landroid/content/pm/ProviderInfo;)V", "GetAttachInfo_Landroid_content_Context_Landroid_content_pm_ProviderInfo_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="info" Type="Android.Content.PM.ProviderInfo" />
      </Parameters>
      <Docs>
        <param name="context">The context this provider is running in</param>
        <param name="info">Registered information about this content provider
</param>
        <summary>After being instantiated, this is called to tell the content provider
 about itself.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="BulkInsert">
      <MemberSignature Language="C#" Value="public virtual int BulkInsert (Android.Net.Uri uri, Android.Content.ContentValues[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 BulkInsert(class Android.Net.Uri uri, class Android.Content.ContentValues[] values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("bulkInsert", "(Landroid/net/Uri;[Landroid/content/ContentValues;)I", "GetBulkInsert_Landroid_net_Uri_arrayLandroid_content_ContentValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="values" Type="Android.Content.ContentValues[]" />
      </Parameters>
      <Docs>
        <param name="uri">The content:// URI of the insertion request.</param>
        <param name="values">An array of sets of column_name/value pairs to add to the database.
    This must not be <c>null</c>.</param>
        <summary>Override this to handle requests to insert a set of new rows, or the
 default implementation will iterate over the values and call
 <c><see cref="M:Android.Content.ContentProvider.Insert(Android.Net.Uri, Android.Content.ContentValues)" /></c> on each of them.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public virtual Android.OS.Bundle Call (string method, string arg, Android.OS.Bundle extras);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.Bundle Call(string method, string arg, class Android.OS.Bundle extras) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("call", "(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;", "GetCall_Ljava_lang_String_Ljava_lang_String_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.Bundle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="arg" Type="System.String" />
        <Parameter Name="extras" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="method">method name to call.  Opaque to framework, but should not be <c>null</c>.</param>
        <param name="arg">provider-defined String argument.  May be <c>null</c>.</param>
        <param name="extras">provider-defined Bundle argument.  May be <c>null</c>.</param>
        <summary>Call a provider-defined method.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="CallingPackage">
      <MemberSignature Language="C#" Value="public string CallingPackage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CallingPackage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCallingPackage", "()Ljava/lang/String;", "GetGetCallingPackageHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the package name of the caller that initiated the request being
 processed on the current thread.</summary>
        <value>To be added.</value>
        <remarks />
        <exception cref="T:Java.Lang.SecurityException">if the calling package doesn't belong to the
             calling UID.
</exception>
        <altmember cref="P:Android.OS.Binder.CallingUid" />
        <altmember cref="M:Android.Content.Context.GrantUriPermission(System.String, Android.Net.Uri, Android.Net.Uri)" />
      </Docs>
      <since version="Added in API level 19" />
    </Member>
    <Member MemberName="Canonicalize">
      <MemberSignature Language="C#" Value="public virtual Android.Net.Uri Canonicalize (Android.Net.Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Net.Uri Canonicalize(class Android.Net.Uri url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("canonicalize", "(Landroid/net/Uri;)Landroid/net/Uri;", "GetCanonicalize_Landroid_net_Uri_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="url">The Uri to canonicalize.</param>
        <summary>Implement this to support canonicalization of URIs that refer to your
 content provider.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public Android.Content.Context Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Content.Context Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getContext", "()Landroid/content/Context;", "GetGetContextHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieves the Context this provider is running in.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public abstract int Delete (Android.Net.Uri uri, string selection, string[] selectionArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Delete(class Android.Net.Uri uri, string selection, string[] selectionArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("delete", "(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I", "GetDelete_Landroid_net_Uri_Ljava_lang_String_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="uri">The full URI to query, including a row ID (if a specific record is requested).</param>
        <param name="selection">An optional restriction to apply to rows when deleting.</param>
        <param name="selectionArgs">To be added.</param>
        <summary>Implement this to handle requests to delete one or more rows.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Android.Database.SQLException" />
      </Docs>
    </Member>
    <Member MemberName="Dump">
      <MemberSignature Language="C#" Value="public virtual void Dump (Java.IO.FileDescriptor fd, Java.IO.PrintWriter writer, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dump(class Java.IO.FileDescriptor fd, class Java.IO.PrintWriter writer, string[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dump", "(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V", "GetDump_Ljava_io_FileDescriptor_Ljava_io_PrintWriter_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="writer" Type="Java.IO.PrintWriter" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fd">The raw file descriptor that the dump is being sent to.</param>
        <param name="writer">The PrintWriter to which you should dump your state.  This will be
 closed for you after you return.</param>
        <param name="args">additional arguments to the dump request.
</param>
        <summary>Print the Provider's state into the given stream.</summary>
        <remarks />
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="DumpAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DumpAsync (Java.IO.FileDescriptor fd, Java.IO.PrintWriter writer, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DumpAsync(class Java.IO.FileDescriptor fd, class Java.IO.PrintWriter writer, string[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="writer" Type="Java.IO.PrintWriter" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fd">To be added.</param>
        <param name="writer">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetPathPermissions">
      <MemberSignature Language="C#" Value="public Android.Content.PM.PathPermission[] GetPathPermissions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Content.PM.PathPermission[] GetPathPermissions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPathPermissions", "()[Landroid/content/pm/PathPermission;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.PM.PathPermission[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Return the path-based permissions required for read and/or write access to
 this content provider.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="GetStreamTypes">
      <MemberSignature Language="C#" Value="public virtual string[] GetStreamTypes (Android.Net.Uri uri, string mimeTypeFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetStreamTypes(class Android.Net.Uri uri, string mimeTypeFilter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getStreamTypes", "(Landroid/net/Uri;Ljava/lang/String;)[Ljava/lang/String;", "GetGetStreamTypes_Landroid_net_Uri_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeTypeFilter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The data in the content provider being queried.</param>
        <param name="mimeTypeFilter">The type of data the client desires.  May be
 a pattern, such as *&amp;#47;* to retrieve all possible data types.</param>
        <summary>Called by a client to determine the types of data streams that this
 content provider supports for the given URI.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 11" />
        <altmember cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenTypedAssetFile(Android.Net.Uri, System.String, System.String)" />
        <altmember cref="M:Android.Content.ClipDescription.CompareMimeTypes(System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public abstract string GetType (Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetType(class Android.Net.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getType", "(Landroid/net/Uri;)Ljava/lang/String;", "GetGetType_Landroid_net_Uri_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">the URI to query.</param>
        <summary>Implement this to handle requests for the MIME type of the data at the
 given URI.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public abstract Android.Net.Uri Insert (Android.Net.Uri uri, Android.Content.ContentValues values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Net.Uri Insert(class Android.Net.Uri uri, class Android.Content.ContentValues values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("insert", "(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;", "GetInsert_Landroid_net_Uri_Landroid_content_ContentValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="values" Type="Android.Content.ContentValues" />
      </Parameters>
      <Docs>
        <param name="uri">The content:// URI of the insertion request. This must not be <c>null</c>.</param>
        <param name="values">A set of column_name/value pairs to add to the database.
     This must not be <c>null</c>.</param>
        <summary>Implement this to handle requests to insert a new row.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsTemporary">
      <MemberSignature Language="C#" Value="protected virtual bool IsTemporary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemporary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isTemporary", "()Z", "GetIsTemporaryHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns true if this instance is a temporary content provider.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnConfigurationChanged">
      <MemberSignature Language="C#" Value="public virtual void OnConfigurationChanged (Android.Content.Res.Configuration newConfig);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnConfigurationChanged(class Android.Content.Res.Configuration newConfig) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onConfigurationChanged", "(Landroid/content/res/Configuration;)V", "GetOnConfigurationChanged_Landroid_content_res_Configuration_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newConfig" Type="Android.Content.Res.Configuration" />
      </Parameters>
      <Docs>
        <param name="newConfig">The new device configuration.
</param>
        <summary>Called by the system when the device configuration changes while your
 component is running.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnCreate">
      <MemberSignature Language="C#" Value="public abstract bool OnCreate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnCreate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreate", "()Z", "GetOnCreateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implement this to initialize your content provider on startup.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnLowMemory">
      <MemberSignature Language="C#" Value="public virtual void OnLowMemory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnLowMemory() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onLowMemory", "()V", "GetOnLowMemoryHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This is called when the overall system is running low on memory, and
 actively running processes should trim their memory usage.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="OnTrimMemory">
      <MemberSignature Language="C#" Value="public virtual void OnTrimMemory (Android.Content.TrimMemory level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnTrimMemory(valuetype Android.Content.TrimMemory level) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onTrimMemory", "(I)V", "GetOnTrimMemory_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="Android.Content.TrimMemory" />
      </Parameters>
      <Docs>
        <param name="level">The context of the trim, giving a hint of the amount of
 trimming the application may like to perform.  May be
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryComplete" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryModerate" /></c>,
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryBackground" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryUiHidden" /></c>,
 <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningCritical" /></c>, <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningLow" /></c>,
 or <c><see cref="F:Android.Content.ComponentCallbacks2.TrimMemoryRunningModerate" /></c>.
</param>
        <summary>Called when the operating system has determined that it is a good
 time for a process to trim unneeded memory from its process.</summary>
        <remarks />
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="OpenAssetFile">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Res.AssetFileDescriptor OpenAssetFile (Android.Net.Uri uri, string mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Res.AssetFileDescriptor OpenAssetFile(class Android.Net.Uri uri, string mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openAssetFile", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;", "GetOpenAssetFile_Landroid_net_Uri_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose file is to be opened.</param>
        <param name="mode">Access mode for the file.  May be "r" for read-only access,
 "w" for write-only access (erasing whatever data is currently in
 the file), "wa" for write-only access to append to any existing data,
 "rw" for read and write access on any existing data, and "rwt" for read
 and write access that truncates any existing file.</param>
        <summary>This is like <c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri, System.String)" /></c>, but can be implemented by providers
 that need to be able to return sub-sections of files, often assets
 inside of their .apk.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the file.</exception>
        <altmember cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="OpenAssetFile">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Res.AssetFileDescriptor OpenAssetFile (Android.Net.Uri uri, string mode, Android.OS.CancellationSignal signal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Res.AssetFileDescriptor OpenAssetFile(class Android.Net.Uri uri, string mode, class Android.OS.CancellationSignal signal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openAssetFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;", "GetOpenAssetFile_Landroid_net_Uri_Ljava_lang_String_Landroid_os_CancellationSignal_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="signal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose file is to be opened.</param>
        <param name="mode">Access mode for the file.  May be "r" for read-only access,
 "w" for write-only access (erasing whatever data is currently in
 the file), "wa" for write-only access to append to any existing data,
 "rw" for read and write access on any existing data, and "rwt" for read
 and write access that truncates any existing file.</param>
        <param name="signal">A signal to cancel the operation in progress, or
            <c>null</c> if none. For example, if you are downloading a
            file from the network to service a "rw" mode request, you
            should periodically call
            <c><see cref="M:Android.OS.CancellationSignal.ThrowIfCanceled" /></c> to check whether
            the client has canceled the request and abort the download.</param>
        <summary>This is like <c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri, System.String)" /></c>, but can be implemented by providers
 that need to be able to return sub-sections of files, often assets
 inside of their .apk.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the file.</exception>
        <altmember cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="OpenFile">
      <MemberSignature Language="C#" Value="public virtual Android.OS.ParcelFileDescriptor OpenFile (Android.Net.Uri uri, string mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.ParcelFileDescriptor OpenFile(class Android.Net.Uri uri, string mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openFile", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;", "GetOpenFile_Landroid_net_Uri_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose file is to be opened.</param>
        <param name="mode">Access mode for the file.  May be "r" for read-only access,
 "rw" for read and write access, or "rwt" for read and write access
 that truncates any existing file.</param>
        <summary>Override this to handle requests to open a file blob.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the file.</exception>
        <altmember cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />
        <altmember cref="M:Android.OS.ParcelFileDescriptor.ParseMode(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OpenFile">
      <MemberSignature Language="C#" Value="public virtual Android.OS.ParcelFileDescriptor OpenFile (Android.Net.Uri uri, string mode, Android.OS.CancellationSignal signal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.ParcelFileDescriptor OpenFile(class Android.Net.Uri uri, string mode, class Android.OS.CancellationSignal signal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;", "GetOpenFile_Landroid_net_Uri_Ljava_lang_String_Landroid_os_CancellationSignal_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="signal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The URI whose file is to be opened.</param>
        <param name="mode">Access mode for the file. May be "r" for read-only access,
            "w" for write-only access, "rw" for read and write access, or
            "rwt" for read and write access that truncates any existing
            file.</param>
        <param name="signal">A signal to cancel the operation in progress, or
            <c>null</c> if none. For example, if you are downloading a
            file from the network to service a "rw" mode request, you
            should periodically call
            <c><see cref="M:Android.OS.CancellationSignal.ThrowIfCanceled" /></c> to check whether
            the client has canceled the request and abort the download.</param>
        <summary>Override this to handle requests to open a file blob.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the file.</exception>
        <altmember cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenFileHelper(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.GetType(Android.Net.Uri)" />
        <altmember cref="M:Android.OS.ParcelFileDescriptor.ParseMode(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OpenFileHelper">
      <MemberSignature Language="C#" Value="protected Android.OS.ParcelFileDescriptor OpenFileHelper (Android.Net.Uri uri, string mode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Android.OS.ParcelFileDescriptor OpenFileHelper(class Android.Net.Uri uri, string mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openFileHelper", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to be opened.</param>
        <param name="mode">The file mode.  May be "r" for read-only access,
 "w" for write-only access (erasing whatever data is currently in
 the file), "wa" for write-only access to append to any existing data,
 "rw" for read and write access on any existing data, and "rwt" for read
 and write access that truncates any existing file.</param>
        <summary>Convenience for subclasses that wish to implement <c><see cref="M:Android.Content.ContentProvider.OpenFile(Android.Net.Uri, System.String)" /></c>
 by looking up a column named "_data" at the given URI.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="OpenPipeHelper">
      <MemberSignature Language="C#" Value="public virtual Android.OS.ParcelFileDescriptor OpenPipeHelper (Android.Net.Uri uri, string mimeType, Android.OS.Bundle opts, Java.Lang.Object args, Android.Content.ContentProvider.IPipeDataWriter func);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.OS.ParcelFileDescriptor OpenPipeHelper(class Android.Net.Uri uri, string mimeType, class Android.OS.Bundle opts, class Java.Lang.Object args, class Android.Content.ContentProvider/IPipeDataWriter func) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openPipeHelper", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/Object;Landroid/content/ContentProvider$PipeDataWriter;)Landroid/os/ParcelFileDescriptor;", "GetOpenPipeHelper_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_Ljava_lang_Object_Landroid_content_ContentProvider_PipeDataWriter_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.OS.ParcelFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeType" Type="System.String" />
        <Parameter Name="opts" Type="Android.OS.Bundle" />
        <Parameter Name="args" Type="Java.Lang.Object" />
        <Parameter Name="func" Type="Android.Content.ContentProvider+IPipeDataWriter" />
      </Parameters>
      <Docs>
        <param name="uri">To be added.</param>
        <param name="mimeType">To be added.</param>
        <param name="opts">To be added.</param>
        <param name="args">To be added.</param>
        <param name="func">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="OpenTypedAssetFile">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Res.AssetFileDescriptor OpenTypedAssetFile (Android.Net.Uri uri, string mimeTypeFilter, Android.OS.Bundle opts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Res.AssetFileDescriptor OpenTypedAssetFile(class Android.Net.Uri uri, string mimeTypeFilter, class Android.OS.Bundle opts) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openTypedAssetFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/res/AssetFileDescriptor;", "GetOpenTypedAssetFile_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeTypeFilter" Type="System.String" />
        <Parameter Name="opts" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="uri">The data in the content provider being queried.</param>
        <param name="mimeTypeFilter">The type of data the client desires.  May be
 a pattern, such as *&amp;#47;*, if the caller does not have specific type
 requirements; in this case the content provider will pick its best
 type matching the pattern.</param>
        <param name="opts">Additional options from the client.  The definitions of
 these are specific to the content provider being called.</param>
        <summary>Called by a client to open a read-only stream containing data of a
 particular MIME type.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 11" />
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the data.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">Throws IllegalArgumentException if the
 content provider does not support the requested MIME type.</exception>
        <altmember cref="M:Android.Content.ContentProvider.GetStreamTypes(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ClipDescription.CompareMimeTypes(System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="OpenTypedAssetFile">
      <MemberSignature Language="C#" Value="public virtual Android.Content.Res.AssetFileDescriptor OpenTypedAssetFile (Android.Net.Uri uri, string mimeTypeFilter, Android.OS.Bundle opts, Android.OS.CancellationSignal signal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Content.Res.AssetFileDescriptor OpenTypedAssetFile(class Android.Net.Uri uri, string mimeTypeFilter, class Android.OS.Bundle opts, class Android.OS.CancellationSignal signal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("openTypedAssetFile", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;", "GetOpenTypedAssetFile_Landroid_net_Uri_Ljava_lang_String_Landroid_os_Bundle_Landroid_os_CancellationSignal_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Res.AssetFileDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeTypeFilter" Type="System.String" />
        <Parameter Name="opts" Type="Android.OS.Bundle" />
        <Parameter Name="signal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The data in the content provider being queried.</param>
        <param name="mimeTypeFilter">The type of data the client desires.  May be
 a pattern, such as *&amp;#47;*, if the caller does not have specific type
 requirements; in this case the content provider will pick its best
 type matching the pattern.</param>
        <param name="opts">Additional options from the client.  The definitions of
 these are specific to the content provider being called.</param>
        <param name="signal">A signal to cancel the operation in progress, or
            <c>null</c> if none. For example, if you are downloading a
            file from the network to service a "rw" mode request, you
            should periodically call
            <c><see cref="M:Android.OS.CancellationSignal.ThrowIfCanceled" /></c> to check whether
            the client has canceled the request and abort the download.</param>
        <summary>Called by a client to open a read-only stream containing data of a
 particular MIME type.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.IO.FileNotFoundException">Throws FileNotFoundException if there is
 no file associated with the given URI or the mode is invalid.</exception>
        <exception cref="T:Java.Lang.SecurityException">Throws SecurityException if the caller does
 not have permission to access the data.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">Throws IllegalArgumentException if the
 content provider does not support the requested MIME type.</exception>
        <altmember cref="M:Android.Content.ContentProvider.GetStreamTypes(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ContentProvider.OpenAssetFile(Android.Net.Uri, System.String)" />
        <altmember cref="M:Android.Content.ClipDescription.CompareMimeTypes(System.String, System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public abstract Android.Database.ICursor Query (Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor Query(class Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("query", "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;", "GetQuery_Landroid_net_Uri_arrayLjava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="projection" Type="System.String[]" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="sortOrder" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to query. This will be the full URI sent by the client;
      if the client is requesting a specific record, the URI will end in a record number
      that the implementation should parse and add to a WHERE or HAVING clause, specifying
      that _id value.</param>
        <param name="projection">The list of columns to put into the cursor. If
      <c>null</c> all columns are included.</param>
        <param name="selection">A selection criteria to apply when filtering rows.
      If <c>null</c> then all rows are included.</param>
        <param name="selectionArgs">You may include ?s in selection, which will be replaced by
      the values from selectionArgs, in order that they appear in the selection.
      The values will be bound as Strings.</param>
        <param name="sortOrder">How the rows in the cursor should be sorted.
      If <c>null</c> then the provider is free to define the sort order.</param>
        <summary>Implement this to handle query requests from clients.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public virtual Android.Database.ICursor Query (Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder, Android.OS.CancellationSignal cancellationSignal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Database.ICursor Query(class Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder, class Android.OS.CancellationSignal cancellationSignal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("query", "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;", "GetQuery_Landroid_net_Uri_arrayLjava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Landroid_os_CancellationSignal_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="projection" Type="System.String[]" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="sortOrder" Type="System.String" />
        <Parameter Name="cancellationSignal" Type="Android.OS.CancellationSignal" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to query. This will be the full URI sent by the client;
      if the client is requesting a specific record, the URI will end in a record number
      that the implementation should parse and add to a WHERE or HAVING clause, specifying
      that _id value.</param>
        <param name="projection">The list of columns to put into the cursor. If
      <c>null</c> all columns are included.</param>
        <param name="selection">A selection criteria to apply when filtering rows.
      If <c>null</c> then all rows are included.</param>
        <param name="selectionArgs">You may include ?s in selection, which will be replaced by
      the values from selectionArgs, in order that they appear in the selection.
      The values will be bound as Strings.</param>
        <param name="sortOrder">How the rows in the cursor should be sorted.
      If <c>null</c> then the provider is free to define the sort order.</param>
        <param name="cancellationSignal">A signal to cancel the operation in progress, or <c>null</c> if none.
 If the operation is canceled, then <c><see cref="T:Android.OS.OperationCanceledException" /></c> will be thrown
 when the query is executed.</param>
        <summary>Implement this to handle query requests from clients with support for cancellation.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ReadPermission">
      <MemberSignature Language="C#" Value="public string ReadPermission { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ReadPermission" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getReadPermission", "()Ljava/lang/String;", "GetGetReadPermissionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setReadPermission", "(Ljava/lang/String;)V", "GetSetReadPermission_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the name of the permission required for read-only access to
 this content provider.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetPathPermissions">
      <MemberSignature Language="C#" Value="protected void SetPathPermissions (Android.Content.PM.PathPermission[] permissions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetPathPermissions(class Android.Content.PM.PathPermission[] permissions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPathPermissions", "([Landroid/content/pm/PathPermission;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissions" Type="Android.Content.PM.PathPermission[]" />
      </Parameters>
      <Docs>
        <param name="permissions">Array of path permission descriptions.
</param>
        <summary>Change the path-based permission required to read and/or write data in
 the content provider.</summary>
        <remarks />
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="SetReadPermission">
      <MemberSignature Language="C#" Value="protected void SetReadPermission (string permission);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetReadPermission(string permission) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permission" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="permission">To be added.</param>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SetWritePermission">
      <MemberSignature Language="C#" Value="protected void SetWritePermission (string permission);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetWritePermission(string permission) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permission" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="permission">To be added.</param>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public virtual void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("shutdown", "()V", "GetShutdownHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implement this to shut down the ContentProvider instance.</summary>
        <remarks />
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Uncanonicalize">
      <MemberSignature Language="C#" Value="public virtual Android.Net.Uri Uncanonicalize (Android.Net.Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Net.Uri Uncanonicalize(class Android.Net.Uri url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("uncanonicalize", "(Landroid/net/Uri;)Landroid/net/Uri;", "GetUncanonicalize_Landroid_net_Uri_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="url">The Uri to remove any canonicalization from.</param>
        <summary>Remove canonicalization from canonical URIs previously returned by
 <c><see cref="M:Android.Content.ContentProvider.Canonicalize(Android.Net.Uri)" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public abstract int Update (Android.Net.Uri uri, Android.Content.ContentValues values, string selection, string[] selectionArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class Android.Net.Uri uri, class Android.Content.ContentValues values, string selection, string[] selectionArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("update", "(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I", "GetUpdate_Landroid_net_Uri_Landroid_content_ContentValues_Ljava_lang_String_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="values" Type="Android.Content.ContentValues" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to query. This can potentially have a record ID if this
 is an update request for a specific record.</param>
        <param name="values">A set of column_name/value pairs to update in the database.
     This must not be <c>null</c>.</param>
        <param name="selection">An optional filter to match rows to update.</param>
        <param name="selectionArgs">To be added.</param>
        <summary>Implement this to handle requests to update one or more rows.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="WritePermission">
      <MemberSignature Language="C#" Value="public string WritePermission { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WritePermission" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getWritePermission", "()Ljava/lang/String;", "GetGetWritePermissionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setWritePermission", "(Ljava/lang/String;)V", "GetSetWritePermission_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the name of the permission required for read/write access to
 this content provider.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
