<Type Name="ITemplates" FullName="Javax.Xml.Transform.ITemplates">
  <TypeSignature Language="C#" Value="public interface ITemplates : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITemplates implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("javax/xml/transform/Templates", "", "Javax.Xml.Transform.ITemplatesInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="8">
    <summary>An object that implements this interface is the runtime representation of processed
 transformation instructions.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">An object that implements this interface is the runtime representation of processed
 transformation instructions.

 </para>
      <para tool="javadoc-to-mdoc">Templates must be thread-safe for a given instance
 over multiple threads running concurrently, and may
 be used multiple times in a given session.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/javax/xml/transform/Templates.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 8" />
  </Docs>
  <Members>
    <Member MemberName="NewTransformer">
      <MemberSignature Language="C#" Value="public Javax.Xml.Transform.Transformer NewTransformer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Javax.Xml.Transform.Transformer NewTransformer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newTransformer", "()Ljavax/xml/transform/Transformer;", "GetNewTransformerHandler:Javax.Xml.Transform.ITemplatesInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Javax.Xml.Transform.Transformer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Create a new transformation context for this Templates object.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Create a new transformation context for this Templates object.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/xml/transform/Templates.html#newTransformer()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <exception cref="T:Javax.Xml.Transform.TransformerConfigurationException">if a Transformer can not be created.
</exception>
      </Docs>
    </Member>
    <Member MemberName="OutputProperties">
      <MemberSignature Language="C#" Value="public Java.Util.Properties OutputProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Util.Properties OutputProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getOutputProperties", "()Ljava/util/Properties;", "GetGetOutputPropertiesHandler:Javax.Xml.Transform.ITemplatesInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Util.Properties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the properties corresponding to the effective xsl:output element.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the properties corresponding to the effective xsl:output element.
 The object returned will
 be a clone of the internal values. Accordingly, it can be mutated
 without mutating the Templates object, and then handed in to
 <c><see cref="P:Javax.Xml.Transform.Transformer.OutputProperties" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">The properties returned should contain properties set by the stylesheet,
 and these properties are "defaulted" by default properties specified by
 .  The properties that
 were specifically set by the stylesheet should be in the base
 Properties list, while the XSLT default properties that were not
 specifically set should be in the "default" Properties list.  Thus,
 getOutputProperties().getProperty(String key) will obtain any
 property in that was set by the stylesheet, <i>or</i> the default
 properties, while
 getOutputProperties().get(String key) will only retrieve properties
 that were explicitly set in the stylesheet.</para>
          <para tool="javadoc-to-mdoc">For XSLT,
  attribute values will
 be returned unexpanded (since there is no context at this point).  The
 namespace prefixes inside Attribute Value Templates will be unexpanded,
 so that they remain valid XPath values.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/javax/xml/transform/Templates.html#getOutputProperties()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
  </Members>
</Type>
