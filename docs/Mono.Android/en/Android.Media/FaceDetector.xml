<Type Name="FaceDetector" FullName="Android.Media.FaceDetector">
  <TypeSignature Language="C#" Value="public class FaceDetector : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FaceDetector extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/FaceDetector", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Identifies the faces of people in a 
 <c><see cref="T:Android.Graphics.Bitmap" /></c> graphic object.</summary>
    <remarks><para tool="javadoc-to-mdoc">Identifies the faces of people in a 
 <c><see cref="T:Android.Graphics.Bitmap" /></c> graphic object.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/FaceDetector.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FaceDetector (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FaceDetector (int width, int height, int maxFaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 width, int32 height, int32 maxFaces) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "(III)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="maxFaces" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="maxFaces">To be added.</param>
        <summary>Creates a FaceDetector, configured with the size of the images to
 be analysed and the maximum number of faces that can be detected.</summary>
        <remarks><para tool="javadoc-to-mdoc">Creates a FaceDetector, configured with the size of the images to
 be analysed and the maximum number of faces that can be detected.
 These parameters cannot be changed once the object is constructed.
 Note that the width of the image must be even.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/FaceDetector.html#FaceDetector(int, int, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="FindFaces">
      <MemberSignature Language="C#" Value="public virtual int FindFaces (Android.Graphics.Bitmap bitmap, Android.Media.FaceDetector.Face[] faces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 FindFaces(class Android.Graphics.Bitmap bitmap, class Android.Media.FaceDetector/Face[] faces) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("findFaces", "(Landroid/graphics/Bitmap;[Landroid/media/FaceDetector$Face;)I", "GetFindFaces_Landroid_graphics_Bitmap_arrayLandroid_media_FaceDetector_Face_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="Android.Graphics.Bitmap" />
        <Parameter Name="faces" Type="Android.Media.FaceDetector+Face[]" />
      </Parameters>
      <Docs>
        <param name="bitmap">the <c><see cref="T:Android.Graphics.Bitmap" /></c> graphic to be analyzed</param>
        <param name="faces">an array in which to place all found 
               <c><see cref="!:NoType:android/media/FaceDetector$Face;Href=../../../reference/android/media/FaceDetector.Face.html" /></c>s. The array must be sized equal
               to the <format type="text/html"><var>maxFaces</var></format> value set at initialization</param>
        <summary>Finds all the faces found in a given <c><see cref="T:Android.Graphics.Bitmap" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Finds all the faces found in a given <c><see cref="T:Android.Graphics.Bitmap" /></c>. 
 The supplied array is populated with <c><see cref="!:NoType:android/media/FaceDetector$Face;Href=../../../reference/android/media/FaceDetector.Face.html" /></c>s for each
 face found. The bitmap must be in 565 format (for now).</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/FaceDetector.html#findFaces(android.graphics.Bitmap, android.media.FaceDetector.Face[])" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the Bitmap dimensions don't match
               the dimensions defined at initialization or the given array 
               is not sized equal to the <format type="text/html"><var>maxFaces</var></format> value defined
               at initialization
</exception>
      </Docs>
    </Member>
    <Member MemberName="FindFacesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; FindFacesAsync (Android.Graphics.Bitmap bitmap, Android.Media.FaceDetector.Face[] faces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; FindFacesAsync(class Android.Graphics.Bitmap bitmap, class Android.Media.FaceDetector/Face[] faces) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="Android.Graphics.Bitmap" />
        <Parameter Name="faces" Type="Android.Media.FaceDetector+Face[]" />
      </Parameters>
      <Docs>
        <param name="bitmap">To be added.</param>
        <param name="faces">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
