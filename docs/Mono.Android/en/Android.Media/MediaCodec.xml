<Type Name="MediaCodec" FullName="Android.Media.MediaCodec">
  <TypeSignature Language="C#" Value="public sealed class MediaCodec : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MediaCodec extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/MediaCodec", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>MediaCodec class can be used to access low-level media codec, i.e.
 encoder/decoder components.</summary>
    <remarks><para tool="javadoc-to-mdoc">MediaCodec class can be used to access low-level media codec, i.e.
 encoder/decoder components.

 </para><para tool="javadoc-to-mdoc">MediaCodec is generally used like this:
 <example><code lang="java">
 MediaCodec codec = MediaCodec.createDecoderByType(type);
 codec.configure(format, ...);
 codec.start();

 // if API level &lt;= 20, get input and output buffer arrays here
 ByteBuffer[] inputBuffers = codec.getInputBuffers();
 ByteBuffer[] outputBuffers = codec.getOutputBuffers();
 for (;;) {
   int inputBufferIndex = codec.dequeueInputBuffer(timeoutUs);
   if (inputBufferIndex &gt;= 0) {
     // if API level &gt;= 21, get input buffer here
     ByteBuffer inputBuffer = codec.getInputBuffer(inputBufferIndex);
     // fill inputBuffers[inputBufferIndex] with valid data
     ...
     codec.queueInputBuffer(inputBufferIndex, ...);
   }

   int outputBufferIndex = codec.dequeueOutputBuffer(timeoutUs);
   if (outputBufferIndex &gt;= 0) {
     // if API level &gt;= 21, get output buffer here
     ByteBuffer outputBuffer = codec.getOutputBuffer(outputBufferIndex);
     // outputBuffer is ready to be processed or rendered.
     ...
     codec.releaseOutputBuffer(outputBufferIndex, ...);
   } else if (outputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
     // no needed to handle if API level &gt;= 21 and using getOutputBuffer(int)
     outputBuffers = codec.getOutputBuffers();
   } else if (outputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
     // Subsequent data will conform to new format.
     // can ignore if API level &gt;= 21 and using getOutputFormat(outputBufferIndex)
     MediaFormat format = codec.getOutputFormat();
     ...
   }
 }
 codec.stop();
 codec.release();
 codec = null;
 </code></example>

 Each codec maintains a number of input and output buffers that are
 referred to by index in API calls.
 </para><para tool="javadoc-to-mdoc">
 For API levels 20 and below:
 The contents of these buffers are represented by the ByteBuffer[] arrays
 accessible through <c><see cref="M:Android.Media.MediaCodec.GetInputBuffers" /></c> and <c><see cref="M:Android.Media.MediaCodec.GetOutputBuffers" /></c>.
 </para><para tool="javadoc-to-mdoc">
 After a successful call to <c><see cref="M:Android.Media.MediaCodec.Start" /></c> the client "owns" neither
 input nor output buffers, subsequent calls to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c>
 and <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c> then transfer ownership from the codec
 to the client.</para><para tool="javadoc-to-mdoc">
 The client is not required to resubmit/release buffers immediately
 to the codec, the sample code above simply does this for simplicity's sake.
 Nonetheless, it is possible that a codec may hold off on generating
 output buffers until all outstanding buffers have been
 released/resubmitted.
 </para><para tool="javadoc-to-mdoc">
 Once the client has an input buffer available it can fill it with data
 and submit it it to the codec via a call to <c><see cref="M:Android.Media.MediaCodec.QueueInputBuffer(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" /></c>.
 Do not submit multiple input buffers with the same timestamp (unless
 it is codec-specific data marked as such using the flag
 <c><see cref="F:Android.Media.MediaCodec.BufferFlagCodecConfig" /></c>).
 </para><para tool="javadoc-to-mdoc">
 The codec in turn will return an output buffer to the client in response
 to <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c>. After the output buffer has been processed
 a call to <c><see cref="M:Android.Media.MediaCodec.ReleaseOutputBuffer(System.Int32, System.Boolean)" /></c> will return it to the codec.
 If a video surface has been provided in the call to <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c>,
 <c><see cref="M:Android.Media.MediaCodec.ReleaseOutputBuffer(System.Int32, System.Boolean)" /></c> optionally allows rendering of the buffer
 to the surface.</para><para tool="javadoc-to-mdoc">

 Input buffers (for decoders) and Output buffers (for encoders) contain
 encoded data according to the format's type. For video types this data
 is all the encoded data representing a single moment in time, for audio
 data this is slightly relaxed in that a buffer may contain multiple
 encoded frames of audio. In either case, buffers do not start and end on
 arbitrary byte boundaries, this is not a stream of bytes, it's a stream
 of access units.</para><para tool="javadoc-to-mdoc">

 Most formats also require the actual data to be prefixed by a number
 of buffers containing setup data, or codec specific data, i.e. the
 first few buffers submitted to the codec object after starting it must
 be codec specific data marked as such using the flag <c><see cref="F:Android.Media.MediaCodec.BufferFlagCodecConfig" /></c>
 in a call to <c><see cref="M:Android.Media.MediaCodec.QueueInputBuffer(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" /></c>.
 </para><para tool="javadoc-to-mdoc">
 Codec specific data included in the format passed to <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c>
 (in ByteBuffer entries with keys "csd-0", "csd-1", ...) is automatically
 submitted to the codec, this data MUST NOT be submitted explicitly by the
 client.
 </para><para tool="javadoc-to-mdoc">
 Once the client reaches the end of the input data it signals the end of
 the input stream by specifying a flag of <c><see cref="F:Android.Media.MediaCodec.BufferFlagEndOfStream" /></c> in the call to
 <c><see cref="M:Android.Media.MediaCodec.QueueInputBuffer(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" /></c>. The codec will continue to return output buffers
 until it eventually signals the end of the output stream by specifying
 the same flag (<c><see cref="F:Android.Media.MediaCodec.BufferFlagEndOfStream" /></c>) on the BufferInfo returned in
 <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c>.  Do not submit additional input buffers after
 signaling the end of the input stream, unless the codec has been flushed,
 or stopped and restarted.
 </para><para tool="javadoc-to-mdoc"><format type="text/html"><h3>Seeking &amp; Adaptive Playback Support</h3></format>

 You can check if a decoder supports adaptive playback via <c><see cref="!:NoType:android/media/MediaCodecInfo$CodecCapabilities;Href=../../../reference/android/media/MediaCodecInfo.CodecCapabilities.html#isFeatureSupported(java.lang.String)" /></c>.  Adaptive playback
 is only supported if you configure the codec to decode onto a <c><see cref="T:Android.Views.Surface" /></c>.

 <format type="text/html"><h4>For decoders that do not support adaptive playback (including
 when not decoding onto a Surface)</h4></format>

 In order to start decoding data that's not adjacent to previously submitted
 data (i.e. after a seek) <i>one must</i><c><see cref="M:Android.Media.MediaCodec.Flush" /></c> the decoder.
 Any input or output buffers the client may own at the point of the flush are
 immediately revoked, i.e. after a call to <c><see cref="M:Android.Media.MediaCodec.Flush" /></c> the client does not
 own any buffers anymore.
 </para><para tool="javadoc-to-mdoc">
 It is important that the input data after a flush starts at a suitable
 stream boundary.  The first frame must be able to be decoded completely on
 its own (for most codecs this means an I-frame), and that no frames should
 refer to frames before that first new frame.
 Note that the format of the data submitted after a flush must not change,
 flush does not support format discontinuities,
 for this a full <c><see cref="M:Android.Media.MediaCodec.Stop" /></c>, <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c>, <c><see cref="M:Android.Media.MediaCodec.Start" /></c>
 cycle is necessary.

 <format type="text/html"><h4>For decoders that support adaptive playback</h4></format>

 In order to start decoding data that's not adjacent to previously submitted
 data (i.e. after a seek) it is <i>not necessary</i> to <c><see cref="M:Android.Media.MediaCodec.Flush" /></c> the
 decoder.
 </para><para tool="javadoc-to-mdoc">
 It is still important that the input data after the discontinuity starts
 at a suitable stream boundary (e.g. I-frame), and that no new frames refer
 to frames before the first frame of the new input data segment.
 </para><para tool="javadoc-to-mdoc">
 For some video formats it is also possible to change the picture size
 mid-stream.  To do this for H.264, the new Sequence Parameter Set (SPS) and
 Picture Parameter Set (PPS) values must be packaged together with an
 Instantaneous Decoder Refresh (IDR) frame in a single buffer, which then
 can be enqueued as a regular input buffer.
 The client will receive an <c><see cref="F:Android.Media.MediaCodec.InfoOutputFormatChanged" /></c> return
 value from <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c> or
 <c><see cref="!:NoType:android/media/MediaCodec$Callback;Href=../../../reference/android/media/MediaCodec.Callback.html#onOutputBufferAvailable(android.media.MediaCodec, int, android.media.MediaCodec.BufferInfo)" /></c>
 just after the picture-size change takes place and before any
 frames with the new size have been returned.
 </para><para tool="javadoc-to-mdoc">
 Be careful when calling <c><see cref="M:Android.Media.MediaCodec.Flush" /></c> shortly after you have changed
 the picture size.  If you have not received confirmation of the picture
 size change, you will need to repeat the request for the new picture size.
 E.g. for H.264 you will need to prepend the PPS/SPS to the new IDR
 frame to ensure that the codec receives the picture size change request.

 <format type="text/html"><h3>States and error handling</h3></format></para><para tool="javadoc-to-mdoc"> During its life, a codec conceptually exists in one of the following states:
 Initialized, Configured, Executing, Error, Uninitialized, (omitting transitory states
 between them). When created by one of the factory methods,
 the codec is in the Initialized state; <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c> brings it to the
 Configured state; <c><see cref="M:Android.Media.MediaCodec.Start" /></c> brings it to the Executing state.
 In the Executing state, decoding or encoding occurs through the buffer queue
 manipulation described above. The method <c><see cref="M:Android.Media.MediaCodec.Stop" /></c>
 returns the codec to the Initialized state, whereupon it may be configured again,
 and <c><see cref="M:Android.Media.MediaCodec.Release" /></c> brings the codec to the terminal Uninitialized state.  When
 a codec error occurs, the codec moves to the Error state.  Use <c><see cref="M:Android.Media.MediaCodec.Reset" /></c> to
 bring the codec back to the Initialized state, or <c><see cref="M:Android.Media.MediaCodec.Release" /></c> to move it
 to the Uninitialized state.

 </para><para tool="javadoc-to-mdoc"> The factory methods
 <c><see cref="M:Android.Media.MediaCodec.CreateByCodecName(System.String)" /></c>,
 <c><see cref="M:Android.Media.MediaCodec.CreateDecoderByType(System.String)" /></c>,
 and <c><see cref="M:Android.Media.MediaCodec.CreateEncoderByType(System.String)" /></c>
 throw <c><see cref="T:Java.IO.IOException" /></c> on failure which
 the caller must catch or declare to pass up.
 MediaCodec methods throw <c><see cref="T:Java.Lang.IllegalStateException" /></c>
 when the method is called from a codec state that does not allow it;
 this is typically due to incorrect application API usage.
 Methods involving secure buffers may throw
 <c><see cref="!:NoType:android/media/MediaCodec$CryptoException;Href=../../../reference/android/media/MediaCodec.CryptoException.html#MediaCodec.CryptoException(int, java.lang.String)" /></c>, which
 has further error information obtainable from <c><see cref="!:NoType:android/media/MediaCodec$CryptoException;Href=../../../reference/android/media/MediaCodec.CryptoException.html#getErrorCode()" /></c>.

 </para><para tool="javadoc-to-mdoc"> Internal codec errors result in a <c><see cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html" /></c>,
 which may be due to media content corruption, hardware failure, resource exhaustion,
 and so forth, even when the application is correctly using the API.
 The recommended action when receiving a <c><see cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html" /></c> can be determined by
 calling <c><see cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html#isRecoverable()" /></c> and
 <c><see cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html#isTransient()" /></c>.
 If <c><see cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html#isRecoverable()" /></c> returns true,
 then a <c><see cref="M:Android.Media.MediaCodec.Stop" /></c>, <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c>, and <c><see cref="M:Android.Media.MediaCodec.Start" /></c> can be performed to recover.
 If <c><see cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html#isTransient()" /></c> returns true,
 then resources are temporarily unavailable and the method may be retried at a later time.
 If both <c><see cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html#isRecoverable()" /></c>
 and <c><see cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html#isTransient()" /></c> return false,
 then the <c><see cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html" /></c> is fatal and the codec must be
 <c><see cref="M:Android.Media.MediaCodec.Reset" /></c> or <c><see cref="M:Android.Media.MediaCodec.Release" /></c>.
 Both <c><see cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html#isRecoverable()" /></c> and
 <c><see cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html#isTransient()" /></c> do not return true at the same time.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 16" />
  </Docs>
  <Members>
    <Member MemberName="BufferFlagCodecConfig">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagCodecConfig = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagCodecConfig = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("BUFFER_FLAG_CODEC_CONFIG")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>This indicated that the buffer marked as such contains codec
 initialization / codec specific data instead of media data.</summary>
        <remarks><para tool="javadoc-to-mdoc">This indicated that the buffer marked as such contains codec
 initialization / codec specific data instead of media data.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_CODEC_CONFIG" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="BufferFlagEndOfStream">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagEndOfStream = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagEndOfStream = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("BUFFER_FLAG_END_OF_STREAM")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>This signals the end of stream, i.e. no buffers will be available
 after this, unless of course, <c><see cref="M:Android.Media.MediaCodec.Flush" /></c> follows.</summary>
        <remarks><para tool="javadoc-to-mdoc">This signals the end of stream, i.e. no buffers will be available
 after this, unless of course, <c><see cref="M:Android.Media.MediaCodec.Flush" /></c> follows.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_END_OF_STREAM" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="BufferFlagKeyFrame">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagKeyFrame = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagKeyFrame = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("BUFFER_FLAG_KEY_FRAME")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>This indicates that the (encoded) buffer marked as such contains
 the data for a key frame.</summary>
        <remarks><para tool="javadoc-to-mdoc">This indicates that the (encoded) buffer marked as such contains
 the data for a key frame.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_KEY_FRAME" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BufferFlagSyncFrame">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagSyncFrame = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagSyncFrame = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("BUFFER_FLAG_SYNC_FRAME")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>This indicates that the (encoded) buffer marked as such contains
 the data for a key frame.</summary>
        <remarks><para tool="javadoc-to-mdoc">This indicates that the (encoded) buffer marked as such contains
 the data for a key frame.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_SYNC_FRAME" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="CodecInfo">
      <MemberSignature Language="C#" Value="public Android.Media.MediaCodecInfo CodecInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.MediaCodecInfo CodecInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCodecInfo", "()Landroid/media/MediaCodecInfo;", "GetGetCodecInfoHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the codec info.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Get the codec info. If the codec was created by createDecoderByType
 or createEncoderByType, what component is chosen is not known beforehand,
 and thus the caller does not have the MediaCodecInfo.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#getCodecInfo()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">if in the Uninitialized state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Configure">
      <MemberSignature Language="C#" Value="public void Configure (Android.Media.MediaFormat format, Android.Views.Surface surface, Android.Media.MediaCrypto crypto, Android.Media.MediaCodecConfigFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Configure(class Android.Media.MediaFormat format, class Android.Views.Surface surface, class Android.Media.MediaCrypto crypto, valuetype Android.Media.MediaCodecConfigFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("configure", "(Landroid/media/MediaFormat;Landroid/view/Surface;Landroid/media/MediaCrypto;I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="Android.Media.MediaFormat" />
        <Parameter Name="surface" Type="Android.Views.Surface" />
        <Parameter Name="crypto" Type="Android.Media.MediaCrypto" />
        <Parameter Name="flags" Type="Android.Media.MediaCodecConfigFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">The format of the input data (decoder) or the desired
               format of the output data (encoder).</param>
        <param name="surface">Specify a surface on which to render the output of this
                decoder.</param>
        <param name="crypto">Specify a crypto object to facilitate secure decryption
                of the media data.</param>
        <param name="flags">Specify <c><see cref="F:Android.Media.MediaCodec.ConfigureFlagEncode" /></c> to configure the
                component as an encoder.</param>
        <summary>Configures a component.</summary>
        <remarks><para tool="javadoc-to-mdoc">Configures a component.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the surface has been released (or is invalid),
 or the format is unacceptable (e.g. missing a mandatory key),
 or the flags are not set properly
 (e.g. missing <c><see cref="F:Android.Media.MediaCodec.ConfigureFlagEncode" /></c> for an encoder).</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Initialized state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ConfigureFlagEncode">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecConfigFlags ConfigureFlagEncode = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecConfigFlags ConfigureFlagEncode = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONFIGURE_FLAG_ENCODE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecConfigFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecConfigFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>If this codec is to be used as an encoder, pass this flag.</summary>
        <remarks><para tool="javadoc-to-mdoc">If this codec is to be used as an encoder, pass this flag.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#CONFIGURE_FLAG_ENCODE" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="CreateByCodecName">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaCodec CreateByCodecName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaCodec CreateByCodecName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createByCodecName", "(Ljava/lang/String;)Landroid/media/MediaCodec;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the codec to be instantiated.</param>
        <summary>If you know the exact name of the component you want to instantiate
 use this method to instantiate it.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">If you know the exact name of the component you want to instantiate
 use this method to instantiate it. Use with caution.
 Likely to be used with information obtained from <c><see cref="T:Android.Media.MediaCodecList" /></c></para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#createByCodecName(java.lang.String)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.IO.IOException">if the codec cannot be created.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if name is not valid.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if name is null.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDecoderByType">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaCodec CreateDecoderByType (string type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaCodec CreateDecoderByType(string type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createDecoderByType", "(Ljava/lang/String;)Landroid/media/MediaCodec;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The mime type of the input data.</param>
        <summary>Instantiate a decoder supporting input data of the given mime type.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Instantiate a decoder supporting input data of the given mime type.

 The following is a partial list of defined mime types and their semantics:
 <list type="bullet"><item><term>"video/x-vnd.on2.vp8" - VP8 video (i.e. video in .webm)
 </term></item><item><term>"video/x-vnd.on2.vp9" - VP9 video (i.e. video in .webm)
 </term></item><item><term>"video/avc" - H.264/AVC video
 </term></item><item><term>"video/hevc" - H.265/HEVC video
 </term></item><item><term>"video/mp4v-es" - MPEG4 video
 </term></item><item><term>"video/3gpp" - H.263 video
 </term></item><item><term>"audio/3gpp" - AMR narrowband audio
 </term></item><item><term>"audio/amr-wb" - AMR wideband audio
 </term></item><item><term>"audio/mpeg" - MPEG1/2 audio layer III
 </term></item><item><term>"audio/mp4a-latm" - AAC audio (note, this is raw AAC packets, not packaged in LATM!)
 </term></item><item><term>"audio/vorbis" - vorbis audio
 </term></item><item><term>"audio/g711-alaw" - G.711 alaw audio
 </term></item><item><term>"audio/g711-mlaw" - G.711 ulaw audio
 </term></item></list></para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#createDecoderByType(java.lang.String)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.IO.IOException">if the codec cannot be created.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if type is not a valid mime type.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if type is null.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateEncoderByType">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaCodec CreateEncoderByType (string type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaCodec CreateEncoderByType(string type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createEncoderByType", "(Ljava/lang/String;)Landroid/media/MediaCodec;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The desired mime type of the output data.</param>
        <summary>Instantiate an encoder supporting output data of the given mime type.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Instantiate an encoder supporting output data of the given mime type.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#createEncoderByType(java.lang.String)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.IO.IOException">if the codec cannot be created.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if type is not a valid mime type.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if type is null.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInputSurface">
      <MemberSignature Language="C#" Value="public Android.Views.Surface CreateInputSurface ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Views.Surface CreateInputSurface() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createInputSurface", "()Landroid/view/Surface;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Surface</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Requests a Surface to use as the input to an encoder, in place of input buffers.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Requests a Surface to use as the input to an encoder, in place of input buffers.  This
 may only be called after <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c> and before <c><see cref="M:Android.Media.MediaCodec.Start" /></c>.
 </para><para tool="javadoc-to-mdoc">
 The application is responsible for calling release() on the Surface when
 done.
 </para><para tool="javadoc-to-mdoc">
 The Surface must be rendered with a hardware-accelerated API, such as OpenGL ES.
 <c><see cref="M:Android.Views.Surface.LockCanvas(Android.Graphics.Rect)" /></c> may fail or produce
 unexpected results.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#createInputSurface()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Configured state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CryptoModeAesCtr">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecCryptoMode CryptoModeAesCtr = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecCryptoMode CryptoModeAesCtr = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CRYPTO_MODE_AES_CTR")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecCryptoMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecCryptoMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary></summary>
        <remarks><para tool="javadoc-to-mdoc" /><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#CRYPTO_MODE_AES_CTR" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="CryptoModeUnencrypted">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecCryptoMode CryptoModeUnencrypted = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecCryptoMode CryptoModeUnencrypted = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CRYPTO_MODE_UNENCRYPTED")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecCryptoMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecCryptoMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary></summary>
        <remarks><para tool="javadoc-to-mdoc" /><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#CRYPTO_MODE_UNENCRYPTED" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="DequeueInputBuffer">
      <MemberSignature Language="C#" Value="public int DequeueInputBuffer (long timeoutUs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DequeueInputBuffer(int64 timeoutUs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dequeueInputBuffer", "(J)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeoutUs" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timeoutUs">The timeout in microseconds, a negative timeout indicates "infinite".</param>
        <summary>Returns the index of an input buffer to be filled with valid data
 or -1 if no such buffer is currently available.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns the index of an input buffer to be filled with valid data
 or -1 if no such buffer is currently available.
 This method will return immediately if timeoutUs == 0, wait indefinitely
 for the availability of an input buffer if timeoutUs &lt; 0 or wait up
 to "timeoutUs" microseconds if timeoutUs &gt; 0.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#dequeueInputBuffer(long)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state,
         or codec is configured in asynchronous mode.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="DequeueOutputBuffer">
      <MemberSignature Language="C#" Value="public int DequeueOutputBuffer (Android.Media.MediaCodec.BufferInfo info, long timeoutUs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DequeueOutputBuffer(class Android.Media.MediaCodec/BufferInfo info, int64 timeoutUs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dequeueOutputBuffer", "(Landroid/media/MediaCodec$BufferInfo;J)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="Android.Media.MediaCodec+BufferInfo" />
        <Parameter Name="timeoutUs" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="info">Will be filled with buffer meta data.</param>
        <param name="timeoutUs">The timeout in microseconds, a negative timeout indicates "infinite".</param>
        <summary>Dequeue an output buffer, block at most "timeoutUs" microseconds.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Dequeue an output buffer, block at most "timeoutUs" microseconds.
 Returns the index of an output buffer that has been successfully
 decoded or one of the INFO_* constants below.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#dequeueOutputBuffer(android.media.MediaCodec.BufferInfo, long)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state,
         or codec is configured in asynchronous mode.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("flush", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Flush both input and output ports of the component, all indices
 previously returned in calls to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c> and
 <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c> become invalid.</summary>
        <remarks><para tool="javadoc-to-mdoc">Flush both input and output ports of the component, all indices
 previously returned in calls to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c> and
 <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c> become invalid.
 </para><para tool="javadoc-to-mdoc">
 If codec is configured in asynchronous mode, call <c><see cref="M:Android.Media.MediaCodec.Start" /></c>
 after <c>flush</c> has returned to resume codec operations. The
 codec will not request input buffers until this has happened.
 </para><para tool="javadoc-to-mdoc">
 If codec is configured in synchronous mode, codec will resume
 automatically if an input surface was created.  Otherwise, it
 will resume when <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c> is called.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#flush()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInputBuffer">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteBuffer GetInputBuffer (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteBuffer GetInputBuffer(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInputBuffer", "(I)Ljava/nio/ByteBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously
              returned from a call to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c>,
              or received via an onInputBufferAvailable callback.</param>
        <summary>Returns a <c><see cref="M:Java.Nio.Buffer.Clear" /></c>, writable ByteBuffer
 object for a dequeued input buffer index to contain the input data.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns a <c><see cref="M:Java.Nio.Buffer.Clear" /></c>, writable ByteBuffer
 object for a dequeued input buffer index to contain the input data.

 After calling this method any ByteBuffer or Image object
 previously returned for the same input index MUST no longer
 be used.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#getInputBuffer(int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInputBuffers">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteBuffer[] GetInputBuffers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteBuffer[] GetInputBuffers() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInputBuffers", "()[Ljava/nio/ByteBuffer;", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieve the set of input buffers.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Retrieve the set of input buffers.  Call this after start()
 returns. After calling this method, any ByteBuffers
 previously returned by an earlier call to this method MUST no
 longer be used.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#getInputBuffers()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state,
         or codec is configured in asynchronous mode.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInputImage">
      <MemberSignature Language="C#" Value="public Android.Media.Image GetInputImage (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Media.Image GetInputImage(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInputImage", "(I)Landroid/media/Image;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously
              returned from a call to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c>,
              or received via an onInputBufferAvailable callback.</param>
        <summary>Returns a writable Image object for a dequeued input buffer
 index to contain the raw input video frame.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns a writable Image object for a dequeued input buffer
 index to contain the raw input video frame.

 After calling this method any ByteBuffer or Image object
 previously returned for the same input index MUST no longer
 be used.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#getInputImage(int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOutputBuffer">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteBuffer GetOutputBuffer (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteBuffer GetOutputBuffer(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputBuffer", "(I)Ljava/nio/ByteBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned output buffer previously
              returned from a call to <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c>,
              or received via an onOutputBufferAvailable callback.</param>
        <summary>Returns a read-only ByteBuffer for a dequeued output buffer
 index.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns a read-only ByteBuffer for a dequeued output buffer
 index. The position and limit of the returned buffer are set
 to the valid output data.

 After calling this method, any ByteBuffer or Image object
 previously returned for the same output index MUST no longer
 be used.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#getOutputBuffer(int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOutputBuffers">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteBuffer[] GetOutputBuffers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteBuffer[] GetOutputBuffers() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputBuffers", "()[Ljava/nio/ByteBuffer;", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieve the set of output buffers.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Retrieve the set of output buffers.  Call this after start()
 returns and whenever dequeueOutputBuffer signals an output
 buffer change by returning <c><see cref="F:Android.Media.MediaCodec.InfoOutputBuffersChanged" /></c>. After calling this method, any
 ByteBuffers previously returned by an earlier call to this
 method MUST no longer be used.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#getOutputBuffers()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state,
         or codec is configured in asynchronous mode.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public Android.Media.MediaFormat GetOutputFormat (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Media.MediaFormat GetOutputFormat(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputFormat", "(I)Landroid/media/MediaFormat;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaFormat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously
              returned from a call to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c>.</param>
        <summary>Returns the output format for a specific output buffer.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns the output format for a specific output buffer.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#getOutputFormat(int)" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputImage">
      <MemberSignature Language="C#" Value="public Android.Media.Image GetOutputImage (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Media.Image GetOutputImage(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputImage", "(I)Landroid/media/Image;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned output buffer previously
              returned from a call to <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c>,
              or received via an onOutputBufferAvailable callback.</param>
        <summary>Returns a read-only Image object for a dequeued output buffer
 index that contains the raw video frame.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns a read-only Image object for a dequeued output buffer
 index that contains the raw video frame.

 After calling this method, any ByteBuffer or Image object previously
 returned for the same output index MUST no longer be used.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#getOutputImage(int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="InfoOutputBuffersChanged">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecInfoState InfoOutputBuffersChanged = -3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecInfoState InfoOutputBuffersChanged = (-3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("INFO_OUTPUT_BUFFERS_CHANGED")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecInfoState enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecInfoState</ReturnType>
      </ReturnValue>
      <MemberValue>-3</MemberValue>
      <Docs>
        <summary>The output buffers have changed, the client must refer to the new
 set of output buffers returned by <c><see cref="M:Android.Media.MediaCodec.GetOutputBuffers" /></c> from
 this point on.</summary>
        <remarks><para tool="javadoc-to-mdoc">The output buffers have changed, the client must refer to the new
 set of output buffers returned by <c><see cref="M:Android.Media.MediaCodec.GetOutputBuffers" /></c> from
 this point on.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#INFO_OUTPUT_BUFFERS_CHANGED" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="InfoOutputFormatChanged">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecInfoState InfoOutputFormatChanged = -2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecInfoState InfoOutputFormatChanged = (-2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("INFO_OUTPUT_FORMAT_CHANGED")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecInfoState enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecInfoState</ReturnType>
      </ReturnValue>
      <MemberValue>-2</MemberValue>
      <Docs>
        <summary>The output format has changed, subsequent data will follow the new
 format.</summary>
        <remarks><para tool="javadoc-to-mdoc">The output format has changed, subsequent data will follow the new
 format. <c><see cref="P:Android.Media.MediaCodec.OutputFormat" /></c> returns the new format.  Note, that
 you can also use the new <c><see cref="M:Android.Media.MediaCodec.GetOutputFormat(System.Int32)" /></c> method to
 get the format for a specific output buffer.  This frees you from
 having to track output format changes.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#INFO_OUTPUT_FORMAT_CHANGED" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="InfoTryAgainLater">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecInfoState InfoTryAgainLater = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecInfoState InfoTryAgainLater = (-1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("INFO_TRY_AGAIN_LATER")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecInfoState enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecInfoState</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>If a non-negative timeout had been specified in the call
 to <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c>, indicates that the call timed out.</summary>
        <remarks><para tool="javadoc-to-mdoc">If a non-negative timeout had been specified in the call
 to <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c>, indicates that the call timed out.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#INFO_TRY_AGAIN_LATER" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="InputFormat">
      <MemberSignature Language="C#" Value="public Android.Media.MediaFormat InputFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.MediaFormat InputFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getInputFormat", "()Landroid/media/MediaFormat;", "GetGetInputFormatHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Call this after <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c> returns successfully to
 get the input format accepted by the codec.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Call this after <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c> returns successfully to
 get the input format accepted by the codec. Do this to
 determine what optional configuration parameters were
 supported by the codec.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#getInputFormat()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing or
                               Configured state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getName", "()Ljava/lang/String;", "GetGetNameHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the component name.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Get the component name. If the codec was created by createDecoderByType
 or createEncoderByType, what component is chosen is not known beforehand.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#getName()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">if in the Uninitialized state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="OutputFormat">
      <MemberSignature Language="C#" Value="public Android.Media.MediaFormat OutputFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.MediaFormat OutputFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getOutputFormat", "()Landroid/media/MediaFormat;", "GetGetOutputFormatHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Call this after dequeueOutputBuffer signals a format change by returning
 <c><see cref="F:Android.Media.MediaCodec.InfoOutputFormatChanged" /></c>.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Call this after dequeueOutputBuffer signals a format change by returning
 <c><see cref="F:Android.Media.MediaCodec.InfoOutputFormatChanged" /></c>.
 You can also call this after <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c> returns
 successfully to get the output format initially configured
 for the codec.  Do this to determine what optional
 configuration parameters were supported by the codec.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#getOutputFormat()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing or
                               Configured state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ParameterKeyRequestSyncFrame">
      <MemberSignature Language="C#" Value="public const string ParameterKeyRequestSyncFrame;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ParameterKeyRequestSyncFrame" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PARAMETER_KEY_REQUEST_SYNC_FRAME")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Request that the encoder produce a sync frame "soon".</summary>
        <remarks><para tool="javadoc-to-mdoc">Request that the encoder produce a sync frame "soon".
 Provide an Integer with the value 0.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_REQUEST_SYNC_FRAME" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterKeySuspend">
      <MemberSignature Language="C#" Value="public const string ParameterKeySuspend;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ParameterKeySuspend" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PARAMETER_KEY_SUSPEND")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Temporarily suspend/resume encoding of input data.</summary>
        <remarks><para tool="javadoc-to-mdoc">Temporarily suspend/resume encoding of input data. While suspended
 input data is effectively discarded instead of being fed into the
 encoder. This parameter really only makes sense to use with an encoder
 in "surface-input" mode, as the client code has no control over the
 input-side of the encoder in that case.
 The value is an Integer object containing the value 1 to suspend
 or the value 0 to resume.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_SUSPEND" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterKeyVideoBitrate">
      <MemberSignature Language="C#" Value="public const string ParameterKeyVideoBitrate;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ParameterKeyVideoBitrate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PARAMETER_KEY_VIDEO_BITRATE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Change a video encoder's target bitrate on the fly.</summary>
        <remarks><para tool="javadoc-to-mdoc">Change a video encoder's target bitrate on the fly. The value is an
 Integer object containing the new bitrate in bps.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_VIDEO_BITRATE" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueInputBuffer">
      <MemberSignature Language="C#" Value="public void QueueInputBuffer (int index, int offset, int size, long presentationTimeUs, Android.Media.MediaCodecBufferFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueInputBuffer(int32 index, int32 offset, int32 size, int64 presentationTimeUs, valuetype Android.Media.MediaCodecBufferFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queueInputBuffer", "(IIIJI)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="presentationTimeUs" Type="System.Int64" />
        <Parameter Name="flags" Type="Android.Media.MediaCodecBufferFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously returned
              in a call to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c>.</param>
        <param name="offset">The byte offset into the input buffer at which the data starts.</param>
        <param name="size">The number of bytes of valid input data.</param>
        <param name="presentationTimeUs">The presentation timestamp in microseconds for this
                           buffer. This is normally the media time at which this
                           buffer should be presented (rendered).</param>
        <param name="flags">A bitmask of flags
              <c><see cref="F:Android.Media.MediaCodec.BufferFlagCodecConfig" /></c> and <c><see cref="F:Android.Media.MediaCodec.BufferFlagEndOfStream" /></c>.
              While not prohibited, most codecs do not use the
              <c><see cref="F:Android.Media.MediaCodec.BufferFlagKeyFrame" /></c> flag for input buffers.</param>
        <summary>After filling a range of the input buffer at the specified index
 submit it to the component.</summary>
        <remarks><para tool="javadoc-to-mdoc">After filling a range of the input buffer at the specified index
 submit it to the component. Once an input buffer is queued to
 the codec, it MUST NOT be used until it is later retrieved by
 <c><see cref="M:Android.Media.MediaCodec.GetInputBuffer(System.Int32)" /></c> in response to a <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c>
 return value or a <c><see cref="!:NoType:android/media/MediaCodec$Callback;Href=../../../reference/android/media/MediaCodec.Callback.html#onInputBufferAvailable(android.media.MediaCodec, int)" /></c>
 callback.
 </para><para tool="javadoc-to-mdoc">
 Many decoders require the actual compressed data stream to be
 preceded by "codec specific data", i.e. setup data used to initialize
 the codec such as PPS/SPS in the case of AVC video or code tables
 in the case of vorbis audio.
 The class <c><see cref="T:Android.Media.MediaExtractor" /></c> provides codec
 specific data as part of
 the returned track format in entries named "csd-0", "csd-1" ...
 </para><para tool="javadoc-to-mdoc">
 These buffers can be submitted directly after <c><see cref="M:Android.Media.MediaCodec.Start" /></c> or
 <c><see cref="M:Android.Media.MediaCodec.Flush" /></c> by specifying the flag <c><see cref="F:Android.Media.MediaCodec.BufferFlagCodecConfig" /></c>.  However, if you configure the
 codec with a <c><see cref="T:Android.Media.MediaFormat" /></c> containing these keys, they
 will be automatically submitted by MediaCodec directly after
 start.  Therefore, the use of <c><see cref="F:Android.Media.MediaCodec.BufferFlagCodecConfig" /></c> flag is discouraged and is
 recommended only for advanced users.
 </para><para tool="javadoc-to-mdoc">
 To indicate that this is the final piece of input data (or rather that
 no more input data follows unless the decoder is subsequently flushed)
 specify the flag <c><see cref="F:Android.Media.MediaCodec.BufferFlagEndOfStream" /></c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#queueInputBuffer(int, int, int, long, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CryptoException;Href=../../../reference/android/media/MediaCodec.CryptoException.html">if a crypto object has been specified in
         <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c></exception>
      </Docs>
    </Member>
    <Member MemberName="QueueSecureInputBuffer">
      <MemberSignature Language="C#" Value="public void QueueSecureInputBuffer (int index, int offset, Android.Media.MediaCodec.CryptoInfo info, long presentationTimeUs, Android.Media.MediaCodecBufferFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueSecureInputBuffer(int32 index, int32 offset, class Android.Media.MediaCodec/CryptoInfo info, int64 presentationTimeUs, valuetype Android.Media.MediaCodecBufferFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queueSecureInputBuffer", "(IILandroid/media/MediaCodec$CryptoInfo;JI)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="info" Type="Android.Media.MediaCodec+CryptoInfo" />
        <Parameter Name="presentationTimeUs" Type="System.Int64" />
        <Parameter Name="flags" Type="Android.Media.MediaCodecBufferFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously returned
              in a call to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c>.</param>
        <param name="offset">The byte offset into the input buffer at which the data starts.</param>
        <param name="info">Metadata required to facilitate decryption, the object can be
             reused immediately after this call returns.</param>
        <param name="presentationTimeUs">The presentation timestamp in microseconds for this
                           buffer. This is normally the media time at which this
                           buffer should be presented (rendered).</param>
        <param name="flags">A bitmask of flags
              <c><see cref="F:Android.Media.MediaCodec.BufferFlagCodecConfig" /></c> and <c><see cref="F:Android.Media.MediaCodec.BufferFlagEndOfStream" /></c>.
              While not prohibited, most codecs do not use the
              <c><see cref="F:Android.Media.MediaCodec.BufferFlagKeyFrame" /></c> flag for input buffers.</param>
        <summary>Similar to <c><see cref="M:Android.Media.MediaCodec.QueueInputBuffer(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" /></c> but submits a buffer that is
 potentially encrypted.</summary>
        <remarks><para tool="javadoc-to-mdoc">Similar to <c><see cref="M:Android.Media.MediaCodec.QueueInputBuffer(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" /></c> but submits a buffer that is
 potentially encrypted.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#queueSecureInputBuffer(int, int, android.media.MediaCodec.CryptoInfo, long, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CryptoException;Href=../../../reference/android/media/MediaCodec.CryptoException.html">if an error occurs while attempting to decrypt the buffer.
              An error code associated with the exception helps identify the
              reason for the failure.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Make sure you call this when you're done to free up any opened
 component instance instead of relying on the garbage collector
 to do this for you at some point in the future.</summary>
        <remarks><para tool="javadoc-to-mdoc">Make sure you call this when you're done to free up any opened
 component instance instead of relying on the garbage collector
 to do this for you at some point in the future.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#release()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseOutputBuffer">
      <MemberSignature Language="C#" Value="public void ReleaseOutputBuffer (int index, bool render);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseOutputBuffer(int32 index, bool render) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("releaseOutputBuffer", "(IZ)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="render" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned output buffer previously returned
              from a call to <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c>.</param>
        <param name="render">If a valid surface was specified when configuring the codec,
               passing true renders this output buffer to the surface.</param>
        <summary>If you are done with a buffer, use this call to return the buffer to
 the codec.</summary>
        <remarks><para tool="javadoc-to-mdoc">If you are done with a buffer, use this call to return the buffer to
 the codec. If you previously specified a surface when configuring this
 video decoder you can optionally render the buffer.

 Once an output buffer is released to the codec, it MUST NOT
 be used until it is later retrieved by <c><see cref="M:Android.Media.MediaCodec.GetOutputBuffer(System.Int32)" /></c> in response
 to a <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c> return value or a
 <c><see cref="!:NoType:android/media/MediaCodec$Callback;Href=../../../reference/android/media/MediaCodec.Callback.html#onOutputBufferAvailable(android.media.MediaCodec, int, android.media.MediaCodec.BufferInfo)" /></c> callback.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#releaseOutputBuffer(int, boolean)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseOutputBuffer">
      <MemberSignature Language="C#" Value="public void ReleaseOutputBuffer (int index, long renderTimestampNs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseOutputBuffer(int32 index, int64 renderTimestampNs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("releaseOutputBuffer", "(IJ)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="renderTimestampNs" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned output buffer previously returned
              from a call to <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c>.</param>
        <param name="renderTimestampNs">The timestamp to associate with this buffer when
              it is sent to the Surface.</param>
        <summary>If you are done with a buffer, use this call to update its surface timestamp
 and return it to the codec to render it on the output surface.</summary>
        <remarks><para tool="javadoc-to-mdoc">If you are done with a buffer, use this call to update its surface timestamp
 and return it to the codec to render it on the output surface. If you
 have not specified an output surface when configuring this video codec,
 this call will simply return the buffer to the codec.</para><para tool="javadoc-to-mdoc">

 The timestamp may have special meaning depending on the destination surface.

 <format type="text/html"><table><tr><th>SurfaceView specifics</th></tr><tr><td>
 If you render your buffer on a <c><see cref="T:Android.Views.SurfaceView" /></c>,
 you can use the timestamp to render the buffer at a specific time (at the
 VSYNC at or after the buffer timestamp).  For this to work, the timestamp
 needs to be <i>reasonably close</i> to the current <c><see cref="M:Java.Lang.JavaSystem.NanoTime" /></c>.
 Currently, this is set as within one (1) second. A few notes:

 <list type="bullet"><item><term>the buffer will not be returned to the codec until the timestamp
 has passed and the buffer is no longer used by the <c><see cref="T:Android.Views.Surface" /></c>.
 </term></item><item><term>buffers are processed sequentially, so you may block subsequent buffers to
 be displayed on the <c><see cref="T:Android.Views.Surface" /></c>.  This is important if you
 want to react to user action, e.g. stop the video or seek.
 </term></item><item><term>if multiple buffers are sent to the <c><see cref="T:Android.Views.Surface" /></c> to be
 rendered at the same VSYNC, the last one will be shown, and the other ones
 will be dropped.
 </term></item><item><term>if the timestamp is <i>not</i> "reasonably close" to the current system
 time, the <c><see cref="T:Android.Views.Surface" /></c> will ignore the timestamp, and
 display the buffer at the earliest feasible time.  In this mode it will not
 drop frames.
 </term></item><item><term>for best performance and quality, call this method when you are about
 two VSYNCs' time before the desired render time.  For 60Hz displays, this is
 about 33 msec.
 </term></item></list></td></tr></table></format>

 Once an output buffer is released to the codec, it MUST NOT
 be used until it is later retrieved by <c><see cref="M:Android.Media.MediaCodec.GetOutputBuffer(System.Int32)" /></c> in response
 to a <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c> return value or a
 <c><see cref="!:NoType:android/media/MediaCodec$Callback;Href=../../../reference/android/media/MediaCodec.Callback.html#onOutputBufferAvailable(android.media.MediaCodec, int, android.media.MediaCodec.BufferInfo)" /></c> callback.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#releaseOutputBuffer(int, long)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reset", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the codec to its initial (Initialized) state.</summary>
        <remarks><para tool="javadoc-to-mdoc">Returns the codec to its initial (Initialized) state.

 Call this if an <c><see cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html#isRecoverable()" /></c>
 error has occured to reset the codec to its initial state after creation.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#reset()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">if an unrecoverable error has occured and the codec
 could not be reset.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if in the Uninitialized state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetCallback">
      <MemberSignature Language="C#" Value="public void SetCallback (Android.Media.MediaCodec.Callback cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCallback(class Android.Media.MediaCodec/Callback cb) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setCallback", "(Landroid/media/MediaCodec$Callback;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="Android.Media.MediaCodec+Callback" />
      </Parameters>
      <Docs>
        <param name="cb">The callback that will run.
</param>
        <summary>Sets an asynchronous callback for actionable MediaCodec events.</summary>
        <remarks><para tool="javadoc-to-mdoc">Sets an asynchronous callback for actionable MediaCodec events.

 If the client intends to use the component in asynchronous mode,
 a valid callback should be provided before <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c> is called.

 When asynchronous callback is enabled, the client should not call
 <c><see cref="M:Android.Media.MediaCodec.GetInputBuffers" /></c>, <c><see cref="M:Android.Media.MediaCodec.GetOutputBuffers" /></c>,
 <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c> or <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c>.
 </para><para tool="javadoc-to-mdoc">
 Also, <c><see cref="M:Android.Media.MediaCodec.Flush" /></c> behaves differently in asynchronous mode.  After calling
 <c>flush</c>, you must call <c><see cref="M:Android.Media.MediaCodec.Start" /></c> to "resume" receiving input buffers,
 even if an input surface was created.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#setCallback(android.media.MediaCodec.Callback)" target="_blank">[Android Documentation]</a></format></para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public void SetParameters (Android.OS.Bundle params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParameters(class Android.OS.Bundle params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setParameters", "(Landroid/os/Bundle;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="params" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="params">To be added.</param>
        <summary>Communicate additional parameter changes to the component instance.</summary>
        <remarks><para tool="javadoc-to-mdoc">Communicate additional parameter changes to the component instance.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#setParameters(android.os.Bundle)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if in the Uninitialized state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetVideoScalingMode">
      <MemberSignature Language="C#" Value="public void SetVideoScalingMode (Android.Media.VideoScalingMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVideoScalingMode(valuetype Android.Media.VideoScalingMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVideoScalingMode", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Media.VideoScalingMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mode">To be added.</param>
        <summary>If a surface has been specified in a previous call to <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c>
 specifies the scaling mode to use.</summary>
        <remarks><para tool="javadoc-to-mdoc">If a surface has been specified in a previous call to <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c>
 specifies the scaling mode to use. The default is "scale to fit".</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#setVideoScalingMode(int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if mode is not recognized.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if in the Uninitialized state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SignalEndOfInputStream">
      <MemberSignature Language="C#" Value="public void SignalEndOfInputStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SignalEndOfInputStream() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("signalEndOfInputStream", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Signals end-of-stream on input.</summary>
        <remarks><para tool="javadoc-to-mdoc">Signals end-of-stream on input.  Equivalent to submitting an empty buffer with
 <c><see cref="F:Android.Media.MediaCodec.BufferFlagEndOfStream" /></c> set.  This may only be used with
 encoders receiving input from a Surface created by <c><see cref="M:Android.Media.MediaCodec.CreateInputSurface" /></c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#signalEndOfInputStream()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("start", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>After successfully configuring the component, call <c>start</c>.</summary>
        <remarks><para tool="javadoc-to-mdoc">After successfully configuring the component, call <c>start</c>.
 </para><para tool="javadoc-to-mdoc">
 Call <c>start</c> also if the codec is configured in asynchronous mode,
 and it has just been flushed, to resume requesting input buffers.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#start()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Configured state
         or just after <c><see cref="M:Android.Media.MediaCodec.Flush" /></c> for a codec that is configured
         in asynchronous mode.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error. Note that some codec errors
 for start may be attributed to future method calls.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stop", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finish the decode/encode session, note that the codec instance
 remains active and ready to be <c><see cref="M:Android.Media.MediaCodec.Start" /></c>ed again.</summary>
        <remarks><para tool="javadoc-to-mdoc">Finish the decode/encode session, note that the codec instance
 remains active and ready to be <c><see cref="M:Android.Media.MediaCodec.Start" /></c>ed again.
 To ensure that it is available to other client call <c><see cref="M:Android.Media.MediaCodec.Release" /></c>
 and don't just rely on garbage collection to eventually do this for you.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#stop()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if in the Uninitialized state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VideoScalingModeScaleToFit">
      <MemberSignature Language="C#" Value="public const Android.Media.VideoScalingMode VideoScalingModeScaleToFit = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.VideoScalingMode VideoScalingModeScaleToFit = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.VideoScalingMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.VideoScalingMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>The content is scaled to the surface dimensions
</summary>
        <remarks><para tool="javadoc-to-mdoc">The content is scaled to the surface dimensions
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#VIDEO_SCALING_MODE_SCALE_TO_FIT" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="VideoScalingModeScaleToFitWithCropping">
      <MemberSignature Language="C#" Value="public const Android.Media.VideoScalingMode VideoScalingModeScaleToFitWithCropping = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.VideoScalingMode VideoScalingModeScaleToFitWithCropping = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.VideoScalingMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.VideoScalingMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>The content is scaled, maintaining its aspect ratio, the whole
 surface area is used, content may be cropped
</summary>
        <remarks><para tool="javadoc-to-mdoc">The content is scaled, maintaining its aspect ratio, the whole
 surface area is used, content may be cropped
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/media/MediaCodec.html#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
  </Members>
</Type>
