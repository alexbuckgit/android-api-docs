<Type Name="MediaCodec" FullName="Android.Media.MediaCodec">
  <TypeSignature Language="C#" Value="public sealed class MediaCodec : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MediaCodec extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/MediaCodec", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>MediaCodec class can be used to access low-level media codec, i.e.
 encoder/decoder components.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">MediaCodec class can be used to access low-level media codec, i.e.
 encoder/decoder components.

 </para>
      <para tool="javadoc-to-mdoc">MediaCodec is generally used like this:
 <sample external-id="4EEAF78749708288580ABA17B951C97B" />

 Each codec maintains a number of input and output buffers that are
 referred to by index in API calls.
 The contents of these buffers is represented by the ByteBuffer[] arrays
 accessible through getInputBuffers() and getOutputBuffers().

 After a successful call to <c><see cref="M:Android.Media.MediaCodec.Start" /></c> the client "owns" neither
 input nor output buffers, subsequent calls to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c>
 and <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(Android.Media.MediaCodec.BufferInfo, System.Int64)" /></c> then transfer ownership from the codec
 to the client.</para>
      <para tool="javadoc-to-mdoc">
 The client is not required to resubmit/release buffers immediately
 to the codec, the sample code above simply does this for simplicity's sake.</para>
      <para tool="javadoc-to-mdoc">
 Once the client has an input buffer available it can fill it with data
 and submit it it to the codec via a call to <c><see cref="M:Android.Media.MediaCodec.QueueInputBuffer(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" /></c>.</para>
      <para tool="javadoc-to-mdoc">
 The codec in turn will return an output buffer to the client in response
 to <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(Android.Media.MediaCodec.BufferInfo, System.Int64)" /></c>. After the output buffer has been processed
 a call to <c><see cref="M:Android.Media.MediaCodec.ReleaseOutputBuffer(System.Int32, System.Boolean)" /></c> will return it to the codec.
 If a video surface has been provided in the call to <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c>,
 <c><see cref="M:Android.Media.MediaCodec.ReleaseOutputBuffer(System.Int32, System.Boolean)" /></c> optionally allows rendering of the buffer
 to the surface.</para>
      <para tool="javadoc-to-mdoc">

 Input buffers (for decoders) and Output buffers (for encoders) contain
 encoded data according to the format's type. For video types this data
 is all the encoded data representing a single moment in time, for audio
 data this is slightly relaxed in that a buffer may contain multiple
 encoded frames of audio. In either case, buffers do not start and end on
 arbitrary byte boundaries, this is not a stream of bytes, it's a stream
 of access units.</para>
      <para tool="javadoc-to-mdoc">

 Most formats also require the actual data to be prefixed by a number
 of buffers containing setup data, or codec specific data, i.e. the
 first few buffers submitted to the codec object after starting it must
 be codec specific data marked as such using the flag <c><see cref="F:Android.Media.MediaCodec.BufferFlagCodecConfig" /></c>
 in a call to <c><see cref="M:Android.Media.MediaCodec.QueueInputBuffer(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" /></c>.

 Codec specific data included in the format passed to <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c>
 (in ByteBuffer entries with keys "csd-0", "csd-1", ...) is automatically
 submitted to the codec, this data MUST NOT be submitted explicitly by the
 client.

 Once the client reaches the end of the input data it signals the end of
 the input stream by specifying a flag of <c><see cref="F:Android.Media.MediaCodec.BufferFlagEndOfStream" /></c> in the call to
 <c><see cref="M:Android.Media.MediaCodec.QueueInputBuffer(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" /></c>. The codec will continue to return output buffers
 until it eventually signals the end of the output stream by specifying
 the same flag (<c><see cref="F:Android.Media.MediaCodec.BufferFlagEndOfStream" /></c>) on the BufferInfo returned in
 <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(Android.Media.MediaCodec.BufferInfo, System.Int64)" /></c>.

 In order to start decoding data that's not adjacent to previously submitted
 data (i.e. after a seek) it is necessary to <c><see cref="M:Android.Media.MediaCodec.Flush" /></c> the decoder.
 Any input or output buffers the client may own at the point of the flush are
 immediately revoked, i.e. after a call to <c><see cref="M:Android.Media.MediaCodec.Flush" /></c> the client does not
 own any buffers anymore.
 Note that the format of the data submitted after a flush must not change,
 flush does not support format discontinuities,
 for this a full stop(), configure(), start() cycle is necessary.

</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/media/MediaCodec.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 16" />
  </Docs>
  <Members>
    <Member MemberName="BufferFlagCodecConfig">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagCodecConfig = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagCodecConfig = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("BUFFER_FLAG_CODEC_CONFIG")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>This indicated that the buffer marked as such contains codec
 initialization / codec specific data instead of media data.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This indicated that the buffer marked as such contains codec
 initialization / codec specific data instead of media data.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_CODEC_CONFIG" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="BufferFlagEndOfStream">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagEndOfStream = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagEndOfStream = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("BUFFER_FLAG_END_OF_STREAM")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>This signals the end of stream, i.e. no buffers will be available
 after this, unless of course, <c><see cref="M:Android.Media.MediaCodec.Flush" /></c> follows.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This signals the end of stream, i.e. no buffers will be available
 after this, unless of course, <c><see cref="M:Android.Media.MediaCodec.Flush" /></c> follows.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_END_OF_STREAM" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="BufferFlagSyncFrame">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagSyncFrame = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagSyncFrame = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("BUFFER_FLAG_SYNC_FRAME")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>This indicates that the buffer marked as such contains the data
 for a sync frame.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This indicates that the buffer marked as such contains the data
 for a sync frame.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_SYNC_FRAME" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="CodecInfo">
      <MemberSignature Language="C#" Value="public Android.Media.MediaCodecInfo CodecInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.MediaCodecInfo CodecInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCodecInfo", "()Landroid/media/MediaCodecInfo;", "GetGetCodecInfoHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the codec info.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the codec info. If the codec was created by createDecoderByType
 or createEncoderByType, what component is chosen is not known beforehand,
 and thus the caller does not have the MediaCodecInfo.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#getCodecInfo()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="Configure">
      <MemberSignature Language="C#" Value="public void Configure (Android.Media.MediaFormat format, Android.Views.Surface surface, Android.Media.MediaCrypto crypto, Android.Media.MediaCodecConfigFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Configure(class Android.Media.MediaFormat format, class Android.Views.Surface surface, class Android.Media.MediaCrypto crypto, valuetype Android.Media.MediaCodecConfigFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("configure", "(Landroid/media/MediaFormat;Landroid/view/Surface;Landroid/media/MediaCrypto;I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="Android.Media.MediaFormat" />
        <Parameter Name="surface" Type="Android.Views.Surface" />
        <Parameter Name="crypto" Type="Android.Media.MediaCrypto" />
        <Parameter Name="flags" Type="Android.Media.MediaCodecConfigFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">The format of the input data (decoder) or the desired
               format of the output data (encoder).</param>
        <param name="surface">Specify a surface on which to render the output of this
                decoder.</param>
        <param name="crypto">Specify a crypto object to facilitate secure decryption
                of the media data.</param>
        <param name="flags">Specify <c><see cref="F:Android.Media.MediaCodec.ConfigureFlagEncode" /></c> to configure the
                component as an encoder.
</param>
        <summary>Configures a component.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Configures a component.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ConfigureFlagEncode">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecConfigFlags ConfigureFlagEncode = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecConfigFlags ConfigureFlagEncode = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONFIGURE_FLAG_ENCODE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecConfigFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecConfigFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>If this codec is to be used as an encoder, pass this flag.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If this codec is to be used as an encoder, pass this flag.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#CONFIGURE_FLAG_ENCODE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="CreateByCodecName">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaCodec CreateByCodecName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaCodec CreateByCodecName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createByCodecName", "(Ljava/lang/String;)Landroid/media/MediaCodec;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the codec to be instantiated.
</param>
        <summary>If you know the exact name of the component you want to instantiate
 use this method to instantiate it.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">If you know the exact name of the component you want to instantiate
 use this method to instantiate it. Use with caution.
 Likely to be used with information obtained from <c><see cref="T:Android.Media.MediaCodecList" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#createByCodecName(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="CreateDecoderByType">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaCodec CreateDecoderByType (string type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaCodec CreateDecoderByType(string type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createDecoderByType", "(Ljava/lang/String;)Landroid/media/MediaCodec;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The mime type of the input data.
</param>
        <summary>Instantiate a decoder supporting input data of the given mime type.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Instantiate a decoder supporting input data of the given mime type.

 The following is a partial list of defined mime types and their semantics:
 <list type="bullet"><item><term>"video/x-vnd.on2.vp8" - VPX video (i.e. video in .webm)
 </term></item><item><term>"video/avc" - H.264/AVC video
 </term></item><item><term>"video/mp4v-es" - MPEG4 video
 </term></item><item><term>"video/3gpp" - H.263 video
 </term></item><item><term>"audio/3gpp" - AMR narrowband audio
 </term></item><item><term>"audio/amr-wb" - AMR wideband audio
 </term></item><item><term>"audio/mpeg" - MPEG1/2 audio layer III
 </term></item><item><term>"audio/mp4a-latm" - AAC audio
 </term></item><item><term>"audio/vorbis" - vorbis audio
 </term></item><item><term>"audio/g711-alaw" - G.711 alaw audio
 </term></item><item><term>"audio/g711-mlaw" - G.711 ulaw audio
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#createDecoderByType(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="CreateEncoderByType">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaCodec CreateEncoderByType (string type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaCodec CreateEncoderByType(string type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createEncoderByType", "(Ljava/lang/String;)Landroid/media/MediaCodec;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The desired mime type of the output data.
</param>
        <summary>Instantiate an encoder supporting output data of the given mime type.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Instantiate an encoder supporting output data of the given mime type.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#createEncoderByType(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="CreateInputSurface">
      <MemberSignature Language="C#" Value="public Android.Views.Surface CreateInputSurface ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Views.Surface CreateInputSurface() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createInputSurface", "()Landroid/view/Surface;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Surface</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Requests a Surface to use as the input to an encoder, in place of input buffers.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Requests a Surface to use as the input to an encoder, in place of input buffers.  This
 may only be called after <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c> and before <c><see cref="M:Android.Media.MediaCodec.Start" /></c>.
 </para>
          <para tool="javadoc-to-mdoc">
 The application is responsible for calling release() on the Surface when
 done.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#createInputSurface()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="CryptoModeAesCtr">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecCryptoMode CryptoModeAesCtr = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecCryptoMode CryptoModeAesCtr = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CRYPTO_MODE_AES_CTR")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecCryptoMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecCryptoMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#CRYPTO_MODE_AES_CTR" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="CryptoModeUnencrypted">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecCryptoMode CryptoModeUnencrypted = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecCryptoMode CryptoModeUnencrypted = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CRYPTO_MODE_UNENCRYPTED")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecCryptoMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecCryptoMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#CRYPTO_MODE_UNENCRYPTED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="DequeueInputBuffer">
      <MemberSignature Language="C#" Value="public int DequeueInputBuffer (long timeoutUs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DequeueInputBuffer(int64 timeoutUs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dequeueInputBuffer", "(J)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeoutUs" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timeoutUs">The timeout in microseconds, a negative timeout indicates "infinite".
</param>
        <summary>Returns the index of an input buffer to be filled with valid data
 or -1 if no such buffer is currently available.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the index of an input buffer to be filled with valid data
 or -1 if no such buffer is currently available.
 This method will return immediately if timeoutUs == 0, wait indefinitely
 for the availability of an input buffer if timeoutUs &lt; 0 or wait up
 to "timeoutUs" microseconds if timeoutUs &gt; 0.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#dequeueInputBuffer(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="DequeueOutputBuffer">
      <MemberSignature Language="C#" Value="public int DequeueOutputBuffer (Android.Media.MediaCodec.BufferInfo info, long timeoutUs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DequeueOutputBuffer(class Android.Media.MediaCodec/BufferInfo info, int64 timeoutUs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dequeueOutputBuffer", "(Landroid/media/MediaCodec$BufferInfo;J)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="Android.Media.MediaCodec+BufferInfo" />
        <Parameter Name="timeoutUs" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="info">Will be filled with buffer meta data.</param>
        <param name="timeoutUs">The timeout in microseconds, a negative timeout indicates "infinite".
</param>
        <summary>Dequeue an output buffer, block at most "timeoutUs" microseconds.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Dequeue an output buffer, block at most "timeoutUs" microseconds.
 Returns the index of an output buffer that has been successfully
 decoded or one of the INFO_* constants below.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#dequeueOutputBuffer(android.media.MediaCodec.BufferInfo, long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("flush", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Flush both input and output ports of the component, all indices
 previously returned in calls to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c> and
 <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(Android.Media.MediaCodec.BufferInfo, System.Int64)" /></c> become invalid.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Flush both input and output ports of the component, all indices
 previously returned in calls to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c> and
 <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(Android.Media.MediaCodec.BufferInfo, System.Int64)" /></c> become invalid.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#flush()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="GetInputBuffers">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteBuffer[] GetInputBuffers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteBuffer[] GetInputBuffers() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInputBuffers", "()[Ljava/nio/ByteBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Call this after start() returns.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Call this after start() returns.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#getInputBuffers()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="GetOutputBuffers">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteBuffer[] GetOutputBuffers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteBuffer[] GetOutputBuffers() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputBuffers", "()[Ljava/nio/ByteBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Call this after start() returns and whenever dequeueOutputBuffer
 signals an output buffer change by returning
 <c><see cref="F:Android.Media.MediaCodec.InfoOutputBuffersChanged" /></c></summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Call this after start() returns and whenever dequeueOutputBuffer
 signals an output buffer change by returning
 <c><see cref="F:Android.Media.MediaCodec.InfoOutputBuffersChanged" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#getOutputBuffers()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="InfoOutputBuffersChanged">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecInfoState InfoOutputBuffersChanged = -3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecInfoState InfoOutputBuffersChanged = (-3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("INFO_OUTPUT_BUFFERS_CHANGED")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecInfoState enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecInfoState</ReturnType>
      </ReturnValue>
      <MemberValue>-3</MemberValue>
      <Docs>
        <summary>The output buffers have changed, the client must refer to the new
 set of output buffers returned by <c><see cref="M:Android.Media.MediaCodec.GetOutputBuffers" /></c> from
 this point on.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The output buffers have changed, the client must refer to the new
 set of output buffers returned by <c><see cref="M:Android.Media.MediaCodec.GetOutputBuffers" /></c> from
 this point on.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#INFO_OUTPUT_BUFFERS_CHANGED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="InfoOutputFormatChanged">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecInfoState InfoOutputFormatChanged = -2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecInfoState InfoOutputFormatChanged = (-2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("INFO_OUTPUT_FORMAT_CHANGED")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecInfoState enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecInfoState</ReturnType>
      </ReturnValue>
      <MemberValue>-2</MemberValue>
      <Docs>
        <summary>The output format has changed, subsequent data will follow the new
 format.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The output format has changed, subsequent data will follow the new
 format. <c><see cref="P:Android.Media.MediaCodec.OutputFormat" /></c> returns the new format.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#INFO_OUTPUT_FORMAT_CHANGED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="InfoTryAgainLater">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecInfoState InfoTryAgainLater = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecInfoState InfoTryAgainLater = (-1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("INFO_TRY_AGAIN_LATER")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecInfoState enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecInfoState</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>If a non-negative timeout had been specified in the call
 to <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(Android.Media.MediaCodec.BufferInfo, System.Int64)" /></c>, indicates that the call timed out.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If a non-negative timeout had been specified in the call
 to <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(Android.Media.MediaCodec.BufferInfo, System.Int64)" /></c>, indicates that the call timed out.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#INFO_TRY_AGAIN_LATER" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getName", "()Ljava/lang/String;", "GetGetNameHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the component name.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Get the component name. If the codec was created by createDecoderByType
 or createEncoderByType, what component is chosen is not known beforehand.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#getName()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="OutputFormat">
      <MemberSignature Language="C#" Value="public Android.Media.MediaFormat OutputFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.MediaFormat OutputFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getOutputFormat", "()Landroid/media/MediaFormat;", "GetGetOutputFormatHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Call this after dequeueOutputBuffer signals a format change by returning
 <c><see cref="F:Android.Media.MediaCodec.InfoOutputFormatChanged" /></c></summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Call this after dequeueOutputBuffer signals a format change by returning
 <c><see cref="F:Android.Media.MediaCodec.InfoOutputFormatChanged" /></c></para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#getOutputFormat()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="QueueInputBuffer">
      <MemberSignature Language="C#" Value="public void QueueInputBuffer (int index, int offset, int size, long presentationTimeUs, Android.Media.MediaCodecBufferFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueInputBuffer(int32 index, int32 offset, int32 size, int64 presentationTimeUs, valuetype Android.Media.MediaCodecBufferFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queueInputBuffer", "(IIIJI)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="presentationTimeUs" Type="System.Int64" />
        <Parameter Name="flags" Type="Android.Media.MediaCodecBufferFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously returned
              in a call to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c>.</param>
        <param name="offset">The byte offset into the input buffer at which the data starts.</param>
        <param name="size">The number of bytes of valid input data.</param>
        <param name="presentationTimeUs">The time at which this buffer should be rendered.</param>
        <param name="flags">A bitmask of flags <c><see cref="F:Android.Media.MediaCodec.BufferFlagSyncFrame" /></c>,
              <c><see cref="F:Android.Media.MediaCodec.BufferFlagCodecConfig" /></c> or <c><see cref="F:Android.Media.MediaCodec.BufferFlagEndOfStream" /></c>.</param>
        <summary>After filling a range of the input buffer at the specified index
 submit it to the component.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">After filling a range of the input buffer at the specified index
 submit it to the component.

 Many decoders require the actual compressed data stream to be
 preceded by "codec specific data", i.e. setup data used to initialize
 the codec such as PPS/SPS in the case of AVC video or code tables
 in the case of vorbis audio.
 The class <c><see cref="T:Android.Media.MediaExtractor" /></c> provides codec
 specific data as part of
 the returned track format in entries named "csd-0", "csd-1" ...

 These buffers should be submitted using the flag <c><see cref="F:Android.Media.MediaCodec.BufferFlagCodecConfig" /></c>.

 To indicate that this is the final piece of input data (or rather that
 no more input data follows unless the decoder is subsequently flushed)
 specify the flag <c><see cref="F:Android.Media.MediaCodec.BufferFlagEndOfStream" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#queueInputBuffer(int, int, int, long, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Android.Media.MediaCodec+CryptoException">if a crypto object has been specified in
         <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c></exception>
      </Docs>
    </Member>
    <Member MemberName="QueueSecureInputBuffer">
      <MemberSignature Language="C#" Value="public void QueueSecureInputBuffer (int index, int offset, Android.Media.MediaCodec.CryptoInfo info, long presentationTimeUs, Android.Media.MediaCodecBufferFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueSecureInputBuffer(int32 index, int32 offset, class Android.Media.MediaCodec/CryptoInfo info, int64 presentationTimeUs, valuetype Android.Media.MediaCodecBufferFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queueSecureInputBuffer", "(IILandroid/media/MediaCodec$CryptoInfo;JI)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="info" Type="Android.Media.MediaCodec+CryptoInfo" />
        <Parameter Name="presentationTimeUs" Type="System.Int64" />
        <Parameter Name="flags" Type="Android.Media.MediaCodecBufferFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously returned
              in a call to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c>.</param>
        <param name="offset">The byte offset into the input buffer at which the data starts.</param>
        <param name="info">Metadata required to facilitate decryption, the object can be
             reused immediately after this call returns.</param>
        <param name="presentationTimeUs">The time at which this buffer should be rendered.</param>
        <param name="flags">A bitmask of flags <c><see cref="F:Android.Media.MediaCodec.BufferFlagSyncFrame" /></c>,
              <c><see cref="F:Android.Media.MediaCodec.BufferFlagCodecConfig" /></c> or <c><see cref="F:Android.Media.MediaCodec.BufferFlagEndOfStream" /></c>.
</param>
        <summary>Similar to <c><see cref="M:Android.Media.MediaCodec.QueueInputBuffer(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" /></c> but submits a buffer that is
 potentially encrypted.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Similar to <c><see cref="M:Android.Media.MediaCodec.QueueInputBuffer(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" /></c> but submits a buffer that is
 potentially encrypted.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#queueSecureInputBuffer(int, int, android.media.MediaCodec.CryptoInfo, long, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
        <exception cref="T:Android.Media.MediaCodec+CryptoException" />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Make sure you call this when you're done to free up any opened
 component instance instead of relying on the garbage collector
 to do this for you at some point in the future.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Make sure you call this when you're done to free up any opened
 component instance instead of relying on the garbage collector
 to do this for you at some point in the future.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#release()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseOutputBuffer">
      <MemberSignature Language="C#" Value="public void ReleaseOutputBuffer (int index, bool render);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseOutputBuffer(int32 index, bool render) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("releaseOutputBuffer", "(IZ)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="render" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned output buffer previously returned
              in a call to <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(Android.Media.MediaCodec.BufferInfo, System.Int64)" /></c>.</param>
        <param name="render">If a valid surface was specified when configuring the codec,
               passing true renders this output buffer to the surface.
</param>
        <summary>If you are done with a buffer, use this call to return the buffer to
 the codec.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If you are done with a buffer, use this call to return the buffer to
 the codec. If you previously specified a surface when configuring this
 video decoder you can optionally render the buffer.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#releaseOutputBuffer(int, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="SetVideoScalingMode">
      <MemberSignature Language="C#" Value="public void SetVideoScalingMode (Android.Media.VideoScalingMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVideoScalingMode(valuetype Android.Media.VideoScalingMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVideoScalingMode", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Media.VideoScalingMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mode">To be added.</param>
        <summary>If a surface has been specified in a previous call to <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c>
 specifies the scaling mode to use.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If a surface has been specified in a previous call to <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c>
 specifies the scaling mode to use. The default is "scale to fit".
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#setVideoScalingMode(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="SignalEndOfInputStream">
      <MemberSignature Language="C#" Value="public void SignalEndOfInputStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SignalEndOfInputStream() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("signalEndOfInputStream", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Signals end-of-stream on input.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Signals end-of-stream on input.  Equivalent to submitting an empty buffer with
 <c><see cref="F:Android.Media.MediaCodec.BufferFlagEndOfStream" /></c> set.  This may only be used with
 encoders receiving input from a Surface created by <c><see cref="M:Android.Media.MediaCodec.CreateInputSurface" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#signalEndOfInputStream()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("start", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>After successfully configuring the component, call start.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">After successfully configuring the component, call start. On return
 you can query the component for its input/output buffers.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#start()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stop", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finish the decode/encode session, note that the codec instance
 remains active and ready to be <c><see cref="M:Android.Media.MediaCodec.Start" /></c>ed again.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Finish the decode/encode session, note that the codec instance
 remains active and ready to be <c><see cref="M:Android.Media.MediaCodec.Start" /></c>ed again.
 To ensure that it is available to other client call <c><see cref="M:Android.Media.MediaCodec.Release" /></c>
 and don't just rely on garbage collection to eventually do this for you.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#stop()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VideoScalingModeScaleToFit">
      <MemberSignature Language="C#" Value="public const Android.Media.VideoScalingMode VideoScalingModeScaleToFit = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.VideoScalingMode VideoScalingModeScaleToFit = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.VideoScalingMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.VideoScalingMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>The content is scaled to the surface dimensions
</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The content is scaled to the surface dimensions
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#VIDEO_SCALING_MODE_SCALE_TO_FIT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="VideoScalingModeScaleToFitWithCropping">
      <MemberSignature Language="C#" Value="public const Android.Media.VideoScalingMode VideoScalingModeScaleToFitWithCropping = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.VideoScalingMode VideoScalingModeScaleToFitWithCropping = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.VideoScalingMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.VideoScalingMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>The content is scaled, maintaining its aspect ratio, the whole
 surface area is used, content may be cropped
</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">The content is scaled, maintaining its aspect ratio, the whole
 surface area is used, content may be cropped
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaCodec.html#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 16" />
      </Docs>
    </Member>
  </Members>
</Type>
