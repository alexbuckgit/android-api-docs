<Type Name="MediaCodec" FullName="Android.Media.MediaCodec">
  <TypeSignature Language="C#" Value="public sealed class MediaCodec : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MediaCodec extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/MediaCodec", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="16">
    <summary>MediaCodec class can be used to access low-level media codecs, i.e. encoder/decoder components.</summary>
    <remarks />
    <since version="Added in API level 16" />
  </Docs>
  <Members>
    <Member MemberName="BufferFlagCodecConfig">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagCodecConfig = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagCodecConfig = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("BUFFER_FLAG_CODEC_CONFIG")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>This indicated that the buffer marked as such contains codec
 initialization / codec specific data instead of media data.</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="BufferFlagEndOfStream">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagEndOfStream = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagEndOfStream = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("BUFFER_FLAG_END_OF_STREAM")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>This signals the end of stream, i.e. no buffers will be available
 after this, unless of course, <c><see cref="M:Android.Media.MediaCodec.Flush" /></c> follows.</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="BufferFlagKeyFrame">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagKeyFrame = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagKeyFrame = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("BUFFER_FLAG_KEY_FRAME")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>This indicates that the (encoded) buffer marked as such contains
 the data for a key frame.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="BufferFlagSyncFrame">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecBufferFlags BufferFlagSyncFrame = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecBufferFlags BufferFlagSyncFrame = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("BUFFER_FLAG_SYNC_FRAME")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecBufferFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecBufferFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>This indicates that the (encoded) buffer marked as such contains
 the data for a key frame.</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="CodecInfo">
      <MemberSignature Language="C#" Value="public Android.Media.MediaCodecInfo CodecInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.MediaCodecInfo CodecInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCodecInfo", "()Landroid/media/MediaCodecInfo;", "GetGetCodecInfoHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the codec info.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">if in the Released state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Configure">
      <MemberSignature Language="C#" Value="public void Configure (Android.Media.MediaFormat format, Android.Views.Surface surface, Android.Media.MediaCrypto crypto, Android.Media.MediaCodecConfigFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Configure(class Android.Media.MediaFormat format, class Android.Views.Surface surface, class Android.Media.MediaCrypto crypto, valuetype Android.Media.MediaCodecConfigFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("configure", "(Landroid/media/MediaFormat;Landroid/view/Surface;Landroid/media/MediaCrypto;I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="Android.Media.MediaFormat" />
        <Parameter Name="surface" Type="Android.Views.Surface" />
        <Parameter Name="crypto" Type="Android.Media.MediaCrypto" />
        <Parameter Name="flags" Type="Android.Media.MediaCodecConfigFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">The format of the input data (decoder) or the desired
               format of the output data (encoder). Passing <c>null</c>
               as <c>format</c> is equivalent to passing an
               <c><see cref="C:Android.Media.MediaFormat" /></c>.</param>
        <param name="surface">Specify a surface on which to render the output of this
                decoder. Pass <c>null</c> as <c>surface</c> if the
                codec does not generate raw video output (e.g. not a video
                decoder) and/or if you want to configure the codec for
                <c><see cref="T:Java.Nio.ByteBuffer" /></c> output.</param>
        <param name="crypto">Specify a crypto object to facilitate secure decryption
                of the media data. Pass <c>null</c> as <c>crypto</c> for
                non-secure codecs.</param>
        <param name="flags">Specify <c><see cref="F:Android.Media.MediaCodec.ConfigureFlagEncode" /></c> to configure the
                component as an encoder.</param>
        <summary>Configures a component.</summary>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the surface has been released (or is invalid),
 or the format is unacceptable (e.g. missing a mandatory key),
 or the flags are not set properly
 (e.g. missing <c><see cref="F:Android.Media.MediaCodec.ConfigureFlagEncode" /></c> for an encoder).</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Uninitialized state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CryptoException;Href=../../../reference/android/media/MediaCodec.CryptoException.html">upon DRM error.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ConfigureFlagEncode">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecConfigFlags ConfigureFlagEncode = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecConfigFlags ConfigureFlagEncode = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CONFIGURE_FLAG_ENCODE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecConfigFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecConfigFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>If this codec is to be used as an encoder, pass this flag.</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="CreateByCodecName">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaCodec CreateByCodecName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaCodec CreateByCodecName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createByCodecName", "(Ljava/lang/String;)Landroid/media/MediaCodec;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the codec to be instantiated.</param>
        <summary>If you know the exact name of the component you want to instantiate
 use this method to instantiate it.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.IO.IOException">if the codec cannot be created.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if name is not valid.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if name is null.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDecoderByType">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaCodec CreateDecoderByType (string type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaCodec CreateDecoderByType(string type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createDecoderByType", "(Ljava/lang/String;)Landroid/media/MediaCodec;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The mime type of the input data.</param>
        <summary>Instantiate the preferred decoder supporting input data of the given mime type.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.IO.IOException">if the codec cannot be created.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if type is not a valid mime type.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if type is null.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateEncoderByType">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaCodec CreateEncoderByType (string type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaCodec CreateEncoderByType(string type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createEncoderByType", "(Ljava/lang/String;)Landroid/media/MediaCodec;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The desired mime type of the output data.</param>
        <summary>Instantiate the preferred encoder supporting output data of the given mime type.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.IO.IOException">if the codec cannot be created.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if type is not a valid mime type.</exception>
        <exception cref="T:Java.Lang.NullPointerException">if type is null.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInputSurface">
      <MemberSignature Language="C#" Value="public Android.Views.Surface CreateInputSurface ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Views.Surface CreateInputSurface() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createInputSurface", "()Landroid/view/Surface;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Surface</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Requests a Surface to use as the input to an encoder, in place of input buffers.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Configured state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="CryptoModeAesCtr">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecCryptoMode CryptoModeAesCtr = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecCryptoMode CryptoModeAesCtr = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CRYPTO_MODE_AES_CTR")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecCryptoMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecCryptoMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
        </summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="CryptoModeUnencrypted">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecCryptoMode CryptoModeUnencrypted = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecCryptoMode CryptoModeUnencrypted = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("CRYPTO_MODE_UNENCRYPTED")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecCryptoMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecCryptoMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
        </summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="DequeueInputBuffer">
      <MemberSignature Language="C#" Value="public int DequeueInputBuffer (long timeoutUs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DequeueInputBuffer(int64 timeoutUs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dequeueInputBuffer", "(J)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeoutUs" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timeoutUs">The timeout in microseconds, a negative timeout indicates "infinite".</param>
        <summary>Returns the index of an input buffer to be filled with valid data
 or -1 if no such buffer is currently available.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state,
         or codec is configured in asynchronous mode.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="DequeueOutputBuffer">
      <MemberSignature Language="C#" Value="public int DequeueOutputBuffer (Android.Media.MediaCodec.BufferInfo info, long timeoutUs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DequeueOutputBuffer(class Android.Media.MediaCodec/BufferInfo info, int64 timeoutUs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dequeueOutputBuffer", "(Landroid/media/MediaCodec$BufferInfo;J)I", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="Android.Media.MediaCodec+BufferInfo" />
        <Parameter Name="timeoutUs" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="info">Will be filled with buffer meta data.</param>
        <param name="timeoutUs">The timeout in microseconds, a negative timeout indicates "infinite".</param>
        <summary>Dequeue an output buffer, block at most "timeoutUs" microseconds.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state,
         or codec is configured in asynchronous mode.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("flush", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Flush both input and output ports of the component.</summary>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInputBuffer">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteBuffer GetInputBuffer (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteBuffer GetInputBuffer(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInputBuffer", "(I)Ljava/nio/ByteBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously
              returned from a call to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c>,
              or received via an onInputBufferAvailable callback.</param>
        <summary>Returns a <c><see cref="M:Java.Nio.Buffer.Clear" /></c>, writable ByteBuffer
 object for a dequeued input buffer index to contain the input data.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInputBuffers">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteBuffer[] GetInputBuffers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteBuffer[] GetInputBuffers() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInputBuffers", "()[Ljava/nio/ByteBuffer;", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieve the set of input buffers.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state,
         or codec is configured in asynchronous mode.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInputImage">
      <MemberSignature Language="C#" Value="public Android.Media.Image GetInputImage (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Media.Image GetInputImage(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getInputImage", "(I)Landroid/media/Image;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously
              returned from a call to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c>,
              or received via an onInputBufferAvailable callback.</param>
        <summary>Returns a writable Image object for a dequeued input buffer
 index to contain the raw input video frame.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOutputBuffer">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteBuffer GetOutputBuffer (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteBuffer GetOutputBuffer(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputBuffer", "(I)Ljava/nio/ByteBuffer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned output buffer previously
              returned from a call to <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c>,
              or received via an onOutputBufferAvailable callback.</param>
        <summary>Returns a read-only ByteBuffer for a dequeued output buffer
 index.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOutputBuffers">
      <MemberSignature Language="C#" Value="public Java.Nio.ByteBuffer[] GetOutputBuffers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Java.Nio.ByteBuffer[] GetOutputBuffers() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputBuffers", "()[Ljava/nio/ByteBuffer;", "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Nio.ByteBuffer[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieve the set of output buffers.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state,
         or codec is configured in asynchronous mode.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public Android.Media.MediaFormat GetOutputFormat (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Media.MediaFormat GetOutputFormat(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputFormat", "(I)Landroid/media/MediaFormat;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaFormat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously
              returned from a call to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c>.</param>
        <summary>Returns the output format for a specific output buffer.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetOutputImage">
      <MemberSignature Language="C#" Value="public Android.Media.Image GetOutputImage (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Media.Image GetOutputImage(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getOutputImage", "(I)Landroid/media/Image;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned output buffer previously
              returned from a call to <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c>,
              or received via an onOutputBufferAvailable callback.</param>
        <summary>Returns a read-only Image object for a dequeued output buffer
 index that contains the raw video frame.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="InfoOutputBuffersChanged">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecInfoState InfoOutputBuffersChanged = -3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecInfoState InfoOutputBuffersChanged = (-3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("INFO_OUTPUT_BUFFERS_CHANGED")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecInfoState enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecInfoState</ReturnType>
      </ReturnValue>
      <MemberValue>-3</MemberValue>
      <Docs>
        <summary>The output buffers have changed, the client must refer to the new
 set of output buffers returned by <c><see cref="M:Android.Media.MediaCodec.GetOutputBuffers" /></c> from
 this point on.</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="InfoOutputFormatChanged">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecInfoState InfoOutputFormatChanged = -2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecInfoState InfoOutputFormatChanged = (-2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("INFO_OUTPUT_FORMAT_CHANGED")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecInfoState enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecInfoState</ReturnType>
      </ReturnValue>
      <MemberValue>-2</MemberValue>
      <Docs>
        <summary>The output format has changed, subsequent data will follow the new
 format.</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="InfoTryAgainLater">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaCodecInfoState InfoTryAgainLater = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaCodecInfoState InfoTryAgainLater = (-1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("INFO_TRY_AGAIN_LATER")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaCodecInfoState enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaCodecInfoState</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>If a non-negative timeout had been specified in the call
 to <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c>, indicates that the call timed out.</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="InputFormat">
      <MemberSignature Language="C#" Value="public Android.Media.MediaFormat InputFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.MediaFormat InputFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getInputFormat", "()Landroid/media/MediaFormat;", "GetGetInputFormatHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Call this after <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c> returns successfully to
 get the input format accepted by the codec.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 21" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing or
                               Configured state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getName", "()Ljava/lang/String;", "GetGetNameHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the component name.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">if in the Released state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="OutputFormat">
      <MemberSignature Language="C#" Value="public Android.Media.MediaFormat OutputFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Media.MediaFormat OutputFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getOutputFormat", "()Landroid/media/MediaFormat;", "GetGetOutputFormatHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Call this after dequeueOutputBuffer signals a format change by returning
 <c><see cref="F:Android.Media.MediaCodec.InfoOutputFormatChanged" /></c>.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing or
                               Configured state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ParameterKeyRequestSyncFrame">
      <MemberSignature Language="C#" Value="public const string ParameterKeyRequestSyncFrame;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ParameterKeyRequestSyncFrame" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PARAMETER_KEY_REQUEST_SYNC_FRAME")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Request that the encoder produce a sync frame "soon".</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ParameterKeySuspend">
      <MemberSignature Language="C#" Value="public const string ParameterKeySuspend;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ParameterKeySuspend" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PARAMETER_KEY_SUSPEND")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Temporarily suspend/resume encoding of input data.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ParameterKeyVideoBitrate">
      <MemberSignature Language="C#" Value="public const string ParameterKeyVideoBitrate;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ParameterKeyVideoBitrate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PARAMETER_KEY_VIDEO_BITRATE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Change a video encoder's target bitrate on the fly.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="QueueInputBuffer">
      <MemberSignature Language="C#" Value="public void QueueInputBuffer (int index, int offset, int size, long presentationTimeUs, Android.Media.MediaCodecBufferFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueInputBuffer(int32 index, int32 offset, int32 size, int64 presentationTimeUs, valuetype Android.Media.MediaCodecBufferFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queueInputBuffer", "(IIIJI)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="presentationTimeUs" Type="System.Int64" />
        <Parameter Name="flags" Type="Android.Media.MediaCodecBufferFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously returned
              in a call to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c>.</param>
        <param name="offset">The byte offset into the input buffer at which the data starts.</param>
        <param name="size">The number of bytes of valid input data.</param>
        <param name="presentationTimeUs">The presentation timestamp in microseconds for this
                           buffer. This is normally the media time at which this
                           buffer should be presented (rendered). When using an output
                           surface, this will be propagated as the <c><see cref="P:Android.Graphics.SurfaceTexture.Timestamp" /></c> for the frame (after
                           conversion to nanoseconds).</param>
        <param name="flags">A bitmask of flags
              <c><see cref="F:Android.Media.MediaCodec.BufferFlagCodecConfig" /></c> and <c><see cref="F:Android.Media.MediaCodec.BufferFlagEndOfStream" /></c>.
              While not prohibited, most codecs do not use the
              <c><see cref="F:Android.Media.MediaCodec.BufferFlagKeyFrame" /></c> flag for input buffers.</param>
        <summary>After filling a range of the input buffer at the specified index
 submit it to the component.</summary>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CryptoException;Href=../../../reference/android/media/MediaCodec.CryptoException.html">if a crypto object has been specified in
         <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c></exception>
      </Docs>
    </Member>
    <Member MemberName="QueueSecureInputBuffer">
      <MemberSignature Language="C#" Value="public void QueueSecureInputBuffer (int index, int offset, Android.Media.MediaCodec.CryptoInfo info, long presentationTimeUs, Android.Media.MediaCodecBufferFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueSecureInputBuffer(int32 index, int32 offset, class Android.Media.MediaCodec/CryptoInfo info, int64 presentationTimeUs, valuetype Android.Media.MediaCodecBufferFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queueSecureInputBuffer", "(IILandroid/media/MediaCodec$CryptoInfo;JI)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="info" Type="Android.Media.MediaCodec+CryptoInfo" />
        <Parameter Name="presentationTimeUs" Type="System.Int64" />
        <Parameter Name="flags" Type="Android.Media.MediaCodecBufferFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned input buffer previously returned
              in a call to <c><see cref="M:Android.Media.MediaCodec.DequeueInputBuffer(System.Int64)" /></c>.</param>
        <param name="offset">The byte offset into the input buffer at which the data starts.</param>
        <param name="info">Metadata required to facilitate decryption, the object can be
             reused immediately after this call returns.</param>
        <param name="presentationTimeUs">The presentation timestamp in microseconds for this
                           buffer. This is normally the media time at which this
                           buffer should be presented (rendered).</param>
        <param name="flags">A bitmask of flags
              <c><see cref="F:Android.Media.MediaCodec.BufferFlagCodecConfig" /></c> and <c><see cref="F:Android.Media.MediaCodec.BufferFlagEndOfStream" /></c>.
              While not prohibited, most codecs do not use the
              <c><see cref="F:Android.Media.MediaCodec.BufferFlagKeyFrame" /></c> flag for input buffers.</param>
        <summary>Similar to <c><see cref="M:Android.Media.MediaCodec.QueueInputBuffer(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" /></c> but submits a buffer that is
 potentially encrypted.</summary>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CryptoException;Href=../../../reference/android/media/MediaCodec.CryptoException.html">if an error occurs while attempting to decrypt the buffer.
              An error code associated with the exception helps identify the
              reason for the failure.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Free up resources used by the codec instance.</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseOutputBuffer">
      <MemberSignature Language="C#" Value="public void ReleaseOutputBuffer (int index, bool render);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseOutputBuffer(int32 index, bool render) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("releaseOutputBuffer", "(IZ)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="render" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned output buffer previously returned
              from a call to <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c>.</param>
        <param name="render">If a valid surface was specified when configuring the codec,
               passing true renders this output buffer to the surface.</param>
        <summary>If you are done with a buffer, use this call to return the buffer to the codec
 or to render it on the output surface.</summary>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseOutputBuffer">
      <MemberSignature Language="C#" Value="public void ReleaseOutputBuffer (int index, long renderTimestampNs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseOutputBuffer(int32 index, int64 renderTimestampNs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("releaseOutputBuffer", "(IJ)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="renderTimestampNs" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="index">The index of a client-owned output buffer previously returned
              from a call to <c><see cref="M:Android.Media.MediaCodec.DequeueOutputBuffer(.BufferInfo, System.Int64)" /></c>.</param>
        <param name="renderTimestampNs">The timestamp to associate with this buffer when
              it is sent to the Surface.</param>
        <summary>If you are done with a buffer, use this call to update its surface timestamp
 and return it to the codec to render it on the output surface.</summary>
        <remarks />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reset", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the codec to its initial (Uninitialized) state.</summary>
        <remarks />
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">if an unrecoverable error has occured and the codec
 could not be reset.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if in the Released state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetCallback">
      <MemberSignature Language="C#" Value="public void SetCallback (Android.Media.MediaCodec.Callback cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCallback(class Android.Media.MediaCodec/Callback cb) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setCallback", "(Landroid/media/MediaCodec$Callback;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="Android.Media.MediaCodec+Callback" />
      </Parameters>
      <Docs>
        <param name="cb">The callback that will run.  Use <c>null</c> to clear a previously
           set callback (before <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c> is called and run
           in synchronous mode).</param>
        <summary>Sets an asynchronous callback for actionable MediaCodec events on the default
 looper.</summary>
        <remarks />
        <altmember cref="M:Android.Media.MediaCodec.SetCallback(.Callback, Android.OS.Handler)" />
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public void SetParameters (Android.OS.Bundle params);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParameters(class Android.OS.Bundle params) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setParameters", "(Landroid/os/Bundle;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="params" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="params">The bundle of parameters to set.</param>
        <summary>Communicate additional parameter changes to the component instance.</summary>
        <remarks />
        <exception cref="T:Java.Lang.IllegalStateException">if in the Released state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetVideoScalingMode">
      <MemberSignature Language="C#" Value="public void SetVideoScalingMode (Android.Media.VideoScalingMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVideoScalingMode(valuetype Android.Media.VideoScalingMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVideoScalingMode", "(I)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Media.VideoScalingMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mode">To be added.</param>
        <summary>If a surface has been specified in a previous call to <c><see cref="M:Android.Media.MediaCodec.Configure(Android.Media.MediaFormat, Android.Views.Surface, Android.Views.Surface, Android.Views.Surface)" /></c>
 specifies the scaling mode to use.</summary>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if mode is not recognized.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if in the Released state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SignalEndOfInputStream">
      <MemberSignature Language="C#" Value="public void SignalEndOfInputStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SignalEndOfInputStream() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("signalEndOfInputStream", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Signals end-of-stream on input.</summary>
        <remarks />
        <since version="Added in API level 18" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Executing state.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("start", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>After successfully configuring the component, call <c>start</c>.</summary>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if not in the Configured state
         or just after <c><see cref="M:Android.Media.MediaCodec.Flush" /></c> for a codec that is configured
         in asynchronous mode.</exception>
        <exception cref="!:NoType:android/media/MediaCodec$CodecException;Href=../../../reference/android/media/MediaCodec.CodecException.html">upon codec error. Note that some codec errors
 for start may be attributed to future method calls.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stop", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finish the decode/encode session, note that the codec instance
 remains active and ready to be <c><see cref="M:Android.Media.MediaCodec.Start" /></c>ed again.</summary>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if in the Released state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="VideoScalingModeScaleToFit">
      <MemberSignature Language="C#" Value="public const Android.Media.VideoScalingMode VideoScalingModeScaleToFit = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.VideoScalingMode VideoScalingModeScaleToFit = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.VideoScalingMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.VideoScalingMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>The content is scaled to the surface dimensions
</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="VideoScalingModeScaleToFitWithCropping">
      <MemberSignature Language="C#" Value="public const Android.Media.VideoScalingMode VideoScalingModeScaleToFitWithCropping = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.VideoScalingMode VideoScalingModeScaleToFitWithCropping = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.VideoScalingMode enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.VideoScalingMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>The content is scaled, maintaining its aspect ratio, the whole
 surface area is used, content may be cropped
</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
  </Members>
</Type>
