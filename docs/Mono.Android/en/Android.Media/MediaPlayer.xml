<Type Name="MediaPlayer" FullName="Android.Media.MediaPlayer">
  <TypeSignature Language="C#" Value="public class MediaPlayer : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MediaPlayer extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/MediaPlayer", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>MediaPlayer class can be used to control playback
 of audio/video files and streams.</summary>
    <remarks />
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MediaPlayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MediaPlayer (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddTimedTextSource">
      <MemberSignature Language="C#" Value="public virtual void AddTimedTextSource (Java.IO.FileDescriptor fd, string mimeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTimedTextSource(class Java.IO.FileDescriptor fd, string mimeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addTimedTextSource", "(Ljava/io/FileDescriptor;Ljava/lang/String;)V", "GetAddTimedTextSource_Ljava_io_FileDescriptor_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="mimeType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fd">the FileDescriptor for the file you want to play</param>
        <param name="mimeType">The mime type of the file. Must be one of the mime types listed above.</param>
        <summary tool="true">Adds an external timed text source file (FileDescriptor).</summary>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mimeType is not supported.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTimedTextSource">
      <MemberSignature Language="C#" Value="public virtual void AddTimedTextSource (string path, string mimeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTimedTextSource(string path, string mimeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addTimedTextSource", "(Ljava/lang/String;Ljava/lang/String;)V", "GetAddTimedTextSource_Ljava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mimeType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The file path of external timed text source file.</param>
        <param name="mimeType">The mime type of the file. Must be one of the mime types listed above.</param>
        <summary>Adds an external timed text source file.</summary>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.IO.IOException">if the file cannot be accessed or is corrupted.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mimeType is not supported.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTimedTextSource">
      <MemberSignature Language="C#" Value="public virtual void AddTimedTextSource (Android.Content.Context context, Android.Net.Uri uri, string mimeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTimedTextSource(class Android.Content.Context context, class Android.Net.Uri uri, string mimeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addTimedTextSource", "(Landroid/content/Context;Landroid/net/Uri;Ljava/lang/String;)V", "GetAddTimedTextSource_Landroid_content_Context_Landroid_net_Uri_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="mimeType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use when resolving the Uri</param>
        <param name="uri">the Content URI of the data you want to play</param>
        <param name="mimeType">The mime type of the file. Must be one of the mime types listed above.</param>
        <summary>Adds an external timed text source file (Uri).</summary>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.IO.IOException">if the file cannot be accessed or is corrupted.</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mimeType is not supported.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTimedTextSource">
      <MemberSignature Language="C#" Value="public virtual void AddTimedTextSource (Java.IO.FileDescriptor fd, long offset, long length, string mime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTimedTextSource(class Java.IO.FileDescriptor fd, int64 offset, int64 length, string mime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("addTimedTextSource", "(Ljava/io/FileDescriptor;JJLjava/lang/String;)V", "GetAddTimedTextSource_Ljava_io_FileDescriptor_JJLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="mimeType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fd">the FileDescriptor for the file you want to play</param>
        <param name="offset">the offset into the file where the data to be played starts, in bytes</param>
        <param name="length">the length in bytes of the data to be played</param>
        <param name="mime">The mime type of the file. Must be one of the mime types listed above.</param>
        <param name="mimeType">The mime type of the file. Must be one of the mime types listed above.</param>
        <summary>Adds an external timed text file (FileDescriptor).</summary>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the mimeType is not supported.</exception>
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="AttachAuxEffect">
      <MemberSignature Language="C#" Value="public virtual void AttachAuxEffect (int effectId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AttachAuxEffect(int32 effectId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("attachAuxEffect", "(I)V", "GetAttachAuxEffect_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="effectId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="effectId">system wide unique id of the effect to attach
</param>
        <summary>Attaches an auxiliary effect to the player.</summary>
        <remarks />
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="AudioSessionId">
      <MemberSignature Language="C#" Value="public virtual int AudioSessionId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioSessionId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAudioSessionId", "()I", "GetGetAudioSessionIdHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setAudioSessionId", "(I)V", "GetSetAudioSessionId_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the audio session ID.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="BufferingUpdate">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.BufferingUpdateEventArgs&gt; BufferingUpdate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/BufferingUpdateEventArgs&gt; BufferingUpdate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+BufferingUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Completion">
      <MemberSignature Language="C#" Value="public event EventHandler Completion;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Completion" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaPlayer Create (Android.Content.Context context, Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaPlayer Create(class Android.Content.Context context, class Android.Net.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("create", "(Landroid/content/Context;Landroid/net/Uri;)Landroid/media/MediaPlayer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="uri">the Uri from which to get the datasource</param>
        <summary tool="true">Convenience method to create a MediaPlayer for a given Uri.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 21" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaPlayer Create (Android.Content.Context context, int resid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaPlayer Create(class Android.Content.Context context, int32 resid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("create", "(Landroid/content/Context;I)Landroid/media/MediaPlayer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="resid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="resid">the raw resource id (<format type="text/html"><var>R.raw.&lt;something&gt;</var></format>) for
              the resource to use as the datasource</param>
        <summary>Convenience method to create a MediaPlayer for a given resource id.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaPlayer Create (Android.Content.Context context, Android.Net.Uri uri, Android.Views.ISurfaceHolder holder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaPlayer Create(class Android.Content.Context context, class Android.Net.Uri uri, class Android.Views.ISurfaceHolder holder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("create", "(Landroid/content/Context;Landroid/net/Uri;Landroid/view/SurfaceHolder;)Landroid/media/MediaPlayer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="holder" Type="Android.Views.ISurfaceHolder" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="uri">the Uri from which to get the datasource</param>
        <param name="holder">the SurfaceHolder to use for displaying the video</param>
        <summary>Convenience method to create a MediaPlayer for a given Uri.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaPlayer Create (Android.Content.Context context, int resid, Android.Media.AudioAttributes audioAttributes, int audioSessionId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaPlayer Create(class Android.Content.Context context, int32 resid, class Android.Media.AudioAttributes audioAttributes, int32 audioSessionId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("create", "(Landroid/content/Context;ILandroid/media/AudioAttributes;I)Landroid/media/MediaPlayer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="resid" Type="System.Int32" />
        <Parameter Name="audioAttributes" Type="Android.Media.AudioAttributes" />
        <Parameter Name="audioSessionId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="resid">the raw resource id (<format type="text/html"><var>R.raw.&lt;something&gt;</var></format>) for
              the resource to use as the datasource</param>
        <param name="audioAttributes">the <c><see cref="T:Android.Media.AudioAttributes" /></c> to be used by the media player.</param>
        <param name="audioSessionId">the audio session ID to be used by the media player,
     see <c><see cref="M:Android.Media.AudioManager.GenerateAudioSessionId" /></c> to obtain a new session.</param>
        <summary>Same factory method as <c><see cref="M:Android.Media.MediaPlayer.Create(Android.Content.Context, System.Int32)" /></c> but that lets you specify the audio
 attributes and session ID to be used by the new MediaPlayer instance.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Android.Media.MediaPlayer Create (Android.Content.Context context, Android.Net.Uri uri, Android.Views.ISurfaceHolder holder, Android.Media.AudioAttributes audioAttributes, int audioSessionId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.MediaPlayer Create(class Android.Content.Context context, class Android.Net.Uri uri, class Android.Views.ISurfaceHolder holder, class Android.Media.AudioAttributes audioAttributes, int32 audioSessionId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("create", "(Landroid/content/Context;Landroid/net/Uri;Landroid/view/SurfaceHolder;Landroid/media/AudioAttributes;I)Landroid/media/MediaPlayer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="holder" Type="Android.Views.ISurfaceHolder" />
        <Parameter Name="audioAttributes" Type="Android.Media.AudioAttributes" />
        <Parameter Name="audioSessionId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="uri">the Uri from which to get the datasource</param>
        <param name="holder">the SurfaceHolder to use for displaying the video, may be null.</param>
        <param name="audioAttributes">the <c><see cref="T:Android.Media.AudioAttributes" /></c> to be used by the media player.</param>
        <param name="audioSessionId">the audio session ID to be used by the media player,
     see <c><see cref="M:Android.Media.AudioManager.GenerateAudioSessionId" /></c> to obtain a new session.</param>
        <summary>Same factory method as <c><see cref="M:Android.Media.MediaPlayer.Create(Android.Content.Context, Android.Net.Uri, Android.Net.Uri)" /></c> but that lets you specify
 the audio attributes and session ID to be used by the new MediaPlayer instance.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CurrentPosition">
      <MemberSignature Language="C#" Value="public virtual int CurrentPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCurrentPosition", "()I", "GetGetCurrentPositionHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current playback position.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DeselectTrack">
      <MemberSignature Language="C#" Value="public virtual void DeselectTrack (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeselectTrack(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("deselectTrack", "(I)V", "GetDeselectTrack_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index of the track to be deselected. The valid range of the index
 is 0..total number of tracks - 1. The total number of tracks as well as the type of
 each individual track can be found by calling <c><see cref="M:Android.Media.MediaPlayer.GetTrackInfo" /></c> method.</param>
        <summary>Deselect a track.</summary>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.</exception>
        <altmember cref="M:Android.Media.MediaPlayer.GetTrackInfo" />
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public virtual int Duration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Duration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getDuration", "()I", "GetGetDurationHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the duration of the file.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.ErrorEventArgs&gt; Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/ErrorEventArgs&gt; Error" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+ErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetSelectedTrack">
      <MemberSignature Language="C#" Value="public virtual int GetSelectedTrack (Android.Media.MediaTrackType trackType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetSelectedTrack(valuetype Android.Media.MediaTrackType trackType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getSelectedTrack", "(I)I", "GetGetSelectedTrack_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trackType" Type="Android.Media.MediaTrackType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trackType">should be one of <c><see cref="!:NoType:android/media/MediaPlayer$TrackInfo;Href=../../../reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_VIDEO" /></c>,
 <c><see cref="!:NoType:android/media/MediaPlayer$TrackInfo;Href=../../../reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_AUDIO" /></c>, or
 <c><see cref="!:NoType:android/media/MediaPlayer$TrackInfo;Href=../../../reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_SUBTITLE" /></c></param>
        <summary>Returns the index of the audio, video, or subtitle track currently selected for playback,
 The return value is an index into the array returned by <c><see cref="M:Android.Media.MediaPlayer.GetTrackInfo" /></c>, and can
 be used in calls to <c><see cref="M:Android.Media.MediaPlayer.SelectTrack(System.Int32)" /></c> or <c><see cref="M:Android.Media.MediaPlayer.DeselectTrack(System.Int32)" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks />
        <exception cref="T:Java.Lang.IllegalStateException">if called after <c><see cref="M:Android.Media.MediaPlayer.Release" /></c></exception>
        <altmember cref="M:Android.Media.MediaPlayer.GetTrackInfo" />
        <altmember cref="M:Android.Media.MediaPlayer.SelectTrack(System.Int32)" />
        <altmember cref="M:Android.Media.MediaPlayer.DeselectTrack(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetTrackInfo">
      <MemberSignature Language="C#" Value="public virtual Android.Media.MediaPlayer.TrackInfo[] GetTrackInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Media.MediaPlayer/TrackInfo[] GetTrackInfo() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getTrackInfo", "()[Landroid/media/MediaPlayer$TrackInfo;", "GetGetTrackInfoHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayer+TrackInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of track information.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.InfoEventArgs&gt; Info;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/InfoEventArgs&gt; Info" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+InfoEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsPlaying">
      <MemberSignature Language="C#" Value="public virtual bool IsPlaying { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPlaying" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isPlaying", "()Z", "GetIsPlayingHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Checks whether the MediaPlayer is playing.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the internal player engine has not been
 initialized or has been released.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Looping">
      <MemberSignature Language="C#" Value="public virtual bool Looping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Looping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isLooping", "()Z", "GetIsLoopingHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setLooping", "(Z)V", "GetSetLooping_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Checks whether the MediaPlayer is looping or non-looping.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="MediaErrorIo">
      <MemberSignature Language="C#" Value="public const int MediaErrorIo = -1004;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MediaErrorIo = (-1004)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaError.Io.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1004</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MediaErrorMalformed">
      <MemberSignature Language="C#" Value="public const int MediaErrorMalformed = -1007;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MediaErrorMalformed = (-1007)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaError.Malformed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1007</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MediaErrorTimedOut">
      <MemberSignature Language="C#" Value="public const int MediaErrorTimedOut = -110;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MediaErrorTimedOut = (-110)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaError.TimedOut.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-110</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MediaErrorUnsupported">
      <MemberSignature Language="C#" Value="public const int MediaErrorUnsupported = -1010;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MediaErrorUnsupported = (-1010)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaError.Unsupported.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1010</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MediaMimetypeTextSubrip">
      <MemberSignature Language="C#" Value="public const string MediaMimetypeTextSubrip;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MediaMimetypeTextSubrip" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEDIA_MIMETYPE_TEXT_SUBRIP")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>MIME type for SubRip (SRT) container.</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Pause() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("pause", "()V", "GetPauseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pauses playback.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the internal player engine has not been
 initialized.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public virtual void Prepare ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Prepare() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("prepare", "()V", "GetPrepareHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Prepares the player for playback, synchronously.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="PrepareAsync">
      <MemberSignature Language="C#" Value="public virtual void PrepareAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("prepareAsync", "()V", "GetPrepareAsyncHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Prepares the player for playback, asynchronously.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
      </Docs>
    </Member>
    <Member MemberName="Prepared">
      <MemberSignature Language="C#" Value="public event EventHandler Prepared;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Prepared" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public virtual void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "GetReleaseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases resources associated with this MediaPlayer object.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reset", "()V", "GetResetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the MediaPlayer to its uninitialized state.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SeekComplete">
      <MemberSignature Language="C#" Value="public event EventHandler SeekComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SeekComplete" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SeekTo">
      <MemberSignature Language="C#" Value="public virtual void SeekTo (int msec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SeekTo(int32 msec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("seekTo", "(I)V", "GetSeekTo_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msec" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="msec">the offset in milliseconds from the start to seek to</param>
        <summary>Seeks to specified time position.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the internal player engine has not been
 initialized
</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectTrack">
      <MemberSignature Language="C#" Value="public virtual void SelectTrack (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SelectTrack(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("selectTrack", "(I)V", "GetSelectTrack_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">the index of the track to be selected. The valid range of the index
 is 0..total number of track - 1. The total number of tracks as well as the type of
 each individual track can be found by calling <c><see cref="M:Android.Media.MediaPlayer.GetTrackInfo" /></c> method.</param>
        <summary>Selects a track.</summary>
        <remarks />
        <since version="Added in API level 16" />
        <exception cref="T:Java.Lang.IllegalStateException">if called in an invalid state.</exception>
        <altmember cref="M:Android.Media.MediaPlayer.GetTrackInfo" />
      </Docs>
    </Member>
    <Member MemberName="SetAudioAttributes">
      <MemberSignature Language="C#" Value="public virtual void SetAudioAttributes (Android.Media.AudioAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAudioAttributes(class Android.Media.AudioAttributes attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAudioAttributes", "(Landroid/media/AudioAttributes;)V", "GetSetAudioAttributes_Landroid_media_AudioAttributes_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="Android.Media.AudioAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">a non-null set of audio attributes
</param>
        <summary>Sets the audio attributes for this MediaPlayer.</summary>
        <remarks />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SetAudioStreamType">
      <MemberSignature Language="C#" Value="public virtual void SetAudioStreamType (Android.Media.Stream streamtype);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAudioStreamType(valuetype Android.Media.Stream streamtype) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAudioStreamType", "(I)V", "GetSetAudioStreamType_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamtype" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="streamtype">the audio stream type</param>
        <summary>Sets the audio stream type for this MediaPlayer.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="T:Android.Media.AudioManager" />
      </Docs>
    </Member>
    <Member MemberName="SetAuxEffectSendLevel">
      <MemberSignature Language="C#" Value="public virtual void SetAuxEffectSendLevel (float level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAuxEffectSendLevel(float32 level) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAuxEffectSendLevel", "(F)V", "GetSetAuxEffectSendLevel_FHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="level">send level scalar
</param>
        <summary>Sets the send level of the player to the attached auxiliary effect.</summary>
        <remarks />
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (Java.IO.FileDescriptor fd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(class Java.IO.FileDescriptor fd) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDataSource", "(Ljava/io/FileDescriptor;)V", "GetSetDataSource_Ljava_io_FileDescriptor_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
      </Parameters>
      <Docs>
        <param name="fd">the FileDescriptor for the file you want to play</param>
        <summary tool="true">Sets the data source (FileDescriptor) to use.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.IO.IOException" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDataSource", "(Ljava/lang/String;)V", "GetSetDataSource_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">the path of the file, or the http/rtsp URL of the stream you want to play</param>
        <summary>Sets the data source (file-path or http/rtsp URL) to use.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state

 <para tool="javadoc-to-mdoc" />When <c>path</c> refers to a local file, the file may actually be opened by a
 process other than the calling application.  This implies that the pathname
 should be an absolute path (as any other process runs with unspecified current working
 directory), and that the pathname should reference a world-readable file.
 As an alternative, the application could first open the file for reading,
 and then use the file descriptor form <c><see cref="M:Android.Media.MediaPlayer.SetDataSource(Java.IO.FileDescriptor)" /></c>.
</exception>
        <exception cref="T:Java.IO.IOException" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
        <exception cref="T:Java.Lang.SecurityException" />
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (Android.Content.Context context, Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(class Android.Content.Context context, class Android.Net.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDataSource", "(Landroid/content/Context;Landroid/net/Uri;)V", "GetSetDataSource_Landroid_content_Context_Landroid_net_Uri_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="context">the Context to use when resolving the Uri</param>
        <param name="uri">the Content URI of the data you want to play</param>
        <summary>Sets the data source as a content Uri.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.IO.IOException" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
        <exception cref="T:Java.Lang.SecurityException" />
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (Android.Content.Context context, Android.Net.Uri uri, System.Collections.Generic.IDictionary&lt;string,string&gt; headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(class Android.Content.Context context, class Android.Net.Uri uri, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; headers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDataSource", "(Landroid/content/Context;Landroid/net/Uri;Ljava/util/Map;)V", "GetSetDataSource_Landroid_content_Context_Landroid_net_Uri_Ljava_util_Map_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="headers" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="uri">To be added.</param>
        <param name="headers">To be added.</param>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SetDataSource">
      <MemberSignature Language="C#" Value="public virtual void SetDataSource (Java.IO.FileDescriptor fd, long offset, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataSource(class Java.IO.FileDescriptor fd, int64 offset, int64 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDataSource", "(Ljava/io/FileDescriptor;JJ)V", "GetSetDataSource_Ljava_io_FileDescriptor_JJHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fd">the FileDescriptor for the file you want to play</param>
        <param name="offset">the offset into the file where the data to be played starts, in bytes</param>
        <param name="length">the length in bytes of the data to be played</param>
        <summary>Sets the data source (FileDescriptor) to use.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
        <exception cref="T:Java.IO.IOException" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (Java.IO.FileDescriptor fd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(class Java.IO.FileDescriptor fd) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
      </Parameters>
      <Docs>
        <param name="fd">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (Android.Content.Context context, Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(class Android.Content.Context context, class Android.Net.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="uri">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (Android.Content.Context context, Android.Net.Uri uri, System.Collections.Generic.IDictionary&lt;string,string&gt; headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(class Android.Content.Context context, class Android.Net.Uri uri, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; headers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="headers" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="uri">To be added.</param>
        <param name="headers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetDataSourceAsync (Java.IO.FileDescriptor fd, long offset, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetDataSourceAsync(class Java.IO.FileDescriptor fd, int64 offset, int64 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fd">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SetDisplay">
      <MemberSignature Language="C#" Value="public virtual void SetDisplay (Android.Views.ISurfaceHolder sh);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDisplay(class Android.Views.ISurfaceHolder sh) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setDisplay", "(Landroid/view/SurfaceHolder;)V", "GetSetDisplay_Landroid_view_SurfaceHolder_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sh" Type="Android.Views.ISurfaceHolder" />
      </Parameters>
      <Docs>
        <param name="sh">the SurfaceHolder to use for video display
</param>
        <summary>Sets the <c><see cref="T:Android.Views.ISurfaceHolder" /></c> to use for displaying the video
 portion of the media.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetNextMediaPlayer">
      <MemberSignature Language="C#" Value="public virtual void SetNextMediaPlayer (Android.Media.MediaPlayer next);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetNextMediaPlayer(class Android.Media.MediaPlayer next) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setNextMediaPlayer", "(Landroid/media/MediaPlayer;)V", "GetSetNextMediaPlayer_Landroid_media_MediaPlayer_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="next" Type="Android.Media.MediaPlayer" />
      </Parameters>
      <Docs>
        <param name="next">the player to start after this one completes playback.

</param>
        <summary tool="true">Set the MediaPlayer to start when this MediaPlayer finishes playback
 (i.e. reaches the end of the stream).</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="SetOnBufferingUpdateListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnBufferingUpdateListener (Android.Media.MediaPlayer.IOnBufferingUpdateListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnBufferingUpdateListener(class Android.Media.MediaPlayer/IOnBufferingUpdateListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnBufferingUpdateListener", "(Landroid/media/MediaPlayer$OnBufferingUpdateListener;)V", "GetSetOnBufferingUpdateListener_Landroid_media_MediaPlayer_OnBufferingUpdateListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnBufferingUpdateListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run.
</param>
        <summary>Register a callback to be invoked when the status of a network
 stream's buffer has changed.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnCompletionListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnCompletionListener (Android.Media.MediaPlayer.IOnCompletionListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnCompletionListener(class Android.Media.MediaPlayer/IOnCompletionListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnCompletionListener", "(Landroid/media/MediaPlayer$OnCompletionListener;)V", "GetSetOnCompletionListener_Landroid_media_MediaPlayer_OnCompletionListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnCompletionListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run
</param>
        <summary>Register a callback to be invoked when the end of a media source
 has been reached during playback.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnErrorListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnErrorListener (Android.Media.MediaPlayer.IOnErrorListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnErrorListener(class Android.Media.MediaPlayer/IOnErrorListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnErrorListener", "(Landroid/media/MediaPlayer$OnErrorListener;)V", "GetSetOnErrorListener_Landroid_media_MediaPlayer_OnErrorListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnErrorListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run
</param>
        <summary>Register a callback to be invoked when an error has happened
 during an asynchronous operation.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnInfoListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnInfoListener (Android.Media.MediaPlayer.IOnInfoListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnInfoListener(class Android.Media.MediaPlayer/IOnInfoListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnInfoListener", "(Landroid/media/MediaPlayer$OnInfoListener;)V", "GetSetOnInfoListener_Landroid_media_MediaPlayer_OnInfoListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnInfoListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run
</param>
        <summary>Register a callback to be invoked when an info/warning is available.</summary>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetOnPreparedListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnPreparedListener (Android.Media.MediaPlayer.IOnPreparedListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnPreparedListener(class Android.Media.MediaPlayer/IOnPreparedListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnPreparedListener", "(Landroid/media/MediaPlayer$OnPreparedListener;)V", "GetSetOnPreparedListener_Landroid_media_MediaPlayer_OnPreparedListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnPreparedListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run
</param>
        <summary>Register a callback to be invoked when the media source is ready
 for playback.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnSeekCompleteListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnSeekCompleteListener (Android.Media.MediaPlayer.IOnSeekCompleteListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnSeekCompleteListener(class Android.Media.MediaPlayer/IOnSeekCompleteListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnSeekCompleteListener", "(Landroid/media/MediaPlayer$OnSeekCompleteListener;)V", "GetSetOnSeekCompleteListener_Landroid_media_MediaPlayer_OnSeekCompleteListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnSeekCompleteListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run
</param>
        <summary>Register a callback to be invoked when a seek operation has been
 completed.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetOnTimedTextListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnTimedTextListener (Android.Media.MediaPlayer.IOnTimedTextListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnTimedTextListener(class Android.Media.MediaPlayer/IOnTimedTextListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnTimedTextListener", "(Landroid/media/MediaPlayer$OnTimedTextListener;)V", "GetSetOnTimedTextListener_Landroid_media_MediaPlayer_OnTimedTextListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnTimedTextListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run
</param>
        <summary>Register a callback to be invoked when a timed text is available
 for display.</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="SetOnVideoSizeChangedListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnVideoSizeChangedListener (Android.Media.MediaPlayer.IOnVideoSizeChangedListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnVideoSizeChangedListener(class Android.Media.MediaPlayer/IOnVideoSizeChangedListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnVideoSizeChangedListener", "(Landroid/media/MediaPlayer$OnVideoSizeChangedListener;)V", "GetSetOnVideoSizeChangedListener_Landroid_media_MediaPlayer_OnVideoSizeChangedListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaPlayer+IOnVideoSizeChangedListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run
</param>
        <summary>Register a callback to be invoked when the video size is
 known or updated.</summary>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetScreenOnWhilePlaying">
      <MemberSignature Language="C#" Value="public virtual void SetScreenOnWhilePlaying (bool screenOn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetScreenOnWhilePlaying(bool screenOn) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setScreenOnWhilePlaying", "(Z)V", "GetSetScreenOnWhilePlaying_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="screenOn" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="screenOn">Supply true to keep the screen on, false to allow it
 to turn off.
</param>
        <summary>Control whether we should use the attached SurfaceHolder to keep the
 screen on while video playback is occurring.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetSurface">
      <MemberSignature Language="C#" Value="public virtual void SetSurface (Android.Views.Surface surface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSurface(class Android.Views.Surface surface) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setSurface", "(Landroid/view/Surface;)V", "GetSetSurface_Landroid_view_Surface_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surface" Type="Android.Views.Surface" />
      </Parameters>
      <Docs>
        <param name="surface">The <c><see cref="T:Android.Views.Surface" /></c> to be used for the video portion of
 the media.
</param>
        <summary>Sets the <c><see cref="T:Android.Views.Surface" /></c> to be used as the sink for the video portion of
 the media.</summary>
        <remarks />
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="SetVideoScalingMode">
      <MemberSignature Language="C#" Value="public virtual void SetVideoScalingMode (Android.Media.VideoScalingMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVideoScalingMode(valuetype Android.Media.VideoScalingMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVideoScalingMode", "(I)V", "GetSetVideoScalingMode_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Media.VideoScalingMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mode">target video scaling mode. Most be one of the supported
 video scaling modes; otherwise, IllegalArgumentException will be thrown.</param>
        <summary>Sets video scaling mode.</summary>
        <remarks />
        <since version="Added in API level 16" />
        <altmember cref="F:Android.Media.MediaPlayer.VideoScalingModeScaleToFit" />
        <altmember cref="F:Android.Media.MediaPlayer.VideoScalingModeScaleToFitWithCropping" />
      </Docs>
    </Member>
    <Member MemberName="SetVolume">
      <MemberSignature Language="C#" Value="public virtual void SetVolume (float leftVolume, float rightVolume);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVolume(float32 leftVolume, float32 rightVolume) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVolume", "(FF)V", "GetSetVolume_FFHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftVolume" Type="System.Single" />
        <Parameter Name="rightVolume" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="leftVolume">left volume scalar</param>
        <param name="rightVolume">right volume scalar
</param>
        <summary>Sets the volume on this player.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetWakeMode">
      <MemberSignature Language="C#" Value="public virtual void SetWakeMode (Android.Content.Context context, Android.OS.WakeLockFlags mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWakeMode(class Android.Content.Context context, valuetype Android.OS.WakeLockFlags mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setWakeMode", "(Landroid/content/Context;I)V", "GetSetWakeMode_Landroid_content_Context_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="mode" Type="Android.OS.WakeLockFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">the Context to use</param>
        <param name="mode">the power/wake mode to set</param>
        <summary>Set the low-level power management behavior for this MediaPlayer.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="T:Android.OS.PowerManager" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public virtual void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Start() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("start", "()V", "GetStartHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts or resumes playback.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called in an invalid state
</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public virtual void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stop", "()V", "GetStopHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops playback after playback has been stopped or paused.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if the internal player engine has not been
 initialized.
</exception>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="TimedText">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.TimedTextEventArgs&gt; TimedText;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/TimedTextEventArgs&gt; TimedText" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+TimedTextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="VideoHeight">
      <MemberSignature Language="C#" Value="public virtual int VideoHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VideoHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getVideoHeight", "()I", "GetGetVideoHeightHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the height of the video.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="VideoScalingModeScaleToFit">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaPlayerVideoScalingModeNotInUse VideoScalingModeScaleToFit = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaPlayerVideoScalingModeNotInUse VideoScalingModeScaleToFit = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaPlayerVideoScalingModeNotInUse enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayerVideoScalingModeNotInUse</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Specifies a video scaling mode.</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="VideoScalingModeScaleToFitWithCropping">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaPlayerVideoScalingModeNotInUse VideoScalingModeScaleToFitWithCropping = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaPlayerVideoScalingModeNotInUse VideoScalingModeScaleToFitWithCropping = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaPlayerVideoScalingModeNotInUse enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaPlayerVideoScalingModeNotInUse</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Specifies a video scaling mode.</summary>
        <remarks />
        <since version="Added in API level 16" />
      </Docs>
    </Member>
    <Member MemberName="VideoSizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaPlayer.VideoSizeChangedEventArgs&gt; VideoSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaPlayer/VideoSizeChangedEventArgs&gt; VideoSizeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaPlayer+VideoSizeChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="VideoWidth">
      <MemberSignature Language="C#" Value="public virtual int VideoWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VideoWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getVideoWidth", "()I", "GetGetVideoWidthHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the width of the video.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
  </Members>
</Type>
