<Type Name="AudioManager" FullName="Android.Media.AudioManager">
  <TypeSignature Language="C#" Value="public class AudioManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AudioManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/AudioManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>AudioManager provides access to volume and ringer mode control.</summary>
    <remarks />
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AudioManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AbandonAudioFocus">
      <MemberSignature Language="C#" Value="public virtual Android.Media.AudioFocusRequest AbandonAudioFocus (Android.Media.AudioManager.IOnAudioFocusChangeListener l);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.AudioFocusRequest AbandonAudioFocus(class Android.Media.AudioManager/IOnAudioFocusChangeListener l) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("abandonAudioFocus", "(Landroid/media/AudioManager$OnAudioFocusChangeListener;)I", "GetAbandonAudioFocus_Landroid_media_AudioManager_OnAudioFocusChangeListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioFocusRequest</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="Android.Media.AudioManager+IOnAudioFocusChangeListener" />
      </Parameters>
      <Docs>
        <param name="l">the listener with which focus was requested.</param>
        <summary>Abandon audio focus.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ActionAudioBecomingNoisy">
      <MemberSignature Language="C#" Value="public const string ActionAudioBecomingNoisy;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionAudioBecomingNoisy" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_AUDIO_BECOMING_NOISY")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast intent, a hint for applications that audio is about to become
 'noisy' due to a change in audio outputs.</summary>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ActionHdmiAudioPlug">
      <MemberSignature Language="C#" Value="public const string ActionHdmiAudioPlug;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionHdmiAudioPlug" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_HDMI_AUDIO_PLUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast Action: A sticky broadcast indicating an HDMI cable was plugged or unplugged.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ActionHeadsetPlug">
      <MemberSignature Language="C#" Value="public const string ActionHeadsetPlug;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionHeadsetPlug" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_HEADSET_PLUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast Action: Wired Headset plugged in or unplugged.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ActionScoAudioStateChanged">
      <MemberSignature Language="C#" Value="public const string ActionScoAudioStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionScoAudioStateChanged" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_SCO_AUDIO_STATE_CHANGED")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sticky broadcast intent action indicating that the bluetoooth SCO audio
 connection state has changed.</summary>
        <remarks />
        <since version="Added in API level 8" />
        <altmember cref="M:Android.Media.AudioManager.StartBluetoothSco" />
      </Docs>
    </Member>
    <Member MemberName="ActionScoAudioStateUpdated">
      <MemberSignature Language="C#" Value="public const string ActionScoAudioStateUpdated;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionScoAudioStateUpdated" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_SCO_AUDIO_STATE_UPDATED")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sticky broadcast intent action indicating that the bluetoooth SCO audio
 connection state has been updated.</summary>
        <remarks />
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Media.AudioManager.StartBluetoothSco" />
      </Docs>
    </Member>
    <Member MemberName="AdjustStreamVolume">
      <MemberSignature Language="C#" Value="public virtual void AdjustStreamVolume (Android.Media.Stream streamType, Android.Media.Adjust direction, Android.Media.VolumeNotificationFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AdjustStreamVolume(valuetype Android.Media.Stream streamType, valuetype Android.Media.Adjust direction, valuetype Android.Media.VolumeNotificationFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("adjustStreamVolume", "(III)V", "GetAdjustStreamVolume_IIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="direction" Type="Android.Media.Adjust">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="flags" Type="Android.Media.VolumeNotificationFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="streamType">The stream type to adjust. One of <c><see cref="!:Android.Media.AudioManager.STREAM_VOICE_CALL" /></c>,
 <c><see cref="!:Android.Media.AudioManager.STREAM_SYSTEM" /></c>, <c><see cref="!:Android.Media.AudioManager.STREAM_RING" /></c>, <c><see cref="!:Android.Media.AudioManager.STREAM_MUSIC" /></c> or
 <c><see cref="!:Android.Media.AudioManager.STREAM_ALARM" /></c></param>
        <param name="direction">The direction to adjust the volume. One of
            <c><see cref="!:Android.Media.AudioManager.ADJUST_LOWER" /></c>, <c><see cref="!:Android.Media.AudioManager.ADJUST_RAISE" /></c>, or
            <c><see cref="!:Android.Media.AudioManager.ADJUST_SAME" /></c>.</param>
        <param name="flags">One or more flags.</param>
        <summary>Adjusts the volume of a particular stream by one step in a direction.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Media.AudioManager.AdjustVolume(Android.Media.Adjust, Android.Media.VolumeNotificationFlags)" />
        <altmember cref="M:Android.Media.AudioManager.SetStreamVolume(Android.Media.Stream, System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AdjustSuggestedStreamVolume">
      <MemberSignature Language="C#" Value="public virtual void AdjustSuggestedStreamVolume (Android.Media.Adjust direction, Android.Media.Stream suggestedStreamType, Android.Media.VolumeNotificationFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AdjustSuggestedStreamVolume(valuetype Android.Media.Adjust direction, valuetype Android.Media.Stream suggestedStreamType, valuetype Android.Media.VolumeNotificationFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("adjustSuggestedStreamVolume", "(III)V", "GetAdjustSuggestedStreamVolume_IIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="Android.Media.Adjust">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="suggestedStreamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="flags" Type="Android.Media.VolumeNotificationFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="direction">The direction to adjust the volume. One of
            <c><see cref="!:Android.Media.AudioManager.ADJUST_LOWER" /></c>, <c><see cref="!:Android.Media.AudioManager.ADJUST_RAISE" /></c>,
            <c><see cref="!:Android.Media.AudioManager.ADJUST_SAME" /></c>, <c><see cref="!:Android.Media.AudioManager.ADJUST_MUTE" /></c>,
            <c><see cref="!:Android.Media.AudioManager.ADJUST_UNMUTE" /></c>, or <c><see cref="!:Android.Media.AudioManager.ADJUST_TOGGLE_MUTE" /></c>.</param>
        <param name="suggestedStreamType">The stream type that will be used if there
            isn't a relevant stream. <c><see cref="F:Android.Media.AudioManager.UseDefaultStreamType" /></c> is
            valid here.</param>
        <param name="flags">One or more flags.</param>
        <summary>Adjusts the volume of the most relevant stream, or the given fallback
 stream.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Media.AudioManager.AdjustVolume(Android.Media.Adjust, Android.Media.VolumeNotificationFlags)" />
        <altmember cref="M:Android.Media.AudioManager.AdjustStreamVolume(Android.Media.Stream, Android.Media.Adjust, Android.Media.Adjust)" />
        <altmember cref="M:Android.Media.AudioManager.SetStreamVolume(Android.Media.Stream, System.Int32, System.Int32)" />
        <altmember cref="P:Android.Media.AudioManager.IsVolumeFixed" />
      </Docs>
    </Member>
    <Member MemberName="AdjustVolume">
      <MemberSignature Language="C#" Value="public virtual void AdjustVolume (Android.Media.Adjust direction, Android.Media.VolumeNotificationFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AdjustVolume(valuetype Android.Media.Adjust direction, valuetype Android.Media.VolumeNotificationFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("adjustVolume", "(II)V", "GetAdjustVolume_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="Android.Media.Adjust">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="flags" Type="Android.Media.VolumeNotificationFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="direction">The direction to adjust the volume. One of
            <c><see cref="!:Android.Media.AudioManager.ADJUST_LOWER" /></c>, <c><see cref="!:Android.Media.AudioManager.ADJUST_RAISE" /></c>,
            <c><see cref="!:Android.Media.AudioManager.ADJUST_SAME" /></c>, <c><see cref="!:Android.Media.AudioManager.ADJUST_MUTE" /></c>,
            <c><see cref="!:Android.Media.AudioManager.ADJUST_UNMUTE" /></c>, or <c><see cref="!:Android.Media.AudioManager.ADJUST_TOGGLE_MUTE" /></c>.</param>
        <param name="flags">One or more flags.</param>
        <summary>Adjusts the volume of the most relevant stream.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Media.AudioManager.AdjustSuggestedStreamVolume(Android.Media.Adjust, Android.Media.Stream, Android.Media.Stream)" />
        <altmember cref="M:Android.Media.AudioManager.AdjustStreamVolume(Android.Media.Stream, Android.Media.Adjust, Android.Media.Adjust)" />
        <altmember cref="M:Android.Media.AudioManager.SetStreamVolume(Android.Media.Stream, System.Int32, System.Int32)" />
        <altmember cref="P:Android.Media.AudioManager.IsVolumeFixed" />
      </Docs>
    </Member>
    <Member MemberName="AudiofocusGain">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioFocus AudiofocusGain = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioFocus AudiofocusGain = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("AUDIOFOCUS_GAIN")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioFocus enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioFocus</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Used to indicate a gain of audio focus, or a request of audio focus, of unknown duration.</summary>
        <remarks />
        <since version="Added in API level 8" />
        <altmember cref="M:Android.Media.AudioManager.RequestAudioFocus(.IOnAudioFocusChangeListener, Android.Media.Stream, Android.Media.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="AudiofocusGainTransient">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioFocus AudiofocusGainTransient = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioFocus AudiofocusGainTransient = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("AUDIOFOCUS_GAIN_TRANSIENT")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioFocus enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioFocus</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Used to indicate a temporary gain or request of audio focus, anticipated to last a short
 amount of time.</summary>
        <remarks />
        <since version="Added in API level 8" />
        <altmember cref="M:Android.Media.AudioManager.RequestAudioFocus(.IOnAudioFocusChangeListener, Android.Media.Stream, Android.Media.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="AudiofocusGainTransientExclusive">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioFocus AudiofocusGainTransientExclusive = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioFocus AudiofocusGainTransientExclusive = (4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioFocus enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioFocus</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Used to indicate a temporary request of audio focus, anticipated to last a short
 amount of time, during which no other applications, or system components, should play
 anything.</summary>
        <remarks />
        <altmember cref="M:Android.Media.AudioManager.RequestAudioFocus(.IOnAudioFocusChangeListener, Android.Media.Stream, Android.Media.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="AudiofocusGainTransientMayDuck">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioFocus AudiofocusGainTransientMayDuck = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioFocus AudiofocusGainTransientMayDuck = (3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioFocus enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioFocus</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>Used to indicate a temporary request of audio focus, anticipated to last a short
 amount of time, and where it is acceptable for other audio applications to keep playing
 after having lowered their output level (also referred to as "ducking").</summary>
        <remarks />
        <since version="Added in API level 8" />
        <altmember cref="M:Android.Media.AudioManager.RequestAudioFocus(.IOnAudioFocusChangeListener, Android.Media.Stream, Android.Media.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="AudiofocusLoss">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioFocus AudiofocusLoss = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioFocus AudiofocusLoss = (-1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("AUDIOFOCUS_LOSS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioFocus enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioFocus</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>Used to indicate a loss of audio focus of unknown duration.</summary>
        <remarks />
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="AudiofocusLossTransient">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioFocus AudiofocusLossTransient = -2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioFocus AudiofocusLossTransient = (-2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("AUDIOFOCUS_LOSS_TRANSIENT")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioFocus enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioFocus</ReturnType>
      </ReturnValue>
      <MemberValue>-2</MemberValue>
      <Docs>
        <summary>Used to indicate a transient loss of audio focus.</summary>
        <remarks />
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="AudiofocusLossTransientCanDuck">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioFocus AudiofocusLossTransientCanDuck = -3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioFocus AudiofocusLossTransientCanDuck = (-3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioFocus enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioFocus</ReturnType>
      </ReturnValue>
      <MemberValue>-3</MemberValue>
      <Docs>
        <summary>Used to indicate a transient loss of audio focus where the loser of the audio focus can
 lower its output volume if it wants to continue playing (also referred to as "ducking"), as
 the new focus owner doesn't require others to be silent.</summary>
        <remarks />
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="AudiofocusRequestFailed">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioFocusRequest AudiofocusRequestFailed = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioFocusRequest AudiofocusRequestFailed = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("AUDIOFOCUS_REQUEST_FAILED")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioFocusRequest enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioFocusRequest</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>A failed focus change request.</summary>
        <remarks />
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="AudiofocusRequestGranted">
      <MemberSignature Language="C#" Value="public const Android.Media.AudioFocusRequest AudiofocusRequestGranted = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.AudioFocusRequest AudiofocusRequestGranted = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("AUDIOFOCUS_REQUEST_GRANTED")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.AudioFocusRequest enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioFocusRequest</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>A successful focus change request.</summary>
        <remarks />
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="AudioSessionIdGenerate">
      <MemberSignature Language="C#" Value="public const int AudioSessionIdGenerate = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 AudioSessionIdGenerate = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("AUDIO_SESSION_ID_GENERATE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>A special audio session ID to indicate that the audio session ID isn't known and the
 framework should generate a new value.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="BluetoothA2dpOn">
      <MemberSignature Language="C#" Value="public virtual bool BluetoothA2dpOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BluetoothA2dpOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isBluetoothA2dpOn", "()Z", "GetIsBluetoothA2dpOnHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setBluetoothA2dpOn", "(Z)V", "GetSetBluetoothA2dpOn_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Checks whether A2DP audio routing to the Bluetooth headset is on or off.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="BluetoothScoOn">
      <MemberSignature Language="C#" Value="public virtual bool BluetoothScoOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BluetoothScoOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isBluetoothScoOn", "()Z", "GetIsBluetoothScoOnHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setBluetoothScoOn", "(Z)V", "GetSetBluetoothScoOn_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Checks whether communications use Bluetooth SCO.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="DispatchMediaKeyEvent">
      <MemberSignature Language="C#" Value="public virtual void DispatchMediaKeyEvent (Android.Views.KeyEvent keyEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DispatchMediaKeyEvent(class Android.Views.KeyEvent keyEvent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("dispatchMediaKeyEvent", "(Landroid/view/KeyEvent;)V", "GetDispatchMediaKeyEvent_Landroid_view_KeyEvent_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyEvent" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="keyEvent">a <c><see cref="T:Android.Views.KeyEvent" /></c> instance whose key code is one of
     <c><see cref="!:Android.Views.KeyEvent.KEYCODE_MUTE" /></c>,
     <c><see cref="!:Android.Views.KeyEvent.KEYCODE_HEADSETHOOK" /></c>,
     <c><see cref="!:Android.Views.KeyEvent.KEYCODE_MEDIA_PLAY" /></c>,
     <c><see cref="!:Android.Views.KeyEvent.KEYCODE_MEDIA_PAUSE" /></c>,
     <c><see cref="!:Android.Views.KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE" /></c>,
     <c><see cref="!:Android.Views.KeyEvent.KEYCODE_MEDIA_STOP" /></c>,
     <c><see cref="!:Android.Views.KeyEvent.KEYCODE_MEDIA_NEXT" /></c>,
     <c><see cref="!:Android.Views.KeyEvent.KEYCODE_MEDIA_PREVIOUS" /></c>,
     <c><see cref="!:Android.Views.KeyEvent.KEYCODE_MEDIA_REWIND" /></c>,
     <c><see cref="!:Android.Views.KeyEvent.KEYCODE_MEDIA_RECORD" /></c>,
     <c><see cref="!:Android.Views.KeyEvent.KEYCODE_MEDIA_FAST_FORWARD" /></c>,
     <c><see cref="!:Android.Views.KeyEvent.KEYCODE_MEDIA_CLOSE" /></c>,
     <c><see cref="!:Android.Views.KeyEvent.KEYCODE_MEDIA_EJECT" /></c>,
     or <c><see cref="!:Android.Views.KeyEvent.KEYCODE_MEDIA_AUDIO_TRACK" /></c>.
</param>
        <summary>Sends a simulated key event for a media button.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public const int Error = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 Error = (-1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ERROR")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>A default error code.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ErrorDeadObject">
      <MemberSignature Language="C#" Value="public const int ErrorDeadObject = -6;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 ErrorDeadObject = (-6)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ERROR_DEAD_OBJECT")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-6</MemberValue>
      <Docs>
        <summary>An error code indicating that the object reporting it is no longer valid and needs to
 be recreated.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ExtraAudioPlugState">
      <MemberSignature Language="C#" Value="public const string ExtraAudioPlugState;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraAudioPlugState" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_AUDIO_PLUG_STATE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Extra used in <c><see cref="F:Android.Media.AudioManager.ActionHdmiAudioPlug" /></c> to communicate whether HDMI is plugged in
 or unplugged.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ExtraEncodings">
      <MemberSignature Language="C#" Value="public const string ExtraEncodings;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraEncodings" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_ENCODINGS")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Extra used in <c><see cref="F:Android.Media.AudioManager.ActionHdmiAudioPlug" /></c> to define the audio encodings supported by
 the connected HDMI device.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ExtraMaxChannelCount">
      <MemberSignature Language="C#" Value="public const string ExtraMaxChannelCount;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraMaxChannelCount" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_MAX_CHANNEL_COUNT")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Extra used in <c><see cref="F:Android.Media.AudioManager.ActionHdmiAudioPlug" /></c> to define the maximum number of channels
 supported by the HDMI device.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ExtraRingerMode">
      <MemberSignature Language="C#" Value="public const string ExtraRingerMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraRingerMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_RINGER_MODE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The new ringer mode.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="F:Android.Media.AudioManager.RingerModeChangedAction" />
      </Docs>
    </Member>
    <Member MemberName="ExtraScoAudioPreviousState">
      <MemberSignature Language="C#" Value="public const string ExtraScoAudioPreviousState;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraScoAudioPreviousState" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_SCO_AUDIO_PREVIOUS_STATE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Extra for intent <c><see cref="F:Android.Media.AudioManager.ActionScoAudioStateUpdated" /></c> containing the previous
 bluetooth SCO connection state.</summary>
        <remarks />
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="ExtraScoAudioState">
      <MemberSignature Language="C#" Value="public const string ExtraScoAudioState;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraScoAudioState" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_SCO_AUDIO_STATE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Extra for intent <c><see cref="F:Android.Media.AudioManager.ActionScoAudioStateChanged" /></c> or
 <c><see cref="F:Android.Media.AudioManager.ActionScoAudioStateUpdated" /></c> containing the new bluetooth SCO connection state.</summary>
        <remarks />
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ExtraVibrateSetting">
      <MemberSignature Language="C#" Value="public const string ExtraVibrateSetting;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraVibrateSetting" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_VIBRATE_SETTING")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The new vibrate setting for a particular type.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="F:Android.Media.AudioManager.VibrateSettingChangedAction" />
        <altmember cref="F:Android.Media.AudioManager.ExtraVibrateType" />
      </Docs>
    </Member>
    <Member MemberName="ExtraVibrateType">
      <MemberSignature Language="C#" Value="public const string ExtraVibrateType;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraVibrateType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_VIBRATE_TYPE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The vibrate type whose setting has changed.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="F:Android.Media.AudioManager.VibrateSettingChangedAction" />
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static Android.Media.AudioManager FromContext (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.AudioManager FromContext(class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.Media.AudioManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GenerateAudioSessionId">
      <MemberSignature Language="C#" Value="public virtual int GenerateAudioSessionId ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GenerateAudioSessionId() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("generateAudioSessionId", "()I", "GetGenerateAudioSessionIdHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Return a new audio session identifier not associated with any player or effect.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public virtual string GetParameters (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetParameters(string keys) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getParameters", "(Ljava/lang/String;)Ljava/lang/String;", "GetGetParameters_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">list of parameters</param>
        <summary>Gets a variable number of parameter values from audio hardware.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public virtual string GetProperty (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetProperty(string key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getProperty", "(Ljava/lang/String;)Ljava/lang/String;", "GetGetProperty_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">One of the strings corresponding to a property key: either
            <c><see cref="F:Android.Media.AudioManager.PropertyOutputSampleRate" /></c> or
            <c><see cref="F:Android.Media.AudioManager.PropertyOutputFramesPerBuffer" /></c></param>
        <summary>Returns the value of the property with the specified key.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="GetRouting">
      <MemberSignature Language="C#" Value="public virtual Android.Media.Route GetRouting (Android.Media.Mode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.Route GetRouting(valuetype Android.Media.Mode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getRouting", "(I)I", "GetGetRouting_IHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Route</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Media.Mode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mode">audio mode to get route (e.g., MODE_RINGTONE)</param>
        <summary>Returns the current audio routing bit vector for a specified mode.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="GetStreamMaxVolume">
      <MemberSignature Language="C#" Value="public virtual int GetStreamMaxVolume (Android.Media.Stream streamType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetStreamMaxVolume(valuetype Android.Media.Stream streamType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getStreamMaxVolume", "(I)I", "GetGetStreamMaxVolume_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="streamType">The stream type whose maximum volume index is returned.</param>
        <summary>Returns the maximum volume index for a particular stream.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Media.AudioManager.GetStreamVolume(Android.Media.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="GetStreamVolume">
      <MemberSignature Language="C#" Value="public virtual int GetStreamVolume (Android.Media.Stream streamType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetStreamVolume(valuetype Android.Media.Stream streamType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getStreamVolume", "(I)I", "GetGetStreamVolume_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="streamType">The stream type whose volume index is returned.</param>
        <summary>Returns the current volume index for a particular stream.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Media.AudioManager.GetStreamMaxVolume(Android.Media.Stream)" />
        <altmember cref="M:Android.Media.AudioManager.SetStreamVolume(Android.Media.Stream, System.Int32, System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetVibrateSetting">
      <MemberSignature Language="C#" Value="public virtual Android.Media.VibrateSetting GetVibrateSetting (Android.Media.VibrateType vibrateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.VibrateSetting GetVibrateSetting(valuetype Android.Media.VibrateType vibrateType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getVibrateSetting", "(I)I", "GetGetVibrateSetting_IHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.VibrateSetting</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vibrateType" Type="Android.Media.VibrateType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="vibrateType">The type of vibrate. One of
            <c><see cref="!:Android.Media.AudioManager.VIBRATE_TYPE_NOTIFICATION" /></c> or
            <c><see cref="!:Android.Media.AudioManager.VIBRATE_TYPE_RINGER" /></c>.</param>
        <summary>Returns whether the user's vibrate setting for a vibrate type.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Media.AudioManager.SetVibrateSetting(Android.Media.VibrateType, Android.Media.VibrateSetting)" />
        <altmember cref="M:Android.Media.AudioManager.ShouldVibrate(Android.Media.VibrateType)" />
      </Docs>
    </Member>
    <Member MemberName="IsBluetoothScoAvailableOffCall">
      <MemberSignature Language="C#" Value="public virtual bool IsBluetoothScoAvailableOffCall { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBluetoothScoAvailableOffCall" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isBluetoothScoAvailableOffCall", "()Z", "GetIsBluetoothScoAvailableOffCallHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates if current platform supports use of SCO for off call use cases.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 8" />
        <altmember cref="M:Android.Media.AudioManager.StartBluetoothSco" />
      </Docs>
    </Member>
    <Member MemberName="IsMusicActive">
      <MemberSignature Language="C#" Value="public virtual bool IsMusicActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMusicActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isMusicActive", "()Z", "GetIsMusicActiveHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Checks whether any music is active.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsVolumeFixed">
      <MemberSignature Language="C#" Value="public virtual bool IsVolumeFixed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVolumeFixed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isVolumeFixed", "()Z", "GetIsVolumeFixedHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates if the device implements a fixed volume policy.</summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="LoadSoundEffects">
      <MemberSignature Language="C#" Value="public virtual void LoadSoundEffects ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadSoundEffects() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("loadSoundEffects", "()V", "GetLoadSoundEffectsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Load Sound effects.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="LoadSoundEffectsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task LoadSoundEffectsAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task LoadSoundEffectsAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MicrophoneMute">
      <MemberSignature Language="C#" Value="public virtual bool MicrophoneMute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MicrophoneMute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isMicrophoneMute", "()Z", "GetIsMicrophoneMuteHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setMicrophoneMute", "(Z)V", "GetSetMicrophoneMute_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Checks whether the microphone mute is on or off.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public virtual Android.Media.Mode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Media.Mode Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMode", "()I", "GetGetModeHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setMode", "(I)V", "GetSetMode_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.Mode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current audio mode.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="NumStreams">
      <MemberSignature Language="C#" Value="public const int NumStreams = 5;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 NumStreams = (5)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("NUM_STREAMS")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>
        </summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PlaySoundEffect">
      <MemberSignature Language="C#" Value="public virtual void PlaySoundEffect (Android.Media.SoundEffect effectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PlaySoundEffect(valuetype Android.Media.SoundEffect effectType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("playSoundEffect", "(I)V", "GetPlaySoundEffect_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="effectType" Type="Android.Media.SoundEffect">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="effectType">The type of sound effect. One of
            <c><see cref="!:Android.Media.AudioManager.FX_KEY_CLICK" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_FOCUS_NAVIGATION_UP" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_FOCUS_NAVIGATION_DOWN" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_FOCUS_NAVIGATION_LEFT" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_FOCUS_NAVIGATION_RIGHT" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_KEYPRESS_STANDARD" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_KEYPRESS_SPACEBAR" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_KEYPRESS_DELETE" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_KEYPRESS_RETURN" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_KEYPRESS_INVALID" /></c>,
 NOTE: This version uses the UI settings to determine
 whether sounds are heard or not.
</param>
        <summary tool="true">Plays a sound effect (Key clicks, lid open/close.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="PlaySoundEffect">
      <MemberSignature Language="C#" Value="public virtual void PlaySoundEffect (Android.Media.SoundEffect effectType, float volume);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PlaySoundEffect(valuetype Android.Media.SoundEffect effectType, float32 volume) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("playSoundEffect", "(IF)V", "GetPlaySoundEffect_IFHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="effectType" Type="Android.Media.SoundEffect">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="volume" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="effectType">The type of sound effect. One of
            <c><see cref="!:Android.Media.AudioManager.FX_KEY_CLICK" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_FOCUS_NAVIGATION_UP" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_FOCUS_NAVIGATION_DOWN" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_FOCUS_NAVIGATION_LEFT" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_FOCUS_NAVIGATION_RIGHT" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_KEYPRESS_STANDARD" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_KEYPRESS_SPACEBAR" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_KEYPRESS_DELETE" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_KEYPRESS_RETURN" /></c>,
            <c><see cref="!:Android.Media.AudioManager.FX_KEYPRESS_INVALID" /></c>,</param>
        <param name="volume">Sound effect volume.
 The volume value is a raw scalar so UI controls should be scaled logarithmically.
 If a volume of -1 is specified, the AudioManager.STREAM_MUSIC stream volume minus 3dB will be used.
 NOTE: This version is for applications that have their own
 settings panel for enabling and controlling volume.
</param>
        <summary>Plays a sound effect (Key clicks, lid open/close.</summary>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PropertyOutputFramesPerBuffer">
      <MemberSignature Language="C#" Value="public const string PropertyOutputFramesPerBuffer;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyOutputFramesPerBuffer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PROPERTY_OUTPUT_FRAMES_PER_BUFFER")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Used as a key for <c><see cref="M:Android.Media.AudioManager.GetProperty(System.String)" /></c> to request the native or optimal output buffer size
 for this device's primary output stream, in decimal PCM frames.</summary>
        <remarks />
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="PropertyOutputSampleRate">
      <MemberSignature Language="C#" Value="public const string PropertyOutputSampleRate;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyOutputSampleRate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("PROPERTY_OUTPUT_SAMPLE_RATE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Used as a key for <c><see cref="M:Android.Media.AudioManager.GetProperty(System.String)" /></c> to request the native or optimal output sample rate
 for this device's primary output stream, in decimal Hz.</summary>
        <remarks />
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="RegisterMediaButtonEventReceiver">
      <MemberSignature Language="C#" Value="public virtual void RegisterMediaButtonEventReceiver (Android.App.PendingIntent eventReceiver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterMediaButtonEventReceiver(class Android.App.PendingIntent eventReceiver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerMediaButtonEventReceiver", "(Landroid/app/PendingIntent;)V", "GetRegisterMediaButtonEventReceiver_Landroid_app_PendingIntent_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventReceiver" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="eventReceiver">target that will receive media button intents.  The PendingIntent
 will be sent an <c><see cref="F:Android.Content.Intent.ActionMediaButton" /></c> event when a media button action
 occurs, with <c><see cref="F:Android.Content.Intent.ExtraKeyEvent" /></c> added and holding the key code of the
 media button that was pressed.</param>
        <summary>Register a component to be the sole receiver of MEDIA_BUTTON intents.</summary>
        <remarks />
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="RegisterMediaButtonEventReceiver">
      <MemberSignature Language="C#" Value="public virtual void RegisterMediaButtonEventReceiver (Android.Content.ComponentName eventReceiver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterMediaButtonEventReceiver(class Android.Content.ComponentName eventReceiver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerMediaButtonEventReceiver", "(Landroid/content/ComponentName;)V", "GetRegisterMediaButtonEventReceiver_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventReceiver" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="eventReceiver">identifier of a <c><see cref="T:Android.Content.BroadcastReceiver" /></c>
      that will receive the media button intent. This broadcast receiver must be declared
      in the application manifest. The package of the component must match that of
      the context you're registering from.</param>
        <summary>Register a component to be the sole receiver of MEDIA_BUTTON intents.</summary>
        <remarks />
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="RegisterRemoteControlClient">
      <MemberSignature Language="C#" Value="public virtual void RegisterRemoteControlClient (Android.Media.RemoteControlClient rcClient);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterRemoteControlClient(class Android.Media.RemoteControlClient rcClient) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerRemoteControlClient", "(Landroid/media/RemoteControlClient;)V", "GetRegisterRemoteControlClient_Landroid_media_RemoteControlClient_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rcClient" Type="Android.Media.RemoteControlClient" />
      </Parameters>
      <Docs>
        <param name="rcClient">The remote control client from which remote controls will receive
      information to display.</param>
        <summary>Registers the remote control client for providing information to display on the remote
 controls.</summary>
        <remarks />
        <since version="Added in API level 14" />
        <altmember cref="T:Android.Media.RemoteControlClient" />
      </Docs>
    </Member>
    <Member MemberName="RegisterRemoteController">
      <MemberSignature Language="C#" Value="public virtual bool RegisterRemoteController (Android.Media.RemoteController rctlr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RegisterRemoteController(class Android.Media.RemoteController rctlr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerRemoteController", "(Landroid/media/RemoteController;)Z", "GetRegisterRemoteController_Landroid_media_RemoteController_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rctlr" Type="Android.Media.RemoteController" />
      </Parameters>
      <Docs>
        <param name="rctlr">the object to register.</param>
        <summary>Registers a <c><see cref="T:Android.Media.RemoteController" /></c> instance for it to receive media
 metadata updates and playback state information from applications using
 <c><see cref="T:Android.Media.RemoteControlClient" /></c>, and control their playback.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RequestAudioFocus">
      <MemberSignature Language="C#" Value="public virtual Android.Media.AudioFocusRequest RequestAudioFocus (Android.Media.AudioManager.IOnAudioFocusChangeListener l, Android.Media.Stream streamType, Android.Media.AudioFocus durationHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Media.AudioFocusRequest RequestAudioFocus(class Android.Media.AudioManager/IOnAudioFocusChangeListener l, valuetype Android.Media.Stream streamType, valuetype Android.Media.AudioFocus durationHint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestAudioFocus", "(Landroid/media/AudioManager$OnAudioFocusChangeListener;II)I", "GetRequestAudioFocus_Landroid_media_AudioManager_OnAudioFocusChangeListener_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.AudioFocusRequest</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="Android.Media.AudioManager+IOnAudioFocusChangeListener" />
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="durationHint" Type="Android.Media.AudioFocus">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="l">the listener to be notified of audio focus changes</param>
        <param name="streamType">the main audio stream type affected by the focus request</param>
        <param name="durationHint">use <c><see cref="F:Android.Media.AudioManager.AudiofocusGainTransient" /></c> to indicate this focus request
      is temporary, and focus will be abandonned shortly. Examples of transient requests are
      for the playback of driving directions, or notifications sounds.
      Use <c><see cref="F:Android.Media.AudioManager.AudiofocusGainTransientMayDuck" /></c> to indicate also that it's ok for
      the previous focus owner to keep playing if it ducks its audio output.
      Alternatively use <c><see cref="F:Android.Media.AudioManager.AudiofocusGainTransientExclusive" /></c> for a temporary request
      that benefits from the system not playing disruptive sounds like notifications, for
      usecases such as voice memo recording, or speech recognition.
      Use <c><see cref="F:Android.Media.AudioManager.AudiofocusGain" /></c> for a focus request of unknown duration such
      as the playback of a song or a video.</param>
        <summary>Request audio focus.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="RingerMode">
      <MemberSignature Language="C#" Value="public virtual Android.Media.RingerMode RingerMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Media.RingerMode RingerMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getRingerMode", "()I", "GetGetRingerModeHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setRingerMode", "(I)V", "GetSetRingerMode_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.RingerMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current ringtone mode.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Media.AudioManager.RingerMode" />
        <altmember cref="P:Android.Media.AudioManager.RingerMode" />
        <altmember cref="P:Android.Media.AudioManager.IsVolumeFixed" />
      </Docs>
    </Member>
    <Member MemberName="RingerModeChangedAction">
      <MemberSignature Language="C#" Value="public const string RingerModeChangedAction;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string RingerModeChangedAction" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("RINGER_MODE_CHANGED_ACTION")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sticky broadcast intent action indicating that the ringer mode has
 changed.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="F:Android.Media.AudioManager.ExtraRingerMode" />
      </Docs>
    </Member>
    <Member MemberName="ScoAudioStateConnected">
      <MemberSignature Language="C#" Value="public const Android.Media.ScoAudioState ScoAudioStateConnected = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.ScoAudioState ScoAudioStateConnected = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SCO_AUDIO_STATE_CONNECTED")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.ScoAudioState enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.ScoAudioState</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Value for extra <c><see cref="F:Android.Media.AudioManager.ExtraScoAudioState" /></c> or <c><see cref="F:Android.Media.AudioManager.ExtraScoAudioPreviousState" /></c>
 indicating that the SCO audio channel is established
</summary>
        <remarks />
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ScoAudioStateConnecting">
      <MemberSignature Language="C#" Value="public const Android.Media.ScoAudioState ScoAudioStateConnecting = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.ScoAudioState ScoAudioStateConnecting = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SCO_AUDIO_STATE_CONNECTING")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.ScoAudioState enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.ScoAudioState</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Value for extra EXTRA_SCO_AUDIO_STATE or EXTRA_SCO_AUDIO_PREVIOUS_STATE
 indicating that the SCO audio channel is being established
</summary>
        <remarks />
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="ScoAudioStateDisconnected">
      <MemberSignature Language="C#" Value="public const Android.Media.ScoAudioState ScoAudioStateDisconnected = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.ScoAudioState ScoAudioStateDisconnected = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SCO_AUDIO_STATE_DISCONNECTED")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.ScoAudioState enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.ScoAudioState</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Value for extra EXTRA_SCO_AUDIO_STATE or EXTRA_SCO_AUDIO_PREVIOUS_STATE
 indicating that the SCO audio channel is not established
</summary>
        <remarks />
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ScoAudioStateError">
      <MemberSignature Language="C#" Value="public const Android.Media.ScoAudioState ScoAudioStateError = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.ScoAudioState ScoAudioStateError = (-1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("SCO_AUDIO_STATE_ERROR")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.ScoAudioState enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.ScoAudioState</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>Value for extra EXTRA_SCO_AUDIO_STATE indicating that
 there was an error trying to obtain the state
</summary>
        <remarks />
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public virtual void SetParameters (string keyValuePairs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetParameters(string keyValuePairs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setParameters", "(Ljava/lang/String;)V", "GetSetParameters_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePairs" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keyValuePairs">list of parameters key value pairs in the form:
    key1=value1;key2=value2;...

</param>
        <summary>Sets a variable number of parameter values to audio hardware.</summary>
        <remarks />
        <since version="Added in API level 5" />
      </Docs>
    </Member>
    <Member MemberName="SetRouting">
      <MemberSignature Language="C#" Value="public virtual void SetRouting (Android.Media.Mode mode, Android.Media.Route routes, Android.Media.Route mask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetRouting(valuetype Android.Media.Mode mode, valuetype Android.Media.Route routes, valuetype Android.Media.Route mask) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setRouting", "(III)V", "GetSetRouting_IIIHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Android.Media.Mode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="routes" Type="Android.Media.Route">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="mask" Type="Android.Media.Route">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mode">audio mode to change route. E.g., MODE_RINGTONE.</param>
        <param name="routes">bit vector of routes requested, created from one or
               more of ROUTE_xxx types. Set bits indicate that route should be on</param>
        <param name="mask">bit vector of routes to change, created from one or more of
 ROUTE_xxx types. Unset bits indicate the route should be left unchanged</param>
        <summary>Sets the audio routing for a specified mode</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetStreamMute">
      <MemberSignature Language="C#" Value="public virtual void SetStreamMute (Android.Media.Stream streamType, bool state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetStreamMute(valuetype Android.Media.Stream streamType, bool state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setStreamMute", "(IZ)V", "GetSetStreamMute_IZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="state" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="streamType">The stream to be muted/unmuted.</param>
        <param name="state">The required mute state: true for mute ON, false for mute
            OFF</param>
        <summary>Mute or unmute an audio stream.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Media.AudioManager.IsVolumeFixed" />
      </Docs>
    </Member>
    <Member MemberName="SetStreamSolo">
      <MemberSignature Language="C#" Value="public virtual void SetStreamSolo (Android.Media.Stream streamType, bool state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetStreamSolo(valuetype Android.Media.Stream streamType, bool state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setStreamSolo", "(IZ)V", "GetSetStreamSolo_IZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="state" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="streamType">The stream to be soloed/unsoloed.</param>
        <param name="state">The required solo state: true for solo ON, false for solo
            OFF</param>
        <summary>Solo or unsolo a particular stream.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="P:Android.Media.AudioManager.IsVolumeFixed" />
      </Docs>
    </Member>
    <Member MemberName="SetStreamVolume">
      <MemberSignature Language="C#" Value="public virtual void SetStreamVolume (Android.Media.Stream streamType, int index, Android.Media.VolumeNotificationFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetStreamVolume(valuetype Android.Media.Stream streamType, int32 index, valuetype Android.Media.VolumeNotificationFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setStreamVolume", "(III)V", "GetSetStreamVolume_IIIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamType" Type="Android.Media.Stream">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="flags" Type="Android.Media.VolumeNotificationFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="streamType">The stream whose volume index should be set.</param>
        <param name="index">The volume index to set. See
            <c><see cref="M:Android.Media.AudioManager.GetStreamMaxVolume(Android.Media.Stream)" /></c> for the largest valid value.</param>
        <param name="flags">One or more flags.</param>
        <summary>Sets the volume index for a particular stream.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Media.AudioManager.GetStreamMaxVolume(Android.Media.Stream)" />
        <altmember cref="M:Android.Media.AudioManager.GetStreamVolume(Android.Media.Stream)" />
        <altmember cref="P:Android.Media.AudioManager.IsVolumeFixed" />
      </Docs>
    </Member>
    <Member MemberName="SetVibrateSetting">
      <MemberSignature Language="C#" Value="public virtual void SetVibrateSetting (Android.Media.VibrateType vibrateType, Android.Media.VibrateSetting vibrateSetting);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVibrateSetting(valuetype Android.Media.VibrateType vibrateType, valuetype Android.Media.VibrateSetting vibrateSetting) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVibrateSetting", "(II)V", "GetSetVibrateSetting_IIHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vibrateType" Type="Android.Media.VibrateType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="vibrateSetting" Type="Android.Media.VibrateSetting">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="vibrateType">The type of vibrate. One of
            <c><see cref="!:Android.Media.AudioManager.VIBRATE_TYPE_NOTIFICATION" /></c> or
            <c><see cref="!:Android.Media.AudioManager.VIBRATE_TYPE_RINGER" /></c>.</param>
        <param name="vibrateSetting">The vibrate setting, one of
            <c><see cref="!:Android.Media.AudioManager.VIBRATE_SETTING_ON" /></c>,
            <c><see cref="!:Android.Media.AudioManager.VIBRATE_SETTING_OFF" /></c>, or
            <c><see cref="!:Android.Media.AudioManager.VIBRATE_SETTING_ONLY_SILENT" /></c>.</param>
        <summary>Sets the setting for when the vibrate type should vibrate.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Media.AudioManager.GetVibrateSetting(Android.Media.VibrateType)" />
        <altmember cref="M:Android.Media.AudioManager.ShouldVibrate(Android.Media.VibrateType)" />
      </Docs>
    </Member>
    <Member MemberName="ShouldVibrate">
      <MemberSignature Language="C#" Value="public virtual bool ShouldVibrate (Android.Media.VibrateType vibrateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldVibrate(valuetype Android.Media.VibrateType vibrateType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("shouldVibrate", "(I)Z", "GetShouldVibrate_IHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vibrateType" Type="Android.Media.VibrateType">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="vibrateType">The type of vibrate. One of
            <c><see cref="!:Android.Media.AudioManager.VIBRATE_TYPE_NOTIFICATION" /></c> or
            <c><see cref="!:Android.Media.AudioManager.VIBRATE_TYPE_RINGER" /></c>.</param>
        <summary>Returns whether a particular type should vibrate according to user
 settings and the current ringer mode.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Media.AudioManager.SetVibrateSetting(Android.Media.VibrateType, Android.Media.VibrateSetting)" />
        <altmember cref="M:Android.Media.AudioManager.GetVibrateSetting(Android.Media.VibrateType)" />
      </Docs>
    </Member>
    <Member MemberName="SpeakerphoneOn">
      <MemberSignature Language="C#" Value="public virtual bool SpeakerphoneOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SpeakerphoneOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isSpeakerphoneOn", "()Z", "GetIsSpeakerphoneOnHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setSpeakerphoneOn", "(Z)V", "GetSetSpeakerphoneOn_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Checks whether the speakerphone is on or off.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="StartBluetoothSco">
      <MemberSignature Language="C#" Value="public virtual void StartBluetoothSco ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartBluetoothSco() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startBluetoothSco", "()V", "GetStartBluetoothScoHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Start bluetooth SCO audio connection.</summary>
        <remarks />
        <since version="Added in API level 8" />
        <altmember cref="M:Android.Media.AudioManager.StopBluetoothSco" />
        <altmember cref="F:Android.Media.AudioManager.ActionScoAudioStateUpdated" />
      </Docs>
    </Member>
    <Member MemberName="StopBluetoothSco">
      <MemberSignature Language="C#" Value="public virtual void StopBluetoothSco ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopBluetoothSco() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stopBluetoothSco", "()V", "GetStopBluetoothScoHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stop bluetooth SCO audio connection.</summary>
        <remarks />
        <since version="Added in API level 8" />
        <altmember cref="M:Android.Media.AudioManager.StartBluetoothSco" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UnloadSoundEffects">
      <MemberSignature Language="C#" Value="public virtual void UnloadSoundEffects ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnloadSoundEffects() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unloadSoundEffects", "()V", "GetUnloadSoundEffectsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unload Sound effects.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterMediaButtonEventReceiver">
      <MemberSignature Language="C#" Value="public virtual void UnregisterMediaButtonEventReceiver (Android.App.PendingIntent eventReceiver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterMediaButtonEventReceiver(class Android.App.PendingIntent eventReceiver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterMediaButtonEventReceiver", "(Landroid/app/PendingIntent;)V", "GetUnregisterMediaButtonEventReceiver_Landroid_app_PendingIntent_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventReceiver" Type="Android.App.PendingIntent" />
      </Parameters>
      <Docs>
        <param name="eventReceiver">same PendingIntent that was registed with
      <c><see cref="M:Android.Media.AudioManager.RegisterMediaButtonEventReceiver(Android.App.PendingIntent)" /></c>.</param>
        <summary>Unregister the receiver of MEDIA_BUTTON intents.</summary>
        <remarks />
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterMediaButtonEventReceiver">
      <MemberSignature Language="C#" Value="public virtual void UnregisterMediaButtonEventReceiver (Android.Content.ComponentName eventReceiver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterMediaButtonEventReceiver(class Android.Content.ComponentName eventReceiver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterMediaButtonEventReceiver", "(Landroid/content/ComponentName;)V", "GetUnregisterMediaButtonEventReceiver_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventReceiver" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="eventReceiver">identifier of a <c><see cref="T:Android.Content.BroadcastReceiver" /></c>
      that was registered with <c><see cref="M:Android.Media.AudioManager.RegisterMediaButtonEventReceiver(Android.Content.ComponentName)" /></c>.</param>
        <summary>Unregister the receiver of MEDIA_BUTTON intents.</summary>
        <remarks />
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterRemoteControlClient">
      <MemberSignature Language="C#" Value="public virtual void UnregisterRemoteControlClient (Android.Media.RemoteControlClient rcClient);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterRemoteControlClient(class Android.Media.RemoteControlClient rcClient) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterRemoteControlClient", "(Landroid/media/RemoteControlClient;)V", "GetUnregisterRemoteControlClient_Landroid_media_RemoteControlClient_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rcClient" Type="Android.Media.RemoteControlClient" />
      </Parameters>
      <Docs>
        <param name="rcClient">The remote control client to unregister.</param>
        <summary>Unregisters the remote control client that was providing information to display on the
 remote controls.</summary>
        <remarks />
        <since version="Added in API level 14" />
        <altmember cref="M:Android.Media.AudioManager.RegisterRemoteControlClient(Android.Media.RemoteControlClient)" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterRemoteController">
      <MemberSignature Language="C#" Value="public virtual void UnregisterRemoteController (Android.Media.RemoteController rctlr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterRemoteController(class Android.Media.RemoteController rctlr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterRemoteController", "(Landroid/media/RemoteController;)V", "GetUnregisterRemoteController_Landroid_media_RemoteController_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rctlr" Type="Android.Media.RemoteController" />
      </Parameters>
      <Docs>
        <param name="rctlr">the object to unregister.</param>
        <summary>Unregisters a <c><see cref="T:Android.Media.RemoteController" /></c>, causing it to no longer receive
 media metadata and playback state information, and no longer be capable
 of controlling playback.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UseDefaultStreamType">
      <MemberSignature Language="C#" Value="public const int UseDefaultStreamType = -2147483648;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 UseDefaultStreamType = (-2147483648)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("USE_DEFAULT_STREAM_TYPE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-2147483648</MemberValue>
      <Docs>
        <summary>Suggests using the default stream type.</summary>
        <remarks />
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="VibrateSettingChangedAction">
      <MemberSignature Language="C#" Value="public const string VibrateSettingChangedAction;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string VibrateSettingChangedAction" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("VIBRATE_SETTING_CHANGED_ACTION")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast intent action indicating that the vibrate setting has
 changed.</summary>
        <remarks />
        <since version="Added in API level 1" />
        <altmember cref="F:Android.Media.AudioManager.ExtraVibrateType" />
        <altmember cref="F:Android.Media.AudioManager.ExtraVibrateSetting" />
      </Docs>
    </Member>
    <Member MemberName="WiredHeadsetOn">
      <MemberSignature Language="C#" Value="public virtual bool WiredHeadsetOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WiredHeadsetOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isWiredHeadsetOn", "()Z", "GetIsWiredHeadsetOnHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Android.Runtime.Register("setWiredHeadsetOn", "(Z)V", "GetSetWiredHeadsetOn_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Checks whether a wired headset is connected or not.</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 5" />
      </Docs>
    </Member>
  </Members>
</Type>
