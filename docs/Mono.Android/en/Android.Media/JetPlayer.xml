<Type Name="JetPlayer" FullName="Android.Media.JetPlayer">
  <TypeSignature Language="C#" Value="public class JetPlayer : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JetPlayer extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/JetPlayer", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="3">
    <summary>JetPlayer provides access to JET content playback and control.</summary>
    <remarks />
    <since version="Added in API level 3" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JetPlayer (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ClearQueue">
      <MemberSignature Language="C#" Value="public virtual bool ClearQueue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClearQueue() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearQueue", "()Z", "GetClearQueueHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Empties the segment queue, and clears all clips that are scheduled for playback.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual Java.Lang.Object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clone", "()Ljava/lang/Object;", "GetCloneHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cloning a JetPlayer instance is not supported.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.CloneNotSupportedException" />
      </Docs>
    </Member>
    <Member MemberName="CloseJetFile">
      <MemberSignature Language="C#" Value="public virtual bool CloseJetFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CloseJetFile() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("closeJetFile", "()Z", "GetCloseJetFileHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the resource containing the JET content.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetJetPlayer">
      <MemberSignature Language="C#" Value="public static Android.Media.JetPlayer GetJetPlayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Media.JetPlayer GetJetPlayer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getJetPlayer", "()Landroid/media/JetPlayer;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.JetPlayer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Factory method for the JetPlayer class.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="JetEvent">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.JetPlayer.JetEventEventArgs&gt; JetEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.JetPlayer/JetEventEventArgs&gt; JetEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.JetPlayer+JetEventEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="JetNumQueuedSegmentUpdate">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.JetPlayer.JetNumQueuedSegmentUpdateEventArgs&gt; JetNumQueuedSegmentUpdate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.JetPlayer/JetNumQueuedSegmentUpdateEventArgs&gt; JetNumQueuedSegmentUpdate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.JetPlayer+JetNumQueuedSegmentUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="JetPauseUpdate">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.JetPlayer.JetPauseUpdateEventArgs&gt; JetPauseUpdate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.JetPlayer/JetPauseUpdateEventArgs&gt; JetPauseUpdate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.JetPlayer+JetPauseUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="JetUserIdUpdate">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.JetPlayer.JetUserIdUpdateEventArgs&gt; JetUserIdUpdate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.JetPlayer/JetUserIdUpdateEventArgs&gt; JetUserIdUpdate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.JetPlayer+JetUserIdUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="LoadJetFile">
      <MemberSignature Language="C#" Value="public virtual bool LoadJetFile (Android.Content.Res.AssetFileDescriptor afd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool LoadJetFile(class Android.Content.Res.AssetFileDescriptor afd) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("loadJetFile", "(Landroid/content/res/AssetFileDescriptor;)Z", "GetLoadJetFile_Landroid_content_res_AssetFileDescriptor_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="afd" Type="Android.Content.Res.AssetFileDescriptor" />
      </Parameters>
      <Docs>
        <param name="afd">the asset file descriptor.</param>
        <summary tool="true">Loads a .jet file from an asset file descriptor.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="LoadJetFile">
      <MemberSignature Language="C#" Value="public virtual bool LoadJetFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool LoadJetFile(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("loadJetFile", "(Ljava/lang/String;)Z", "GetLoadJetFile_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">the path to the .jet file, for instance "/sdcard/mygame/music.jet".</param>
        <summary>Loads a .jet file from a given path.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="LoadJetFileAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; LoadJetFileAsync (Android.Content.Res.AssetFileDescriptor afd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; LoadJetFileAsync(class Android.Content.Res.AssetFileDescriptor afd) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="afd" Type="Android.Content.Res.AssetFileDescriptor" />
      </Parameters>
      <Docs>
        <param name="afd">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="LoadJetFileAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; LoadJetFileAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; LoadJetFileAsync(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MaxTracks">
      <MemberSignature Language="C#" Value="public static int MaxTracks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxTracks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMaxTracks", "()I", "GetGetMaxTracksHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the maximum number of simultaneous MIDI tracks supported by JetPlayer
</summary>
        <value>To be added.</value>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual bool Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Pause() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("pause", "()Z", "GetPauseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pauses the playback of the JET segment queue.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Play">
      <MemberSignature Language="C#" Value="public virtual bool Play ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Play() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("play", "()Z", "GetPlayHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts playing the JET segment queue.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="QueueJetSegment">
      <MemberSignature Language="C#" Value="public virtual bool QueueJetSegment (int segmentNum, int libNum, int repeatCount, int transpose, int muteFlags, sbyte userID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool QueueJetSegment(int32 segmentNum, int32 libNum, int32 repeatCount, int32 transpose, int32 muteFlags, int8 userID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queueJetSegment", "(IIIIIB)Z", "GetQueueJetSegment_IIIIIBHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segmentNum" Type="System.Int32" />
        <Parameter Name="libNum" Type="System.Int32" />
        <Parameter Name="repeatCount" Type="System.Int32" />
        <Parameter Name="transpose" Type="System.Int32" />
        <Parameter Name="muteFlags" Type="System.Int32" />
        <Parameter Name="userID" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="segmentNum">the identifier of the segment.</param>
        <param name="libNum">the index of the sound bank associated with the segment. Use -1 to indicate
    that no sound bank (DLS file) is associated with this segment, in which case JET will use
    the General MIDI library.</param>
        <param name="repeatCount">the number of times the segment will be repeated. 0 means the segment will
    only play once. -1 means the segment will repeat indefinitely.</param>
        <param name="transpose">the amount of pitch transposition. Set to 0 for normal playback. 
    Range is -12 to +12.</param>
        <param name="muteFlags">a bitmask to specify which MIDI tracks will be muted during playback. Bit 0
    affects track 0, bit 1 affects track 1 etc.</param>
        <param name="userID">a value specified by the application that uniquely identifies the segment. 
    this value is received in the
    <c><see cref="!:NoType:android/media/JetPlayer$OnJetEventListener;Href=../../../reference/android/media/JetPlayer.OnJetEventListener.html#onJetUserIdUpdate(android.media.JetPlayer, int, int)" /></c> event listener method.
    Normally, the application will keep a byte value that is incremented each time a new
    segment is queued up. This can be used to look up any special characteristics of that
    track including trigger clips and mute flags.</param>
        <summary>Queues the specified segment in the JET queue.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="QueueJetSegmentMuteArray">
      <MemberSignature Language="C#" Value="public virtual bool QueueJetSegmentMuteArray (int segmentNum, int libNum, int repeatCount, int transpose, bool[] muteArray, sbyte userID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool QueueJetSegmentMuteArray(int32 segmentNum, int32 libNum, int32 repeatCount, int32 transpose, bool[] muteArray, int8 userID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("queueJetSegmentMuteArray", "(IIII[ZB)Z", "GetQueueJetSegmentMuteArray_IIIIarrayZBHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segmentNum" Type="System.Int32" />
        <Parameter Name="libNum" Type="System.Int32" />
        <Parameter Name="repeatCount" Type="System.Int32" />
        <Parameter Name="transpose" Type="System.Int32" />
        <Parameter Name="muteArray" Type="System.Boolean[]" />
        <Parameter Name="userID" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="segmentNum">the identifier of the segment.</param>
        <param name="libNum">the index of the soundbank associated with the segment. Use -1 to indicate that
    no sound bank (DLS file) is associated with this segment, in which case JET will use
    the General MIDI library.</param>
        <param name="repeatCount">the number of times the segment will be repeated. 0 means the segment will
    only play once. -1 means the segment will repeat indefinitely.</param>
        <param name="transpose">the amount of pitch transposition. Set to 0 for normal playback. 
    Range is -12 to +12.</param>
        <param name="muteArray">an array of booleans to specify which MIDI tracks will be muted during
    playback. The value at index 0 affects track 0, value at index 1 affects track 1 etc. 
    The length of the array must be <c><see cref="P:Android.Media.JetPlayer.MaxTracks" /></c> for the call to succeed.</param>
        <param name="userID">a value specified by the application that uniquely identifies the segment. 
    this value is received in the
    <c><see cref="!:NoType:android/media/JetPlayer$OnJetEventListener;Href=../../../reference/android/media/JetPlayer.OnJetEventListener.html#onJetUserIdUpdate(android.media.JetPlayer, int, int)" /></c> event listener method.
    Normally, the application will keep a byte value that is incremented each time a new
    segment is queued up. This can be used to look up any special characteristics of that
    track including trigger clips and mute flags.</param>
        <summary>Queues the specified segment in the JET queue.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public virtual void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "GetReleaseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops the current JET playback, and releases all associated native resources.</summary>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetEventListener">
      <MemberSignature Language="C#" Value="public virtual void SetEventListener (Android.Media.JetPlayer.IOnJetEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEventListener(class Android.Media.JetPlayer/IOnJetEventListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEventListener", "(Landroid/media/JetPlayer$OnJetEventListener;)V", "GetSetEventListener_Landroid_media_JetPlayer_OnJetEventListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.JetPlayer+IOnJetEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">To be added.</param>
        <summary>Sets the listener JetPlayer notifies when a JET event is generated by the rendering and
 playback engine.</summary>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetEventListener">
      <MemberSignature Language="C#" Value="public virtual void SetEventListener (Android.Media.JetPlayer.IOnJetEventListener listener, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEventListener(class Android.Media.JetPlayer/IOnJetEventListener listener, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setEventListener", "(Landroid/media/JetPlayer$OnJetEventListener;Landroid/os/Handler;)V", "GetSetEventListener_Landroid_media_JetPlayer_OnJetEventListener_Landroid_os_Handler_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.JetPlayer+IOnJetEventListener" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="listener">To be added.</param>
        <param name="handler">the Handler that will receive the event notification messages.
</param>
        <summary>Sets the listener JetPlayer notifies when a JET event is generated by the rendering and
 playback engine.</summary>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetMuteArray">
      <MemberSignature Language="C#" Value="public virtual bool SetMuteArray (bool[] muteArray, bool sync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetMuteArray(bool[] muteArray, bool sync) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMuteArray", "([ZZ)Z", "GetSetMuteArray_arrayZZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="muteArray" Type="System.Boolean[]" />
        <Parameter Name="sync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="muteArray">an array of booleans to specify which MIDI tracks are muted. The value at
    index 0 affects track 0, value at index 1 affects track 1 etc. 
    The length of the array must be <c><see cref="P:Android.Media.JetPlayer.MaxTracks" /></c> for the call to succeed.</param>
        <param name="sync">if false, the new mute flags will be applied as soon as possible by the JET
    render and playback engine. If true, the mute flags will be updated at the start of the
    next segment. If the segment is repeated, the flags will take effect the next time 
    segment is repeated.</param>
        <summary>Modifies the mute flags for the current active segment.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetMuteFlag">
      <MemberSignature Language="C#" Value="public virtual bool SetMuteFlag (int trackId, bool muteFlag, bool sync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetMuteFlag(int32 trackId, bool muteFlag, bool sync) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMuteFlag", "(IZZ)Z", "GetSetMuteFlag_IZZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trackId" Type="System.Int32" />
        <Parameter Name="muteFlag" Type="System.Boolean" />
        <Parameter Name="sync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="trackId">the index of the track to mute.</param>
        <param name="muteFlag">set to true to mute, false to unmute.</param>
        <param name="sync">if false, the new mute flags will be applied as soon as possible by the JET
    render and playback engine. If true, the mute flag will be updated at the start of the
    next segment. If the segment is repeated, the flag will take effect the next time 
    segment is repeated.</param>
        <summary>Mutes or unmutes a single track.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetMuteFlags">
      <MemberSignature Language="C#" Value="public virtual bool SetMuteFlags (int muteFlags, bool sync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetMuteFlags(int32 muteFlags, bool sync) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMuteFlags", "(IZ)Z", "GetSetMuteFlags_IZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="muteFlags" Type="System.Int32" />
        <Parameter Name="sync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="muteFlags">a bitmask to specify which MIDI tracks are muted. Bit 0 affects track 0,
    bit 1 affects track 1 etc.</param>
        <param name="sync">if false, the new mute flags will be applied as soon as possible by the JET
    render and playback engine. If true, the mute flags will be updated at the start of the
    next segment. If the segment is repeated, the flags will take effect the next time 
    segment is repeated.</param>
        <summary>Modifies the mute flags.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="TriggerClip">
      <MemberSignature Language="C#" Value="public virtual bool TriggerClip (int clipId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TriggerClip(int32 clipId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("triggerClip", "(I)Z", "GetTriggerClip_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clipId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="clipId">the identifier of the clip to trigger.</param>
        <summary>Schedules the playback of a clip.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
  </Members>
</Type>
