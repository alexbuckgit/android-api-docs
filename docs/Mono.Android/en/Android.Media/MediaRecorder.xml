<Type Name="MediaRecorder" FullName="Android.Media.MediaRecorder">
  <TypeSignature Language="C#" Value="public class MediaRecorder : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MediaRecorder extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/MediaRecorder", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>Used to record audio and video.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Used to record audio and video. The recording control is based on a
 simple state machine (see below).

 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <img src="../../../images/mediarecorder_state_diagram.gif" border="0" />
        </format>
      </para>
      <para tool="javadoc-to-mdoc">A common case of using MediaRecorder to record audio works as follows:

 <example><code lang="java">MediaRecorder recorder = new MediaRecorder();
 recorder.setAudioSource(MediaRecorder.AudioSource.MIC);
 recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
 recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
 recorder.setOutputFile(PATH_NAME);
 recorder.prepare();
 recorder.start();   // Recording is now started
 ...
 recorder.stop();
 recorder.reset();   // You can reuse the object by going back to setAudioSource() step
 recorder.release(); // Now the object cannot be reused
 </code></example></para>
      <para tool="javadoc-to-mdoc">Applications may want to register for informational and error
 events in order to be informed of some internal update and possible
 runtime errors during recording. Registration for such events is
 done by setting the appropriate listeners (via calls
 (to <c><see cref="M:Android.Media.MediaRecorder.SetOnInfoListener(.IOnInfoListener)" /></c>setOnInfoListener and/or
 <c><see cref="M:Android.Media.MediaRecorder.SetOnErrorListener(.IOnErrorListener)" /></c>setOnErrorListener).
 In order to receive the respective callback associated with these listeners,
 applications are required to create MediaRecorder objects on threads with a
 Looper running (the main UI thread by default already has a Looper running).

 </para>
      <para tool="javadoc-to-mdoc">
        <i>Note:</i> Currently, MediaRecorder does not work on the emulator.

 <format type="text/html"><h3>Developer Guides</h3></format></para>
      <para tool="javadoc-to-mdoc">For more information about how to use MediaRecorder for recording video, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/media/camera.html#capture-video">Camera</a></format> developer guide.
 For more information about how to use MediaRecorder for recording sound, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/media/audio-capture.html">Audio Capture</a></format> developer guide.</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/media/MediaRecorder.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MediaRecorder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Default constructor.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#MediaRecorder()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MediaRecorder (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T}(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioSourceMax">
      <MemberSignature Language="C#" Value="public static int AudioSourceMax { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 AudioSourceMax" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getAudioSourceMax", "()I", "GetGetAudioSourceMaxHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the maximum value for audio sources.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the maximum value for audio sources.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#getAudioSourceMax()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 4" />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaRecorder.ErrorEventArgs&gt; Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaRecorder/ErrorEventArgs&gt; Error" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaRecorder+ErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Android.Media.MediaRecorder.InfoEventArgs&gt; Info;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Android.Media.MediaRecorder/InfoEventArgs&gt; Info" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Android.Media.MediaRecorder+InfoEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxAmplitude">
      <MemberSignature Language="C#" Value="public virtual int MaxAmplitude { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAmplitude" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getMaxAmplitude", "()I", "GetGetMaxAmplitudeHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the maximum absolute amplitude that was sampled since the last
 call to this method.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Returns the maximum absolute amplitude that was sampled since the last
 call to this method. Call this only after the setAudioSource().</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#getMaxAmplitude()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called before
 the audio source has been set.
</exception>
      </Docs>
    </Member>
    <Member MemberName="MediaErrorServerDied">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaRecorderError MediaErrorServerDied = 100;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaRecorderError MediaErrorServerDied = (100)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEDIA_ERROR_SERVER_DIED")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaRecorderError enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaRecorderError</ReturnType>
      </ReturnValue>
      <MemberValue>100</MemberValue>
      <Docs>
        <summary>Media server died.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Media server died. In this case, the application must release the
 MediaRecorder object and instantiate a new one.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#MEDIA_ERROR_SERVER_DIED" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="MediaRecorderErrorUnknown">
      <MemberSignature Language="C#" Value="public const Android.Media.MediaRecorderError MediaRecorderErrorUnknown = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Media.MediaRecorderError MediaRecorderErrorUnknown = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("MEDIA_RECORDER_ERROR_UNKNOWN")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.Media.MediaRecorderError enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Media.MediaRecorderError</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Unspecified media recorder error.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Unspecified media recorder error.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#MEDIA_RECORDER_ERROR_UNKNOWN" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public virtual void Prepare ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Prepare() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("prepare", "()V", "GetPrepareHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Prepares the recorder to begin capturing and encoding data.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Prepares the recorder to begin capturing and encoding data. This method
 must be called after setting up the desired audio and video sources,
 encoders, file format, etc., but before start().</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#prepare()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called after
 start() or before setOutputFormat().</exception>
        <exception cref="T:Java.IO.IOException">if prepare fails otherwise.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public virtual void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("release", "()V", "GetReleaseHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases resources associated with this MediaRecorder object.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Releases resources associated with this MediaRecorder object.
 It is good practice to call this method when you're done
 using the MediaRecorder. In particular, whenever an Activity
 of an application is paused (its onPause() method is called),
 or stopped (its onStop() method is called), this method should be
 invoked to release the MediaRecorder object, unless the application
 has a special need to keep the object around. In addition to
 unnecessary resources (such as memory and instances of codecs)
 being held, failure to call this method immediately if a
 MediaRecorder object is no longer needed may also lead to
 continuous battery consumption for mobile devices, and recording
 failure for other applications if no multiple instances of the
 same codec are supported on a device. Even if multiple instances
 of the same codec are supported, some performance degradation
 may be expected when unnecessary multiple instances are used
 at the same time.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#release()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reset", "()V", "GetResetHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restarts the MediaRecorder to its idle state.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Restarts the MediaRecorder to its idle state. After calling
 this method, you will have to configure it again as if it had just been
 constructed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#reset()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="SetAudioChannels">
      <MemberSignature Language="C#" Value="public virtual void SetAudioChannels (int numChannels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAudioChannels(int32 numChannels) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAudioChannels", "(I)V", "GetSetAudioChannels_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numChannels" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numChannels">the number of audio channels. Usually it is either 1 (mono) or 2
 (stereo).
</param>
        <summary>Sets the number of audio channels for recording.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the number of audio channels for recording. Call this method before prepare().
 Prepare() may perform additional checks on the parameter to make sure whether the
 specified number of audio channels are applicable.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setAudioChannels(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetAudioEncoder">
      <MemberSignature Language="C#" Value="public virtual void SetAudioEncoder (Android.Media.AudioEncoder audio_encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAudioEncoder(valuetype Android.Media.AudioEncoder audio_encoder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAudioEncoder", "(I)V", "GetSetAudioEncoder_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audio_encoder" Type="Android.Media.AudioEncoder">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="audio_encoder">the audio encoder to use.</param>
        <summary>Sets the audio encoder to be used for recording.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the audio encoder to be used for recording. If this method is not
 called, the output file will not contain an audio track. Call this after
 setOutputFormat() but before prepare().</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setAudioEncoder(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called before
 setOutputFormat() or after prepare().</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAudioEncodingBitRate">
      <MemberSignature Language="C#" Value="public virtual void SetAudioEncodingBitRate (int bitRate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAudioEncodingBitRate(int32 bitRate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAudioEncodingBitRate", "(I)V", "GetSetAudioEncodingBitRate_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitRate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bitRate">the audio encoding bit rate in bits per second.
</param>
        <summary>Sets the audio encoding bit rate for recording.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the audio encoding bit rate for recording. Call this method before prepare().
 Prepare() may perform additional checks on the parameter to make sure whether the
 specified bit rate is applicable, and sometimes the passed bitRate will be clipped
 internally to ensure the audio recording can proceed smoothly based on the
 capabilities of the platform.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setAudioEncodingBitRate(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetAudioSamplingRate">
      <MemberSignature Language="C#" Value="public virtual void SetAudioSamplingRate (int samplingRate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAudioSamplingRate(int32 samplingRate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAudioSamplingRate", "(I)V", "GetSetAudioSamplingRate_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samplingRate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="samplingRate">the sampling rate for audio in samples per second.
</param>
        <summary>Sets the audio sampling rate for recording.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the audio sampling rate for recording. Call this method before prepare().
 Prepare() may perform additional checks on the parameter to make sure whether
 the specified audio sampling rate is applicable. The sampling rate really depends
 on the format for the audio recording, as well as the capabilities of the platform.
 For instance, the sampling rate supported by AAC audio coding standard ranges
 from 8 to 96 kHz, the sampling rate supported by AMRNB is 8kHz, and the sampling
 rate supported by AMRWB is 16kHz. Please consult with the related audio coding
 standard for the supported audio sampling rate.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setAudioSamplingRate(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetAudioSource">
      <MemberSignature Language="C#" Value="public virtual void SetAudioSource (Android.Media.AudioSource audio_source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAudioSource(valuetype Android.Media.AudioSource audio_source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAudioSource", "(I)V", "GetSetAudioSource_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audio_source" Type="Android.Media.AudioSource">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="audio_source">the audio source to use</param>
        <summary>Sets the audio source to be used for recording.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the audio source to be used for recording. If this method is not
 called, the output file will not contain an audio track. The source needs
 to be specified before setting recording-parameters or encoders. Call
 this only before setOutputFormat().</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setAudioSource(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called after setOutputFormat()</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuxiliaryOutputFile">
      <MemberSignature Language="C#" Value="public virtual void SetAuxiliaryOutputFile (Java.IO.FileDescriptor fd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAuxiliaryOutputFile(class Java.IO.FileDescriptor fd) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAuxiliaryOutputFile", "(Ljava/io/FileDescriptor;)V", "GetSetAuxiliaryOutputFile_Ljava_io_FileDescriptor_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
      </Parameters>
      <Docs>
        <param name="fd">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAuxiliaryOutputFile">
      <MemberSignature Language="C#" Value="public virtual void SetAuxiliaryOutputFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAuxiliaryOutputFile(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setAuxiliaryOutputFile", "(Ljava/lang/String;)V", "GetSetAuxiliaryOutputFile_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCamera">
      <MemberSignature Language="C#" Value="public virtual void SetCamera (Android.Hardware.Camera c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCamera(class Android.Hardware.Camera c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setCamera", "(Landroid/hardware/Camera;)V", "GetSetCamera_Landroid_hardware_Camera_Handler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="Android.Hardware.Camera" />
      </Parameters>
      <Docs>
        <param name="c">the Camera to use for recording</param>
        <summary>Sets a <c><see cref="T:Android.Hardware.Camera" /></c> to use for recording.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets a <c><see cref="T:Android.Hardware.Camera" /></c> to use for recording.

 </para>
          <para tool="javadoc-to-mdoc">Use this function to switch quickly between preview and capture mode without a teardown of
 the camera object. <c><see cref="M:Android.Hardware.Camera.Unlock" /></c> should be called before
 this. Must call before <c><see cref="M:Android.Media.MediaRecorder.Prepare" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setCamera(android.hardware.Camera)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetCaptureRate">
      <MemberSignature Language="C#" Value="public virtual void SetCaptureRate (double fps);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCaptureRate(float64 fps) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setCaptureRate", "(D)V", "GetSetCaptureRate_DHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fps" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="fps">Rate at which frames should be captured in frames per second.
 The fps can go as low as desired. However the fastest fps will be limited by the hardware.
 For resolutions that can be captured by the video camera, the fastest fps can be computed using
 <c><see cref="!:NoType:android/hardware/Camera$Parameters;Href=../../../reference/android/hardware/Camera.Parameters.html#getPreviewFpsRange(int[])" /></c>. For higher
 resolutions the fastest fps may be more restrictive.
 Note that the recorder cannot guarantee that frames will be captured at the
 given rate due to camera/encoder limitations. However it tries to be as close as
 possible.
</param>
        <summary>Set video frame capture rate.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set video frame capture rate. This can be used to set a different video frame capture
 rate than the recorded video's playback rate. This method also sets the recording mode
 to time lapse. In time lapse video recording, only video is recorded. Audio related
 parameters are ignored when a time lapse recording session starts, if an application
 sets them.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setCaptureRate(double)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetLocation">
      <MemberSignature Language="C#" Value="public virtual void SetLocation (float latitude, float longitude);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLocation(float32 latitude, float32 longitude) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setLocation", "(FF)V", "GetSetLocation_FFHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="latitude" Type="System.Single" />
        <Parameter Name="longitude" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="latitude">latitude in degrees. Its value must be in the
 range [-90, 90].</param>
        <param name="longitude">longitude in degrees. Its value must be in the
 range [-180, 180].</param>
        <summary>Set and store the geodata (latitude and longitude) in the output file.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Set and store the geodata (latitude and longitude) in the output file.
 This method should be called before prepare(). The geodata is
 stored in udta box if the output format is OutputFormat.THREE_GPP
 or OutputFormat.MPEG_4, and is ignored for other output formats.
 The geodata is stored according to ISO-6709 standard.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setLocation(float, float)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the given latitude or
 longitude is out of range.

</exception>
      </Docs>
    </Member>
    <Member MemberName="SetMaxDuration">
      <MemberSignature Language="C#" Value="public virtual void SetMaxDuration (int max_duration_ms);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMaxDuration(int32 max_duration_ms) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMaxDuration", "(I)V", "GetSetMaxDuration_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="max_duration_ms" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="max_duration_ms">the maximum duration in ms (if zero or negative, disables the duration limit)

</param>
        <summary>Sets the maximum duration (in ms) of the recording session.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the maximum duration (in ms) of the recording session.
 Call this after setOutFormat() but before prepare().
 After recording reaches the specified duration, a notification
 will be sent to the <c><see cref="!:NoType:android/media/MediaRecorder$OnInfoListener;Href=../../../reference/android/media/MediaRecorder.OnInfoListener.html" /></c>
 with a "what" code of <c><see cref="!:Android.Media.MediaRecorder.MEDIA_RECORDER_INFO_MAX_DURATION_REACHED" /></c>
 and recording will be stopped. Stopping happens asynchronously, there
 is no guarantee that the recorder will have stopped by the time the
 listener is notified.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setMaxDuration(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SetMaxFileSize">
      <MemberSignature Language="C#" Value="public virtual void SetMaxFileSize (long max_filesize_bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMaxFileSize(int64 max_filesize_bytes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMaxFileSize", "(J)V", "GetSetMaxFileSize_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="max_filesize_bytes" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="max_filesize_bytes">the maximum filesize in bytes (if zero or negative, disables the limit)

</param>
        <summary>Sets the maximum filesize (in bytes) of the recording session.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the maximum filesize (in bytes) of the recording session.
 Call this after setOutFormat() but before prepare().
 After recording reaches the specified filesize, a notification
 will be sent to the <c><see cref="!:NoType:android/media/MediaRecorder$OnInfoListener;Href=../../../reference/android/media/MediaRecorder.OnInfoListener.html" /></c>
 with a "what" code of <c><see cref="!:Android.Media.MediaRecorder.MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED" /></c>
 and recording will be stopped. Stopping happens asynchronously, there
 is no guarantee that the recorder will have stopped by the time the
 listener is notified.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setMaxFileSize(long)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SetOnErrorListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnErrorListener (Android.Media.MediaRecorder.IOnErrorListener l);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnErrorListener(class Android.Media.MediaRecorder/IOnErrorListener l) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnErrorListener", "(Landroid/media/MediaRecorder$OnErrorListener;)V", "GetSetOnErrorListener_Landroid_media_MediaRecorder_OnErrorListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="l" Type="Android.Media.MediaRecorder+IOnErrorListener" />
      </Parameters>
      <Docs>
        <param name="l">the callback that will be run
</param>
        <summary>Register a callback to be invoked when an error occurs while
 recording.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when an error occurs while
 recording.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setOnErrorListener(android.media.MediaRecorder.OnErrorListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetOnInfoListener">
      <MemberSignature Language="C#" Value="public virtual void SetOnInfoListener (Android.Media.MediaRecorder.IOnInfoListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOnInfoListener(class Android.Media.MediaRecorder/IOnInfoListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOnInfoListener", "(Landroid/media/MediaRecorder$OnInfoListener;)V", "GetSetOnInfoListener_Landroid_media_MediaRecorder_OnInfoListener_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Android.Media.MediaRecorder+IOnInfoListener" />
      </Parameters>
      <Docs>
        <param name="listener">the callback that will be run
</param>
        <summary>Register a callback to be invoked when an informational event occurs while
 recording.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a callback to be invoked when an informational event occurs while
 recording.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setOnInfoListener(android.media.MediaRecorder.OnInfoListener)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetOrientationHint">
      <MemberSignature Language="C#" Value="public virtual void SetOrientationHint (int degrees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOrientationHint(int32 degrees) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOrientationHint", "(I)V", "GetSetOrientationHint_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="degrees" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="degrees">the angle to be rotated clockwise in degrees.
 The supported angles are 0, 90, 180, and 270 degrees.</param>
        <summary>Sets the orientation hint for output video playback.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the orientation hint for output video playback.
 This method should be called before prepare(). This method will not
 trigger the source video frame to rotate during video recording, but to
 add a composition matrix containing the rotation angle in the output
 video if the output format is OutputFormat.THREE_GPP or
 OutputFormat.MPEG_4 so that a video player can choose the proper
 orientation for playback. Note that some video players may choose
 to ignore the compostion matrix in a video during playback.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setOrientationHint(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 9" />
        <exception cref="T:Java.Lang.IllegalArgumentException">if the angle is not supported.

</exception>
      </Docs>
    </Member>
    <Member MemberName="SetOutputFile">
      <MemberSignature Language="C#" Value="public virtual void SetOutputFile (Java.IO.FileDescriptor fd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOutputFile(class Java.IO.FileDescriptor fd) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOutputFile", "(Ljava/io/FileDescriptor;)V", "GetSetOutputFile_Ljava_io_FileDescriptor_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fd" Type="Java.IO.FileDescriptor" />
      </Parameters>
      <Docs>
        <param name="fd">an open file descriptor to be written into.</param>
        <summary tool="true">Sets the path of the output file to be produced.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Pass in the file descriptor of the file to be written. Call this after
 setOutputFormat() but before prepare().</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setOutputFile(java.io.FileDescriptor)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called before
 setOutputFormat() or after prepare()
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetOutputFile">
      <MemberSignature Language="C#" Value="public virtual void SetOutputFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOutputFile(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOutputFile", "(Ljava/lang/String;)V", "GetSetOutputFile_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The pathname to use.</param>
        <summary>Sets the path of the output file to be produced.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the path of the output file to be produced. Call this after
 setOutputFormat() but before prepare().</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setOutputFile(java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called before
 setOutputFormat() or after prepare()
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetOutputFormat">
      <MemberSignature Language="C#" Value="public virtual void SetOutputFormat (Android.Media.OutputFormat output_format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOutputFormat(valuetype Android.Media.OutputFormat output_format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setOutputFormat", "(I)V", "GetSetOutputFormat_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output_format" Type="Android.Media.OutputFormat">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="output_format">the output format to use. The output format
 needs to be specified before setting recording-parameters or encoders.</param>
        <summary>Sets the format of the output file produced during recording.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the format of the output file produced during recording. Call this
 after setAudioSource()/setVideoSource() but before prepare().

 </para>
          <para tool="javadoc-to-mdoc">It is recommended to always use 3GP format when using the H.263
 video encoder and AMR audio encoder. Using an MPEG-4 container format
 may confuse some desktop players.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setOutputFormat(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called after prepare() or before
 setAudioSource()/setVideoSource().</exception>
      </Docs>
    </Member>
    <Member MemberName="SetPreviewDisplay">
      <MemberSignature Language="C#" Value="public virtual void SetPreviewDisplay (Android.Views.Surface sv);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPreviewDisplay(class Android.Views.Surface sv) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPreviewDisplay", "(Landroid/view/Surface;)V", "GetSetPreviewDisplay_Landroid_view_Surface_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sv" Type="Android.Views.Surface" />
      </Parameters>
      <Docs>
        <param name="sv">the Surface to use for the preview</param>
        <summary>Sets a Surface to show a preview of recorded media (video).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets a Surface to show a preview of recorded media (video). Calls this
 before prepare() to make sure that the desirable preview display is
 set. If <c><see cref="M:Android.Media.MediaRecorder.SetCamera(Android.Hardware.Camera)" /></c> is used and the surface has been
 already set to the camera, application do not need to call this. If
 this is called with non-null surface, the preview surface of the camera
 will be replaced by the new surface. If this method is called with null
 surface or not called at all, media recorder will not change the preview
 surface of the camera.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setPreviewDisplay(android.view.Surface)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <altmember cref="M:Android.Hardware.Camera.SetPreviewDisplay(Android.Views.ISurfaceHolder)" />
      </Docs>
    </Member>
    <Member MemberName="SetProfile">
      <MemberSignature Language="C#" Value="public virtual void SetProfile (Android.Media.CamcorderProfile profile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetProfile(class Android.Media.CamcorderProfile profile) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setProfile", "(Landroid/media/CamcorderProfile;)V", "GetSetProfile_Landroid_media_CamcorderProfile_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profile" Type="Android.Media.CamcorderProfile" />
      </Parameters>
      <Docs>
        <param name="profile">the CamcorderProfile to use</param>
        <summary>Uses the settings from a CamcorderProfile object for recording.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Uses the settings from a CamcorderProfile object for recording. This method should
 be called after the video AND audio sources are set, and before setOutputFile().
 If a time lapse CamcorderProfile is used, audio related source or recording
 parameters are ignored.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setProfile(android.media.CamcorderProfile)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
        <altmember cref="T:Android.Media.CamcorderProfile" />
      </Docs>
    </Member>
    <Member MemberName="SetVideoEncoder">
      <MemberSignature Language="C#" Value="public virtual void SetVideoEncoder (Android.Media.VideoEncoder video_encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVideoEncoder(valuetype Android.Media.VideoEncoder video_encoder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVideoEncoder", "(I)V", "GetSetVideoEncoder_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="video_encoder" Type="Android.Media.VideoEncoder">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="video_encoder">the video encoder to use.</param>
        <summary>Sets the video encoder to be used for recording.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the video encoder to be used for recording. If this method is not
 called, the output file will not contain an video track. Call this after
 setOutputFormat() and before prepare().</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setVideoEncoder(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called before
 setOutputFormat() or after prepare()</exception>
      </Docs>
    </Member>
    <Member MemberName="SetVideoEncodingBitRate">
      <MemberSignature Language="C#" Value="public virtual void SetVideoEncodingBitRate (int bitRate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVideoEncodingBitRate(int32 bitRate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVideoEncodingBitRate", "(I)V", "GetSetVideoEncodingBitRate_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitRate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bitRate">the video encoding bit rate in bits per second.
</param>
        <summary>Sets the video encoding bit rate for recording.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the video encoding bit rate for recording. Call this method before prepare().
 Prepare() may perform additional checks on the parameter to make sure whether the
 specified bit rate is applicable, and sometimes the passed bitRate will be
 clipped internally to ensure the video recording can proceed smoothly based on
 the capabilities of the platform.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setVideoEncodingBitRate(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetVideoFrameRate">
      <MemberSignature Language="C#" Value="public virtual void SetVideoFrameRate (int rate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVideoFrameRate(int32 rate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVideoFrameRate", "(I)V", "GetSetVideoFrameRate_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rate">the number of frames per second of video to capture</param>
        <summary>Sets the frame rate of the video to be captured.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the frame rate of the video to be captured.  Must be called
 after setVideoSource(). Call this after setOutFormat() but before
 prepare().</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setVideoFrameRate(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called after
 prepare() or before setOutputFormat().

 NOTE: On some devices that have auto-frame rate, this sets the
 maximum frame rate, not a constant frame rate. Actual frame rate
 will vary according to lighting conditions.
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetVideoSize">
      <MemberSignature Language="C#" Value="public virtual void SetVideoSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVideoSize(int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVideoSize", "(II)V", "GetSetVideoSize_IIHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">the width of the video to be captured</param>
        <param name="height">the height of the video to be captured</param>
        <summary>Sets the width and height of the video to be captured.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the width and height of the video to be captured.  Must be called
 after setVideoSource(). Call this after setOutFormat() but before
 prepare().</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setVideoSize(int, int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called after
 prepare() or before setOutputFormat()
</exception>
      </Docs>
    </Member>
    <Member MemberName="SetVideoSource">
      <MemberSignature Language="C#" Value="public virtual void SetVideoSource (Android.Media.VideoSource video_source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVideoSource(valuetype Android.Media.VideoSource video_source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setVideoSource", "(I)V", "GetSetVideoSource_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="video_source" Type="Android.Media.VideoSource">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="video_source">the video source to use</param>
        <summary>Sets the video source to be used for recording.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Sets the video source to be used for recording. If this method is not
 called, the output file will not contain an video track. The source needs
 to be specified before setting recording-parameters or encoders. Call
 this only before setOutputFormat().</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#setVideoSource(int)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 3" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called after setOutputFormat()</exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public virtual void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Start() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("start", "()V", "GetStartHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Begins capturing and encoding data to the file specified with
 setOutputFile().</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Begins capturing and encoding data to the file specified with
 setOutputFile(). Call this after prepare().

 </para>
          <para tool="javadoc-to-mdoc">Since API level 13, if applications set a camera via
 <c><see cref="M:Android.Media.MediaRecorder.SetCamera(Android.Hardware.Camera)" /></c>, the apps can use the camera after this method
 call. The apps do not need to lock the camera again. However, if this
 method fails, the apps should still lock the camera back. The apps should
 not start another recording session during recording.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#start()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called before
 prepare().
</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public virtual void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stop", "()V", "GetStopHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops recording.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Stops recording. Call this after start(). Once recording is stopped,
 you will have to configure it again as if it has just been constructed.
 Note that a RuntimeException is intentionally thrown to the
 application, if no valid audio/video data has been received when stop()
 is called. This happens if stop() is called immediately after
 start(). The failure lets the application take action accordingly to
 clean up the output file (delete the output file, for instance), since
 the output file is not properly constructed when this happens.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#stop()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 1" />
        <exception cref="T:Java.Lang.IllegalStateException">if it is called before start()
</exception>
      </Docs>
    </Member>
    <Member MemberName="Surface">
      <MemberSignature Language="C#" Value="public virtual Android.Views.Surface Surface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Surface Surface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getSurface", "()Landroid/view/Surface;", "GetGetSurfaceHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Surface</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the surface to record from when using SURFACE video source.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">Gets the surface to record from when using SURFACE video source.

 </para>
          <para tool="javadoc-to-mdoc"> May only be called after <c><see cref="M:Android.Media.MediaRecorder.Prepare" /></c>. Frames rendered to the Surface before
 <c><see cref="M:Android.Media.MediaRecorder.Start" /></c> will be discarded.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/MediaRecorder.html#getSurface()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <exception cref="T:Java.Lang.IllegalStateException">if it is called before <c><see cref="M:Android.Media.MediaRecorder.Prepare" /></c>, after
 <c><see cref="M:Android.Media.MediaRecorder.Stop" /></c>, or is called when VideoSource is not set to SURFACE.</exception>
        <since version="Added in API level 21" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonvirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
