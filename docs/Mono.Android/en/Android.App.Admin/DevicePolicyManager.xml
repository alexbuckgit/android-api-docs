<Type Name="DevicePolicyManager" FullName="Android.App.Admin.DevicePolicyManager">
  <TypeSignature Language="C#" Value="public class DevicePolicyManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DevicePolicyManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/app/admin/DevicePolicyManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Public interface for managing policies enforced on a device.</summary>
    <remarks><para tool="javadoc-to-mdoc">Public interface for managing policies enforced on a device.  Most clients
 of this class must have published a <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> that the user
 has currently enabled.

 <format type="text/html"><h3>Developer Guides</h3></format></para><para tool="javadoc-to-mdoc">For more information about managing policies for device adminstration, read the
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/admin/device-admin.html">Device Administration</a></format>
 developer guide.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 8" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DevicePolicyManager (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionAddDeviceAdmin">
      <MemberSignature Language="C#" Value="public const string ActionAddDeviceAdmin;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionAddDeviceAdmin" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_ADD_DEVICE_ADMIN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Activity action: ask the user to add a new device administrator to the system.</summary>
        <remarks><para tool="javadoc-to-mdoc">Activity action: ask the user to add a new device administrator to the system.
 The desired policy is the ComponentName of the policy in the
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraDeviceAdmin" /></c> extra field.  This will invoke a UI to
 bring the user through adding the device administrator to the system (or
 allowing them to reject it).

 </para><para tool="javadoc-to-mdoc">You can optionally include the <c><see cref="F:Android.App.Admin.DevicePolicyManager.ExtraAddExplanation" /></c>
 field to provide the user with additional explanation (in addition
 to your component's description) about what is being added.

 </para><para tool="javadoc-to-mdoc">If your administrator is already active, this will ordinarily return immediately (without
 user intervention).  However, if your administrator has been updated and is requesting
 additional uses-policy flags, the user will be presented with the new list.  New policies
 will not be available to the updated administrator until the user has accepted the new list.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_ADD_DEVICE_ADMIN" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ActionSetNewPassword">
      <MemberSignature Language="C#" Value="public const string ActionSetNewPassword;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionSetNewPassword" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_SET_NEW_PASSWORD")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Activity action: have the user enter a new password.</summary>
        <remarks><para tool="javadoc-to-mdoc">Activity action: have the user enter a new password. This activity should
 be launched after using <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName, Android.App.Admin.PasswordQuality)" /></c>,
 or <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordMinimumLength(Android.Content.ComponentName, System.Int32)" /></c> to have the user
 enter a new password that meets the current requirements. You can use
 <c><see cref="P:Android.App.Admin.DevicePolicyManager.IsActivePasswordSufficient" /></c> to determine whether you need to
 have the user select a new password in order to meet the current
 constraints. Upon being resumed from this activity, you can check the new
 password characteristics to see if they are sufficient.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_SET_NEW_PASSWORD" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ActionStartEncryption">
      <MemberSignature Language="C#" Value="public const string ActionStartEncryption;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionStartEncryption" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_START_ENCRYPTION")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Activity action: begin the process of encrypting data on the device.</summary>
        <remarks><para tool="javadoc-to-mdoc">Activity action: begin the process of encrypting data on the device.  This activity should
 be launched after using <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetStorageEncryption(Android.Content.ComponentName, System.Boolean)" /></c> to request encryption be activated.
 After resuming from this activity, use <c><see cref="M:Android.App.Admin.DevicePolicyManager.GetStorageEncryption(Android.Content.ComponentName)" /></c>
 to check encryption status.  However, on some devices this activity may never return, as
 it may trigger a reboot and in some cases a complete data wipe of the device.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_START_ENCRYPTION" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ActiveAdmins">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Android.Content.ComponentName&gt; ActiveAdmins { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Android.Content.ComponentName&gt; ActiveAdmins" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getActiveAdmins", "()Ljava/util/List;", "GetGetActiveAdminsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Android.Content.ComponentName&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return a list of all currently active device administrator's component
 names.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Return a list of all currently active device administrator's component
 names.  Note that if there are no administrators than null may be
 returned.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getActiveAdmins()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="CurrentFailedPasswordAttempts">
      <MemberSignature Language="C#" Value="public virtual int CurrentFailedPasswordAttempts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentFailedPasswordAttempts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getCurrentFailedPasswordAttempts", "()I", "GetGetCurrentFailedPasswordAttemptsHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve the number of times the user has failed at entering a
 password since that last successful password entry.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Retrieve the number of times the user has failed at entering a
 password since that last successful password entry.

 </para><para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyWatchLogin" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCurrentFailedPasswordAttempts()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ExtraAddExplanation">
      <MemberSignature Language="C#" Value="public const string ExtraAddExplanation;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraAddExplanation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_ADD_EXPLANATION")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An optional CharSequence providing additional explanation for why the
 admin is being added.</summary>
        <remarks><para tool="javadoc-to-mdoc">An optional CharSequence providing additional explanation for why the
 admin is being added.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_ADD_EXPLANATION" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
        <altmember cref="F:Android.App.Admin.DevicePolicyManager.ActionAddDeviceAdmin" />
      </Docs>
    </Member>
    <Member MemberName="ExtraDeviceAdmin">
      <MemberSignature Language="C#" Value="public const string ExtraDeviceAdmin;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraDeviceAdmin" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_DEVICE_ADMIN")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The ComponentName of the administrator component.</summary>
        <remarks><para tool="javadoc-to-mdoc">The ComponentName of the administrator component.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_DEVICE_ADMIN" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
        <altmember cref="F:Android.App.Admin.DevicePolicyManager.ActionAddDeviceAdmin" />
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static Android.App.Admin.DevicePolicyManager FromContext (Android.Content.Context context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.App.Admin.DevicePolicyManager FromContext(class Android.Content.Context context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Android.App.Admin.DevicePolicyManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCameraDisabled">
      <MemberSignature Language="C#" Value="public virtual bool GetCameraDisabled (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetCameraDisabled(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCameraDisabled", "(Landroid/content/ComponentName;)Z", "GetGetCameraDisabled_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or null to check if any admins
 have disabled the camera
</param>
        <summary>Determine whether or not the device's cameras have been disabled for this user,
 either by the current admin, if specified, or all admins.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Determine whether or not the device's cameras have been disabled for this user,
 either by the current admin, if specified, or all admins.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCameraDisabled(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="GetKeyguardDisabledFeatures">
      <MemberSignature Language="C#" Value="public virtual Android.App.Admin.KeyguardDisable GetKeyguardDisabledFeatures (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.App.Admin.KeyguardDisable GetKeyguardDisabledFeatures(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getKeyguardDisabledFeatures", "(Landroid/content/ComponentName;)I", "GetGetKeyguardDisabledFeatures_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.KeyguardDisable</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or null to check if any admins
 have disabled features in keyguard.</param>
        <summary>Determine whether or not features have been disabled in keyguard either by the current
 admin, if specified, or all admins.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Determine whether or not features have been disabled in keyguard either by the current
 admin, if specified, or all admins.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getKeyguardDisabledFeatures(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="GetMaximumFailedPasswordsForWipe">
      <MemberSignature Language="C#" Value="public virtual int GetMaximumFailedPasswordsForWipe (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetMaximumFailedPasswordsForWipe(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getMaximumFailedPasswordsForWipe", "(Landroid/content/ComponentName;)I", "GetGetMaximumFailedPasswordsForWipe_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or null to aggregate
 all admins.
</param>
        <summary>Retrieve the current maximum number of login attempts that are allowed
 before the device wipes itself, for all admins of this user and its profiles
 or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Retrieve the current maximum number of login attempts that are allowed
 before the device wipes itself, for all admins of this user and its profiles
 or a particular one.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getMaximumFailedPasswordsForWipe(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="GetMaximumTimeToLock">
      <MemberSignature Language="C#" Value="public virtual long GetMaximumTimeToLock (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetMaximumTimeToLock(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getMaximumTimeToLock", "(Landroid/content/ComponentName;)J", "GetGetMaximumTimeToLock_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or null to aggregate
 all admins.</param>
        <summary>Retrieve the current maximum time to unlock for all admins of this user
 and its profiles or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Retrieve the current maximum time to unlock for all admins of this user
 and its profiles or a particular one.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getMaximumTimeToLock(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordExpiration">
      <MemberSignature Language="C#" Value="public virtual long GetPasswordExpiration (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetPasswordExpiration(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordExpiration", "(Landroid/content/ComponentName;)J", "GetGetPasswordExpiration_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or null to aggregate all admins.</param>
        <summary>Get the current password expiration time for the given admin or an aggregate of
 all admins of this user and its profiles if admin is null.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Get the current password expiration time for the given admin or an aggregate of
 all admins of this user and its profiles if admin is null. If the password is
 expired, this will return the time since the password expired as a negative number.
 If admin is null, then a composite of all expiration timeouts is returned
 - which will be the minimum of all timeouts.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordExpiration(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordExpirationTimeout">
      <MemberSignature Language="C#" Value="public virtual long GetPasswordExpirationTimeout (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetPasswordExpirationTimeout(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordExpirationTimeout", "(Landroid/content/ComponentName;)J", "GetGetPasswordExpirationTimeout_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or null to aggregate all admins.</param>
        <summary>Get the password expiration timeout for the given admin.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Get the password expiration timeout for the given admin. The expiration timeout is the
 recurring expiration timeout provided in the call to
 <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordExpirationTimeout(Android.Content.ComponentName, System.Int64)" /></c> for the given admin or the
 aggregate of all policy administrators if admin is null.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordExpirationTimeout(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordHistoryLength">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordHistoryLength (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordHistoryLength(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordHistoryLength", "(Landroid/content/ComponentName;)I", "GetGetPasswordHistoryLength_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or null to aggregate
 all admins.</param>
        <summary>Retrieve the current password history length for all admins of this
 user and its profiles or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Retrieve the current password history length for all admins of this
 user and its profiles or a particular one.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordHistoryLength(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordMaximumLength">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordMaximumLength (Android.App.Admin.PasswordQuality quality);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordMaximumLength(valuetype Android.App.Admin.PasswordQuality quality) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordMaximumLength", "(I)I", "GetGetPasswordMaximumLength_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quality" Type="Android.App.Admin.PasswordQuality">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="quality">The quality being interrogated.</param>
        <summary>Return the maximum password length that the device supports for a
 particular password quality.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Return the maximum password length that the device supports for a
 particular password quality.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMaximumLength(int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordMinimumLength">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordMinimumLength (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordMinimumLength(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordMinimumLength", "(Landroid/content/ComponentName;)I", "GetGetPasswordMinimumLength_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or null to aggregate
 all admins.
</param>
        <summary>Retrieve the current minimum password length for all admins of this
 user and its profiles or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Retrieve the current minimum password length for all admins of this
 user and its profiles or a particular one.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumLength(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordMinimumLetters">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordMinimumLetters (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordMinimumLetters(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordMinimumLetters", "(Landroid/content/ComponentName;)I", "GetGetPasswordMinimumLetters_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or null to
            aggregate all admins.</param>
        <summary>Retrieve the current number of letters required in the password for all
 admins or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Retrieve the current number of letters required in the password for all
 admins or a particular one. This is the same value as
 set by {#link <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordMinimumLetters(Android.Content.ComponentName, System.Int32)" /></c>
 and only applies when the password quality is
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_COMPLEX" /></c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumLetters(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordMinimumLowerCase">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordMinimumLowerCase (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordMinimumLowerCase(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordMinimumLowerCase", "(Landroid/content/ComponentName;)I", "GetGetPasswordMinimumLowerCase_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or null to
            aggregate all admins.</param>
        <summary>Retrieve the current number of lower case letters required in the
 password for all admins of this user and its profiles or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Retrieve the current number of lower case letters required in the
 password for all admins of this user and its profiles or a particular one.
 This is the same value as set by
 {#link <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordMinimumLowerCase(Android.Content.ComponentName, System.Int32)" /></c>
 and only applies when the password quality is
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_COMPLEX" /></c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumLowerCase(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordMinimumNonLetter">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordMinimumNonLetter (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordMinimumNonLetter(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordMinimumNonLetter", "(Landroid/content/ComponentName;)I", "GetGetPasswordMinimumNonLetter_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or null to
            aggregate all admins.</param>
        <summary>Retrieve the current number of non-letter characters required in the
 password for all admins of this user and its profiles or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Retrieve the current number of non-letter characters required in the
 password for all admins of this user and its profiles or a particular one.
 This is the same value as set by
 {#link <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordMinimumNonLetter(Android.Content.ComponentName, System.Int32)" /></c>
 and only applies when the password quality is
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_COMPLEX" /></c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumNonLetter(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordMinimumNumeric">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordMinimumNumeric (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordMinimumNumeric(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordMinimumNumeric", "(Landroid/content/ComponentName;)I", "GetGetPasswordMinimumNumeric_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or null to
            aggregate all admins.</param>
        <summary>Retrieve the current number of numerical digits required in the password
 for all admins of this user and its profiles or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Retrieve the current number of numerical digits required in the password
 for all admins of this user and its profiles or a particular one.
 This is the same value as set by
 {#link <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordMinimumNumeric(Android.Content.ComponentName, System.Int32)" /></c>
 and only applies when the password quality is
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_COMPLEX" /></c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumNumeric(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordMinimumSymbols">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordMinimumSymbols (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordMinimumSymbols(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordMinimumSymbols", "(Landroid/content/ComponentName;)I", "GetGetPasswordMinimumSymbols_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or null to
            aggregate all admins.</param>
        <summary>Retrieve the current number of symbols required in the password for all
 admins or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Retrieve the current number of symbols required in the password for all
 admins or a particular one. This is the same value as
 set by {#link <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordMinimumSymbols(Android.Content.ComponentName, System.Int32)" /></c>
 and only applies when the password quality is
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_COMPLEX" /></c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumSymbols(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordMinimumUpperCase">
      <MemberSignature Language="C#" Value="public virtual int GetPasswordMinimumUpperCase (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetPasswordMinimumUpperCase(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordMinimumUpperCase", "(Landroid/content/ComponentName;)I", "GetGetPasswordMinimumUpperCase_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or null to
            aggregate all admins.</param>
        <summary>Retrieve the current number of upper case letters required in the
 password for all admins of this user and its profiles or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Retrieve the current number of upper case letters required in the
 password for all admins of this user and its profiles or a particular one.
 This is the same value as set by
 {#link <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordMinimumUpperCase(Android.Content.ComponentName, System.Int32)" /></c>
 and only applies when the password quality is
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_COMPLEX" /></c>.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumUpperCase(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="GetPasswordQuality">
      <MemberSignature Language="C#" Value="public virtual Android.App.Admin.PasswordQuality GetPasswordQuality (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.App.Admin.PasswordQuality GetPasswordQuality(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getPasswordQuality", "(Landroid/content/ComponentName;)I", "GetGetPasswordQuality_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.PasswordQuality</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">The name of the admin component to check, or null to aggregate
 all admins.
</param>
        <summary>Retrieve the current minimum password quality for all admins of this user
 and its profiles or a particular one.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Retrieve the current minimum password quality for all admins of this user
 and its profiles or a particular one.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordQuality(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="GetStorageEncryption">
      <MemberSignature Language="C#" Value="public virtual bool GetStorageEncryption (Android.Content.ComponentName admin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetStorageEncryption(class Android.Content.ComponentName admin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getStorageEncryption", "(Landroid/content/ComponentName;)Z", "GetGetStorageEncryption_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.  If null,
 this will return the requested encryption setting as an aggregate of all active
 administrators.</param>
        <summary>Called by an application that is administering the device to
 determine the requested setting for secure storage.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Called by an application that is administering the device to
 determine the requested setting for secure storage.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getStorageEncryption(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="HasGrantedPolicy">
      <MemberSignature Language="C#" Value="public virtual bool HasGrantedPolicy (Android.Content.ComponentName admin, Android.App.Admin.DeviceAdminUses usesPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasGrantedPolicy(class Android.Content.ComponentName admin, valuetype Android.App.Admin.DeviceAdminUses usesPolicy) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("hasGrantedPolicy", "(Landroid/content/ComponentName;I)Z", "GetHasGrantedPolicy_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="usesPolicy" Type="Android.App.Admin.DeviceAdminUses">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.  Must be
 an active administrator, or an exception will be thrown.</param>
        <param name="usesPolicy">Which uses-policy to check, as defined in <c><see cref="T:Android.App.Admin.DeviceAdminInfo" /></c>.
</param>
        <summary>Returns true if an administrator has been granted a particular device policy.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Returns true if an administrator has been granted a particular device policy.  This can
 be used to check if the administrator was activated under an earlier set of policies,
 but requires additional policies after an upgrade.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#hasGrantedPolicy(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="IsActivePasswordSufficient">
      <MemberSignature Language="C#" Value="public virtual bool IsActivePasswordSufficient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActivePasswordSufficient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("isActivePasswordSufficient", "()Z", "GetIsActivePasswordSufficientHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determine whether the current password the user has set is sufficient
 to meet the policy requirements (quality, minimum length) that have been
 requested by the admins of this user and its profiles.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Determine whether the current password the user has set is sufficient
 to meet the policy requirements (quality, minimum length) that have been
 requested by the admins of this user and its profiles.

 </para><para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isActivePasswordSufficient()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="IsAdminActive">
      <MemberSignature Language="C#" Value="public virtual bool IsAdminActive (Android.Content.ComponentName who);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAdminActive(class Android.Content.ComponentName who) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isAdminActive", "(Landroid/content/ComponentName;)Z", "GetIsAdminActive_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="who" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="who">To be added.</param>
        <summary>Return true if the given administrator component is currently
 active (enabled) in the system.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Return true if the given administrator component is currently
 active (enabled) in the system.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isAdminActive(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="IsDeviceOwnerApp">
      <MemberSignature Language="C#" Value="public virtual bool IsDeviceOwnerApp (string packageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDeviceOwnerApp(string packageName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("isDeviceOwnerApp", "(Ljava/lang/String;)Z", "GetIsDeviceOwnerApp_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="packageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="packageName">the package name of the app, to compare with the registered device owner
 app, if any.</param>
        <summary>Used to determine if a particular package has been registered as a Device Owner app.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Used to determine if a particular package has been registered as a Device Owner app.
 A device owner app is a special device admin that cannot be deactivated by the user, once
 activated as a device admin. It also cannot be uninstalled. To check if a particular
 package is currently registered as the device owner app, pass in the package name from
 <c><see cref="P:Android.Content.Context.PackageName" /></c> to this method.</para><para tool="javadoc-to-mdoc">This is useful for device
 admin apps that want to check if they are also registered as the device owner app. The
 exact mechanism by which a device admin app is registered as a device owner app is defined by
 the setup process.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isDeviceOwnerApp(java.lang.String)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 18" />
      </Docs>
    </Member>
    <Member MemberName="KeyguardDisableFeaturesAll">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.KeyguardDisable KeyguardDisableFeaturesAll = 2147483647;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.KeyguardDisable KeyguardDisableFeaturesAll = (2147483647)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("KEYGUARD_DISABLE_FEATURES_ALL")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.KeyguardDisable enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.KeyguardDisable</ReturnType>
      </ReturnValue>
      <MemberValue>2147483647</MemberValue>
      <Docs>
        <summary>Disable all current and future keyguard customizations.</summary>
        <remarks><para tool="javadoc-to-mdoc">Disable all current and future keyguard customizations.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_FEATURES_ALL" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="KeyguardDisableFeaturesNone">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.KeyguardDisable KeyguardDisableFeaturesNone = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.KeyguardDisable KeyguardDisableFeaturesNone = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("KEYGUARD_DISABLE_FEATURES_NONE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.KeyguardDisable enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.KeyguardDisable</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Widgets are enabled in keyguard
</summary>
        <remarks><para tool="javadoc-to-mdoc">Widgets are enabled in keyguard
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_FEATURES_NONE" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="KeyguardDisableSecureCamera">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.KeyguardDisable KeyguardDisableSecureCamera = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.KeyguardDisable KeyguardDisableSecureCamera = (2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("KEYGUARD_DISABLE_SECURE_CAMERA")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.KeyguardDisable enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.KeyguardDisable</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Disable the camera on secure keyguard screens (e.g.</summary>
        <remarks><para tool="javadoc-to-mdoc">Disable the camera on secure keyguard screens (e.g. PIN/Pattern/Password)
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_SECURE_CAMERA" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="KeyguardDisableWidgetsAll">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.KeyguardDisable KeyguardDisableWidgetsAll = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.KeyguardDisable KeyguardDisableWidgetsAll = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("KEYGUARD_DISABLE_WIDGETS_ALL")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.KeyguardDisable enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.KeyguardDisable</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Disable all keyguard widgets.</summary>
        <remarks><para tool="javadoc-to-mdoc">Disable all keyguard widgets. Has no effect.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_WIDGETS_ALL" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="LockNow">
      <MemberSignature Language="C#" Value="public virtual void LockNow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LockNow() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("lockNow", "()V", "GetLockNowHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Make the device lock immediately, as if the lock screen timeout has
 expired at the point of this call.</summary>
        <remarks><para tool="javadoc-to-mdoc">Make the device lock immediately, as if the lock screen timeout has
 expired at the point of this call.

 </para><para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyForceLock" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#lockNow()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="RemoveActiveAdmin">
      <MemberSignature Language="C#" Value="public virtual void RemoveActiveAdmin (Android.Content.ComponentName who);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveActiveAdmin(class Android.Content.ComponentName who) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("removeActiveAdmin", "(Landroid/content/ComponentName;)V", "GetRemoveActiveAdmin_Landroid_content_ComponentName_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="who" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="who">To be added.</param>
        <summary>Remove a current administration component.</summary>
        <remarks><para tool="javadoc-to-mdoc">Remove a current administration component.  This can only be called
 by the application that owns the administration component; if you
 try to remove someone else's component, a security exception will be
 thrown.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#removeActiveAdmin(android.content.ComponentName)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ResetPassword">
      <MemberSignature Language="C#" Value="public virtual bool ResetPassword (string password, Android.App.Admin.ResetPasswordFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ResetPassword(string password, valuetype Android.App.Admin.ResetPasswordFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("resetPassword", "(Ljava/lang/String;I)Z", "GetResetPassword_Ljava_lang_String_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="flags" Type="Android.App.Admin.ResetPasswordFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="password">The new password for the user.</param>
        <param name="flags">May be 0 or <c><see cref="F:Android.App.Admin.DevicePolicyManager.ResetPasswordRequireEntry" /></c>.</param>
        <summary>Force a new device unlock password (the password needed to access the
 entire device, not for individual accounts) on the user.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Force a new device unlock password (the password needed to access the
 entire device, not for individual accounts) on the user.  This takes
 effect immediately.
 The given password must be sufficient for the
 current password quality and length constraints as returned by
 <c><see cref="M:Android.App.Admin.DevicePolicyManager.GetPasswordQuality(Android.Content.ComponentName)" /></c> and
 <c><see cref="M:Android.App.Admin.DevicePolicyManager.GetPasswordMinimumLength(Android.Content.ComponentName)" /></c>; if it does not meet
 these constraints, then it will be rejected and false returned.  Note
 that the password may be a stronger quality (containing alphanumeric
 characters when the requested quality is only numeric), in which case
 the currently active quality will be increased to match.

 </para><para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyResetPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.

 </para><para tool="javadoc-to-mdoc">Calling this from a managed profile will throw a security exception.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#resetPassword(java.lang.String, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="ResetPasswordRequireEntry">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.ResetPasswordFlags ResetPasswordRequireEntry = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.ResetPasswordFlags ResetPasswordRequireEntry = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("RESET_PASSWORD_REQUIRE_ENTRY")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.ResetPasswordFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.ResetPasswordFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Flag for <c><see cref="M:Android.App.Admin.DevicePolicyManager.ResetPassword(System.String, Android.App.Admin.ResetPasswordFlags)" /></c>: don't allow other admins to change
 the password again until the user has entered it.</summary>
        <remarks><para tool="javadoc-to-mdoc">Flag for <c><see cref="M:Android.App.Admin.DevicePolicyManager.ResetPassword(System.String, Android.App.Admin.ResetPasswordFlags)" /></c>: don't allow other admins to change
 the password again until the user has entered it.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#RESET_PASSWORD_REQUIRE_ENTRY" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetCameraDisabled">
      <MemberSignature Language="C#" Value="public virtual void SetCameraDisabled (Android.Content.ComponentName admin, bool disabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCameraDisabled(class Android.Content.ComponentName admin, bool disabled) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setCameraDisabled", "(Landroid/content/ComponentName;Z)V", "GetSetCameraDisabled_Landroid_content_ComponentName_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="disabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="disabled">Whether or not the camera should be disabled.
</param>
        <summary>Called by an application that is administering the device to disable all cameras
 on the device, for this user.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called by an application that is administering the device to disable all cameras
 on the device, for this user. After setting this, no applications running as this user
 will be able to access any cameras on the device.

 </para><para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyDisableCamera" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setCameraDisabled(android.content.ComponentName, boolean)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="SetKeyguardDisabledFeatures">
      <MemberSignature Language="C#" Value="public virtual void SetKeyguardDisabledFeatures (Android.Content.ComponentName admin, Android.App.Admin.KeyguardDisable which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetKeyguardDisabledFeatures(class Android.Content.ComponentName admin, valuetype Android.App.Admin.KeyguardDisable which) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setKeyguardDisabledFeatures", "(Landroid/content/ComponentName;I)V", "GetSetKeyguardDisabledFeatures_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="which" Type="Android.App.Admin.KeyguardDisable">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="which"><c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableFeaturesNone" /></c> (default),
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableWidgetsAll" /></c>, <c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableSecureCamera" /></c>,
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableSecureNotifications" /></c>, <c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableTrustAgents" /></c>,
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableUnredactedNotifications" /></c>, <c><see cref="F:Android.App.Admin.DevicePolicyManager.KeyguardDisableFeaturesAll" /></c></param>
        <summary>Called by an application that is administering the device to disable keyguard customizations,
 such as widgets.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called by an application that is administering the device to disable keyguard customizations,
 such as widgets. After setting this, keyguard features will be disabled according to the
 provided feature list.

 </para><para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyDisableKeyguardFeatures" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.

 </para><para tool="javadoc-to-mdoc">Calling this from a managed profile will throw a security exception.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setKeyguardDisabledFeatures(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 17" />
      </Docs>
    </Member>
    <Member MemberName="SetMaximumFailedPasswordsForWipe">
      <MemberSignature Language="C#" Value="public virtual void SetMaximumFailedPasswordsForWipe (Android.Content.ComponentName admin, int num);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMaximumFailedPasswordsForWipe(class Android.Content.ComponentName admin, int32 num) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMaximumFailedPasswordsForWipe", "(Landroid/content/ComponentName;I)V", "GetSetMaximumFailedPasswordsForWipe_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="num" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="num">The number of failed password attempts at which point the
 device will wipe its data.
</param>
        <summary>Setting this to a value greater than zero enables a built-in policy
 that will perform a device wipe after too many incorrect
 device-unlock passwords have been entered.</summary>
        <remarks><para tool="javadoc-to-mdoc">Setting this to a value greater than zero enables a built-in policy
 that will perform a device wipe after too many incorrect
 device-unlock passwords have been entered.  This built-in policy combines
 watching for failed passwords and wiping the device, and requires
 that you request both <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyWatchLogin" /></c> and
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyWipeData" /></c>}.

 </para><para tool="javadoc-to-mdoc">To implement any other policy (e.g. wiping data for a particular
 application only, erasing or revoking credentials, or reporting the
 failure to a server), you should implement
 <c><see cref="M:Android.App.Admin.DeviceAdminReceiver.OnPasswordFailed(Android.Content.Context, Android.Content.Intent)" /></c>
 instead.  Do not use this API, because if the maximum count is reached,
 the device will be wiped immediately, and your callback will not be invoked.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setMaximumFailedPasswordsForWipe(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetMaximumTimeToLock">
      <MemberSignature Language="C#" Value="public virtual void SetMaximumTimeToLock (Android.Content.ComponentName admin, long timeMs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMaximumTimeToLock(class Android.Content.ComponentName admin, int64 timeMs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setMaximumTimeToLock", "(Landroid/content/ComponentName;J)V", "GetSetMaximumTimeToLock_Landroid_content_ComponentName_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="timeMs" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="timeMs">The new desired maximum time to lock in milliseconds.
 A value of 0 means there is no restriction.
</param>
        <summary>Called by an application that is administering the device to set the
 maximum time for user activity until the device will lock.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 maximum time for user activity until the device will lock.  This limits
 the length that the user can set.  It takes effect immediately.

 </para><para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyForceLock" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setMaximumTimeToLock(android.content.ComponentName, long)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordExpirationTimeout">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordExpirationTimeout (Android.Content.ComponentName admin, long timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordExpirationTimeout(class Android.Content.ComponentName admin, int64 timeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordExpirationTimeout", "(Landroid/content/ComponentName;J)V", "GetSetPasswordExpirationTimeout_Landroid_content_ComponentName_JHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="timeout" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="timeout">The limit (in ms) that a password can remain in effect. A value of 0
        means there is no restriction (unlimited).
</param>
        <summary>Called by a device admin to set the password expiration timeout.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called by a device admin to set the password expiration timeout. Calling this method
 will restart the countdown for password expiration for the given admin, as will changing
 the device password (for all admins).

 </para><para tool="javadoc-to-mdoc">The provided timeout is the time delta in ms and will be added to the current time.
 For example, to have the password expire 5 days from now, timeout would be
 5 * 86400 * 1000 = 432000000 ms for timeout.

 </para><para tool="javadoc-to-mdoc">To disable password expiration, a value of 0 may be used for timeout.

 </para><para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyExpirePassword" /></c> to be able to call this
 method; if it has not, a security exception will be thrown.

 </para><para tool="javadoc-to-mdoc"> Note that setting the password will automatically reset the expiration time for all
 active admins. Active admins do not need to explicitly call this method in that case.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordExpirationTimeout(android.content.ComponentName, long)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordHistoryLength">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordHistoryLength (Android.Content.ComponentName admin, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordHistoryLength(class Android.Content.ComponentName admin, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordHistoryLength", "(Landroid/content/ComponentName;I)V", "GetSetPasswordHistoryLength_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
        with.</param>
        <param name="length">The new desired length of password history. A value of 0
        means there is no restriction.
</param>
        <summary>Called by an application that is administering the device to set the length
 of the password history.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the length
 of the password history. After setting this, the user will not be able to
 enter a new password that is the same as any password in the history. Note
 that the current password will remain until the user has set a new one, so
 the change does not take place immediately. To prompt the user for a new
 password, use <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after setting this value.
 This constraint is only imposed if the administrator has also requested
 either <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_NUMERIC" /></c>, <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX" /></c><c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC" /></c>, or <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC" /></c>
 with <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName, Android.App.Admin.PasswordQuality)" /></c>.

 </para><para tool="javadoc-to-mdoc">
 The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call this
 method; if it has not, a security exception will be thrown.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordHistoryLength(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordMinimumLength">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordMinimumLength (Android.Content.ComponentName admin, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordMinimumLength(class Android.Content.ComponentName admin, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordMinimumLength", "(Landroid/content/ComponentName;I)V", "GetSetPasswordMinimumLength_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="length">The new desired minimum password length.  A value of 0
 means there is no restriction.
</param>
        <summary>Called by an application that is administering the device to set the
 minimum allowed password length.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 minimum allowed password length.  After setting this, the user
 will not be able to enter a new password that is not at least as
 restrictive as what has been set.  Note that the current password
 will remain until the user has set a new one, so the change does not
 take place immediately.  To prompt the user for a new password, use
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after setting this value.  This
 constraint is only imposed if the administrator has also requested either
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_NUMERIC" /></c>, <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX" /></c>,
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC" /></c>, <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC" /></c>,
 or <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_COMPLEX" /></c> with <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName, Android.App.Admin.PasswordQuality)" /></c>.

 </para><para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumLength(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordMinimumLetters">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordMinimumLetters (Android.Content.ComponentName admin, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordMinimumLetters(class Android.Content.ComponentName admin, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordMinimumLetters", "(Landroid/content/ComponentName;I)V", "GetSetPasswordMinimumLetters_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
            with.</param>
        <param name="length">The new desired minimum number of letters required in the
            password. A value of 0 means there is no restriction.
</param>
        <summary>Called by an application that is administering the device to set the
 minimum number of letters required in the password.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 minimum number of letters required in the password. After setting this,
 the user will not be able to enter a new password that is not at least as
 restrictive as what has been set. Note that the current password will
 remain until the user has set a new one, so the change does not take
 place immediately. To prompt the user for a new password, use
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after setting this value. This
 constraint is only imposed if the administrator has also requested
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_COMPLEX" /></c> with <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName, Android.App.Admin.PasswordQuality)" /></c>. The
 default value is 1.
 </para><para tool="javadoc-to-mdoc">
 The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumLetters(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordMinimumLowerCase">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordMinimumLowerCase (Android.Content.ComponentName admin, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordMinimumLowerCase(class Android.Content.ComponentName admin, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordMinimumLowerCase", "(Landroid/content/ComponentName;I)V", "GetSetPasswordMinimumLowerCase_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
            with.</param>
        <param name="length">The new desired minimum number of lower case letters
            required in the password. A value of 0 means there is no
            restriction.
</param>
        <summary>Called by an application that is administering the device to set the
 minimum number of lower case letters required in the password.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 minimum number of lower case letters required in the password. After
 setting this, the user will not be able to enter a new password that is
 not at least as restrictive as what has been set. Note that the current
 password will remain until the user has set a new one, so the change does
 not take place immediately. To prompt the user for a new password, use
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after setting this value. This
 constraint is only imposed if the administrator has also requested
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_COMPLEX" /></c> with <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName, Android.App.Admin.PasswordQuality)" /></c>. The
 default value is 0.
 </para><para tool="javadoc-to-mdoc">
 The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumLowerCase(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordMinimumNonLetter">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordMinimumNonLetter (Android.Content.ComponentName admin, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordMinimumNonLetter(class Android.Content.ComponentName admin, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordMinimumNonLetter", "(Landroid/content/ComponentName;I)V", "GetSetPasswordMinimumNonLetter_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
            with.</param>
        <param name="length">The new desired minimum number of letters required in the
            password. A value of 0 means there is no restriction.
</param>
        <summary>Called by an application that is administering the device to set the
 minimum number of non-letter characters (numerical digits or symbols)
 required in the password.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 minimum number of non-letter characters (numerical digits or symbols)
 required in the password. After setting this, the user will not be able
 to enter a new password that is not at least as restrictive as what has
 been set. Note that the current password will remain until the user has
 set a new one, so the change does not take place immediately. To prompt
 the user for a new password, use <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after
 setting this value. This constraint is only imposed if the administrator
 has also requested <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_COMPLEX" /></c> with
 <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName, Android.App.Admin.PasswordQuality)" /></c>. The default value is 0.
 </para><para tool="javadoc-to-mdoc">
 The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumNonLetter(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordMinimumNumeric">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordMinimumNumeric (Android.Content.ComponentName admin, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordMinimumNumeric(class Android.Content.ComponentName admin, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordMinimumNumeric", "(Landroid/content/ComponentName;I)V", "GetSetPasswordMinimumNumeric_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
            with.</param>
        <param name="length">The new desired minimum number of numerical digits required
            in the password. A value of 0 means there is no restriction.
</param>
        <summary>Called by an application that is administering the device to set the
 minimum number of numerical digits required in the password.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 minimum number of numerical digits required in the password. After
 setting this, the user will not be able to enter a new password that is
 not at least as restrictive as what has been set. Note that the current
 password will remain until the user has set a new one, so the change does
 not take place immediately. To prompt the user for a new password, use
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after setting this value. This
 constraint is only imposed if the administrator has also requested
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_COMPLEX" /></c> with <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName, Android.App.Admin.PasswordQuality)" /></c>. The
 default value is 1.
 </para><para tool="javadoc-to-mdoc">
 The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumNumeric(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordMinimumSymbols">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordMinimumSymbols (Android.Content.ComponentName admin, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordMinimumSymbols(class Android.Content.ComponentName admin, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordMinimumSymbols", "(Landroid/content/ComponentName;I)V", "GetSetPasswordMinimumSymbols_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
            with.</param>
        <param name="length">The new desired minimum number of symbols required in the
            password. A value of 0 means there is no restriction.
</param>
        <summary>Called by an application that is administering the device to set the
 minimum number of symbols required in the password.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 minimum number of symbols required in the password. After setting this,
 the user will not be able to enter a new password that is not at least as
 restrictive as what has been set. Note that the current password will
 remain until the user has set a new one, so the change does not take
 place immediately. To prompt the user for a new password, use
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after setting this value. This
 constraint is only imposed if the administrator has also requested
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_COMPLEX" /></c> with <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName, Android.App.Admin.PasswordQuality)" /></c>. The
 default value is 1.
 </para><para tool="javadoc-to-mdoc">
 The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumSymbols(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordMinimumUpperCase">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordMinimumUpperCase (Android.Content.ComponentName admin, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordMinimumUpperCase(class Android.Content.ComponentName admin, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordMinimumUpperCase", "(Landroid/content/ComponentName;I)V", "GetSetPasswordMinimumUpperCase_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated
            with.</param>
        <param name="length">The new desired minimum number of upper case letters
            required in the password. A value of 0 means there is no
            restriction.
</param>
        <summary>Called by an application that is administering the device to set the
 minimum number of upper case letters required in the password.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 minimum number of upper case letters required in the password. After
 setting this, the user will not be able to enter a new password that is
 not at least as restrictive as what has been set. Note that the current
 password will remain until the user has set a new one, so the change does
 not take place immediately. To prompt the user for a new password, use
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after setting this value. This
 constraint is only imposed if the administrator has also requested
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_COMPLEX" /></c> with <c><see cref="M:Android.App.Admin.DevicePolicyManager.SetPasswordQuality(Android.Content.ComponentName, Android.App.Admin.PasswordQuality)" /></c>. The
 default value is 0.
 </para><para tool="javadoc-to-mdoc">
 The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumUpperCase(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="SetPasswordQuality">
      <MemberSignature Language="C#" Value="public virtual void SetPasswordQuality (Android.Content.ComponentName admin, Android.App.Admin.PasswordQuality quality);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPasswordQuality(class Android.Content.ComponentName admin, valuetype Android.App.Admin.PasswordQuality quality) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setPasswordQuality", "(Landroid/content/ComponentName;I)V", "GetSetPasswordQuality_Landroid_content_ComponentName_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="quality" Type="Android.App.Admin.PasswordQuality">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="quality">The new desired quality.  One of
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED" /></c>, <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_SOMETHING" /></c>,
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_NUMERIC" /></c>, <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX" /></c>,
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC" /></c>, <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC" /></c>
 or <c><see cref="!:Android.App.Admin.DevicePolicyManager.PASSWORD_QUALITY_COMPLEX" /></c>.
</param>
        <summary>Called by an application that is administering the device to set the
 password restrictions it is imposing.</summary>
        <remarks><para tool="javadoc-to-mdoc">Called by an application that is administering the device to set the
 password restrictions it is imposing.  After setting this, the user
 will not be able to enter a new password that is not at least as
 restrictive as what has been set.  Note that the current password
 will remain until the user has set a new one, so the change does not
 take place immediately.  To prompt the user for a new password, use
 <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionSetNewPassword" /></c> after setting this value.

 </para><para tool="javadoc-to-mdoc">Quality constants are ordered so that higher values are more restrictive;
 thus the highest requested quality constant (between the policy set here,
 the user's preference, and any other considerations) is the one that
 is in effect.

 </para><para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyLimitPassword" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordQuality(android.content.ComponentName, int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="SetStorageEncryption">
      <MemberSignature Language="C#" Value="public virtual Android.App.Admin.EncryptionStatus SetStorageEncryption (Android.Content.ComponentName admin, bool encrypt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.App.Admin.EncryptionStatus SetStorageEncryption(class Android.Content.ComponentName admin, bool encrypt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setStorageEncryption", "(Landroid/content/ComponentName;Z)I", "GetSetStorageEncryption_Landroid_content_ComponentName_ZHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.EncryptionStatus</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="admin" Type="Android.Content.ComponentName" />
        <Parameter Name="encrypt" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="admin">Which <c><see cref="T:Android.App.Admin.DeviceAdminReceiver" /></c> this request is associated with.</param>
        <param name="encrypt">true to request encryption, false to release any previous request</param>
        <summary>Called by an application that is administering the device to
 request that the storage system be encrypted.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Called by an application that is administering the device to
 request that the storage system be encrypted.

 </para><para tool="javadoc-to-mdoc">When multiple device administrators attempt to control device
 encryption, the most secure, supported setting will always be
 used.  If any device administrator requests device encryption,
 it will be enabled;  Conversely, if a device administrator
 attempts to disable device encryption while another
 device administrator has enabled it, the call to disable will
 fail (most commonly returning <c><see cref="!:Android.App.Admin.DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE" /></c>).

 </para><para tool="javadoc-to-mdoc">This policy controls encryption of the secure (application data) storage area.  Data
 written to other storage areas may or may not be encrypted, and this policy does not require
 or control the encryption of any other storage areas.
 There is one exception:  If <c><see cref="P:Android.OS.Environment.IsExternalStorageEmulated" /></c> is
 <c>true</c>, then the directory returned by
 <c><see cref="P:Android.OS.Environment.ExternalStorageDirectory" /></c> must be written to disk
 within the encrypted storage area.

 </para><para tool="javadoc-to-mdoc">Important Note:  On some devices, it is possible to encrypt storage without requiring
 the user to create a device PIN or Password.  In this case, the storage is encrypted, but
 the encryption key may not be fully secured.  For maximum security, the administrator should
 also require (and check for) a pattern, PIN, or password.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setStorageEncryption(android.content.ComponentName, boolean)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="StorageEncryptionStatus">
      <MemberSignature Language="C#" Value="public virtual Android.App.Admin.EncryptionStatus StorageEncryptionStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.App.Admin.EncryptionStatus StorageEncryptionStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Android.Runtime.Register("getStorageEncryptionStatus", "()I", "GetGetStorageEncryptionStatusHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.EncryptionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Called by an application that is administering the device to
 determine the current encryption status of the device.</summary>
        <value>To be added.</value>
        <remarks><para tool="javadoc-to-mdoc">Called by an application that is administering the device to
 determine the current encryption status of the device.

 Depending on the returned status code, the caller may proceed in different
 ways.  If the result is <c><see cref="!:Android.App.Admin.DevicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED" /></c>, the
 storage system does not support encryption.  If the
 result is <c><see cref="!:Android.App.Admin.DevicePolicyManager.ENCRYPTION_STATUS_INACTIVE" /></c>, use <c><see cref="F:Android.App.Admin.DevicePolicyManager.ActionStartEncryption" /></c> to begin the process of encrypting or decrypting the
 storage.  If the result is <c><see cref="!:Android.App.Admin.DevicePolicyManager.ENCRYPTION_STATUS_ACTIVATING" /></c> or
 <c><see cref="!:Android.App.Admin.DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE" /></c>, no further action is required.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getStorageEncryptionStatus()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WipeData">
      <MemberSignature Language="C#" Value="public virtual void WipeData (Android.App.Admin.WipeDataFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WipeData(valuetype Android.App.Admin.WipeDataFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("wipeData", "(I)V", "GetWipeData_IHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="Android.App.Admin.WipeDataFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="flags">Bit mask of additional options: currently 0 and
              <c><see cref="F:Android.App.Admin.DevicePolicyManager.WipeExternalStorage" /></c> are supported.
</param>
        <summary>Ask the user data be wiped.</summary>
        <remarks><para tool="javadoc-to-mdoc">Ask the user data be wiped.  This will cause the device to reboot,
 erasing all user data while next booting up.  External storage such
 as SD cards will be also erased if the flag <c><see cref="F:Android.App.Admin.DevicePolicyManager.WipeExternalStorage" /></c>
 is set.

 </para><para tool="javadoc-to-mdoc">The calling device admin must have requested
 <c><see cref="F:Android.App.Admin.DeviceAdminInfo.UsesPolicyWipeData" /></c> to be able to call
 this method; if it has not, a security exception will be thrown.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#wipeData(int)" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 8" />
      </Docs>
    </Member>
    <Member MemberName="WipeExternalStorage">
      <MemberSignature Language="C#" Value="public const Android.App.Admin.WipeDataFlags WipeExternalStorage = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.App.Admin.WipeDataFlags WipeExternalStorage = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("WIPE_EXTERNAL_STORAGE")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This constant will be removed in the future version. Use Android.App.Admin.WipeDataFlags enum directly instead of this field.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.App.Admin.WipeDataFlags</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Flag for <c><see cref="M:Android.App.Admin.DevicePolicyManager.WipeData(Android.App.Admin.WipeDataFlags)" /></c>: also erase the device's external
 storage.</summary>
        <remarks><para tool="javadoc-to-mdoc">Flag for <c><see cref="M:Android.App.Admin.DevicePolicyManager.WipeData(Android.App.Admin.WipeDataFlags)" /></c>: also erase the device's external
 storage.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#WIPE_EXTERNAL_STORAGE" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 9" />
      </Docs>
    </Member>
  </Members>
</Type>
