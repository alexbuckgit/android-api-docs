<Type Name="DrmUtils" FullName="Android.Drm.DrmUtils">
  <TypeSignature Language="C#" Value="public class DrmUtils : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DrmUtils extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/drm/DrmUtils", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A utility class that provides operations for parsing extended metadata embedded in
 DRM constraint information.</summary>
    <remarks><para tool="javadoc-to-mdoc">A utility class that provides operations for parsing extended metadata embedded in
 DRM constraint information. If a DRM scheme has specific constraints beyond the standard
 constraints, the constraints will show up in the
 <c><see cref="!:NoType:android/drm/DrmStore$ConstraintsColumns;Href=../../../reference/android/drm/DrmStore.ConstraintsColumns.html#EXTENDED_METADATA" /></c> key. You can use
 <c><see cref="!:NoType:android/drm/DrmUtils$ExtendedMetadataParser;Href=../../../reference/android/drm/DrmUtils.ExtendedMetadataParser.html" /></c> to iterate over those values.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/drm/DrmUtils.html" target="_blank">[Android Documentation]</a></format></para></remarks>
    <since version="Added in API level 11" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DrmUtils ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary></summary>
        <remarks><para tool="javadoc-to-mdoc" /><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/drm/DrmUtils.html#DrmUtils()" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DrmUtils (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtendedMetadataParser">
      <MemberSignature Language="C#" Value="public static Android.Drm.DrmUtils.ExtendedMetadataParser GetExtendedMetadataParser (byte[] extendedMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Drm.DrmUtils/ExtendedMetadataParser GetExtendedMetadataParser(unsigned int8[] extendedMetadata) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getExtendedMetadataParser", "([B)Landroid/drm/DrmUtils$ExtendedMetadataParser;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Drm.DrmUtils+ExtendedMetadataParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extendedMetadata" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="extendedMetadata">Object in which key-value pairs of extended metadata are embedded.

</param>
        <summary>Gets an instance of <c><see cref="!:NoType:android/drm/DrmUtils$ExtendedMetadataParser;Href=../../../reference/android/drm/DrmUtils.ExtendedMetadataParser.html" /></c>, which can be used to parse
 extended metadata embedded in DRM constraint information.</summary>
        <returns>To be added.</returns>
        <remarks><para tool="javadoc-to-mdoc">Gets an instance of <c><see cref="!:NoType:android/drm/DrmUtils$ExtendedMetadataParser;Href=../../../reference/android/drm/DrmUtils.ExtendedMetadataParser.html" /></c>, which can be used to parse
 extended metadata embedded in DRM constraint information.</para><para tool="javadoc-to-mdoc"><format type="text/html"><a href="http://developer.android.com/reference/android/drm/DrmUtils.html#getExtendedMetadataParser(byte[])" target="_blank">[Android Documentation]</a></format></para></remarks>
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
