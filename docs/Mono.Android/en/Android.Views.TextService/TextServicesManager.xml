<Type Name="TextServicesManager" FullName="Android.Views.TextService.TextServicesManager">
  <TypeSignature Language="C#" Value="public sealed class TextServicesManager : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TextServicesManager extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/textservice/TextServicesManager", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="14">
    <summary>System API to the overall text services, which arbitrates interaction between applications
 and text services.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">System API to the overall text services, which arbitrates interaction between applications
 and text services. You can retrieve an instance of this interface with
 <c><see cref="M:Android.Content.Context.GetSystemService(System.String)" /></c>.

 The user can change the current text services in Settings. And also applications can specify
 the target text services.

 <format type="text/html"><h3>Architecture Overview</h3></format><list type="bullet"><item><term> The <i>text services manager</i> as expressed by this class
 is the central point of the system that manages interaction between all
 other parts.  It is expressed as the client-side API here which exists
 in each application context and communicates with a global system service
 that manages the interaction across all processes.
 </term></item><item><term> A <i>text service</i> implements a particular
 interaction model allowing the client application to retrieve information of text.
 The system binds to the current text service that is in use, causing it to be created and run.
 </term></item><item><term> Multiple <i>client applications</i> arbitrate with the text service
 manager for connections to text services.
 </term></item></list><format type="text/html"><h3>Text services sessions</h3></format><list type="bullet"><item><term>The <i>spell checker session</i> is one of the text services.
 <c><see cref="T:Android.Views.TextService.SpellCheckerSession" /></c></term></item></list></para>
      <para tool="javadoc-to-mdoc">There are three primary parties involved in the text services
 framework (TSF) architecture:</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/view/textservice/TextServicesManager.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="Added in API level 14" />
  </Docs>
  <Members>
    <Member MemberName="NewSpellCheckerSession">
      <MemberSignature Language="C#" Value="public Android.Views.TextService.SpellCheckerSession NewSpellCheckerSession (Android.OS.Bundle bundle, Java.Util.Locale locale, Android.Views.TextService.SpellCheckerSession.ISpellCheckerSessionListener listener, bool referToSpellCheckerLanguageSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Views.TextService.SpellCheckerSession NewSpellCheckerSession(class Android.OS.Bundle bundle, class Java.Util.Locale locale, class Android.Views.TextService.SpellCheckerSession/ISpellCheckerSessionListener listener, bool referToSpellCheckerLanguageSettings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("newSpellCheckerSession", "(Landroid/os/Bundle;Ljava/util/Locale;Landroid/view/textservice/SpellCheckerSession$SpellCheckerSessionListener;Z)Landroid/view/textservice/SpellCheckerSession;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.TextService.SpellCheckerSession</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bundle" Type="Android.OS.Bundle" />
        <Parameter Name="locale" Type="Java.Util.Locale" />
        <Parameter Name="listener" Type="Android.Views.TextService.SpellCheckerSession+ISpellCheckerSessionListener" />
        <Parameter Name="referToSpellCheckerLanguageSettings" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bundle">To be added.</param>
        <param name="locale">the locale for the spell checker. If <c>locale</c> is null and
 referToSpellCheckerLanguageSettings is true, the locale specified in Settings will be
 returned. If <c>locale</c> is not null and referToSpellCheckerLanguageSettings is true,
 the locale specified in Settings will be returned only when it is same as <c>locale</c>.
 Exceptionally, when referToSpellCheckerLanguageSettings is true and <c>locale</c> is
 only language (e.g. "en"), the specified locale in Settings (e.g. "en_US") will be
 selected.</param>
        <param name="listener">a spell checker session lister for getting results from a spell checker.</param>
        <param name="referToSpellCheckerLanguageSettings">if true, the session for one of enabled
 languages in settings will be returned.</param>
        <summary>Get a spell checker session for the specified spell checker</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Get a spell checker session for the specified spell checker</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/view/textservice/TextServicesManager.html#newSpellCheckerSession(android.os.Bundle, java.util.Locale, android.view.textservice.SpellCheckerSession.SpellCheckerSessionListener, boolean)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="Added in API level 14" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
