<Namespace Name="Org.Apache.Http.Protocol">
  <Docs>
    <summary><c><see cref="T:Org.Apache.Http.Protocol.HttpRequestExecutor" /></c>
is a processor for the client side,
<c><see cref="T:Org.Apache.Http.Protocol.HttpService" /></c>
for the server side.</summary>
    <remarks>
    HTTP protocol execution framework.

Apart from simply sending and receiving messages, there are a lot
of things to consider when communicating with HTTP. Many details
such as transport encodings or connection management are handled
by setting up or interpreting
<c><see cref="T:Org.Apache.Http.IHeader" /></c> in the messages.
In order to relieve applications from the responsibility of
implementing these nitty-gritty details of the protocol,
HTTP components provides an execution framework that sets up
some of the headers before sending a message, and interprets
headers when a message has been received.
<format type="text/html"><br /></format>
An HTTP <c><see cref="T:Org.Apache.Http.Protocol.IHttpProcessor" /></c>
typically keeps lists of so-called interceptors that will be executed
before a message is sent and after it has been received.
An application should initialize a processor, set up the lists
with the required and desired processors, and then communicate
through that processor. There are four kinds of interceptors,
depending on whether they act on
<c><see cref="T:Org.Apache.Http.IHttpRequestInterceptor" /></c> or
<c><see cref="T:Org.Apache.Http.IHttpResponseInterceptor" /></c>,
on the client or server side:

<format type="text/html"><table border="1" cellpadding="5"><tr><th /><th>Client</th><th>Server</th></tr><tr><th>Request</th><td>prepares headers before a request is sent</td><td>interprets headers when a request is received</td></tr><tr><th>Response</th><td>interprets headers when a response is received</td><td>prepares headers before a response is sent</td></tr></table></format><para tool="javadoc-to-mdoc"><c><see cref="T:Org.Apache.Http.Protocol.HttpRequestExecutor" /></c>
is a processor for the client side,
<c><see cref="T:Org.Apache.Http.Protocol.HttpService" /></c>
for the server side.
On the client side, a <c><see cref="T:Org.Apache.Http.Protocol.HttpContext" /></c>
is used to tie together a request, the response to it, and other data
that might be associated with the request execution. It is passed to
the request executor whenever needed.
</para><para tool="javadoc-to-mdoc"><format type="text/html"><font size="+1"><i>
Information about required and recommended interceptors for the
client side will be provided elsewhere. For the time being, please
refer to the comments in the example applications or ask on
one of the mailing lists.
</i></font></format></para><para tool="javadoc-to-mdoc"><format type="text/html"><b>Note:</b></format>
If you want to develop a server-side application, we recommend that
you implement your application as a servlet running in a servlet engine
like  or full-blown
JSEE container like .
If you prefer to implement a server-side application based on our
<c><see cref="T:Org.Apache.Http.Protocol.HttpService" /></c>, we'll
assume that you know what you're doing and that you don't need
help in figuring out which interceptors need to be configured.
</para></remarks>
  </Docs>
</Namespace>
