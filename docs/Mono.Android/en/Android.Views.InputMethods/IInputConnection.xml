<Type Name="IInputConnection" FullName="Android.Views.InputMethods.IInputConnection">
  <TypeSignature Language="C#" Value="public interface IInputConnection : Android.Runtime.IJavaObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInputConnection implements class Android.Runtime.IJavaObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/view/inputmethod/InputConnection", "", "Android.Views.InputMethods.IInputConnectionInvoker")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="3">
    <summary>The InputConnection interface is the communication channel from an
 <c><see cref="T:Android.Views.InputMethods.InputMethod" /></c> back to the application that is receiving its
 input.</summary>
    <remarks />
    <since version="Added in API level 3" />
  </Docs>
  <Members>
    <Member MemberName="BeginBatchEdit">
      <MemberSignature Language="C#" Value="public bool BeginBatchEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BeginBatchEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("beginBatchEdit", "()Z", "GetBeginBatchEditHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tell the editor that you are starting a batch of editor
 operations.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ClearMetaKeyStates">
      <MemberSignature Language="C#" Value="public bool ClearMetaKeyStates (Android.Views.MetaKeyStates states);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ClearMetaKeyStates(valuetype Android.Views.MetaKeyStates states) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("clearMetaKeyStates", "(I)Z", "GetClearMetaKeyStates_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="states" Type="Android.Views.MetaKeyStates">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="states">The states to be cleared, may be one or more bits as
 per <c><see cref="P:Android.Views.KeyEvent.MetaState" /></c>.</param>
        <summary>Clear the given meta key pressed states in the given input
 connection.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="CommitCompletion">
      <MemberSignature Language="C#" Value="public bool CommitCompletion (Android.Views.InputMethods.CompletionInfo text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CommitCompletion(class Android.Views.InputMethods.CompletionInfo text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("commitCompletion", "(Landroid/view/inputmethod/CompletionInfo;)Z", "GetCommitCompletion_Landroid_view_inputmethod_CompletionInfo_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Android.Views.InputMethods.CompletionInfo" />
      </Parameters>
      <Docs>
        <param name="text">The committed completion.</param>
        <summary>Commit a completion the user has selected from the possible ones
 previously reported to <c><see cref="M:Android.Views.InputMethods.IInputMethodSession.DisplayCompletions(Android.Views.InputMethods.CompletionInfo[])" /></c> or
 <c><see cref="M:Android.Views.InputMethods.InputMethodManager.DisplayCompletions(Android.Views.View, Android.Views.InputMethods.CompletionInfo[])" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="CommitCorrection">
      <MemberSignature Language="C#" Value="public bool CommitCorrection (Android.Views.InputMethods.CorrectionInfo correctionInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CommitCorrection(class Android.Views.InputMethods.CorrectionInfo correctionInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("commitCorrection", "(Landroid/view/inputmethod/CorrectionInfo;)Z", "GetCommitCorrection_Landroid_view_inputmethod_CorrectionInfo_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="correctionInfo" Type="Android.Views.InputMethods.CorrectionInfo" />
      </Parameters>
      <Docs>
        <param name="correctionInfo">Detailed information about the correction.</param>
        <summary>Commit a correction automatically performed on the raw user's input.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 11" />
      </Docs>
    </Member>
    <Member MemberName="CommitText">
      <MemberSignature Language="C#" Value="public bool CommitText (Java.Lang.ICharSequence text, int newCursorPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CommitText(class Java.Lang.ICharSequence text, int32 newCursorPosition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("commitText", "(Ljava/lang/CharSequence;I)Z", "GetCommitText_Ljava_lang_CharSequence_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="newCursorPosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The text to commit. This may include styles.</param>
        <param name="newCursorPosition">The new cursor position around the text,
        in Java characters. If &gt; 0, this is relative to the end
        of the text - 1; if &lt;= 0, this is relative to the start
        of the text. So a value of 1 will always advance the cursor
        to the position after the full text being inserted. Note that
        this means you can't position the cursor within the text,
        because the editor can make modifications to the text
        you are providing so it is not possible to correctly specify
        locations there.</param>
        <summary>Commit text to the text box and set the new cursor position.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="DeleteSurroundingText">
      <MemberSignature Language="C#" Value="public bool DeleteSurroundingText (int beforeLength, int afterLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeleteSurroundingText(int32 beforeLength, int32 afterLength) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("deleteSurroundingText", "(II)Z", "GetDeleteSurroundingText_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftLength" Type="System.Int32" />
        <Parameter Name="rightLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="beforeLength">The number of characters to be deleted before the
        current cursor position.</param>
        <param name="afterLength">The number of characters to be deleted after the
        current cursor position.</param>
        <summary>Delete <format type="text/html"><var>beforeLength</var></format> characters of text before the
 current cursor position, and delete <format type="text/html"><var>afterLength</var></format>
 characters of text after the current cursor position, excluding
 the selection.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="EndBatchEdit">
      <MemberSignature Language="C#" Value="public bool EndBatchEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndBatchEdit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("endBatchEdit", "()Z", "GetEndBatchEditHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tell the editor that you are done with a batch edit previously
 initiated with <c><see cref="!:Android.Views.InputMethods.InputConnection.beginBatchEdit()" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="FinishComposingText">
      <MemberSignature Language="C#" Value="public bool FinishComposingText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FinishComposingText() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("finishComposingText", "()Z", "GetFinishComposingTextHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Have the text editor finish whatever composing text is
 currently active.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetCursorCapsMode">
      <MemberSignature Language="C#" Value="public Android.Text.CapitalizationMode GetCursorCapsMode (Android.Text.CapitalizationMode reqModes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Android.Text.CapitalizationMode GetCursorCapsMode(valuetype Android.Text.CapitalizationMode reqModes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getCursorCapsMode", "(I)I", "GetGetCursorCapsMode_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Text.CapitalizationMode</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reqModes" Type="Android.Text.CapitalizationMode">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reqModes">The desired modes to retrieve, as defined by
 <c><see cref="M:Android.Text.TextUtils.GetCapsMode(Java.Lang.ICharSequence, System.Int32, System.Int32)" /></c>. These
 constants are defined so that you can simply pass the current
 <c><see cref="P:Android.Views.InputMethods.EditorInfo.InputType" /></c> value
 directly in to here.</param>
        <summary>Retrieve the current capitalization mode in effect at the
 current cursor position in the text.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetExtractedText">
      <MemberSignature Language="C#" Value="public Android.Views.InputMethods.ExtractedText GetExtractedText (Android.Views.InputMethods.ExtractedTextRequest request, Android.Views.InputMethods.GetTextFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Views.InputMethods.ExtractedText GetExtractedText(class Android.Views.InputMethods.ExtractedTextRequest request, valuetype Android.Views.InputMethods.GetTextFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getExtractedText", "(Landroid/view/inputmethod/ExtractedTextRequest;I)Landroid/view/inputmethod/ExtractedText;", "GetGetExtractedText_Landroid_view_inputmethod_ExtractedTextRequest_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.InputMethods.ExtractedText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Android.Views.InputMethods.ExtractedTextRequest" />
        <Parameter Name="flags" Type="Android.Views.InputMethods.GetTextFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="request">Description of how the text should be returned.
 <c><see cref="T:Android.Views.InputMethods.ExtractedTextRequest" /></c></param>
        <param name="flags">Additional options to control the client, either 0 or
 <c><see cref="F:Android.Views.InputMethods.InputConnection.GetExtractedTextMonitor" /></c>.</param>
        <summary>Retrieve the current text in the input connection's editor, and
 monitor for any changes to it.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetSelectedTextFormatted">
      <MemberSignature Language="C#" Value="public Java.Lang.ICharSequence GetSelectedTextFormatted (Android.Views.InputMethods.GetTextFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.ICharSequence GetSelectedTextFormatted(valuetype Android.Views.InputMethods.GetTextFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getSelectedText", "(I)Ljava/lang/CharSequence;", "GetGetSelectedText_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="Android.Views.InputMethods.GetTextFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="flags">Supplies additional options controlling how the text is
 returned. May be either 0 or <c><see cref="F:Android.Views.InputMethods.InputConnection.GetTextWithStyles" /></c>.</param>
        <summary>Gets the selected text, if any.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="GetTextAfterCursorFormatted">
      <MemberSignature Language="C#" Value="public Java.Lang.ICharSequence GetTextAfterCursorFormatted (int n, Android.Views.InputMethods.GetTextFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.ICharSequence GetTextAfterCursorFormatted(int32 n, valuetype Android.Views.InputMethods.GetTextFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getTextAfterCursor", "(II)Ljava/lang/CharSequence;", "GetGetTextAfterCursor_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="flags" Type="Android.Views.InputMethods.GetTextFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="n">The expected length of the text.</param>
        <param name="flags">Supplies additional options controlling how the text is
 returned. May be either 0 or <c><see cref="F:Android.Views.InputMethods.InputConnection.GetTextWithStyles" /></c>.</param>
        <summary>Get <format type="text/html"><var>n</var></format> characters of text after the current cursor
 position.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="GetTextBeforeCursorFormatted">
      <MemberSignature Language="C#" Value="public Java.Lang.ICharSequence GetTextBeforeCursorFormatted (int n, Android.Views.InputMethods.GetTextFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.ICharSequence GetTextBeforeCursorFormatted(int32 n, valuetype Android.Views.InputMethods.GetTextFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getTextBeforeCursor", "(II)Ljava/lang/CharSequence;", "GetGetTextBeforeCursor_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.ICharSequence</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="flags" Type="Android.Views.InputMethods.GetTextFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="n">The expected length of the text.</param>
        <param name="flags">Supplies additional options controlling how the text is
 returned. May be either 0 or <c><see cref="F:Android.Views.InputMethods.InputConnection.GetTextWithStyles" /></c>.</param>
        <summary>Get <format type="text/html"><var>n</var></format> characters of text before the current cursor
 position.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PerformContextMenuAction">
      <MemberSignature Language="C#" Value="public bool PerformContextMenuAction (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformContextMenuAction(int32 id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("performContextMenuAction", "(I)Z", "GetPerformContextMenuAction_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">To be added.</param>
        <summary>Perform a context menu action on the field.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PerformEditorAction">
      <MemberSignature Language="C#" Value="public bool PerformEditorAction (Android.Views.InputMethods.ImeAction editorAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformEditorAction(valuetype Android.Views.InputMethods.ImeAction editorAction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("performEditorAction", "(I)Z", "GetPerformEditorAction_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="editorAction" Type="Android.Views.InputMethods.ImeAction">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="editorAction">This must be one of the action constants for
 <c><see cref="P:Android.Views.InputMethods.EditorInfo.ImeOptions" /></c>, such as
 <c><see cref="!:Android.Views.InputMethods.EditorInfo.IME_ACTION_GO" /></c>.</param>
        <summary>Have the editor perform an action it has said it can do.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="PerformPrivateCommand">
      <MemberSignature Language="C#" Value="public bool PerformPrivateCommand (string action, Android.OS.Bundle data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PerformPrivateCommand(string action, class Android.OS.Bundle data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("performPrivateCommand", "(Ljava/lang/String;Landroid/os/Bundle;)Z", "GetPerformPrivateCommand_Ljava_lang_String_Landroid_os_Bundle_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.String" />
        <Parameter Name="data" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="action">Name of the command to be performed. This <i>must</i>
 be a scoped name, i.e. prefixed with a package name you own, so that
 different developers will not create conflicting commands.</param>
        <param name="data">Any data to include with the command.</param>
        <summary>API to send private commands from an input method to its
 connected editor.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="ReportFullscreenMode">
      <MemberSignature Language="C#" Value="public bool ReportFullscreenMode (bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReportFullscreenMode(bool enabled) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("reportFullscreenMode", "(Z)Z", "GetReportFullscreenMode_ZHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enabled">To be added.</param>
        <summary>Called by the IME to tell the client when it switches between
 fullscreen and normal modes.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="RequestCursorUpdates">
      <MemberSignature Language="C#" Value="public bool RequestCursorUpdates (int cursorUpdateMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RequestCursorUpdates(int32 cursorUpdateMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("requestCursorUpdates", "(I)Z", "GetRequestCursorUpdates_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cursorUpdateMode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cursorUpdateMode">
          <c>
            <see cref="!:Android.Views.InputMethods.InputConnection.CURSOR_UPDATE_IMMEDIATE" />
          </c> and/or
 <c><see cref="!:Android.Views.InputMethods.InputConnection.CURSOR_UPDATE_MONITOR" /></c>. Pass <c>0</c> to disable the effect of
 <c><see cref="!:Android.Views.InputMethods.InputConnection.CURSOR_UPDATE_MONITOR" /></c>.</param>
        <summary>Called by the input method to ask the editor for calling back
 <c><see cref="M:Android.Views.InputMethods.InputMethodManager.UpdateCursorAnchorInfo(Android.Views.View, Android.Views.InputMethods.CursorAnchorInfo)" /></c> to
 notify cursor/anchor locations.</summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SendKeyEvent">
      <MemberSignature Language="C#" Value="public bool SendKeyEvent (Android.Views.KeyEvent e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SendKeyEvent(class Android.Views.KeyEvent e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("sendKeyEvent", "(Landroid/view/KeyEvent;)Z", "GetSendKeyEvent_Landroid_view_KeyEvent_Handler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Android.Views.KeyEvent" />
      </Parameters>
      <Docs>
        <param name="e">The key event.</param>
        <summary>Send a key event to the process that is currently attached
 through this input connection.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
        <altmember cref="T:Android.Views.KeyEvent" />
      </Docs>
    </Member>
    <Member MemberName="SetComposingRegion">
      <MemberSignature Language="C#" Value="public bool SetComposingRegion (int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetComposingRegion(int32 start, int32 end) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setComposingRegion", "(II)Z", "GetSetComposingRegion_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">the position in the text at which the composing region begins</param>
        <param name="end">the position in the text at which the composing region ends</param>
        <summary>Mark a certain region of text as composing text.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 9" />
      </Docs>
    </Member>
    <Member MemberName="SetComposingText">
      <MemberSignature Language="C#" Value="public bool SetComposingText (Java.Lang.ICharSequence text, int newCursorPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetComposingText(class Java.Lang.ICharSequence text, int32 newCursorPosition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setComposingText", "(Ljava/lang/CharSequence;I)Z", "GetSetComposingText_Ljava_lang_CharSequence_IHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="Java.Lang.ICharSequence" />
        <Parameter Name="newCursorPosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The composing text with styles if necessary. If no style
        object attached to the text, the default style for composing text
        is used. See <c><see cref="T:Android.Text.ISpanned" /></c> for how to attach style
        object to the text. <c><see cref="T:Android.Text.SpannableString" /></c> and
        <c><see cref="T:Android.Text.SpannableStringBuilder" /></c> are two
        implementations of the interface <c><see cref="T:Android.Text.ISpanned" /></c>.</param>
        <param name="newCursorPosition">The new cursor position around the text. If
        &gt; 0, this is relative to the end of the text - 1; if &lt;= 0, this
        is relative to the start of the text. So a value of 1 will
        always advance you to the position after the full text being
        inserted. Note that this means you can't position the cursor
        within the text, because the editor can make modifications to
        the text you are providing so it is not possible to correctly
        specify locations there.</param>
        <summary>Replace the currently composing text with the given text, and
 set the new cursor position.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
    <Member MemberName="SetSelection">
      <MemberSignature Language="C#" Value="public bool SetSelection (int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetSelection(int32 start, int32 end) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("setSelection", "(II)Z", "GetSetSelection_IIHandler:Android.Views.InputMethods.IInputConnectionInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">the character index where the selection should start.</param>
        <param name="end">the character index where the selection should end.</param>
        <summary>Set the selection of the text editor.</summary>
        <returns>To be added.</returns>
        <remarks />
        <since version="Added in API level 3" />
      </Docs>
    </Member>
  </Members>
</Type>
