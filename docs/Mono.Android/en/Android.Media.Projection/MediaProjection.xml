<Type Name="MediaProjection" FullName="Android.Media.Projection.MediaProjection">
  <TypeSignature Language="C#" Value="public sealed class MediaProjection : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MediaProjection extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/media/projection/MediaProjection", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="21">
    <summary>A token granting applications the ability to capture screen contents and/or
 record system audio.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">A token granting applications the ability to capture screen contents and/or
 record system audio. The exact capabilities granted depend on the type of
 MediaProjection.

 </para>
      <para tool="javadoc-to-mdoc">
 A screen capture session can be started through <c><see cref="M:Android.Media.Projection.MediaProjectionManager.CreateScreenCaptureIntent" /></c>. This grants the ability to
 capture screen contents, but not system audio.
 </para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/media/projection/MediaProjection.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateVirtualDisplay">
      <MemberSignature Language="C#" Value="public Android.Hardware.Display.VirtualDisplay CreateVirtualDisplay (string name, int width, int height, int dpi, Android.Views.DisplayFlags flags, Android.Views.Surface surface, Android.Hardware.Display.VirtualDisplay.Callback callback, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Android.Hardware.Display.VirtualDisplay CreateVirtualDisplay(string name, int32 width, int32 height, int32 dpi, valuetype Android.Views.DisplayFlags flags, class Android.Views.Surface surface, class Android.Hardware.Display.VirtualDisplay/Callback callback, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("createVirtualDisplay", "(Ljava/lang/String;IIIILandroid/view/Surface;Landroid/hardware/display/VirtualDisplay$Callback;Landroid/os/Handler;)Landroid/hardware/display/VirtualDisplay;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Hardware.Display.VirtualDisplay</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="dpi" Type="System.Int32" />
        <Parameter Name="flags" Type="Android.Views.DisplayFlags">
          <Attributes>
            <Attribute>
              <AttributeName>Android.Runtime.GeneratedEnum</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="surface" Type="Android.Views.Surface" />
        <Parameter Name="callback" Type="Android.Hardware.Display.VirtualDisplay+Callback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="name">The name of the virtual display, must be non-empty.</param>
        <param name="width">The width of the virtual display in pixels. Must be
 greater than 0.</param>
        <param name="height">The height of the virtual display in pixels. Must be
 greater than 0.</param>
        <param name="dpi">The density of the virtual display in dpi. Must be greater
 than 0.</param>
        <param name="flags">A combination of virtual display flags. See <c><see cref="T:Android.Hardware.Display.DisplayManager" /></c> for the full
 list of flags.</param>
        <param name="surface">The surface to which the content of the virtual display
 should be rendered, or null if there is none initially.</param>
        <param name="callback">Callback to call when the virtual display's state
 changes, or null if none.</param>
        <param name="handler">The <c><see cref="T:Android.OS.Handler" /></c> on which the callback should be
 invoked, or null if the callback should be invoked on the calling
 thread's main <c><see cref="T:Android.OS.Looper" /></c>.</param>
        <summary>Creates a <c><see cref="T:Android.Hardware.Display.VirtualDisplay" /></c> to capture the
 contents of the screen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Creates a <c><see cref="T:Android.Hardware.Display.VirtualDisplay" /></c> to capture the
 contents of the screen.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/projection/MediaProjection.html#createVirtualDisplay(java.lang.String, int, int, int, int, android.view.Surface, android.hardware.display.VirtualDisplay.Callback, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="T:Android.Hardware.Display.VirtualDisplay" />
      </Docs>
    </Member>
    <Member MemberName="RegisterCallback">
      <MemberSignature Language="C#" Value="public void RegisterCallback (Android.Media.Projection.MediaProjection.Callback callback, Android.OS.Handler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterCallback(class Android.Media.Projection.MediaProjection/Callback callback, class Android.OS.Handler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("registerCallback", "(Landroid/media/projection/MediaProjection$Callback;Landroid/os/Handler;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Media.Projection.MediaProjection+Callback" />
        <Parameter Name="handler" Type="Android.OS.Handler" />
      </Parameters>
      <Docs>
        <param name="callback">The callback to call.</param>
        <param name="handler">The handler on which the callback should be invoked, or
 null if the callback should be invoked on the calling thread's looper.</param>
        <summary>Register a listener to receive notifications about when the <c><see cref="T:Android.Media.Projection.MediaProjection" /></c> changes state.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Register a listener to receive notifications about when the <c><see cref="T:Android.Media.Projection.MediaProjection" /></c> changes state.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/projection/MediaProjection.html#registerCallback(android.media.projection.MediaProjection.Callback, android.os.Handler)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Media.Projection.MediaProjection.UnregisterCallback(.Callback)" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("stop", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops projection.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Stops projection.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/projection/MediaProjection.html#stop()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterCallback">
      <MemberSignature Language="C#" Value="public void UnregisterCallback (Android.Media.Projection.MediaProjection.Callback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterCallback(class Android.Media.Projection.MediaProjection/Callback callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("unregisterCallback", "(Landroid/media/projection/MediaProjection$Callback;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Android.Media.Projection.MediaProjection+Callback" />
      </Parameters>
      <Docs>
        <param name="callback">The callback to unregister.</param>
        <summary>Unregister a MediaProjection listener.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Unregister a MediaProjection listener.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/media/projection/MediaProjection.html#unregisterCallback(android.media.projection.MediaProjection.Callback)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <altmember cref="M:Android.Media.Projection.MediaProjection.RegisterCallback(.Callback, Android.OS.Handler)" />
      </Docs>
    </Member>
  </Members>
</Type>
