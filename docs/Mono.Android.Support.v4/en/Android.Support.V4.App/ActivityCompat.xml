<Type Name="ActivityCompat" FullName="Android.Support.V4.App.ActivityCompat">
  <TypeSignature Language="C#" Value="public class ActivityCompat : Android.Support.V4.Content.ContextCompat" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ActivityCompat extends Android.Support.V4.Content.ContextCompat" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android.Support.v4</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Support.V4.Content.ContextCompat</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/support/v4/app/ActivityCompat", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Helper for accessing features in <c><see cref="T:Android.App.Activity" /></c>
 introduced after API level 4 in a backwards compatible fashion.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Helper for accessing features in <c><see cref="T:Android.App.Activity" /></c>
 introduced after API level 4 in a backwards compatible fashion.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/support/v4/app/ActivityCompat.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ActivityCompat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/app/ActivityCompat.html#ActivityCompat()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ActivityCompat (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T}(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateOptionsMenu">
      <MemberSignature Language="C#" Value="public static bool InvalidateOptionsMenu (Android.App.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool InvalidateOptionsMenu(class Android.App.Activity activity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("invalidateOptionsMenu", "(Landroid/app/Activity;)Z", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
      </Parameters>
      <Docs>
        <param name="activity">Invalidate the options menu of this activity</param>
        <summary>Invalidate the activity's options menu, if able.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Invalidate the activity's options menu, if able.

 </para>
          <para tool="javadoc-to-mdoc">Before API level 11 (Android 3.0/Honeycomb) the lifecycle of the
 options menu was controlled primarily by the user's operation of
 the hardware menu key. When the user presses down on the menu key
 for the first time the menu was created and prepared by calls
 to <c><see cref="M:Android.App.Activity.OnCreateOptionsMenu(Android.Views.IMenu)" /></c> and
 <c><see cref="M:Android.App.Activity.OnPrepareOptionsMenu(Android.Views.IMenu)" /></c> respectively.
 Subsequent presses of the menu key kept the existing instance of the
 Menu itself and called <c><see cref="M:Android.App.Activity.OnPrepareOptionsMenu(Android.Views.IMenu)" /></c>
 to give the activity an opportunity to contextually alter the menu
 before the menu panel was shown.</para>
          <para tool="javadoc-to-mdoc">In Android 3.0+ the Action Bar forces the options menu to be built early
 so that items chosen to show as actions may be displayed when the activity
 first becomes visible. The Activity method invalidateOptionsMenu forces
 the entire menu to be destroyed and recreated from
 <c><see cref="M:Android.App.Activity.OnCreateOptionsMenu(Android.Views.IMenu)" /></c>, offering a similar
 though heavier-weight opportunity to change the menu's contents. Normally
 this functionality is used to support a changing configuration of Fragments.</para>
          <para tool="javadoc-to-mdoc">Applications may use this support helper to signal a significant change in
 activity state that should cause the options menu to be rebuilt. If the app
 is running on an older platform version that does not support menu invalidation
 the app will still receive <c><see cref="M:Android.App.Activity.OnPrepareOptionsMenu(Android.Views.IMenu)" /></c>
 the next time the user presses the menu key and this method will return false.
 If this method returns true the options menu was successfully invalidated.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/app/ActivityCompat.html#invalidateOptionsMenu(android.app.Activity)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="StartActivity">
      <MemberSignature Language="C#" Value="public static void StartActivity (Android.App.Activity activity, Android.Content.Intent intent, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartActivity(class Android.App.Activity activity, class Android.Content.Intent intent, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivity", "(Landroid/app/Activity;Landroid/content/Intent;Landroid/os/Bundle;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="activity">Context to launch activity from.</param>
        <param name="intent">The description of the activity to start.</param>
        <param name="options">Additional options for how the Activity should be started.
                May be null if there are no options. See
                <c><see cref="T:Android.Support.V4.App.ActivityOptionsCompat" /></c> for how to build the Bundle
                supplied here; there are no supported definitions for
                building it manually.
</param>
        <summary>Start an activity with additional launch information, if able.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Start an activity with additional launch information, if able.

 </para>
          <para tool="javadoc-to-mdoc">In Android 4.1+ additional options were introduced to allow for more
 control on activity launch animations. Applications can use this method
 along with <c><see cref="T:Android.Support.V4.App.ActivityOptionsCompat" /></c> to use these animations when
 available. When run on versions of the platform where this feature does
 not exist the activity will be launched normally.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/app/ActivityCompat.html#startActivity(android.app.Activity, android.content.Intent, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="StartActivityForResult">
      <MemberSignature Language="C#" Value="public static void StartActivityForResult (Android.App.Activity activity, Android.Content.Intent intent, int requestCode, Android.OS.Bundle options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartActivityForResult(class Android.App.Activity activity, class Android.Content.Intent intent, int32 requestCode, class Android.OS.Bundle options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("startActivityForResult", "(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="Android.App.Activity" />
        <Parameter Name="intent" Type="Android.Content.Intent" />
        <Parameter Name="requestCode" Type="System.Int32" />
        <Parameter Name="options" Type="Android.OS.Bundle" />
      </Parameters>
      <Docs>
        <param name="activity">Origin activity to launch from.</param>
        <param name="intent">The description of the activity to start.</param>
        <param name="requestCode">If &gt;= 0, this code will be returned in
                   onActivityResult() when the activity exits.</param>
        <param name="options">Additional options for how the Activity should be started.
                May be null if there are no options. See
                <c><see cref="T:Android.Support.V4.App.ActivityOptionsCompat" /></c> for how to build the Bundle
                supplied here; there are no supported definitions for
                building it manually.
</param>
        <summary>Start new activity with options, if able, for which you would like a
 result when it finished.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Start new activity with options, if able, for which you would like a
 result when it finished.

 </para>
          <para tool="javadoc-to-mdoc">In Android 4.1+ additional options were introduced to allow for more
 control on activity launch animations. Applications can use this method
 along with <c><see cref="T:Android.Support.V4.App.ActivityOptionsCompat" /></c> to use these animations when
 available. When run on versions of the platform where this feature does
 not exist the activity will be launched normally.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/app/ActivityCompat.html#startActivityForResult(android.app.Activity, android.content.Intent, int, android.os.Bundle)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
