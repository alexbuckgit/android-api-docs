<Type Name="FileProvider" FullName="Android.Support.V4.Content.FileProvider">
  <TypeSignature Language="C#" Value="public class FileProvider : Android.Content.ContentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileProvider extends Android.Content.ContentProvider" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android.Support.v4</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Android.Content.ContentProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/support/v4/content/FileProvider", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provider to support easy sharing of private files between apps.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Provider to support easy sharing of private files between apps. When paired
 with features like <c><see cref="M:Android.Content.Context.GrantUriPermission(System.String, Android.Net.Uri, Android.Net.Uri)" /></c> or
 <c><see cref="F:Android.Content.ActivityFlags.GrantReadUriPermission" /></c>, this provider ensures that
 receiving apps can always open the underlying file.
 </para>
      <para tool="javadoc-to-mdoc">
 Apps should generally avoid sending raw filesystem paths across process
 boundaries, since the receiving app may not have the same access as the
 sender. Instead, apps should send <c><see cref="T:Android.Net.Uri" /></c> backed by a provider like
 <c><see cref="T:Android.Support.V4.Content.FileProvider" /></c>.
 </para>
      <para tool="javadoc-to-mdoc">
 To use this provider, add it to your manifest:
 </para>
      <para tool="javadoc-to-mdoc">
        <sample external-id="EFF522439D4CF9F857638B2A4560804C" />
      </para>
      <para tool="javadoc-to-mdoc">
 And define one or more filesystem paths your provider should support in an
 XML resource. This provider will only support files which exist under these
 defined paths.
 </para>
      <para tool="javadoc-to-mdoc">
        <sample external-id="B73D48F256B007B725B8827645638123" />
      </para>
      <para tool="javadoc-to-mdoc">
 Then use <c><see cref="M:Android.Support.V4.Content.FileProvider.GetUriForFile(Android.Content.Context, System.String, System.String)" /></c> at runtime to generate
 a <c><see cref="T:Android.Net.Uri" /></c> backed by the provider. Since the provider is not exported,
 these <c><see cref="T:Android.Net.Uri" /></c> can only be accessed by other apps when you explicitly
 grant access.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/support/v4/content/FileProvider.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register(".ctor", "()V", "")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
          <para tool="javadoc-to-mdoc" />
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/FileProvider.html#FileProvider()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FileProvider (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject``1(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public override int Delete (Android.Net.Uri uri, string selection, string[] selectionArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Delete(class Android.Net.Uri uri, string selection, string[] selectionArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("delete", "(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I", "GetDelete_Landroid_net_Uri_Ljava_lang_String_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="uri">The full URI to query, including a row ID (if a specific record is requested).</param>
        <param name="selection">An optional restriction to apply to rows when deleting.</param>
        <param name="selectionArgs">To be added.</param>
        <summary>Implement this to handle requests to delete one or more rows.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this to handle requests to delete one or more rows.
 The implementation should apply the selection clause when performing
 deletion, allowing the operation to affect multiple rows in a directory.
 As a courtesy, call <c><see cref="M:Android.Content.ContentResolver.NotifyChange(Android.Net.Uri, Android.Database.ContentObserver)" /></c>
 after deleting.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.

 </para>
          <para tool="javadoc-to-mdoc">The implementation is responsible for parsing out a row ID at the end
 of the URI, if a specific row is being deleted. That is, the client would
 pass in <c>content://contacts/people/22</c> and the implementation is
 responsible for parsing the record number (22) when creating a SQL statement.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/FileProvider.html#delete(android.net.Uri, java.lang.String, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public override string GetType (Android.Net.Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetType(class Android.Net.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getType", "(Landroid/net/Uri;)Ljava/lang/String;", "GetGetType_Landroid_net_Uri_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">the URI to query.</param>
        <summary>Implement this to handle requests for the MIME type of the data at the
 given URI.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this to handle requests for the MIME type of the data at the
 given URI.  The returned MIME type should start with
 <c>vnd.android.cursor.item</c> for a single record,
 or <c>vnd.android.cursor.dir/</c> for multiple items.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.

 </para>
          <para tool="javadoc-to-mdoc">Note that there are no permissions needed for an application to
 access this information; if your content provider requires read and/or
 write permissions, or is not exported, all applications can still call
 this method regardless of their access permissions.  This allows them
 to retrieve the MIME type for a URI when dispatching intents.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/FileProvider.html#getType(android.net.Uri)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="GetUriForFile">
      <MemberSignature Language="C#" Value="public static Android.Net.Uri GetUriForFile (Android.Content.Context context, string authority, Java.IO.File file);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Net.Uri GetUriForFile(class Android.Content.Context context, string authority, class Java.IO.File file) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("getUriForFile", "(Landroid/content/Context;Ljava/lang/String;Ljava/io/File;)Landroid/net/Uri;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Android.Content.Context" />
        <Parameter Name="authority" Type="System.String" />
        <Parameter Name="file" Type="Java.IO.File" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="authority">The authority of a <c><see cref="T:Android.Support.V4.Content.FileProvider" /></c> defined as a
            <c>&lt;provider&gt;</c> in your manifest.</param>
        <param name="file">To be added.</param>
        <summary>Return a <c><see cref="T:Android.Net.Uri" /></c> that provides access to the given <c><see cref="T:Java.IO.File" /></c>.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Return a <c><see cref="T:Android.Net.Uri" /></c> that provides access to the given <c><see cref="T:Java.IO.File" /></c>. The
 returned <c><see cref="T:Android.Net.Uri" /></c> can be used with features like
 <c><see cref="M:Android.Content.Context.GrantUriPermission(System.String, Android.Net.Uri, Android.Net.Uri)" /></c> or
 <c><see cref="F:Android.Content.ActivityFlags.GrantReadUriPermission" /></c> to allow other apps to
 access private files. Providers only support files which exist under
 filesystem paths defined in their <c>&lt;meta-data&gt;</c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/FileProvider.html#getUriForFile(android.content.Context, java.lang.String, java.io.File)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
        <exception cref="T:Java.Lang.IllegalArgumentException">When the given <c><see cref="T:Java.IO.File" /></c> is outside
             the paths supported by the provider.
</exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public override Android.Net.Uri Insert (Android.Net.Uri uri, Android.Content.ContentValues values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Net.Uri Insert(class Android.Net.Uri uri, class Android.Content.ContentValues values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("insert", "(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;", "GetInsert_Landroid_net_Uri_Landroid_content_ContentValues_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Net.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="values" Type="Android.Content.ContentValues" />
      </Parameters>
      <Docs>
        <param name="uri">The content:// URI of the insertion request. This must not be <c>null</c>.</param>
        <param name="values">A set of column_name/value pairs to add to the database.
     This must not be <c>null</c>.</param>
        <summary>Implement this to handle requests to insert a new row.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this to handle requests to insert a new row.
 As a courtesy, call <c><see cref="M:Android.Content.ContentResolver.NotifyChange(Android.Net.Uri, Android.Database.ContentObserver)" /></c>
 after inserting.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/FileProvider.html#insert(android.net.Uri, android.content.ContentValues)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="OnCreate">
      <MemberSignature Language="C#" Value="public override bool OnCreate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool OnCreate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("onCreate", "()Z", "GetOnCreateHandler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Implement this to initialize your content provider on startup.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this to initialize your content provider on startup.
 This method is called for all registered content providers on the
 application main thread at application launch time.  It must not perform
 lengthy operations, or application startup will be delayed.

 </para>
          <para tool="javadoc-to-mdoc">You should defer nontrivial initialization (such as opening,
 upgrading, and scanning databases) until the content provider is used
 (via <c><see cref="M:Android.Content.ContentProvider.Query(Android.Net.Uri, System.String[], System.String[], System.String[], System.String[])" /></c>, <c><see cref="M:Android.Content.ContentProvider.Insert(Android.Net.Uri, Android.Content.ContentValues)" /></c>, etc).  Deferred initialization
 keeps application startup fast, avoids unnecessary work if the provider
 turns out not to be needed, and stops database errors (such as a full
 disk) from halting application launch.

 </para>
          <para tool="javadoc-to-mdoc">If you use SQLite, <c><see cref="T:Android.Database.Sqlite.SQLiteOpenHelper" /></c>
 is a helpful utility class that makes it easy to manage databases,
 and will automatically defer opening until first use.  If you do use
 SQLiteOpenHelper, make sure to avoid calling
 <c><see cref="P:Android.Database.Sqlite.SQLiteOpenHelper.ReadableDatabase" /></c> or
 <c><see cref="P:Android.Database.Sqlite.SQLiteOpenHelper.WritableDatabase" /></c>
 from this method.  (Instead, override
 <c><see cref="M:Android.Database.Sqlite.SQLiteOpenHelper.OnOpen(Android.Database.Sqlite.SQLiteDatabase)" /></c> to initialize the
 database when it is first opened.)</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/FileProvider.html#onCreate()" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public override Android.Database.ICursor Query (Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Android.Database.ICursor Query(class Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("query", "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;", "GetQuery_Landroid_net_Uri_arrayLjava_lang_String_Ljava_lang_String_arrayLjava_lang_String_Ljava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Database.ICursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="projection" Type="System.String[]" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
        <Parameter Name="sortOrder" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to query. This will be the full URI sent by the client;
      if the client is requesting a specific record, the URI will end in a record number
      that the implementation should parse and add to a WHERE or HAVING clause, specifying
      that _id value.</param>
        <param name="projection">The list of columns to put into the cursor. If
      <c>null</c> all columns are included.</param>
        <param name="selection">A selection criteria to apply when filtering rows.
      If <c>null</c> then all rows are included.</param>
        <param name="selectionArgs">You may include ?s in selection, which will be replaced by
      the values from selectionArgs, in order that they appear in the selection.
      The values will be bound as Strings.</param>
        <param name="sortOrder">How the rows in the cursor should be sorted.
      If <c>null</c> then the provider is free to define the sort order.</param>
        <summary>Implement this to handle query requests from clients.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this to handle query requests from clients.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.
 </para>
          <para tool="javadoc-to-mdoc">
 Example client call:</para>
          <para tool="javadoc-to-mdoc">
            <example>
              <code lang="java">// Request a specific record.
 Cursor managedCursor = managedQuery(
                ContentUris.withAppendedId(Contacts.People.CONTENT_URI, 2),
                projection,    // Which columns to return.
                null,          // WHERE clause.
                null,          // WHERE clause value substitution
                People.NAME + " ASC");   // Sort order.</code>
            </example>
 Example implementation:</para>
          <para tool="javadoc-to-mdoc">
            <example>
              <code lang="java">// SQLiteQueryBuilder is a helper class that creates the
        // proper SQL syntax for us.
        SQLiteQueryBuilder qBuilder = new SQLiteQueryBuilder();

        // Set the table we're querying.
        qBuilder.setTables(DATABASE_TABLE_NAME);

        // If the query ends in a specific record number, we're
        // being asked for a specific record, so set the
        // WHERE clause in our query.
        if((URI_MATCHER.match(uri)) == SPECIFIC_MESSAGE){
            qBuilder.appendWhere("_id=" + uri.getPathLeafId());
        }

        // Make the query.
        Cursor c = qBuilder.query(mDb,
                projection,
                selection,
                selectionArgs,
                groupBy,
                having,
                sortOrder);
        c.setNotificationUri(getContext().getContentResolver(), uri);
        return c;</code>
            </example>
          </para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/FileProvider.html#query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override int Update (Android.Net.Uri uri, Android.Content.ContentValues values, string selection, string[] selectionArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Update(class Android.Net.Uri uri, class Android.Content.ContentValues values, string selection, string[] selectionArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("update", "(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I", "GetUpdate_Landroid_net_Uri_Landroid_content_ContentValues_Ljava_lang_String_arrayLjava_lang_String_Handler")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="Android.Net.Uri" />
        <Parameter Name="values" Type="Android.Content.ContentValues" />
        <Parameter Name="selection" Type="System.String" />
        <Parameter Name="selectionArgs" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="uri">The URI to query. This can potentially have a record ID if this
 is an update request for a specific record.</param>
        <param name="values">A set of column_name/value pairs to update in the database.
     This must not be <c>null</c>.</param>
        <param name="selection">An optional filter to match rows to update.</param>
        <param name="selectionArgs">To be added.</param>
        <summary>Implement this to handle requests to update one or more rows.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Implement this to handle requests to update one or more rows.
 The implementation should update all rows matching the selection
 to set the columns according to the provided values map.
 As a courtesy, call <c><see cref="M:Android.Content.ContentResolver.NotifyChange(Android.Net.Uri, Android.Database.ContentObserver)" /></c>
 after updating.
 This method can be called from multiple threads, as described in
 <format type="text/html"><a href="http://developer.android.com/reference/../guide/topics/fundamentals/processes-and-threads.html#Threads">Processes
 and Threads</a></format>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/FileProvider.html#update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
  </Members>
</Type>
