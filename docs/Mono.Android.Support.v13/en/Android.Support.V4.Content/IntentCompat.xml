<Type Name="IntentCompat" FullName="Android.Support.V4.Content.IntentCompat">
  <TypeSignature Language="C#" Value="public class IntentCompat : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IntentCompat extends Java.Lang.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android.Support.v13</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Android.Runtime.Register("android/support/v4/content/IntentCompat", DoNotGenerateAcw=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Helper for accessing features in <c><see cref="T:Android.Content.Intent" /></c>
 introduced after API level 4 in a backwards compatible fashion.</summary>
    <remarks>
      <para tool="javadoc-to-mdoc">Helper for accessing features in <c><see cref="T:Android.Content.Intent" /></c>
 introduced after API level 4 in a backwards compatible fashion.
</para>
      <para tool="javadoc-to-mdoc">
        <format type="text/html">
          <a href="http://developer.android.com/reference/android/support/v4/content/IntentCompat.html" target="_blank">[Android Documentation]</a>
        </format>
      </para>
    </remarks>
    <since version="" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected IntentCompat (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">A <see cref="T:System.IntPtr" />containing a Java Native Interface (JNI) object reference.</param>
        <param name="transfer">A <see cref="T:Android.Runtime.JniHandleOwnership" />indicating how to handle <paramref name="javaReference" /></param>
        <summary>A constructor used when creating managed representations of JNI objects; called by the runtime.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This constructor is invoked by the runtime infrastructure (<see cref="M:Java.Lang.Object.GetObject{T}(System.IntPtr,Android.Runtime.JniHandleOwnership)" />) to create a new managed representation for a Java Native Interface object.</para>
          <para tool="javadoc-to-mdoc">The constructor will initializes the <see cref="P:Android.Runtime.IJavaObject.Handle" /> property of the new instance using <paramref name="javaReference" /> and <paramref name="transfer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionExternalApplicationsAvailable">
      <MemberSignature Language="C#" Value="public const string ActionExternalApplicationsAvailable;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionExternalApplicationsAvailable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_EXTERNAL_APPLICATIONS_AVAILABLE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast Action: Resources for a set of packages (which were
 previously unavailable) are currently
 available since the media on which they exist is available.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Broadcast Action: Resources for a set of packages (which were
 previously unavailable) are currently
 available since the media on which they exist is available.
 The extra data <c><see cref="F:Android.Support.V4.Content.IntentCompat.ExtraChangedPackageList" /></c> contains a
 list of packages whose availability changed.
 The extra data <c><see cref="F:Android.Support.V4.Content.IntentCompat.ExtraChangedUidList" /></c> contains a
 list of uids of packages whose availability changed.
 Note that the
 packages in this list do <i>not</i> receive this broadcast.
 The specified set of packages are now available on the system.
 </para>
          <para tool="javadoc-to-mdoc">Includes the following extras:
 <list type="bullet"><item><term><c><see cref="F:Android.Support.V4.Content.IntentCompat.ExtraChangedPackageList" /></c> is the set of packages
 whose resources(were previously unavailable) are currently available.
 <c><see cref="F:Android.Support.V4.Content.IntentCompat.ExtraChangedUidList" /></c> is the set of uids of the
 packages whose resources(were previously unavailable)
 are  currently available.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">This is a protected intent that can only be sent
 by the system.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/IntentCompat.html#ACTION_EXTERNAL_APPLICATIONS_AVAILABLE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="ActionExternalApplicationsUnavailable">
      <MemberSignature Language="C#" Value="public const string ActionExternalApplicationsUnavailable;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ActionExternalApplicationsUnavailable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Broadcast Action: Resources for a set of packages are currently
 unavailable since the media on which they exist is unavailable.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">Broadcast Action: Resources for a set of packages are currently
 unavailable since the media on which they exist is unavailable.
 The extra data <c><see cref="F:Android.Support.V4.Content.IntentCompat.ExtraChangedPackageList" /></c> contains a
 list of packages whose availability changed.
 The extra data <c><see cref="F:Android.Support.V4.Content.IntentCompat.ExtraChangedUidList" /></c> contains a
 list of uids of packages whose availability changed.
 The specified set of packages can no longer be
 launched and are practically unavailable on the system.
 </para>
          <para tool="javadoc-to-mdoc">Inclues the following extras:
 <list type="bullet"><item><term><c><see cref="F:Android.Support.V4.Content.IntentCompat.ExtraChangedPackageList" /></c> is the set of packages
 whose resources are no longer available.
 <c><see cref="F:Android.Support.V4.Content.IntentCompat.ExtraChangedUidList" /></c> is the set of packages
 whose resources are no longer available.
 </term></item></list></para>
          <para tool="javadoc-to-mdoc">This is a protected intent that can only be sent
 by the system.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/IntentCompat.html#ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="ExtraChangedPackageList">
      <MemberSignature Language="C#" Value="public const string ExtraChangedPackageList;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraChangedPackageList" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_CHANGED_PACKAGE_LIST")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This field is part of
 <c><see cref="F:Android.Content.Intent.ActionExternalApplicationsAvailable" /></c>,
 <c><see cref="F:Android.Content.Intent.ActionExternalApplicationsUnavailable" /></c>
 and contains a string array of all of the components that have changed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This field is part of
 <c><see cref="F:Android.Content.Intent.ActionExternalApplicationsAvailable" /></c>,
 <c><see cref="F:Android.Content.Intent.ActionExternalApplicationsUnavailable" /></c>
 and contains a string array of all of the components that have changed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/IntentCompat.html#EXTRA_CHANGED_PACKAGE_LIST" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="ExtraChangedUidList">
      <MemberSignature Language="C#" Value="public const string ExtraChangedUidList;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraChangedUidList" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_CHANGED_UID_LIST")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This field is part of
 <c><see cref="F:Android.Content.Intent.ActionExternalApplicationsAvailable" /></c>,
 <c><see cref="F:Android.Content.Intent.ActionExternalApplicationsUnavailable" /></c>
 and contains an integer array of uids of all of the components
 that have changed.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">This field is part of
 <c><see cref="F:Android.Content.Intent.ActionExternalApplicationsAvailable" /></c>,
 <c><see cref="F:Android.Content.Intent.ActionExternalApplicationsUnavailable" /></c>
 and contains an integer array of uids of all of the components
 that have changed.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/IntentCompat.html#EXTRA_CHANGED_UID_LIST" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="ExtraHtmlText">
      <MemberSignature Language="C#" Value="public const string ExtraHtmlText;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ExtraHtmlText" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("EXTRA_HTML_TEXT")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A constant String that is associated with the Intent, used with
 <c><see cref="F:Android.Content.Intent.ActionSend" /></c> to supply an alternative to
 <c><see cref="F:Android.Content.Intent.ExtraText" /></c>
 as HTML formatted text.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">A constant String that is associated with the Intent, used with
 <c><see cref="F:Android.Content.Intent.ActionSend" /></c> to supply an alternative to
 <c><see cref="F:Android.Content.Intent.ExtraText" /></c>
 as HTML formatted text.  Note that you <i>must</i> also supply
 <c><see cref="F:Android.Content.Intent.ExtraText" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/IntentCompat.html#EXTRA_HTML_TEXT" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="FlagActivityClearTask">
      <MemberSignature Language="C#" Value="public const int FlagActivityClearTask = 32768;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 FlagActivityClearTask = (32768)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_ACTIVITY_CLEAR_TASK")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>32768</MemberValue>
      <Docs>
        <summary>If set in an Intent passed to <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" /></c>,
 this flag will cause any existing task that would be associated with the
 activity to be cleared before the activity is started.</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If set in an Intent passed to <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" /></c>,
 this flag will cause any existing task that would be associated with the
 activity to be cleared before the activity is started.  That is, the activity
 becomes the new root of an otherwise empty task, and any old activities
 are finished.  This can only be used in conjunction with
 <c><see cref="F:Android.Content.ActivityFlags.NewTask" /></c>.

 </para>
          <para tool="javadoc-to-mdoc">This flag will only be obeyed on devices supporting API 11 or higher.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/IntentCompat.html#FLAG_ACTIVITY_CLEAR_TASK" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="FlagActivityTaskOnHome">
      <MemberSignature Language="C#" Value="public const int FlagActivityTaskOnHome = 16384;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 FlagActivityTaskOnHome = (16384)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("FLAG_ACTIVITY_TASK_ON_HOME")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>16384</MemberValue>
      <Docs>
        <summary>If set in an Intent passed to <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" /></c>,
 this flag will cause a newly launching task to be placed on top of the current
 home activity task (if there is one).</summary>
        <remarks>
          <para tool="javadoc-to-mdoc">If set in an Intent passed to <c><see cref="M:Android.Content.Context.StartActivity(Android.Content.Intent)" /></c>,
 this flag will cause a newly launching task to be placed on top of the current
 home activity task (if there is one). That is, pressing back from the task
 will always return the user to home even if that was not the last activity they
 saw. This can only be used in conjunction with
 <c><see cref="F:Android.Content.ActivityFlags.NewTask" /></c>.
</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/IntentCompat.html#FLAG_ACTIVITY_TASK_ON_HOME" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="MakeMainActivity">
      <MemberSignature Language="C#" Value="public static Android.Content.Intent MakeMainActivity (Android.Content.ComponentName mainActivity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Content.Intent MakeMainActivity(class Android.Content.ComponentName mainActivity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("makeMainActivity", "(Landroid/content/ComponentName;)Landroid/content/Intent;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Intent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mainActivity" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="mainActivity">The main activity component that this Intent will
 launch.</param>
        <summary>Create an intent to launch the main (root) activity of a task.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Create an intent to launch the main (root) activity of a task.  This
 is the Intent that is started when the application's is launched from
 Home.  For anything else that wants to launch an application in the
 same way, it is important that they use an Intent structured the same
 way, and can use this function to ensure this is the case.

 </para>
          <para tool="javadoc-to-mdoc">The returned Intent has the given Activity component as its explicit
 component, <c><see cref="F:Android.Content.Intent.ActionMain" /></c> as its action, and includes the
 category <c><see cref="F:Android.Content.Intent.CategoryLauncher" /></c>.  This does <i>not</i> have
 <c><see cref="F:Android.Content.ActivityFlags.NewTask" /></c> set,
 though typically you will want to do that through <c><see cref="M:Android.Content.Intent.AddFlags(Android.Content.ActivityFlags)" /></c>
 on the returned Intent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/IntentCompat.html#makeMainActivity(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
        <altmember cref="M:Android.Content.Intent.SetComponent(Android.Content.ComponentName)" />
      </Docs>
    </Member>
    <Member MemberName="MakeMainSelectorActivity">
      <MemberSignature Language="C#" Value="public static Android.Content.Intent MakeMainSelectorActivity (string selectorAction, string selectorCategory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Content.Intent MakeMainSelectorActivity(string selectorAction, string selectorCategory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("makeMainSelectorActivity", "(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Intent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectorAction" Type="System.String" />
        <Parameter Name="selectorCategory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="selectorAction">The action name of the Intent's selector.</param>
        <param name="selectorCategory">The name of a category to add to the Intent's
 selector.</param>
        <summary>Make an Intent for the main activity of an application, without
 specifying a specific activity to run but giving a selector to find
 the activity.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Make an Intent for the main activity of an application, without
 specifying a specific activity to run but giving a selector to find
 the activity.  This results in a final Intent that is structured
 the same as when the application is launched from
 Home.  For anything else that wants to launch an application in the
 same way, it is important that they use an Intent structured the same
 way, and can use this function to ensure this is the case.

 </para>
          <para tool="javadoc-to-mdoc">The returned Intent has <c><see cref="F:Android.Content.Intent.ActionMain" /></c> as its action, and includes the
 category <c><see cref="F:Android.Content.Intent.CategoryLauncher" /></c>.  This does <i>not</i> have
 <c><see cref="F:Android.Content.ActivityFlags.NewTask" /></c> set, though typically you will want
 to do that through <c><see cref="M:Android.Content.Intent.AddFlags(Android.Content.ActivityFlags)" /></c> on the returned Intent.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/IntentCompat.html#makeMainSelectorActivity(java.lang.String, java.lang.String)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="MakeRestartActivityTask">
      <MemberSignature Language="C#" Value="public static Android.Content.Intent MakeRestartActivityTask (Android.Content.ComponentName mainActivity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Android.Content.Intent MakeRestartActivityTask(class Android.Content.ComponentName mainActivity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Android.Runtime.Register("makeRestartActivityTask", "(Landroid/content/ComponentName;)Landroid/content/Intent;", "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Content.Intent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mainActivity" Type="Android.Content.ComponentName" />
      </Parameters>
      <Docs>
        <param name="mainActivity">The activity component that is the root of the
 task; this is the activity that has been published in the application's
 manifest as the main launcher icon.</param>
        <summary>Make an Intent that can be used to re-launch an application's task
 in its base state.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="javadoc-to-mdoc">Make an Intent that can be used to re-launch an application's task
 in its base state.  This is like <c><see cref="M:Android.Support.V4.Content.IntentCompat.MakeMainActivity(Android.Content.ComponentName)" /></c>,
 but also sets the flags <c><see cref="F:Android.Content.ActivityFlags.NewTask" /></c> and
 <c><see cref="F:Android.Support.V4.Content.IntentCompat.FlagActivityClearTask" /></c>.</para>
          <para tool="javadoc-to-mdoc">
            <format type="text/html">
              <a href="http://developer.android.com/reference/android/support/v4/content/IntentCompat.html#makeRestartActivityTask(android.content.ComponentName)" target="_blank">[Android Documentation]</a>
            </format>
          </para>
        </remarks>
        <since version="" />
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.IntPtr" /> which contains the <c>java.lang.Class</c> JNI value corresponding to this type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control which <c>jclass</c> is provided to methods like <see cref="M:Android.Runtime.JNIEnv.CallNonVirtualVoidMethod" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This API supports the Mono for Android infrastructure and is not intended to be used directly from your code.</summary>
        <value>A <see cref="T:System.Type" /> which provides the declaring type.</value>
        <remarks>
          <para tool="javadoc-to-mdoc">This property is used to control virtual vs. non virtual method dispatch against the underlying JNI object. When this property is equal to the declaring type, then virtual method invocation against the JNI object is performed; otherwise, we assume that the method was overridden by a derived type, and perform non-virtual methdo invocation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
