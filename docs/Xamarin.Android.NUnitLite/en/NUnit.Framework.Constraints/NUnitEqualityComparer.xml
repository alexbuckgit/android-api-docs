<Type Name="NUnitEqualityComparer" FullName="NUnit.Framework.Constraints.NUnitEqualityComparer">
  <TypeSignature Language="C#" Value="public class NUnitEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NUnitEqualityComparer extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.Android.NUnitLite</AssemblyName>
    <AssemblyVersion>0.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            NUnitEqualityComparer encapsulates NUnit's handling of
            equality tests between objects.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NUnitEqualityComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public bool AreEqual (object expected, object actual, ref NUnit.Framework.Constraints.Tolerance tolerance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AreEqual(object expected, object actual, class NUnit.Framework.Constraints.Tolerance tolerance) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="tolerance" Type="NUnit.Framework.Constraints.Tolerance&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="tolerance">To be added.</param>
        <summary>
            Compares two objects for equality within a tolerance, setting
            the tolerance to the actual tolerance used if an empty
            tolerance is supplied.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareAsCollection">
      <MemberSignature Language="C#" Value="public bool CompareAsCollection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompareAsCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets and sets a flag indicating that arrays should be
            compared as collections, without regard to their shape.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static NUnit.Framework.Constraints.NUnitEqualityComparer Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class NUnit.Framework.Constraints.NUnitEqualityComparer Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.NUnitEqualityComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the default NUnitEqualityComparer
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExternalComparers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;NUnit.Framework.Constraints.EqualityAdapter&gt; ExternalComparers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class NUnit.Framework.Constraints.EqualityAdapter&gt; ExternalComparers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;NUnit.Framework.Constraints.EqualityAdapter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of external comparers to be used to
            test for equality. They are applied to members of
            collections, in place of NUnit's own logic.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FailurePoints">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;NUnit.Framework.Constraints.FailurePoint&gt; FailurePoints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class NUnit.Framework.Constraints.FailurePoint&gt; FailurePoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;NUnit.Framework.Constraints.FailurePoint&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of failure points for the last Match performed.
            The list consists of objects to be interpreted by the caller.
            This generally means that the caller may only make use of
            objects it has placed on the list at a particular depthy.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreCase">
      <MemberSignature Language="C#" Value="public bool IgnoreCase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets and sets a flag indicating whether case should
            be ignored in determining equality.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
