<Type Name="Assert" FullName="NUnit.Framework.Assert">
  <TypeSignature Language="C#" Value="public class Assert" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Assert extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.Android.NUnitLite</AssemblyName>
    <AssemblyVersion>0.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The Assert class contains a collection of static methods that
            implement the most common assertions used in NUnit.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            We don't actually want any instances of this object, but some people
            like to inherit from it to add other static methods. Hence, the
            protected constructor disallows any instances of this object.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (decimal expected, decimal actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(valuetype System.Decimal expected, valuetype System.Decimal actual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Decimal" />
        <Parameter Name="actual" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <summary>
            Verifies that two decimals are equal. If they are not, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (int expected, int actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(int32 expected, int32 actual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int32" />
        <Parameter Name="actual" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <summary>
            Verifies that two ints are equal. If they are not, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (long expected, long actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(int64 expected, int64 actual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int64" />
        <Parameter Name="actual" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <summary>
            Verifies that two longs are equal. If they are not, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (object expected, object actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(object expected, object actual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">The value that is expected</param>
        <param name="actual">The actual value</param>
        <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (uint expected, uint actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(unsigned int32 expected, unsigned int32 actual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt32" />
        <Parameter Name="actual" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <summary>
            Verifies that two unsigned ints are equal. If they are not, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (ulong expected, ulong actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(unsigned int64 expected, unsigned int64 actual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt64" />
        <Parameter Name="actual" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <summary>
            Verifies that two unsigned longs are equal. If they are not, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (decimal expected, decimal actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(valuetype System.Decimal expected, valuetype System.Decimal actual, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Decimal" />
        <Parameter Name="actual" Type="System.Decimal" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that two decimals are equal. If they are not, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (double expected, double actual, double delta);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(float64 expected, float64 actual, float64 delta) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Double" />
        <Parameter Name="delta" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException" /> is
            thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (int expected, int actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(int32 expected, int32 actual, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int32" />
        <Parameter Name="actual" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that two ints are equal. If they are not, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (long expected, long actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(int64 expected, int64 actual, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int64" />
        <Parameter Name="actual" Type="System.Int64" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that two longs are equal. If they are not, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (object expected, object actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(object expected, object actual, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The value that is expected</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (uint expected, uint actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(unsigned int32 expected, unsigned int32 actual, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt32" />
        <Parameter Name="actual" Type="System.UInt32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that two unsigned ints are equal. If they are not, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (ulong expected, ulong actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(unsigned int64 expected, unsigned int64 actual, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt64" />
        <Parameter Name="actual" Type="System.UInt64" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that two unsigned longs are equal. If they are not, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (decimal expected, decimal actual, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(valuetype System.Decimal expected, valuetype System.Decimal actual, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Decimal" />
        <Parameter Name="actual" Type="System.Decimal" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that two decimals are equal. If they are not, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (double expected, double actual, double delta, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(float64 expected, float64 actual, float64 delta, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Double" />
        <Parameter Name="delta" Type="System.Double" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException" /> is
            thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (int expected, int actual, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(int32 expected, int32 actual, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int32" />
        <Parameter Name="actual" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that two ints are equal. If they are not, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (long expected, long actual, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(int64 expected, int64 actual, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int64" />
        <Parameter Name="actual" Type="System.Int64" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that two longs are equal. If they are not, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (object expected, object actual, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(object expected, object actual, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The value that is expected</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that two objects are equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (uint expected, uint actual, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(unsigned int32 expected, unsigned int32 actual, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt32" />
        <Parameter Name="actual" Type="System.UInt32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that two unsigned ints are equal. If they are not, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (ulong expected, ulong actual, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(unsigned int64 expected, unsigned int64 actual, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt64" />
        <Parameter Name="actual" Type="System.UInt64" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that two unsigned longs are equal. If they are not, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (double expected, double actual, double delta, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(float64 expected, float64 actual, float64 delta, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Double" />
        <Parameter Name="delta" Type="System.Double" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that two doubles are equal considering a delta. If the
            expected value is infinity then the delta value is ignored. If
            they are not equal then an <see cref="T:NUnit.Framework.AssertionException" /> is
            thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (decimal expected, decimal actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(valuetype System.Decimal expected, valuetype System.Decimal actual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Decimal" />
        <Parameter Name="actual" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <summary>
            Verifies that two decimals are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (double expected, double actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(float64 expected, float64 actual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <summary>
            Verifies that two doubles are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (int expected, int actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(int32 expected, int32 actual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int32" />
        <Parameter Name="actual" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <summary>
            Verifies that two ints are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (long expected, long actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(int64 expected, int64 actual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int64" />
        <Parameter Name="actual" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <summary>
            Verifies that two longs are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (object expected, object actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(object expected, object actual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">The value that is expected</param>
        <param name="actual">The actual value</param>
        <summary>
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (float expected, float actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(float32 expected, float32 actual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Single" />
        <Parameter Name="actual" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <summary>
            Verifies that two floats are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (uint expected, uint actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(unsigned int32 expected, unsigned int32 actual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt32" />
        <Parameter Name="actual" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <summary>
            Verifies that two unsigned ints are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (ulong expected, ulong actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(unsigned int64 expected, unsigned int64 actual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt64" />
        <Parameter Name="actual" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <summary>
            Verifies that two unsigned longs are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (decimal expected, decimal actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(valuetype System.Decimal expected, valuetype System.Decimal actual, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Decimal" />
        <Parameter Name="actual" Type="System.Decimal" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that two decimals are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (double expected, double actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(float64 expected, float64 actual, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Double" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that two doubles are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (int expected, int actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(int32 expected, int32 actual, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int32" />
        <Parameter Name="actual" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that two ints are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (long expected, long actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(int64 expected, int64 actual, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int64" />
        <Parameter Name="actual" Type="System.Int64" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that two longs are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (object expected, object actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(object expected, object actual, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The value that is expected</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (float expected, float actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(float32 expected, float32 actual, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Single" />
        <Parameter Name="actual" Type="System.Single" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that two floats are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (uint expected, uint actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(unsigned int32 expected, unsigned int32 actual, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt32" />
        <Parameter Name="actual" Type="System.UInt32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that two unsigned ints are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (ulong expected, ulong actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(unsigned int64 expected, unsigned int64 actual, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt64" />
        <Parameter Name="actual" Type="System.UInt64" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that two unsigned longs are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (decimal expected, decimal actual, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(valuetype System.Decimal expected, valuetype System.Decimal actual, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Decimal" />
        <Parameter Name="actual" Type="System.Decimal" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that two decimals are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (double expected, double actual, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(float64 expected, float64 actual, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Double" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that two doubles are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (int expected, int actual, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(int32 expected, int32 actual, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int32" />
        <Parameter Name="actual" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that two ints are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (long expected, long actual, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(int64 expected, int64 actual, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int64" />
        <Parameter Name="actual" Type="System.Int64" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that two longs are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (object expected, object actual, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(object expected, object actual, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The value that is expected</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that two objects are not equal.  Two objects are considered
            equal if both are null, or if both have the same value. NUnit
            has special semantics for some object types.
            If they are equal an <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (float expected, float actual, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(float32 expected, float32 actual, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Single" />
        <Parameter Name="actual" Type="System.Single" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that two floats are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (uint expected, uint actual, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(unsigned int32 expected, unsigned int32 actual, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt32" />
        <Parameter Name="actual" Type="System.UInt32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that two unsigned ints are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (ulong expected, ulong actual, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(unsigned int64 expected, unsigned int64 actual, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt64" />
        <Parameter Name="actual" Type="System.UInt64" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that two unsigned longs are not equal. If they are equal, then an
            <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotSame">
      <MemberSignature Language="C#" Value="public static void AreNotSame (object expected, object actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotSame(object expected, object actual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">The expected object</param>
        <param name="actual">The actual object</param>
        <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotSame">
      <MemberSignature Language="C#" Value="public static void AreNotSame (object expected, object actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotSame(object expected, object actual, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The expected object</param>
        <param name="actual">The actual object</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotSame">
      <MemberSignature Language="C#" Value="public static void AreNotSame (object expected, object actual, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotSame(object expected, object actual, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The expected object</param>
        <param name="actual">The actual object</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Asserts that two objects do not refer to the same object. If they
            are the same an <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreSame">
      <MemberSignature Language="C#" Value="public static void AreSame (object expected, object actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreSame(object expected, object actual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">The expected object</param>
        <param name="actual">The actual object</param>
        <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreSame">
      <MemberSignature Language="C#" Value="public static void AreSame (object expected, object actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreSame(object expected, object actual, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The expected object</param>
        <param name="actual">The actual object</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreSame">
      <MemberSignature Language="C#" Value="public static void AreSame (object expected, object actual, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreSame(object expected, object actual, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">The expected object</param>
        <param name="actual">The actual object</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Asserts that two objects refer to the same object. If they
            are not the same an <see cref="T:NUnit.Framework.AssertionException" /> is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertDoublesAreEqual">
      <MemberSignature Language="C#" Value="protected static void AssertDoublesAreEqual (double expected, double actual, double delta, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void AssertDoublesAreEqual(float64 expected, float64 actual, float64 delta, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Double" />
        <Parameter Name="delta" Type="System.Double" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="expected">The expected value</param>
        <param name="actual">The actual value</param>
        <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Helper for Assert.AreEqual(double expected, double actual, ...)
            allowing code generation to work consistently.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ByVal">
      <MemberSignature Language="C#" Value="public static void ByVal (object actual, NUnit.Framework.Constraints.IResolveConstraint expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ByVal(object actual, class NUnit.Framework.Constraints.IResolveConstraint expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
      </Parameters>
      <Docs>
        <param name="actual">The actual value to test</param>
        <param name="expression">A Constraint to be applied</param>
        <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            Used as a synonym for That in rare cases where a private setter
            causes a Visual Basic compilation error.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ByVal">
      <MemberSignature Language="C#" Value="public static void ByVal (object actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ByVal(object actual, class NUnit.Framework.Constraints.IResolveConstraint expression, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actual">The actual value to test</param>
        <param name="expression">A Constraint to be applied</param>
        <param name="message">The message that will be displayed on failure</param>
        <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            Used as a synonym for That in rare cases where a private setter
            causes a Visual Basic compilation error.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ByVal">
      <MemberSignature Language="C#" Value="public static void ByVal (object actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ByVal(object actual, class NUnit.Framework.Constraints.IResolveConstraint expression, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actual">The actual value to test</param>
        <param name="expression">A Constraint expression to be applied</param>
        <param name="message">The message that will be displayed on failure</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            Used as a synonym for That in rare cases where a private setter
            causes a Visual Basic compilation error.
            </summary>
        <remarks>
            This method is provided for use by VB developers needing to test
            the value of properties with private setters.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static Exception Catch (NUnit.Framework.TestDelegate code);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Catch(class NUnit.Framework.TestDelegate code) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
      </Parameters>
      <Docs>
        <param name="code">A TestDelegate</param>
        <summary>
            Verifies that a delegate throws an exception when called
            and returns it.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static Exception Catch (NUnit.Framework.TestDelegate code, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Catch(class NUnit.Framework.TestDelegate code, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="code">A TestDelegate</param>
        <param name="message">The message that will be displayed on failure</param>
        <summary>
            Verifies that a delegate throws an exception when called
            and returns it.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static Exception Catch (Type expectedExceptionType, NUnit.Framework.TestDelegate code);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Catch(class System.Type expectedExceptionType, class NUnit.Framework.TestDelegate code) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedExceptionType" Type="System.Type" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
      </Parameters>
      <Docs>
        <param name="expectedExceptionType">The expected Exception Type</param>
        <param name="code">A TestDelegate</param>
        <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static Exception Catch (NUnit.Framework.TestDelegate code, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Catch(class NUnit.Framework.TestDelegate code, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="code">A TestDelegate</param>
        <param name="message">The message that will be displayed on failure</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Verifies that a delegate throws an exception when called
            and returns it.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static Exception Catch (Type expectedExceptionType, NUnit.Framework.TestDelegate code, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Catch(class System.Type expectedExceptionType, class NUnit.Framework.TestDelegate code, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedExceptionType" Type="System.Type" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expectedExceptionType">The expected Exception Type</param>
        <param name="code">A TestDelegate</param>
        <param name="message">The message that will be displayed on failure</param>
        <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static Exception Catch (Type expectedExceptionType, NUnit.Framework.TestDelegate code, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Catch(class System.Type expectedExceptionType, class NUnit.Framework.TestDelegate code, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedExceptionType" Type="System.Type" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expectedExceptionType">The expected Exception Type</param>
        <param name="code">A TestDelegate</param>
        <param name="message">The message that will be displayed on failure</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Verifies that a delegate throws an exception of a certain Type
            or one derived from it when called and returns it.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoesNotThrow">
      <MemberSignature Language="C#" Value="public static void DoesNotThrow (NUnit.Framework.TestDelegate code);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DoesNotThrow(class NUnit.Framework.TestDelegate code) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
      </Parameters>
      <Docs>
        <param name="code">A TestDelegate</param>
        <summary>
            Verifies that a delegate does not throw an exception.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoesNotThrow">
      <MemberSignature Language="C#" Value="public static void DoesNotThrow (NUnit.Framework.TestDelegate code, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DoesNotThrow(class NUnit.Framework.TestDelegate code, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="code">A TestDelegate</param>
        <param name="message">The message that will be displayed on failure</param>
        <summary>
            Verifies that a delegate does not throw an exception.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoesNotThrow">
      <MemberSignature Language="C#" Value="public static void DoesNotThrow (NUnit.Framework.TestDelegate code, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DoesNotThrow(class NUnit.Framework.TestDelegate code, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="code">A TestDelegate</param>
        <param name="message">The message that will be displayed on failure</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Verifies that a delegate does not throw an exception
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (object a, object b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(object a, object b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Object" />
        <Parameter Name="b" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="a" />
        <param name="b" />
        <summary>
            The Equals method throws an AssertionException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException" />.
            This is used by the other Assert functions.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException" /> with.</param>
        <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException" /> with the message that is
            passed in. This is used by the other Assert functions.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException" /> with.</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Throws an <see cref="T:NUnit.Framework.AssertionException" /> with the message and arguments
            that are passed in. This is used by the other Assert functions.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="False">
      <MemberSignature Language="C#" Value="public static void False (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void False(bool condition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="False">
      <MemberSignature Language="C#" Value="public static void False (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void False(bool condition, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="False">
      <MemberSignature Language="C#" Value="public static void False (bool condition, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void False(bool condition, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public static void Ignore ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Ignore() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException" />.
            This causes the test to be reported as ignored.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public static void Ignore (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Ignore(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException" /> with.</param>
        <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException" /> with the message that is
            passed in. This causes the test to be reported as ignored.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public static void Ignore (string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Ignore(string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException" /> with.</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException" /> with the message and arguments
            that are passed in.  This causes the test to be reported as ignored.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inconclusive">
      <MemberSignature Language="C#" Value="public static void Inconclusive ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Inconclusive() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException" />.
            This causes the test to be reported as Inconclusive.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inconclusive">
      <MemberSignature Language="C#" Value="public static void Inconclusive (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Inconclusive(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message to initialize the <see cref="T:NUnit.Framework.InconclusiveException" /> with.</param>
        <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException" /> with the message that is
            passed in. This causes the test to be reported as inconclusive.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inconclusive">
      <MemberSignature Language="C#" Value="public static void Inconclusive (string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Inconclusive(string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="message">The message to initialize the <see cref="T:NUnit.Framework.InconclusiveException" /> with.</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException" /> with the message and arguments
            that are passed in.  This causes the test to be reported as inconclusive.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static void IsFalse (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsFalse(bool condition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static void IsFalse (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsFalse(bool condition, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static void IsFalse (bool condition, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsFalse(bool condition, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotNull">
      <MemberSignature Language="C#" Value="public static void IsNotNull (object anObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotNull(object anObject) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotNull">
      <MemberSignature Language="C#" Value="public static void IsNotNull (object anObject, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotNull(object anObject, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotNull">
      <MemberSignature Language="C#" Value="public static void IsNotNull (object anObject, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotNull(object anObject, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public static void IsNull (object anObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNull(object anObject) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public static void IsNull (object anObject, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNull(object anObject, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public static void IsNull (object anObject, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNull(object anObject, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static void IsTrue (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsTrue(bool condition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static void IsTrue (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsTrue(bool condition, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static void IsTrue (bool condition, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsTrue(bool condition, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotNull">
      <MemberSignature Language="C#" Value="public static void NotNull (object anObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void NotNull(object anObject) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotNull">
      <MemberSignature Language="C#" Value="public static void NotNull (object anObject, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void NotNull(object anObject, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotNull">
      <MemberSignature Language="C#" Value="public static void NotNull (object anObject, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void NotNull(object anObject, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static void Null (object anObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Null(object anObject) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static void Null (object anObject, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Null(object anObject, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static void Null (object anObject, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Null(object anObject, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pass">
      <MemberSignature Language="C#" Value="public static void Pass ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pass() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException" /> with the message and arguments
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pass">
      <MemberSignature Language="C#" Value="public static void Pass (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pass(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException" /> with.</param>
        <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException" /> with the message and arguments
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pass">
      <MemberSignature Language="C#" Value="public static void Pass (string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pass(string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException" /> with.</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException" /> with the message and arguments
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceEquals">
      <MemberSignature Language="C#" Value="public static void ReferenceEquals (object a, object b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReferenceEquals(object a, object b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Object" />
        <Parameter Name="b" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="a" />
        <param name="b" />
        <summary>
            override the default ReferenceEquals to throw an AssertionException. This
            implementation makes sure there is no mistake in calling this function
            as part of Assert.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(bool condition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (NUnit.Framework.Constraints.ActualValueDelegate del, NUnit.Framework.Constraints.IResolveConstraint expr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(class NUnit.Framework.Constraints.ActualValueDelegate del, class NUnit.Framework.Constraints.IResolveConstraint expr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="del" Type="NUnit.Framework.Constraints.ActualValueDelegate" />
        <Parameter Name="expr" Type="NUnit.Framework.Constraints.IResolveConstraint" />
      </Parameters>
      <Docs>
        <param name="del">An ActualValueDelegate returning the value to be tested</param>
        <param name="expr">A Constraint expression to be applied</param>
        <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (NUnit.Framework.TestDelegate code, NUnit.Framework.Constraints.IResolveConstraint constraint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(class NUnit.Framework.TestDelegate code, class NUnit.Framework.Constraints.IResolveConstraint constraint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="constraint" Type="NUnit.Framework.Constraints.IResolveConstraint" />
      </Parameters>
      <Docs>
        <param name="code">A TestDelegate to be executed</param>
        <param name="constraint">A ThrowsConstraint used in the test</param>
        <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(bool condition, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display if the condition is false</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (ref bool actual, NUnit.Framework.Constraints.IResolveConstraint constraint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(bool actual, class NUnit.Framework.Constraints.IResolveConstraint constraint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="constraint" Type="NUnit.Framework.Constraints.IResolveConstraint" />
      </Parameters>
      <Docs>
        <param name="actual">The actual value to test</param>
        <param name="constraint">A Constraint to be applied</param>
        <summary>
            Apply a constraint to a referenced boolean, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (object actual, NUnit.Framework.Constraints.IResolveConstraint expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(object actual, class NUnit.Framework.Constraints.IResolveConstraint expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
      </Parameters>
      <Docs>
        <param name="actual">The actual value to test</param>
        <param name="expression">A Constraint to be applied</param>
        <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (NUnit.Framework.Constraints.ActualValueDelegate del, NUnit.Framework.Constraints.IResolveConstraint expr, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(class NUnit.Framework.Constraints.ActualValueDelegate del, class NUnit.Framework.Constraints.IResolveConstraint expr, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="del" Type="NUnit.Framework.Constraints.ActualValueDelegate" />
        <Parameter Name="expr" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="del">An ActualValueDelegate returning the value to be tested</param>
        <param name="expr">A Constraint expression to be applied</param>
        <param name="message">The message that will be displayed on failure</param>
        <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (bool condition, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(bool condition, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display if the condition is false</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (ref bool actual, NUnit.Framework.Constraints.IResolveConstraint constraint, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(bool actual, class NUnit.Framework.Constraints.IResolveConstraint constraint, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="constraint" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actual">The actual value to test</param>
        <param name="constraint">A Constraint to be applied</param>
        <param name="message">The message that will be displayed on failure</param>
        <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (object actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(object actual, class NUnit.Framework.Constraints.IResolveConstraint expression, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actual">The actual value to test</param>
        <param name="expression">A Constraint to be applied</param>
        <param name="message">The message that will be displayed on failure</param>
        <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (NUnit.Framework.Constraints.ActualValueDelegate del, NUnit.Framework.Constraints.IResolveConstraint expr, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(class NUnit.Framework.Constraints.ActualValueDelegate del, class NUnit.Framework.Constraints.IResolveConstraint expr, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="del" Type="NUnit.Framework.Constraints.ActualValueDelegate" />
        <Parameter Name="expr" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="del">An ActualValueDelegate returning the value to be tested</param>
        <param name="expr">A Constraint expression to be applied</param>
        <param name="message">The message that will be displayed on failure</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (ref bool actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(bool actual, class NUnit.Framework.Constraints.IResolveConstraint expression, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actual">The actual value to test</param>
        <param name="expression">A Constraint expression to be applied</param>
        <param name="message">The message that will be displayed on failure</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Apply a constraint to a referenced value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (object actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(object actual, class NUnit.Framework.Constraints.IResolveConstraint expression, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actual">The actual value to test</param>
        <param name="expression">A Constraint expression to be applied</param>
        <param name="message">The message that will be displayed on failure</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Throws">
      <MemberSignature Language="C#" Value="public static Exception Throws (NUnit.Framework.Constraints.IResolveConstraint expression, NUnit.Framework.TestDelegate code);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Throws(class NUnit.Framework.Constraints.IResolveConstraint expression, class NUnit.Framework.TestDelegate code) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
      </Parameters>
      <Docs>
        <param name="expression">A constraint to be satisfied by the exception</param>
        <param name="code">A TestDelegate</param>
        <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Throws">
      <MemberSignature Language="C#" Value="public static Exception Throws (Type expectedExceptionType, NUnit.Framework.TestDelegate code);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Throws(class System.Type expectedExceptionType, class NUnit.Framework.TestDelegate code) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedExceptionType" Type="System.Type" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
      </Parameters>
      <Docs>
        <param name="expectedExceptionType">The exception Type expected</param>
        <param name="code">A TestDelegate</param>
        <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Throws">
      <MemberSignature Language="C#" Value="public static Exception Throws (NUnit.Framework.Constraints.IResolveConstraint expression, NUnit.Framework.TestDelegate code, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Throws(class NUnit.Framework.Constraints.IResolveConstraint expression, class NUnit.Framework.TestDelegate code, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">A constraint to be satisfied by the exception</param>
        <param name="code">A TestDelegate</param>
        <param name="message">The message that will be displayed on failure</param>
        <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Throws">
      <MemberSignature Language="C#" Value="public static Exception Throws (Type expectedExceptionType, NUnit.Framework.TestDelegate code, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Throws(class System.Type expectedExceptionType, class NUnit.Framework.TestDelegate code, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedExceptionType" Type="System.Type" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expectedExceptionType">The exception Type expected</param>
        <param name="code">A TestDelegate</param>
        <param name="message">The message that will be displayed on failure</param>
        <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Throws">
      <MemberSignature Language="C#" Value="public static Exception Throws (NUnit.Framework.Constraints.IResolveConstraint expression, NUnit.Framework.TestDelegate code, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Throws(class NUnit.Framework.Constraints.IResolveConstraint expression, class NUnit.Framework.TestDelegate code, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression">A constraint to be satisfied by the exception</param>
        <param name="code">A TestDelegate</param>
        <param name="message">The message that will be displayed on failure</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Throws">
      <MemberSignature Language="C#" Value="public static Exception Throws (Type expectedExceptionType, NUnit.Framework.TestDelegate code, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Throws(class System.Type expectedExceptionType, class NUnit.Framework.TestDelegate code, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedExceptionType" Type="System.Type" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expectedExceptionType">The exception Type expected</param>
        <param name="code">A TestDelegate</param>
        <param name="message">The message that will be displayed on failure</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Verifies that a delegate throws a particular exception when called.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="True">
      <MemberSignature Language="C#" Value="public static void True (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void True(bool condition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="True">
      <MemberSignature Language="C#" Value="public static void True (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void True(bool condition, string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display in case of failure</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="True">
      <MemberSignature Language="C#" Value="public static void True (bool condition, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void True(bool condition, string message, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display in case of failure</param>
        <param name="args">Array of objects to be used in formatting the message</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
